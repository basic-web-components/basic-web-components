{"version":3,"sources":["node_modules/browser-pack/_prelude.js","packages/basic-animation-stage/src/AnimationStage.js","packages/basic-carousel/globals.js","packages/basic-carousel/src/Carousel.js","packages/basic-component-mixins/src/AttributeMarshallingMixin.js","packages/basic-component-mixins/src/ComposableMixin.js","packages/basic-component-mixins/src/ContentItemsMixin.js","packages/basic-component-mixins/src/DirectionSelectionMixin.js","packages/basic-component-mixins/src/DistributedChildrenContentMixin.js","packages/basic-component-mixins/src/DistributedChildrenMixin.js","packages/basic-component-mixins/src/FractionalSelectionMixin.js","packages/basic-component-mixins/src/KeyboardDirectionMixin.js","packages/basic-component-mixins/src/KeyboardMixin.js","packages/basic-component-mixins/src/SelectionAnimationMixin.js","packages/basic-component-mixins/src/SelectionAriaActiveMixin.js","packages/basic-component-mixins/src/ShadowElementReferencesMixin.js","packages/basic-component-mixins/src/ShadowTemplateMixin.js","packages/basic-component-mixins/src/SingleSelectionMixin.js","packages/basic-component-mixins/src/SwipeDirectionMixin.js","packages/basic-component-mixins/src/TrackpadDirectionMixin.js","packages/basic-component-mixins/src/createSymbol.js","packages/basic-component-mixins/src/microtask.js","packages/basic-component-mixins/src/safeAttributes.js","packages/basic-component-mixins/src/symbols.js","packages/basic-component-mixins/src/toggleClass.js","packages/basic-element-base/src/ElementBase.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","_ElementBase","_ContentItemsMixin","_DistributedChildrenContentMixin","_FractionalSelectionMixin","_SelectionAnimationMixin","_SelectionAriaActiveMixin","_SingleSelectionMixin","_symbols","base","_ElementBase2","default","compose","_ContentItemsMixin2","_DistributedChildrenContentMixin2","_FractionalSelectionMixin2","_SelectionAnimationMixin2","_SelectionAriaActiveMixin2","_SingleSelectionMixin2","AnimationStage","_symbols2","defaults","_get","prototype","__proto__","Object","getPrototypeOf","this","selectionRequired","template","customElements","define","_Carousel","window","Basic","Carousel","_Carousel2","_AnimationStage","_DirectionSelectionMixin","_KeyboardDirectionMixin","_KeyboardMixin","_SwipeDirectionMixin","_TrackpadDirectionMixin","_AnimationStage2","_DirectionSelectionMixin2","_KeyboardMixin2","_KeyboardDirectionMixin2","_SwipeDirectionMixin2","_TrackpadDirectionMixin2","navigationAxis","selectionAnimationEffect","attributeToPropertyName","attributeName","propertyName","attributeToPropertyNames","hypenRegEx","replace","match","toUpperCase","attributesForClass","classFn","HTMLElement","baseClass","constructor","baseAttributes","propertyNames","getOwnPropertyNames","setterNames","filter","getOwnPropertyDescriptor","set","attributes","map","setterName","propertyNameToAttribute","diff","attribute","indexOf","concat","propertyNamesToAttributes","uppercaseRegEx","toLowerCase","_safeAttributes","AttributeMarshalling","_base","_classCallCheck","_possibleConstructorReturn","apply","arguments","_inherits","_createClass","key","value","oldValue","newValue","_safeAttributes2","connected","setAttribute","className","toggleClass","get","composeClass","mixin","Subclass","_base2","copyOwnProperties","NON_MIXABLE_OBJECT_PROPERTIES","source","target","ignorePropertyNames","undefined","forEach","name","descriptor","defineProperty","Composable","_len","mixins","Array","_key","reduce","filterAuxiliaryElements","items","auxiliaryTags","item","localName","_createSymbol","_toggleClass","itemsSymbol","_createSymbol2","itemInitializedSymbol","ContentItems","itemsChanged","itemAdded","itemSelected","selected","_toggleClass2","_this2","dispatchEvent","CustomEvent","content","DirectionSelection","goDown","selectNext","goEnd","selectLast","goLeft","selectPrevious","goRight","goStart","selectFirst","goUp","_set","selectedFraction","_microtask","DistributedChildrenContent","_this","shadowRoot","slots","querySelectorAll","slot","addEventListener","event","contentChanged","_microtask2","distributedChildren","console","warn","expandContentElements","nodes","includeTextNodes","_ref","expanded","node","isSlot","HTMLSlotElement","assignedNodes","flatten","Text","flattened","_toConsumableArray","DistributedChildren","children","childNodes","strings","distributedChildNodes","child","textContent","join","FractionalSelection","selectedFractionSymbol","helpers","dampedSelection","selection","itemCount","bound","damped","damping","x","y","elementSelection","element","selectedIndex","selectionParts","index","Math","ceil","floor","fraction","wrappedSelection","wrappedSelectionParts","wrap","navigationAxisSymbol","KeyboardDirection","keydown","handled","axis","horizontal","vertical","keyCode","metaKey","altKey","Keyboard","preventDefault","stopPropagation","getAttribute","tabindex","SelectionAnimation","selectionAnimationDuration","selectionAnimationKeyframes","dragging","_resetAnimations","renderSelection","draggingSymbol","previousValue","resetAnimationsOnNextRenderSymbol","selectionAnimationDurationSymbol","selectionAnimationEffectSymbol","standardEffectKeyframes","selectionAnimationKeyframesSymbol","animateSelection","fromSelection","toSelection","keyframes","playingAnimationSymbol","timings","effectTimingsForSelectionAnimation","selectionWraps","selectionIndex","totalSteps","stepsToIndex","forward","nextUpIndex","isItemIndexInBounds","lastAnimationDetails","timing","showItem","animation","animate","animationSymbol","endDelay","onfinish","selectionAnimationFinished","lastAnimationSymbol","getAnimationForItemIndex","duration","fill","pause","previousSelection","previousSelectionSymbol","renderSelectionInstantly","animationFractions","animationFractionsForSelection","animationFraction","setAnimationFraction","animations","cancel","details","itemIndex","currentTime","flag","style","visibility","allowWrap","steps","wrapSteps","abs","toIndex","direction","totalDuration","stepDuration","positionInSequence","delay","crossfade","opacity","reveal","transform","zIndex","revealWithFade","showAdjacent","slide","slideWithGap","idCount","SelectionAriaActive","role","id","baseId","itemId","removeAttribute","ShadowElementReferences","$","nodesWithIds","createTemplateWithInnerHTML","innerHTML","document","createElement","div","appendChild","shimTemplateStyles","tag","WebComponents","ShadowCSS","shimStyling","ShadowTemplate","ShadowDOMPolyfill","root","attachShadow","mode","clone","importNode","selectIndex","count","boundedIndex","max","min","previousIndex","trackSelectedItem","previousSelectedItem","selectedItem","indexInCurrentItems","previousSelectedIndex","newSelectedIndex","updatePossibleNavigations","canSelectNext","canSelectPrevious","canSelectNextSymbol","canSelectPreviousSymbol","selectionRequiredSymbol","selectionWrapsSymbol","externalSelectedIndexSymbol","externalSelectedItemSymbol","internalSelectedIndexSymbol","internalSelectedItemSymbol","SingleSelection","newIndex","previousCanSelectNext","previousCanSelectPrevious","hasItems","detail","String","isEventForPenOrPrimaryTouch","pointerType","isPrimary","touchEnd","clientX","clientY","deltaXSymbol","trackTo","travelFraction","deltaYSymbol","touchMove","previousXSymbol","previousYSymbol","touchStart","startXSymbol","width","offsetWidth","dragDistance","multiTouchSymbol","travelFractionSymbol","SwipeDirection","PointerEvent","touches","changedTouches","getComputedStyle","touchAction","postNavigate","wheelDistanceSymbol","postNavigateDelayCompleteSymbol","absorbDecelerationSymbol","setTimeout","POST_NAVIGATE_TIME","resetWheelTracking","lastDeltaXSymbol","lastWheelTimeoutSymbol","clearTimeout","sign","wheel","wheelTimedOut","WHEEL_TIME","deltaX","deltaY","acceleration","TrackpadDirection","createSymbol","description","Symbol","microtask","callback","callbacks","push","counter","executeCallbacks","shift","createTextNode","observer","MutationObserver","observe","characterData","setAttributeToElement","text","safeToSetAttributesSymbol","pendingAttributesSymbol","pendingClassesSymbol","_value","_toggleClass3","symbols","force","classList","addClass","contains","add","remove","_AttributeMarshallingMixin","_ComposableMixin","_DistributedChildrenMixin","_ShadowElementReferencesMixin","_ShadowTemplateMixin","ElementBase","_ComposableMixin2","_ShadowTemplateMixin2","_ShadowElementReferencesMixin2","_AttributeMarshallingMixin2","_DistributedChildrenMixin2"],"mappings":"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","file":"basic-carousel.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import ElementBase from '../../basic-element-base/src/ElementBase';\nimport ContentItemsMixin from '../../basic-component-mixins/src/ContentItemsMixin';\nimport DistributedChildrenContentMixin from '../../basic-component-mixins/src/DistributedChildrenContentMixin';\nimport FractionalSelectionMixin from '../../basic-component-mixins/src/FractionalSelectionMixin';\nimport SelectionAnimationMixin from '../../basic-component-mixins/src/SelectionAnimationMixin';\nimport SelectionAriaActiveMixin from '../../basic-component-mixins/src/SelectionAriaActiveMixin';\nimport SingleSelectionMixin from '../../basic-component-mixins/src/SingleSelectionMixin';\nimport symbols from '../../basic-component-mixins/src/symbols';\n\n\nconst base = ElementBase.compose(\n  ContentItemsMixin,\n  DistributedChildrenContentMixin,\n  FractionalSelectionMixin,\n  SelectionAnimationMixin,\n  SelectionAriaActiveMixin,\n  SingleSelectionMixin\n);\n\n/**\n * Presents a single item as selected, providing animated transitions when the\n * selection changes. The same animation can be shown at an arbitrary point,\n * generally used to reflect a user-controlled touch or trackpad drag operation\n * in progress.\n *\n * [Live demo](http://basicwebcomponents.org/basic-web-components/packages/basic-animation-stage/)\n *\n * This component is intended to be used as a programmatic rendering surface for\n * components which want to show transitional effects.\n *\n * The component uses [SelectionAnimationMixin](../basic-component-mixins/docs/SelectionAnimationMixin.md)\n * mixin, which in turn uses the Web Animations API. For use on browsers which\n * do not support that API natively, you will need to load the\n * [Web Animations polyfill](https://github.com/web-animations/web-animations-js).\n *\n * For a simpler component that exhibits only a sliding effect, but does not\n * require the Web Animations API, see [basic-sliding-viewport](../basic-sliding-viewport).\n *\n * @extends ElementBase\n * @mixes ContentItemsMixin\n * @mixes DistributedChildrenContentMixin\n * @mixes SelectionAnimationMixin\n * @mixes SelectionAriaActiveMixin\n * @mixes SingleSelectionMixin\n */\nclass AnimationStage extends base {\n\n  get [symbols.defaults]() {\n    const defaults = super[symbols.defaults] || {};\n    defaults.selectionRequired = true;\n    return defaults;\n  }\n\n  get [symbols.template]() {\n    return `\n      <style>\n      :host {\n        overflow: hidden;\n        position: relative;\n      }\n\n      #container ::slotted(*) {\n        height: 100%;\n        object-fit: contain;\n        position: absolute;\n        width: 100%;\n        will-change: transform;\n      }\n      </style>\n\n      <div id=\"container\" role=\"none\">\n        <slot></slot>\n      </div>\n    `;\n  }\n\n}\n\n\ncustomElements.define('basic-animation-stage', AnimationStage);\nexport default AnimationStage;\n","/*\n * This file is transpiled to create an ES5-compatible distribution in which\n * the package's main feature(s) are available via the window.Basic global.\n * If you're already using ES6 yourself, ignore this file, and instead import\n * the source file(s) you want from the src folder.\n */\n\nimport Carousel from './src/Carousel';\n\nwindow.Basic = window.Basic || {};\nwindow.Basic.Carousel = Carousel;\n","import AnimationStage from '../../basic-animation-stage/src/AnimationStage';\nimport DirectionSelectionMixin from '../../basic-component-mixins/src/DirectionSelectionMixin';\nimport KeyboardDirectionMixin from '../../basic-component-mixins/src/KeyboardDirectionMixin';\nimport KeyboardMixin from '../../basic-component-mixins/src/KeyboardMixin';\nimport SwipeDirectionMixin from '../../basic-component-mixins/src/SwipeDirectionMixin';\nimport symbols from '../../basic-component-mixins/src/symbols';\nimport TrackpadDirectionMixin from '../../basic-component-mixins/src/TrackpadDirectionMixin';\n\n\nconst base = AnimationStage.compose(\n  DirectionSelectionMixin,\n  KeyboardMixin,\n  KeyboardDirectionMixin,\n  SwipeDirectionMixin,\n  TrackpadDirectionMixin\n);\n\n\n/**\n * Lets the user navigate laterally through a sequence of child elements.\n *\n * basic-carousel is an implementation of the carousel user interface pattern,\n * commonly used for navigating between images, pages, and other elements. This\n * pattern presents the user with a linear sequence of elements, only one of\n * which is shown at a time. The user can navigate to the next/previous element\n * with a variety of input methods.\n *\n * [Live demo](http://basicwebcomponents.org/basic-web-components/packages/basic-carousel/)\n *\n * The above demo is a plain carousel. It's often combined, however, with\n * mixins like\n * [ArrowSelectionMixin](../basic-component-mixins/docs/ArrowSelectionMixin.md),\n * [PageDotsMixin](../basic-component-mixins/docs/PageDotsMixin.md),\n * [TimerSelectionMixin](../basic-component-mixins/docs/TimerSelectionMixin.md).\n * For example, you can view a\n * [demo with arrows and page dots](http://basicwebcomponents.org/basic-web-components/packages/demos/carousel-with-arrows-and-dots.html).\n * See the specific mixins for other carousel demos.\n *\n * basic-carousel uses its children as the elements the user will navigate\n * through. In a typical use, a basic-carousel can be used to navigate between a\n * sequence of images:\n *\n *     <basic-carousel>\n *       <img src=\"image1.jpg\">\n *       <img src=\"image2.jpg\">\n *       <img src=\"image3.jpg\">\n *     </basic-carousel>\n *\n * The child elements can be of any type — they are not restricted to images.\n *\n * This component attempts to meet the [Gold Standard for web components]\n * (https://github.com/webcomponents/gold-standard/wiki) so that it is generally\n * as flexible and robust as standard HTML elements. For example, it meets the\n * \"Content Changes\" criteria: the carousel will adapt to new child elements\n * added or removed at runtime.\n *\n * Currently, this component does not meet the Gold Standard criteria \"Size to\n * Content\". As a result, for the time being, **you must manually set a size on\n * this component**. Two approaches are to: 1) stretch the component across\n * whatever surface it is contained within, or 2) set it to be larger than the\n * largest child element you want to display. The former approach is more\n * common, and can be achieved with CSS styling such as:\n *\n *     html {\n *       height: 100%;\n *     }\n *\n *     body {\n *       display: -webkit-flex;\n *       display: flex;\n *       height: 100%;\n *       margin: 0;\n *     }\n *\n *     basic-carousel {\n *       -webkit-flex: 1;\n *       flex: 1;\n *     }\n *\n * The standard basic-carousel component supports navigation via the following\n * input methods:\n *\n * * Keyboard. When the carousel has focus, the user can press Left, Right,\n *   Home, or End. These navigate to the expected element.\n * * Touch. On mobile and other touch-enabled devices, the user can drag left or\n *   right.\n * * Trackpad. The user can swipe left or right on a trackpad to navigate.\n *\n * Because carousels are used in a wide variety of circumstances, by default\n * basic-carousel provides a minimal appearance and no separately interactive\n * elements such as arrow buttons on the side or dots along the bottom. Those\n * elements can be added by wrapping a Carousel in optional mixins:\n *\n * * [ArrowSelectionMixin](../basic-component-mixins/docs/ArrowSelectionMixin.md).\n *   Adds prominent left and right arrow buttons on the side of the carousel.\n * * [PageDotsMixin](../basic-component-mixins/docs/PageDotsMixin.md).\n *   Adds a series of small dots below the carousel to indicate the user's\n *   current position in the sequence.\n * * [TimerSelectionMixin](../basic-component-mixins/docs/TimerSelectionMixin.md).\n *   Advances to the next item on a timer.\n * * [TabStripMixin](../basic-tab-strip).\n *   Adds a strip of traditional tab buttons.\n *\n * See those components for more details, but in general you can construct a\n * common carousel with both arrow buttons and dots like so:\n *\n *     class MyCarousel extends\n *         ArrowSelectionMixin(PageDotsMixin(Carousel)) {}\n *     customElements.define('my-carousel', MyCarousel);\n *\n * For universal access, basic-carousel automatically adds a variety of\n * [ARIA](http://www.w3.org/WAI/intro/aria) properties to itself and to child\n * elements. This helps users navigate the sequence of elements in the carousel\n * using assistive technologies.\n *\n * @extends AnimationStage\n * @mixes DirectionSelectionMixin\n * @mixes GenericMixin\n * @mixes KeyboardMixin\n * @mixes KeyboardDirectionMixin\n * @mixes SwipeDirectionMixin\n * @mixes TrackpadDirectionMixin\n */\nclass Carousel extends base {\n\n  get [symbols.defaults]() {\n    const defaults = super[symbols.defaults] || {};\n    defaults.navigationAxis = 'horizontal';\n    defaults.selectionAnimationEffect = 'slideWithGap';\n    // defaults.selectionRequired = true;\n    return defaults;\n  }\n\n}\n\n\ncustomElements.define('basic-carousel', Carousel);\nexport default Carousel;\n","import safeAttributes from './safeAttributes';\n\n\n// Memoized maps of attribute to property names and vice versa.\nconst attributeToPropertyNames = {};\nconst propertyNamesToAttributes = {};\n\n\n/* Exported function extends a base class with AttributeMarshalling. */\nexport default (base) => {\n\n  /**\n   * Mixin which marshalls attributes to properties and vice versa.\n   *\n   * If your component exposes a setter for a property, it's generally a good\n   * idea to let devs using your component be able to set that property in HTML\n   * via an element attribute. You can code that yourself by writing an\n   * `attributeChangedCallback`, or you can use this mixin to get a degree of\n   * automatic support.\n   *\n   * This mixin implements an `attributeChangedCallback` that will attempt to\n   * convert a change in an element attribute into a call to the corresponding\n   * property setter. Attributes typically follow hyphenated names (\"foo-bar\"),\n   * whereas properties typically use camelCase names (\"fooBar\"). This mixin\n   * respects that convention, automatically mapping the hyphenated attribute\n   * name to the corresponding camelCase property name.\n   *\n   * Example: You define a component using this mixin:\n   *\n   *     class MyElement extends AttributeMarshallingMixin(HTMLElement) {\n   *       get fooBar() { return this._fooBar; }\n   *       set fooBar(value) { this._fooBar = value; }\n   *     }\n   *     customElements.define('my-element', MyElement);\n   *\n   * If someone then instantiates your component in HTML:\n   *\n   *     <my-element foo-bar=\"Hello\"></my-element>\n   *\n   * Then, after the element has been upgraded, the `fooBar` setter will\n   * automatically be invoked with the initial value \"Hello\".\n   *\n   * For the time being, this mixin only supports string-valued properties.\n   * If you'd like to convert string attributes to other types (numbers,\n   * booleans), you need to implement `attributeChangedCallback` yourself.\n   */\n  class AttributeMarshalling extends base {\n\n    /*\n     * Handle a change to the attribute with the given name.\n     */\n    attributeChangedCallback(attributeName, oldValue, newValue) {\n      if (super.attributeChangedCallback) { super.attributeChangedCallback(); }\n      const propertyName = attributeToPropertyName(attributeName);\n      // If the attribute name corresponds to a property name, set the property.\n      // Ignore standard HTMLElement properties handled by the DOM.\n      if (propertyName in this && !(propertyName in HTMLElement.prototype)) {\n        this[propertyName] = newValue;\n      }\n    }\n\n    connectedCallback() {\n      if (super.connectedCallback) { super.connectedCallback(); }\n      safeAttributes.connected(this);\n    }\n\n    static get observedAttributes() {\n      return attributesForClass(this);\n    }\n\n    /**\n     * Set/unset the attribute with the indicated name.\n     *\n     * This method exists primarily to handle the case where an element wants to\n     * set a default property value that should be reflected as an attribute. An\n     * important limitation of custom element consturctors is that they cannot\n     * set attributes. A call to `reflectAttribute` during the constructor will\n     * be deferred until the element is connected to the document.\n     *\n     * @param {string} attribute - The name of the *attribute* (not property) to set.\n     * @param {object} value - The value to set. If null, the attribute will be removed.\n     */\n    reflectAttribute(attribute, value) {\n      return safeAttributes.setAttribute(this, attribute, value);\n    }\n\n    /**\n     * Set/unset the class with the indicated name.\n     *\n     * This method exists primarily to handle the case where an element wants to\n     * set a default property value that should be reflected as as class. An\n     * important limitation of custom element consturctors is that they cannot\n     * set attributes, including the `class` attribute. A call to\n     * `reflectClass` during the constructor will be deferred until the element\n     * is connected to the document.\n     *\n     * @param {string} className - The name of the class to set.\n     * @param {object} value - True to set the class, false to remove it.\n     */\n    reflectClass(className, value) {\n      return safeAttributes.toggleClass(this, className, value);\n    }\n\n  }\n\n  return AttributeMarshalling;\n};\n\n\n// Convert hyphenated foo-bar attribute name to camel case fooBar property name.\nfunction attributeToPropertyName(attributeName) {\n  let propertyName = attributeToPropertyNames[attributeName];\n  if (!propertyName) {\n    // Convert and memoize.\n    const hypenRegEx = /-([a-z])/g;\n    propertyName = attributeName.replace(hypenRegEx,\n        match => match[1].toUpperCase());\n    attributeToPropertyNames[attributeName] = propertyName;\n  }\n  return propertyName;\n}\n\nfunction attributesForClass(classFn) {\n\n  // We treat the element base classes as if they have no attributes, since we\n  // don't want to receive attributeChangedCallback for them.\n  if (classFn === HTMLElement || classFn === Object) {\n    return [];\n  }\n\n  // Get attributes for parent class.\n  const baseClass = Object.getPrototypeOf(classFn.prototype).constructor;\n  const baseAttributes = attributesForClass(baseClass);\n\n  // Get attributes for this class.\n  const propertyNames = Object.getOwnPropertyNames(classFn.prototype);\n  const setterNames = propertyNames.filter(propertyName =>\n    typeof Object.getOwnPropertyDescriptor(\n        classFn.prototype, propertyName).set === 'function');\n  const attributes = setterNames.map(setterName =>\n      propertyNameToAttribute(setterName));\n\n  // Merge.\n  const diff = attributes.filter(attribute =>\n      baseAttributes.indexOf(attribute) < 0);\n  return baseAttributes.concat(diff);\n}\n\n// Convert a camel case fooBar property name to a hyphenated foo-bar attribute.\nfunction propertyNameToAttribute(propertyName) {\n  let attribute = propertyNamesToAttributes[propertyName];\n  if (!attribute) {\n    // Convert and memoize.\n    const uppercaseRegEx = /([A-Z])/g;\n    attribute = propertyName.replace(uppercaseRegEx, '-$1').toLowerCase();\n  }\n  return attribute;\n}\n","/* Exported function extends a base class with Composable. */\nexport default (base) => {\n\n  /**\n   * Mixin to make a class more easily composable with other mixins.\n   *\n   * This mixin contributes a `compose` method that applies a set of mixin\n   * functions and returns the resulting new class. This sugar can make the\n   * application of many mixins at once easier to read.\n   */\n  class Composable extends base {\n\n    /**\n     * Apply a set of mixin functions or mixin objects to the present class and\n     * return the new class.\n     *\n     * Instead of writing:\n     *\n     *     let MyClass = Mixin1(Mixin2(Mixin3(Mixin4(Mixin5(BaseClass)))));\n     *\n     * You can write:\n     *\n     *     let MyClass = ComposableMixin(BaseClass).compose(\n     *       Mixin1,\n     *       Mixin2,\n     *       Mixin3,\n     *       Mixin4,\n     *       Mixin5\n     *     );\n     *\n     * This function can also take mixin objects. A mixin object is just a\n     * shorthand for a mixin function that creates a new subclass with the given\n     * members. The mixin object's members are *not* copied directly onto the\n     * prototype of the base class, as with traditional mixins.\n     *\n     * In addition to providing syntactic sugar, this mixin can be used to\n     * define a class in ES5, which lacks ES6's `class` keyword.\n     *\n     * @param {...mixins} mixins - A set of mixin functions or objects to apply.\n     */\n    static compose(...mixins) {\n      // We create a new subclass for each mixin in turn. The result becomes\n      // the base class extended by any subsequent mixins. It turns out that\n      // we can use Array.reduce() to concisely express this, using the current\n      // object as the seed for reduce().\n      return mixins.reduce(composeClass, this);\n    }\n\n  }\n\n  return Composable;\n};\n\n\n// Properties defined by Object that we don't want to mixin.\nconst NON_MIXABLE_OBJECT_PROPERTIES = [\n  'constructor'\n];\n\n/*\n * Apply the mixin to the given base class to return a new class.\n * The mixin can either be a function that returns the modified class, or a\n * plain object whose members will be copied to the new class' prototype.\n */\nfunction composeClass(base, mixin) {\n  if (typeof mixin === 'function') {\n    // Mixin function\n    return mixin(base);\n  } else {\n    // Mixin object\n    class Subclass extends base {}\n    copyOwnProperties(mixin, Subclass.prototype, NON_MIXABLE_OBJECT_PROPERTIES);\n    return Subclass;\n  }\n}\n\n\n/*\n * Copy the given properties/methods to the target.\n * Return the updated target.\n */\nfunction copyOwnProperties(source, target, ignorePropertyNames = []) {\n  Object.getOwnPropertyNames(source).forEach(name => {\n    if (ignorePropertyNames.indexOf(name) < 0) {\n      const descriptor = Object.getOwnPropertyDescriptor(source, name);\n      Object.defineProperty(target, name, descriptor);\n    }\n  });\n  return target;\n}\n","import createSymbol from './createSymbol';\nimport toggleClass from './toggleClass';\nimport symbols from './symbols';\n\n\n// Symbols for private data members on an element.\nconst itemsSymbol = createSymbol('items');\nconst itemInitializedSymbol = createSymbol('itemInitialized');\n\n\n/* Exported function extends a base class with ContentItems. */\nexport default (base) => {\n\n  /**\n   * Mixin which maps content semantics (elements) to list item semantics.\n   *\n   * Items differ from element contents in several ways:\n   *\n   * * They are often referenced via index.\n   * * They may have a selection state.\n   * * It's common to do work to initialize the appearance or state of a new\n   *   item.\n   * * Auxiliary invisible child elements are filtered out and not counted as\n   *   items. Auxiliary elements include link, script, style, and template\n   *   elements. This filtering ensures that those auxiliary elements can be\n   *   used in markup inside of a list without being treated as list items.\n   *\n   * This mixin expects a component to provide a `content` property returning a\n   * raw set of elements. You can provide that yourself, or use\n   * [DistributedChildrenContentMixin](DistributedChildrenContentMixin.md).\n   *\n   * The most commonly referenced property defined by this mixin is the `items`\n   * property. To avoid having to do work each time that property is requested,\n   * this mixin supports an optimized mode. If you invoke the `contentChanged`\n   * method when the set of items changes, the mixin concludes that you'll take\n   * care of notifying it of future changes, and turns on the optimization. With\n   * that on, the mixin saves a reference to the computed set of items, and will\n   * return that immediately on subsequent calls to the `items` property. If you\n   * use this mixin in conjunction with\n   * [DistributedChildrenContentMixin](DistributedChildrenContentMixin.md), the\n   * `contentChanged` method will be invoked for you when the element's children\n   * change, turning on the optimization automatically.\n   */\n  class ContentItems extends base {\n\n    contentChanged() {\n      if (super.contentChanged) { super.contentChanged(); }\n\n      // Since we got the contentChanged call, we'll assume we'll be notified if\n      // the set of items changes later. We turn on memoization of the items\n      // property by setting our internal property to null (instead of\n      // undefined).\n      this[itemsSymbol] = null;\n\n      this[symbols.itemsChanged]();\n    }\n\n    /**\n     * This method is invoked whenever a new item is added to the list.\n     *\n     * The default implementation of this method does nothing. You can override\n     * this to perform per-item initialization.\n     *\n     * @param {HTMLElement} item - The item that was added.\n     */\n    [symbols.itemAdded](item) {\n      if (super[symbols.itemAdded]) { super[symbols.itemAdded](item); }\n    }\n\n    /**\n     * The selection state for a single item has changed.\n     *\n     * Invoke this method to signal that the selected state of the indicated item\n     * has changed. By default, this applies a `selected` CSS class if the item\n     * is selected, and removed it if not selected.\n     *\n     * @param {HTMLElement} item - The item whose selection state has changed.\n     * @param {boolean} selected - True if the item is selected, false if not.\n     */\n    [symbols.itemSelected](item, selected) {\n      if (super[symbols.itemSelected]) { super[symbols.itemSelected](item, selected); }\n      toggleClass(item, 'selected', selected);\n    }\n\n    /**\n     * The current set of items in the list. See the top-level documentation for\n     * mixin for a description of how items differ from plain content.\n     *\n     * @type {HTMLElement[]}\n     */\n    get items() {\n      let items;\n      if (this[itemsSymbol] == null) {\n        items = filterAuxiliaryElements(this.content);\n        // Note: test for *equality* with null; don't treat undefined as a match.\n        if (this[itemsSymbol] === null) {\n          // Memoize the set of items.\n          this[itemsSymbol] = items;\n        }\n      } else {\n        // Return the memoized items.\n        items = this[itemsSymbol];\n      }\n      return items;\n    }\n\n    /**\n     * This method is invoked when the underlying contents change. It is also\n     * invoked on component initialization – since the items have \"changed\" from\n     * being nothing.\n     */\n    [symbols.itemsChanged]() {\n      if (super[symbols.itemsChanged]) { super[symbols.itemsChanged](); }\n\n      // Perform per-item initialization.\n      Array.prototype.forEach.call(this.items, item => {\n        if (!item[itemInitializedSymbol]) {\n          this[symbols.itemAdded](item);\n          item[itemInitializedSymbol] = true;\n        }\n      });\n\n      this.dispatchEvent(new CustomEvent('items-changed'));\n    }\n\n    /**\n     * Fires when the items in the list change.\n     *\n     * @memberof ContentItems\n     * @event items-changed\n     */\n  }\n\n  return ContentItems;\n};\n\n\n// Return the given elements, filtering out auxiliary elements that aren't\n// typically visible. Items which are not elements are returned as is.\nfunction filterAuxiliaryElements(items) {\n  const auxiliaryTags = [\n    'link',\n    'script',\n    'style',\n    'template'\n  ];\n  return [].filter.call(items, function(item) {\n    return !item.localName || auxiliaryTags.indexOf(item.localName) < 0;\n  });\n}\n","import symbols from './symbols';\n\n\n/* Exported function extends a base class with DirectionSelection. */\nexport default (base) => {\n\n  /**\n   * Mixin which maps direction semantics (goLeft, goRight, etc.) to selection\n   * semantics (selectPrevious, selectNext, etc.).\n   *\n   * This mixin can be used in conjunction with\n   * [KeyboardDirectionMixin](KeyboardDirectionMixin.md) (which maps keyboard\n   * events to directions) and a mixin that handles selection like\n   * [SingleSelectionMixin](SingleSelectionMixin.md).\n   */\n  class DirectionSelection extends base {\n\n    [symbols.goDown]() {\n      if (super[symbols.goDown]) { super[symbols.goDown](); }\n      return this.selectNext();\n    }\n\n    [symbols.goEnd]() {\n      if (super[symbols.goEnd]) { super[symbols.goEnd](); }\n      return this.selectLast();\n    }\n\n    [symbols.goLeft]() {\n      if (super[symbols.goLeft]) { super[symbols.goLeft](); }\n      return this.selectPrevious();\n    }\n\n    [symbols.goRight]() {\n      if (super[symbols.goRight]) { super[symbols.goRight](); }\n      return this.selectNext();\n    }\n\n    [symbols.goStart]() {\n      if (super[symbols.goStart]) { super[symbols.goStart](); }\n      return this.selectFirst();\n    }\n\n    [symbols.goUp]() {\n      if (super[symbols.goUp]) { super[symbols.goUp](); }\n      return this.selectPrevious();\n    }\n\n    // Default implementation. This will typically be handled by other mixins.\n    get selectedFraction() {\n      return super.selectedFraction;\n    }\n    set selectedFraction(value) {\n      if ('selectedFraction' in base.prototype) { super.selectedFraction = value; }\n    }\n\n    // Default implementation. This will typically be handled by other mixins.\n    selectFirst() {\n      if (super.selectFirst) { return super.selectFirst(); }\n    }\n\n    // Default implementation. This will typically be handled by other mixins.\n    selectLast() {\n      if (super.selectLast) { return super.selectLast(); }\n    }\n\n    // Default implementation. This will typically be handled by other mixins.\n    selectNext() {\n      if (super.selectNext) { return super.selectNext(); }\n    }\n\n    // Default implementation. This will typically be handled by other mixins.\n    selectPrevious() {\n      if (super.selectPrevious) { return super.selectPrevious(); }\n    }\n\n    // Map drag travel fraction to selection fraction.\n    get travelFraction() {\n      return super.travelFraction;\n    }\n    set travelFraction(value) {\n      if ('travelFraction' in base.prototype) { super.travelFraction = value; }\n      this.selectedFraction = value;\n    }\n\n  }\n\n  return DirectionSelection;\n};\n","import microtask from './microtask';\n\n\n/* Exported function extends a base class with DistributedChildrenContent. */\nexport default (base) => {\n\n  /**\n   * Mixin which defines a component's content as its children, expanding any\n   * nodes distributed to the component's slots.\n   *\n   * This also provides notification of changes to a component's content. It\n   * will invoke a `contentChanged` method when the component is first\n   * instantiated, and whenever its distributed children change. This is an\n   * easy way to satisfy the Gold Standard checklist item for monitoring\n   * [Content Changes](https://github.com/webcomponents/gold-standard/wiki/Content-Changes).\n   *\n   * Example:\n   *\n   * ```\n   * let base = DistributedChildrenContentMixin(DistributedChildrenMixin(HTMLElement));\n   * class CountingElement extends base {\n   *\n   *   constructor() {\n   *     super();\n   *     let root = this.attachShadow({ mode: 'open' });\n   *     root.innerHTML = `<slot></slot>`;\n   *   }\n   *\n   *   contentChanged() {\n   *     // Count the component's children, both initially and when changed.\n   *     this.count = this.distributedChildren.length;\n   *   }\n   *\n   * }\n   * ```\n   *\n   * Note that content change detection depends upon the element having at least\n   * one `slot` element in its shadow subtree.\n   *\n   * This mixin is intended for use with the\n   * [DistributedChildrenMixin](DistributedChildrenMixin.md). See that mixin for\n   * a discussion of how that works. This DistributedChildrenContentMixin\n   * provides an easy way of defining the \"content\" of a component as the\n   * component's distributed children. That in turn lets mixins like\n   * [ContentItemsMixin](ContentItemsMixin.md) manipulate the children as list\n   * items.\n   */\n  class DistributedChildrenContent extends base {\n\n    constructor() {\n      super();\n\n      if (this.shadowRoot) {\n        // Listen to changes on all slots.\n        const slots = this.shadowRoot.querySelectorAll('slot');\n        slots.forEach(slot => slot.addEventListener('slotchange', event => {\n          this.contentChanged();\n        }));\n      }\n\n      // Make an initial call to contentChanged() so that the component can do\n      // initialization that it normally does when content changes.\n      //\n      // This will invoke contentChanged() handlers in other mixins. In order\n      // that those mixins have a chance to complete their own initialization,\n      // we add the contentChanged() call to the microtask queue.\n      microtask(() => this.contentChanged());\n    }\n\n    /**\n     * Invoked when the contents of the component (including distributed\n     * children) have changed.\n     *\n     * This method is also invoked when a component is first instantiated; the\n     * contents have essentially \"changed\" from being nothing. This allows the\n     * component to perform initial processing of its children.\n     */\n    contentChanged() {\n      if (super.contentChanged) { super.contentChanged(); }\n      const event = new CustomEvent('content-changed');\n      this.dispatchEvent(event);\n    }\n\n    /**\n     * The content of this component, defined to be the flattened array of\n     * children distributed to the component.\n     *\n     * @type {HTMLElement[]}\n     */\n    get content() {\n      const distributedChildren = this.distributedChildren;\n      if (typeof distributedChildren === 'undefined') {\n        console.warn(`DistributedChildrenContentMixin expects the component to define a \"distributedChildren\" property.`);\n      }\n      return distributedChildren;\n    }\n    set content(value) {\n      if ('content' in base.prototype) { super.content = value; }\n      // TODO: Set the children to the given value (which should be an array of\n      // elements)?\n    }\n\n    /**\n     * This event is raised when the component's contents (including distributed\n     * children) have changed.\n     *\n     * @memberof DistributedChildrenContent\n     * @event content-changed\n     */\n  }\n\n  return DistributedChildrenContent;\n};\n","/* Exported function extends a base class with DistributedChildren. */\nexport default (base) => {\n\n  /**\n   * Mixin which defines helpers for accessing a component's distributed\n   * children as a flattened array or string.\n   *\n   * The standard DOM API provides several ways of accessing child content:\n   * `children`, `childNodes`, and `textContent`. None of these functions are\n   * Shadow DOM aware. This mixin defines variations of those functions that\n   * *are* Shadow DOM aware.\n   *\n   * Example: you create a component `<count-children>` that displays a number\n   * equal to the number of children placed inside that component. If someone\n   * instantiates your component like:\n   *\n   *     <count-children>\n   *       <div></div>\n   *       <div></div>\n   *       <div></div>\n   *     </count-children>\n   *\n   * Then the component should show \"3\", because there are three children. To\n   * calculate the number of children, the component can just calculate\n   * `this.children.length`. However, suppose someone instantiates your\n   * component inside one of their own components, and puts a `<slot>` element\n   * inside your component:\n   *\n   *     <count-children>\n   *       <slot></slot>\n   *     </count-children>\n   *\n   * If your component only looks at `this.children`, it will always see exactly\n   * one child — the `<slot>` element. But the user looking at the page will\n   * *see* any nodes distributed to that slot. To match what the user sees, your\n   * component should expand any `<slot>` elements it contains.\n   *\n   * That is the problem this mixin solves. After applying this mixin, your\n   * component code has access to `this.distributedChildren`, whose `length`\n   * will return the total number of all children distributed to your component\n   * in the composed tree.\n   *\n   * Note: The latest Custom Elements API design calls for a new function,\n   * `getAssignedNodes` that takes an optional `deep` parameter, that will solve\n   * this problem at the API level.\n   */\n  class DistributedChildren extends base {\n\n    /**\n     * An in-order collection of distributed children, expanding any slot\n     * elements. Like the standard children property, this skips text nodes.\n     *\n     * @type {HTMLElement[]}\n     */\n    get distributedChildren() {\n      return expandContentElements(this.children, false);\n    }\n\n    /**\n     * An in-order collection of distributed child nodes, expanding any slot\n     * elements. Like the standard childNodes property, this includes text\n     * nodes.\n     *\n     * @type {Node[]}\n     */\n    get distributedChildNodes() {\n      return expandContentElements(this.childNodes, true);\n    }\n\n    /**\n     * The concatenated text content of all distributed child nodes, expanding\n     * any slot elements.\n     *\n     * @type {string}\n     */\n    get distributedTextContent() {\n      const strings = this.distributedChildNodes.map(function(child) {\n        return child.textContent;\n      });\n      return strings.join('');\n    }\n\n  }\n\n  return DistributedChildren;\n};\n\n\n/*\n * Given a array of nodes, return a new array with any content elements expanded\n * to the nodes distributed to that content element. This rule is applied\n * recursively.\n *\n * If includeTextNodes is true, text nodes will be included, as in the\n * standard childNodes property; by default, this skips text nodes, like the\n * standard children property.\n */\nfunction expandContentElements(nodes, includeTextNodes) {\n  const expanded = Array.prototype.map.call(nodes, node => {\n    // We want to see if the node is an instanceof HTMLSlotELement, but\n    // that class won't exist if the browser that doesn't support native\n    // Shadow DOM and if the Shadow DOM polyfill hasn't been loaded. Instead,\n    // we do a simplistic check to see if the tag name is \"slot\".\n    const isSlot = typeof HTMLSlotElement !== 'undefined' ?\n      node instanceof HTMLSlotElement :\n      node.localName === 'slot';\n    if (isSlot) {\n      // Use the nodes assigned to this node instead.\n      const assignedNodes = node.assignedNodes({ flatten: true });\n      return assignedNodes ?\n        expandContentElements(assignedNodes, includeTextNodes) :\n        [];\n    } else if (node instanceof HTMLElement) {\n      // Plain element; use as is.\n      return [node];\n    } else if (node instanceof Text && includeTextNodes) {\n      // Text node.\n      return [node];\n    } else {\n      // Comment, processing instruction, etc.; skip.\n      return [];\n    }\n  });\n  const flattened = [].concat(...expanded);\n  return flattened;\n}\n","import createSymbol from './createSymbol';\n\n\n// Symbols for private data members on an element.\nconst selectedFractionSymbol = createSymbol('selectedFraction');\n\n\n/* Exported function extends a base class with FractionalSelection. */\nexport default function mixin(base) {\n\n  /**\n   * Adds support for fractional selection: treating a selection as a real\n   * number that combines an integer portion (an index into a list), and a\n   * fraction (indicating how far of the way we are to the next or previous\n   * item).\n   *\n   * This is useful in components that support incremental operations during\n   * dragging and swiping. Example: a carousel component has several items, and the\n   * currently selected item is item 3. The user begins swiping to the left,\n   * moving towards selecting item 4. Halfway through this operation, the\n   * fractional selection value is 3.5.\n   *\n   * This value permits communication between mixins like\n   * [SwipeDirectionMixin](./SwipeDirectionMixin.md) and\n   * [TrackpadDirectionMixin](./TrackpadDirectionMixin.md), which generate\n   * fractional selection values, and mixins like\n   * [SelectionAnimationMixin](./SelectionAnimationMixin.md), which can render\n   * selection at a fractional value.\n   */\n  class FractionalSelection extends base {\n\n    connectedCallback() {\n      if (super.connectedCallback) { super.connectedCallback(); }\n      this.selectedFraction = 0;\n    }\n\n    /**\n     * A fractional value indicating how far the user has currently advanced to\n     * the next/previous item. E.g., a `selectedFraction` of 3.5 indicates the\n     * user is halfway between items 3 and 4.\n     *\n     * @type {number}\n     */\n    get selectedFraction() {\n      return this[selectedFractionSymbol];\n    }\n    set selectedFraction(value) {\n      this[selectedFractionSymbol] = value;\n      if ('selectedFraction' in base.prototype) { super.selectedFraction = value; }\n      const event = new CustomEvent('selected-fraction-changed');\n      this.dispatchEvent(event);\n    }\n\n  }\n\n  return FractionalSelection;\n}\n\n\nmixin.helpers = {\n\n  /*\n   * Dampen a selection that goes past the beginning or end of a list. This is\n   * generally used to produce a visual effect of tension as the user tries to\n   * go further in a direction that has no more items.\n   *\n   * Example: suppose `itemCount` is 5, indicating a list of 5 items. The index of\n   * the last item is 4. If the `selection` parameter is 4.5, the user is trying\n   * to go past this last item. When a damping function is applied, the resulting\n   * value will be less than 4.5 (the actual value will be 4.25). When this\n   * selection state is rendered, the user will see that, each unit distance the\n   * drag travels has less and less visible effect. This is perceived as tension.\n   *\n   * @param {number} selection - A real number indicating a selection position\n   * @param {number} itemCount - An integer for the number of items in the list\n   * @returns {number} A real number representing the damped selection value.\n   */\n  dampedSelection(selection, itemCount) {\n    const bound = itemCount - 1;\n    let damped;\n    if (selection < 0) {\n      // Trying to go past beginning of list. Apply tension from the left edge.\n      damped = -mixin.helpers.damping(-selection);\n    } else if (selection >= bound) {\n      // Trying to go past end of list. Apply tension from the right edge.\n      damped = bound + mixin.helpers.damping(selection - bound);\n    } else {\n      // No damping required.\n      damped = selection;\n    }\n    return damped;\n  },\n\n  /*\n   * Calculate damping as a function of the distance past the minimum/maximum\n   * values.\n   *\n   * We want to asymptotically approach an absolute minimum of 1 unit\n   * below/above the actual minimum/maximum. This requires calculating a\n   * hyperbolic function.\n   *\n   * See http://www.wolframalpha.com/input/?i=y+%3D+-1%2F%28x%2B1%29+%2B+1\n   * for the one we use. The only portion of that function we care about is when\n   * x is zero or greater. An important consideration is that the curve be\n   * tangent to the diagonal line x=y at (0, 0). This ensures smooth continuity\n   * with the normal drag behavior, in which the visible sliding is linear with\n   * the distance the touchpoint has been dragged.\n   */\n  damping(x) {\n    const y = (-1 / (x + 1)) + 1;\n    return y;\n  },\n\n  /*\n   * Return the current fractional selection value for the given element.\n   *\n   * This simply adds the element's `selectedIndex` and `selectedFraction`\n   * properties.\n   *\n   * @param {HTMLElement} element - An element that supports selection\n   */\n  elementSelection(element) {\n    const selectedIndex = element.selectedIndex;\n    if (selectedIndex < 0) {\n      // No selection\n      return;\n    }\n    const selectedFraction = element.selectedFraction || 0;\n    return selectedIndex + selectedFraction;\n  },\n\n  /*\n   * Breaks a fractional selection into its integer and fractional parts.\n   *\n   * Example: if passed 3.5, this returns { index: 3, fraction: 5 }.\n   *\n   * @param {number} selection – A real number representing a selection point\n   * @returns {object} - An object with an `index` property holding the\n   * selection's integer component, and a `fraction` property holding the\n   * selection's fractional component.\n   */\n  selectionParts(selection) {\n    // Stupid IE doesn't have Math.trunc.\n    // const index = Math.trunc(selection);\n    const index = selection < 0 ? Math.ceil(selection) : Math.floor(selection);\n    const fraction = selection - index;\n    return { index, fraction };\n  },\n\n  /*\n   * Returns a fractional selection point after accounting for wrapping, ensuring\n   * that the integer portion of the selection stays between 0 and `itemCount`-1.\n   * That is, the integer portion will always be a valid index into the list.\n   *\n   * Example of wrapping past the end of the list: if `selection` is 5.5 and\n   * `itemCount` is 5, this returns 0.5. Example of wrapping past the beginning of\n   * the list: if `selection` is 0.5 and `itemCount` is 5, this returns 4.5.\n   *\n   * @param {number} selection - A real number representing a selection point\n   * @param {number} itemCount - The number of items in the list\n   * @returns {number} - The result of wrapping the selection point\n   */\n  wrappedSelection(selection, itemCount) {\n    // Handles possibility of negative mod.\n    // See http://stackoverflow.com/a/18618250/76472\n    return ((selection % itemCount) + itemCount) % itemCount;\n  },\n\n  /*\n   * Return the parts of a selection, first wrapping if necessary.\n   *\n   * @param {number} selection – A real number representing a selection point\n   * @param {number} itemCount - The number of items in the list\n   * @param {boolean} wrap – True if the selection should wrap to stay within the\n   * list\n   * @returns {object} – The parts of the selection, using the same format as\n   * `selectionParts`.\n   */\n  wrappedSelectionParts(selection, itemCount, wrap) {\n    if (wrap) {\n      selection = mixin.helpers.wrappedSelection(selection, itemCount);\n    }\n    return mixin.helpers.selectionParts(selection);\n  }\n\n};\n","import createSymbol from './createSymbol';\nimport symbols from './symbols';\n\n\n// Symbols for private data members on an element.\nconst navigationAxisSymbol = createSymbol('navigationAxis');\n\n\n/* Exported function extends a base class with KeyboardDirection. */\nexport default (base) => {\n\n  /**\n   * Mixin which maps direction keys (Left, Right, etc.) to direction semantics\n   * (go left, go right, etc.).\n   *\n   * This mixin expects the component to invoke a `keydown` method when a key is\n   * pressed. You can use [KeyboardMixin](KeyboardMixin.md) for that\n   * purpose, or wire up your own keyboard handling and call `keydown` yourself.\n   *\n   * This mixin calls methods such as `goLeft` and `goRight`. You can define\n   * what that means by implementing those methods yourself. If you want to use\n   * direction keys to navigate a selection, use this mixin with\n   * [DirectionSelectionMixin](DirectionSelectionMixin.md).\n   */\n  class KeyboardDirection extends base {\n\n    constructor() {\n      super();\n      // Set defaults.\n      if (typeof this.navigationAxis === 'undefined') {\n        this.navigationAxis = this[symbols.defaults].navigationAxis;\n      }\n    }\n\n    get [symbols.defaults]() {\n      const defaults = super[symbols.defaults] || {};\n      defaults.navigationAxis = 'both';\n      return defaults;\n    }\n\n    /**\n     * Invoked when the user wants to go/navigate down.\n     * The default implementation of this method does nothing.\n     */\n    [symbols.goDown]() {\n      if (super[symbols.goDown]) { return super[symbols.goDown](); }\n    }\n\n    /**\n     * Invoked when the user wants to go/navigate to the end (e.g., of a list).\n     * The default implementation of this method does nothing.\n     */\n    [symbols.goEnd]() {\n      if (super[symbols.goEnd]) { return super[symbols.goEnd](); }\n    }\n\n    /**\n     * Invoked when the user wants to go/navigate left.\n     * The default implementation of this method does nothing.\n     */\n    [symbols.goLeft]() {\n      if (super[symbols.goLeft]) { return super[symbols.goLeft](); }\n    }\n\n    /**\n     * Invoked when the user wants to go/navigate right.\n     * The default implementation of this method does nothing.\n     */\n    [symbols.goRight]() {\n      if (super[symbols.goRight]) { return super[symbols.goRight](); }\n    }\n\n    /**\n     * Invoked when the user wants to go/navigate to the start (e.g., of a\n     * list). The default implementation of this method does nothing.\n     */\n    [symbols.goStart]() {\n      if (super[symbols.goStart]) { return super[symbols.goStart](); }\n    }\n\n    /**\n     * Invoked when the user wants to go/navigate up.\n     * The default implementation of this method does nothing.\n     */\n    [symbols.goUp]() {\n      if (super[symbols.goUp]) { return super[symbols.goUp](); }\n    }\n\n    /**\n     * Indicates the direction of permitted navigation with the keyboard.\n     *\n     * Accepted values are \"horizontal\", \"vertical\", or \"both\" (the default).\n     * If this property is \"horizontal\", the Up Arrow and Down Arrow keys will\n     * be ignored. Conversely, if this is \"vertical\", the Left Arrow and Right\n     * Arrow keys will be ignored.\n     *\n     * @type {string}\n     */\n    get navigationAxis() {\n      return this[navigationAxisSymbol];\n    }\n    set navigationAxis(value) {\n      this[navigationAxisSymbol] = value;\n      if ('navigationAxis' in base.prototype) { super.navigationAxis = value; }\n    }\n\n    [symbols.keydown](event) {\n      let handled;\n\n      const axis = this.navigationAxis;\n      const horizontal = (axis === 'horizontal' || axis === 'both');\n      const vertical = (axis === 'vertical' || axis === 'both');\n\n      // Ignore Left/Right keys when metaKey or altKey modifier is also pressed,\n      // as the user may be trying to navigate back or forward in the browser.\n      switch (event.keyCode) {\n        case 35: // End\n          handled = this[symbols.goEnd]();\n          break;\n        case 36: // Home\n          handled = this[symbols.goStart]();\n          break;\n        case 37: // Left\n          if (horizontal && !event.metaKey && !event.altKey) {\n            handled = this[symbols.goLeft]();\n          }\n          break;\n        case 38: // Up\n          if (vertical) {\n            handled = event.altKey ? this[symbols.goStart]() : this[symbols.goUp]();\n          }\n          break;\n        case 39: // Right\n          if (horizontal && !event.metaKey && !event.altKey) {\n            handled = this[symbols.goRight]();\n          }\n          break;\n        case 40: // Down\n          if (vertical) {\n            handled = event.altKey ? this[symbols.goEnd]() : this[symbols.goDown]();\n          }\n          break;\n      }\n      // Prefer mixin result if it's defined, otherwise use base result.\n      return handled || (super[symbols.keydown] && super[symbols.keydown](event));\n    }\n\n  }\n\n  return KeyboardDirection;\n};\n","import symbols from './symbols';\n\n\n/* Exported function extends a base class with Keyboard. */\nexport default (base) => {\n\n  /**\n   * Mixin which manages the keydown handling for a component.\n   *\n   * This mixin handles several keyboard-related features.\n   *\n   * First, it wires up a single keydown event handler that can be shared by\n   * multiple mixins on a component. The event handler will invoke a `keydown`\n   * method with the event object, and any mixin along the prototype chain that\n   * wants to handle that method can do so.\n   *\n   * If a mixin wants to indicate that keyboard event has been handled, and that\n   * other mixins should *not* handle it, the mixin's `keydown` handler should\n   * return a value of true. The convention that seems to work well is that a\n   * mixin should see if it wants to handle the event and, if not, then ask the\n   * superclass to see if it wants to handle the event. This has the effect of\n   * giving the mixin that was applied last the first chance at handling a\n   * keyboard event.\n   *\n   * Example:\n   *\n   *     [symbols.keydown](event) {\n   *       let handled;\n   *       switch (event.keyCode) {\n   *         // Handle the keys you want, setting handled = true if appropriate.\n   *       }\n   *       // Prefer mixin result if it's defined, otherwise use base result.\n   *       return handled || (super[symbols.keydown] && super[symbols.keydown](event));\n   *     }\n   *\n   * A second feature provided by this mixin is that it implicitly makes the\n   * component a tab stop if it isn't already, by setting `tabIndex` to 0. This\n   * has the effect of adding the component to the tab order in document order.\n   */\n  class Keyboard extends base {\n\n    constructor() {\n      super();\n      this.addEventListener('keydown', event => {\n        const handled = this[symbols.keydown](event);\n        if (handled) {\n          event.preventDefault();\n          event.stopPropagation();\n        }\n      });\n    }\n\n    connectedCallback() {\n      if (super.connectedCallback) { super.connectedCallback(); }\n      if (this.getAttribute('tabindex') == null && this[symbols.defaults].tabindex !== null) {\n        this.setAttribute('tabindex', this[symbols.defaults].tabindex);\n      }\n    }\n\n    get [symbols.defaults]() {\n      const defaults = super[symbols.defaults] || {};\n      // The default tab index is 0 (document order).\n      defaults.tabindex = 0;\n      return defaults;\n    }\n\n    /**\n     * Handle the indicated keyboard event.\n     *\n     * The default implementation of this method does nothing. This will\n     * typically be handled by other mixins.\n     *\n     * @param {KeyboardEvent} event - the keyboard event\n     * @return {boolean} true if the event was handled\n     */\n    [symbols.keydown](event) {\n      if (super[symbols.keydown]) { return super[symbols.keydown](event); }\n    }\n\n  }\n\n  return Keyboard;\n};\n","import createSymbol from './createSymbol';\nimport FractionalSelectionMixin from './FractionalSelectionMixin';\nimport symbols from './symbols';\n\n\n// Symbols for private data members on an element.\nconst animationSymbol = createSymbol('animation');\nconst draggingSymbol = createSymbol('dragging');\nconst lastAnimationSymbol = createSymbol('lastAnimation');\nconst playingAnimationSymbol = createSymbol('animatingSelection');\nconst previousSelectionSymbol = createSymbol('previousSelection');\nconst selectionAnimationDurationSymbol = createSymbol('selectionAnimationDuration');\nconst selectionAnimationEffectSymbol = createSymbol('selectionAnimationEffect');\nconst selectionAnimationKeyframesSymbol = createSymbol('selectionAnimationKeyframes');\nconst resetAnimationsOnNextRenderSymbol = createSymbol('resetAnimationsOnNextRender');\n\n\n/* Exported function extends a base class with SelectionAnimation. */\nexport default function mixin(base) {\n\n  /**\n   * Mixin which uses animation to show transitions between selection states.\n   *\n   * This mixin can be used by components that want to provide visible\n   * animations when changing the selection. For example, a carousel component\n   * may want to define a sliding animation effect shown when moving between\n   * items.\n   *\n   * The animation is defined by a `selectionAnimationKeyframes` property; see\n   * that property for details on how to define these keyframes. This animation\n   * will be used in two ways. First, when moving strictly between items, the\n   * animation will play smoothly to show the selection changing. Second, the\n   * animation can be used to render the selection at a fixed point in the\n   * transition between states. E.g., if the user pauses halfway through\n   * dragging an element using [SwipeDirectionMixin](SwipeDirectionMixin.md)\n   * or [TrackpadDirectionMixin](TrackpadDirectionMixin.md)s, then the selection\n   * animation will be shown at the point exactly halfway through.\n   *\n   * This mixin expects a component to provide an `items` array of all elements\n   * in the list, which can be provided via\n   * [ContentItemsMixin](ContentItemsMixin.md). This mixin also expects\n   * `selectedIndex` and `selectedItem` properties, which can be provided via\n   * [SingleSelectionMixin](SingleSelectionMixin.md).\n   *\n   * This mixin supports a `selectionWraps` property. When true, the user can\n   * navigate forward from the last item in the list and wrap around to the\n   * first item, or navigate backward from the first item and wrap around to the\n   * last item.\n   *\n   * This mixin uses the Web Animations API. For use on browsers which\n   * do not support that API natively, you will need to load the\n   * [Web Animations polyfill](https://github.com/web-animations/web-animations-js).\n   */\n  class SelectionAnimation extends base {\n\n    constructor() {\n      super();\n\n      // Set defaults.\n      if (typeof this.selectionAnimationDuration === 'undefined') {\n        this.selectionAnimationDuration = this[symbols.defaults].selectionAnimationDuration;\n      }\n      if (typeof this.selectionAnimationEffect === 'undefined' && this.selectionAnimationKeyframes == null) {\n        this.selectionAnimationEffect = this[symbols.defaults].selectionAnimationEffect;\n      }\n\n      this[symbols.dragging] = false;\n    }\n\n    get [symbols.defaults]() {\n      const defaults = super[symbols.defaults] || {};\n      defaults.selectionAnimationDuration = 250;\n      defaults.selectionAnimationEffect = 'slide';\n      return defaults;\n    }\n\n    /*\n     * Provide backing for the dragging property.\n     * Also, when a drag begins, reset the animations.\n     */\n    get [symbols.dragging]() {\n      return this[draggingSymbol];\n    }\n    set [symbols.dragging](value) {\n      const previousValue = this[symbols.dragging];\n      this[draggingSymbol] = value;\n      if (symbols.dragging in base.prototype) { super[symbols.dragging] = value; }\n      if (value && !previousValue) {\n        // Have begun a drag.\n        this[resetAnimationsOnNextRenderSymbol] = true;\n      }\n    }\n\n    [symbols.itemAdded](item) {\n      // We mark new items in the list as explicitly visible to ARIA. Otherwise,\n      // when an item isn't visible on the screen, ARIA will assume the item is\n      // of no interest to the user, and leave it out of the accessibility tree.\n      // If the list contains 10 items, but only 3 are visible, a screen reader\n      // might then announce the list only has 3 items. To ensure that screen\n      // readers and other assistive technologies announce the correct total\n      // number of items, we explicitly mark all items as not hidden. This will\n      // expose them all in the accessibility tree, even the items which are\n      // currently not rendered.\n      //\n      // TODO: Generally speaking, this entire mixin assumes that the user can\n      // navigate through all items in a list. But an app could style an item as\n      // display:none or visibility:hidden because the user is not allowed to\n      // interact with that item at the moment. Support for this scenario should\n      // be added. This would entail changing all locations where a mixin\n      // function is counting items, iterating over the (visible) items, and\n      // showing or hiding items. Among other things, the code below to make\n      // items visible to ARIA would need to discriminate between items which\n      // are invisible because of animation state, or invisible because the user\n      // shouldn't interact with them.\n      item.setAttribute('aria-hidden', false);\n    }\n\n    [symbols.itemsChanged]() {\n      if (super[symbols.itemsChanged]) { super[symbols.itemsChanged](); }\n\n      resetAnimations(this);\n\n      // TODO: Also reset our notion of the last rendered selection? This comes\n      // up when a DOM removal causes the selected item to change position.\n      // this[previousSelectionSymbol] = null;\n\n      renderSelection(this);\n    }\n\n    resetAnimations() {\n      resetAnimations(this);\n    }\n\n    /**\n     * A fractional value indicating how far the user has currently advanced to\n     * the next/previous item. E.g., a `selectedFraction` of 3.5 indicates the\n     * user is halfway between items 3 and 4.\n     *\n     * For more details, see [FractionalSelectionMixin](FractionalSelectionMixin.md)\n     * mixin.\n     *\n     * @type {number}\n     */\n    get selectedFraction() {\n      return super.selectedFraction || 0;\n    }\n    set selectedFraction(value) {\n      if ('selectedFraction' in base.prototype) { super.selectedFraction = value; }\n      renderSelection(this, this.selectedIndex, value);\n    }\n\n    get selectedIndex() {\n      return super.selectedIndex;\n    }\n    set selectedIndex(index) {\n      if ('selectedIndex' in base.prototype) { super.selectedIndex = index; }\n      renderSelection(this, index, 0);\n    }\n\n    /**\n     * The duration of a selection animation in milliseconds.\n     *\n     * This measures the amount of time required for a selection animation to\n     * complete. This number remains constant, even if the number of items being\n     * animated increases.\n     *\n     * The default value is 250 milliseconds (a quarter a second).\n     *\n     * @type {number}\n     * @default 250\n     */\n    get selectionAnimationDuration() {\n      return this[selectionAnimationDurationSymbol];\n    }\n    set selectionAnimationDuration(value) {\n      this[selectionAnimationDurationSymbol] = value;\n      if ('selectionAnimationDuration' in base.prototype) { super.selectionAnimationDuration = value; }\n    }\n\n    /**\n     * The name of a standard selection animation effect.\n     *\n     * This is a shorthand for setting the `selectionAnimationKeyframes`\n     * property to standard keyframes. Supported string values:\n     *\n     * * \"crossfade\"\n     * * \"reveal\"\n     * * \"revealWithFade\"\n     * * \"showAdjacent\"\n     * * \"slide\"\n     * * \"slideWithGap\"\n     *\n     * @type {string}\n     * @default \"slide\"\n     */\n    get selectionAnimationEffect() {\n      return this[selectionAnimationEffectSymbol];\n    }\n    set selectionAnimationEffect(value) {\n      this[selectionAnimationEffectSymbol] = value;\n      if ('selectionAnimationEffect' in base.prototype) { super.selectionAnimationEffect = value; }\n      this.selectionAnimationKeyframes = mixin.standardEffectKeyframes[value];\n    }\n\n    /**\n     * The keyframes that define an animation that plays for an item when moving\n     * forward in the sequence.\n     *\n     * This is an array of CSS rules that will be applied. These are used as\n     * [keyframes](http://w3c.github.io/web-animations/#keyframes-section)\n     * to animate the item with the\n     * [Web Animations API](https://developer.mozilla.org/en-US/docs/Web/API/animation).\n     *\n     * The animation represents the state of the next item as it moves from\n     * completely unselected (offstage, usually right), to selected (center\n     * stage), to completely unselected (offstage, usually left). The center time\n     * of the animation should correspond to the item's quiscent selected state,\n     * typically in the center of the stage and at the item's largest size.\n     *\n     * The default forward animation is a smooth slide at full size from right to\n     * left.\n     *\n     * When moving the selection backward, this animation is played in reverse.\n     *\n     * @type {cssRules[]}\n     */\n    get selectionAnimationKeyframes() {\n      // Standard animation slides left/right, keeps adjacent items out of view.\n      return this[selectionAnimationKeyframesSymbol];\n    }\n    set selectionAnimationKeyframes(value) {\n      this[selectionAnimationKeyframesSymbol] = value;\n      if ('selectionAnimationKeyframes' in base.prototype) { super.selectionAnimationKeyframes = value; }\n      resetAnimations(this);\n      renderSelection(this);\n    }\n\n    get selectionWraps() {\n      return super.selectionWraps;\n    }\n    set selectionWraps(value) {\n      if ('selectionWraps' in base.prototype) { super.selectionWraps = value; }\n      resetAnimations(this);\n      renderSelection(this);\n    }\n  }\n\n  return SelectionAnimation;\n}\n\n\n// We expose helpers on the mixin function that we want to be able to unit test.\n// Since these are on the function, not on the class emitted by the function,\n// they don't end up getting exposed on actual element instances.\nmixin.helpers = {\n\n  /*\n   * Calculate the animation fractions for an element's items at the given\n   * selection point. This is used when rendering the element's selection state\n   * instantaneously.\n   *\n   * This function considers the selectedIndex parameter, which can be a whole\n   * or fractional number, and determines which items will be visible at that\n   * index. This function then calculates a corresponding animation fraction: a\n   * number between 0 and 1 indicating how far through the selection animation\n   * an item should be shown, or null if the item should not be visible at that\n   * selection index. These fractions are returned as an array, where the\n   * animation fraction at position N corresponds to how item N should be shown.\n   */\n  animationFractionsForSelection(element, selection) {\n\n    const items = element.items;\n    if (!items) {\n      return;\n    }\n\n    const itemCount = items.length;\n    const selectionWraps = element.selectionWraps;\n\n    return items.map((item, itemIndex) => {\n      // How many steps from the selection point to this item?\n      const steps = stepsToIndex(itemCount, selectionWraps, selection, itemIndex);\n      // To convert steps to animation fraction:\n      // steps      animation fraction\n      //  1         0     (stage right)\n      //  0         0.5   (center stage)\n      // -1         1     (stage left)\n      const animationFraction = (1 - steps) / 2;\n      return (animationFraction >= 0 && animationFraction <= 1) ?\n        animationFraction :\n        null; // Outside animation range\n    });\n  },\n\n  /*\n   * Calculate the animation timings that should be used to smoothly animate the\n   * element's items from one selection state to another.\n   *\n   * This returns an array of timings, where the timing at position N should be\n   * used to animate item N. If an item's timing is null, then that item should\n   * not take place in the animation, and should be hidden instead.\n   */\n  effectTimingsForSelectionAnimation(element, fromSelection, toSelection) {\n\n    const items = element.items;\n    if (!items) {\n      return;\n    }\n    const itemCount = items.length;\n    const selectionWraps = element.selectionWraps;\n    const toIndex = FractionalSelectionMixin.helpers.wrappedSelectionParts(toSelection, itemCount, selectionWraps).index;\n    const totalSteps = stepsToIndex(itemCount, selectionWraps, fromSelection, toSelection);\n    const direction = totalSteps >= 0 ? 'normal': 'reverse';\n    const fill = 'both';\n    const totalDuration = element.selectionAnimationDuration;\n    const stepDuration = totalSteps !== 0 ?\n      totalDuration * 2 / Math.ceil(Math.abs(totalSteps)) :\n      0;  // No steps required, animation will be instantenous.\n\n    const timings = items.map((item, itemIndex) => {\n      const steps = stepsToIndex(itemCount, selectionWraps, itemIndex, toSelection);\n      // If we include this item in the staggered sequence of animations we're\n      // creating, where would the item appear in the sequence?\n      let positionInSequence = totalSteps - steps;\n      if (totalSteps < 0) {\n        positionInSequence = -positionInSequence;\n      }\n      // So, is this item really included in the sequence?\n      if (Math.ceil(positionInSequence) >= 0 && positionInSequence <= Math.abs(totalSteps)) {\n        // Note that delay for first item will be negative. That will cause\n        // the animation to start halfway through, which is what we want.\n        const delay = stepDuration * (positionInSequence - 1)/2;\n        const endDelay = itemIndex === toIndex ?\n          -stepDuration/2 :   // Stop halfway through.\n          0;              // Play animation until end.\n        return { duration: stepDuration, direction, fill, delay, endDelay };\n      } else {\n        return null;\n      }\n    });\n\n    return timings;\n  }\n\n};\n\n\n// Keyframes for standard selection animation effects.\nmixin.standardEffectKeyframes = {\n\n  // Simple crossfade\n  crossfade: [\n    { opacity: 0 },\n    { opacity: 1 },\n    { opacity: 0 }\n  ],\n\n  // Reveal, as if sliding the top card off a deck of cards\n  reveal: [\n    { transform: 'translateX(0%)', zIndex: 0 },\n    { transform: 'translateX(0%)', zIndex: 1 },\n    { transform: 'translateX(-100%)', zIndex: 2 }\n  ],\n\n  // Google Photos-style reveal-with-fade animation\n  revealWithFade: [\n    { transform: 'translateX(0%) scale(0.75)', opacity: 0, zIndex: 0 },\n    { transform: 'translateX(0%) scale(1.0)', opacity: 1, zIndex: 1 },\n    { transform: 'translateX(-100%) scale(1.0)', opacity: 1, zIndex: 2 }\n  ],\n\n  // Carousel variant with a bit of off-stage elements showing\n  showAdjacent: [\n    { transform: 'translateX(78%) scale(0.7)', zIndex: 0 },\n    { transform: 'translateX(0%) scale(0.82)', zIndex: 1 },\n    { transform: 'translateX(-78%) scale(0.7)', zIndex: 0 }\n  ],\n\n  // Simple slide\n  slide: [\n    { transform: 'translateX(100%)' },\n    { transform: 'translateX(-100%)' }\n  ],\n\n  // Slide, with a gap between\n  slideWithGap: [\n    { transform: 'translateX(110%)' },\n    { transform: 'translateX(-110%)' }\n  ]\n\n};\n\n\n/*\n * Smoothly animate the selection between the indicated \"from\" and \"to\"\n * indices. The former can be a fraction, e.g., when the user releases a finger\n * to complete a touch drag, and the selection will snap to the closest whole\n * index.\n */\nfunction animateSelection(element, fromSelection, toSelection) {\n\n  resetAnimations(element);\n\n  // Calculate the animation timings.\n  const items = element.items;\n  const keyframes = element.selectionAnimationKeyframes;\n  element[playingAnimationSymbol] = true;\n  const timings = mixin.helpers.effectTimingsForSelectionAnimation(element, fromSelection, toSelection);\n\n  // Figure out which item will be the one *after* the one we're selecting.\n  const itemCount = items.length;\n  const selectionWraps = element.selectionWraps;\n  const selectionIndex = FractionalSelectionMixin.helpers.selectionParts(toSelection, itemCount, selectionWraps).index;\n  const totalSteps = stepsToIndex(itemCount, selectionWraps, fromSelection, toSelection);\n  const forward = totalSteps >= 0;\n  let nextUpIndex = selectionIndex + (forward ? 1 : - 1);\n  if (selectionWraps) {\n    nextUpIndex = FractionalSelectionMixin.helpers.wrappedSelection(nextUpIndex, itemCount);\n  } else if (!isItemIndexInBounds(element, nextUpIndex)) {\n    nextUpIndex = null; // At start/end of list; don't have a next item to show.\n  }\n\n  // Play the animations using those timings.\n  let lastAnimationDetails;\n  timings.forEach((timing, index) => {\n    const item = items[index];\n    if (timing) {\n      showItem(item, true);\n      const animation = item.animate(keyframes, timing);\n      element[animationSymbol][index] = animation;\n      if (index === nextUpIndex) {\n        // This item will be animated, so will already be in the desired state\n        // after the animation completes.\n        nextUpIndex = null;\n      }\n      if (timing.endDelay !== 0) {\n        // This is the animation for the item that will be left selected.\n        // We want to clean up when this animation completes.\n        lastAnimationDetails = { animation, index, timing, forward };\n      }\n    } else {\n      // This item doesn't participate in the animation.\n      showItem(item, false);\n    }\n  });\n\n  if (lastAnimationDetails != null) {\n    // Arrange for clean-up work to be performed.\n    lastAnimationDetails.nextUpIndex = nextUpIndex;\n    lastAnimationDetails.animation.onfinish = event => selectionAnimationFinished(element, lastAnimationDetails);\n    element[lastAnimationSymbol] = lastAnimationDetails.animation;\n  } else {\n    // Shouldn't happen -- we should always have at least one animation.\n    element[playingAnimationSymbol] = false;\n  }\n}\n\n\nfunction getAnimationForItemIndex(element, index) {\n  if (element[animationSymbol] == null) {\n    // Not ready yet;\n    return null;\n  }\n  let animation = element[animationSymbol][index];\n  if (!animation) {\n    const item = element.items[index];\n    animation = item.animate(element.selectionAnimationKeyframes, {\n      duration: element.selectionAnimationDuration,\n      fill: 'both'\n    });\n    animation.pause();\n    element[animationSymbol][index] = animation;\n  }\n  return animation;\n}\n\nfunction isItemIndexInBounds(element, index) {\n  return index >= 0 && element.items && index < element.items.length;\n}\n\n/*\n * Render the selection state of the element.\n *\n * This can be used to re-render a previous selection state (if the\n * selectedIndex param is omitted), render the selection instantly at a given\n * whole or fractional selection index, or animate to a given selection index.\n *\n * There are several distinct scenarios we need to cover:\n *\n * 1. Initial positioning, or repositioning after changing a property like\n *    selectionAnimationKeyframes that affects rendering.\n * 2. Animate on selectedIndex change. This should override any animation/swipe\n *    already in progress.\n * 3. Instantly render the current position of a drag operation in progress.\n * 4. Complete a drag operation. If the drag wasn't far enough to affect\n *    selection, we'll just be restoring the selectedFraction to 0.\n *\n * If the list does not wrap, any selection position outside the list's bounds\n * will be damped to produce a visual effect of tension.\n */\nfunction renderSelection(element, selectedIndex=element.selectedIndex, selectedFraction=element.selectedFraction) {\n  const itemCount = element.items ? element.items.length : 0;\n  if (itemCount === 0) {\n    // Nothing to render.\n    return;\n  }\n  if (selectedIndex < 0) {\n    // TODO: Handle no selection.\n    return;\n  }\n  let selection = selectedIndex + selectedFraction;\n  if (element.selectionWraps) {\n    // Apply wrapping to ensure consistent representation of selection.\n    selection = FractionalSelectionMixin.helpers.wrappedSelection(selection, itemCount);\n  } else {\n    // Apply damping if necessary.\n    selection = FractionalSelectionMixin.helpers.dampedSelection(selection, itemCount);\n  }\n  const previousSelection = element[previousSelectionSymbol];\n  // TODO: If an item changes position in the DOM, we end up animating from\n  // its old index to its new index, but we really don't want to animate at all.\n  if (!element[symbols.dragging] && previousSelection != null &&\n      previousSelection !== selection) {\n    // Animate selection from previous state to new state.\n    animateSelection(element, previousSelection, selection);\n  } else if (selectedFraction === 0 && element[playingAnimationSymbol]) {\n    // Already in process of animating to fraction 0. During that process,\n    // ignore subsequent attempts to renderSelection to fraction 0.\n    return;\n  } else {\n    // Render current selection state instantly.\n    renderSelectionInstantly(element, selection);\n  }\n  element[previousSelectionSymbol] = selection;\n}\n\n/*\n * Instantly render (don't animate) the element's items at the given whole or\n * fractional selection index.\n */\nfunction renderSelectionInstantly(element, toSelection) {\n  if (element[resetAnimationsOnNextRenderSymbol]) {\n    resetAnimations(element);\n    element[resetAnimationsOnNextRenderSymbol] = false;\n  }\n  const animationFractions = mixin.helpers.animationFractionsForSelection(element, toSelection);\n  animationFractions.map((animationFraction, index) => {\n    const item = element.items[index];\n    if (animationFraction != null) {\n      showItem(item, true);\n      setAnimationFraction(element, index, animationFraction);\n    } else {\n      showItem(item, false);\n    }\n  });\n}\n\n/*\n * We maintain an array containing an animation per item. This is used for two\n * reasons:\n *\n * * During a drag operation, we want to be able to reuse animations between\n *   drag updates.\n * * When a selection animation completes, we need to be able to leave the\n *   visibile items in a paused state. Later, we'll want to be able to clean up\n *   those animations.\n *\n * Note that this array is sparse: it will only hold up from 0–3 animations at\n * any given point.\n */\nfunction resetAnimations(element) {\n  const animations = element[animationSymbol];\n  if (animations) {\n    // Cancel existing animations to remove the effects they're applying.\n    animations.forEach((animation, index) => {\n      if (animation) {\n        animation.cancel();\n        animations[index] = null;\n      }\n    });\n  }\n  const itemCount = element.items ? element.items.length : 0;\n  if (!animations || animations.length !== itemCount) {\n    // Haven't animated before with this number of items; (re)create array.\n    element[animationSymbol] = new Array(itemCount);\n  }\n}\n\n/*\n * The last animation in our selection animation has completed. Clean up.\n */\nfunction selectionAnimationFinished(element, details) {\n\n  // When the last animation completes, show the next item in the direction\n  // we're going. Waiting to that until this point is a bit of a hack to avoid\n  // having a next item that's higher in the natural z-order obscure other items\n  // during animation.\n  const nextUpIndex = details.nextUpIndex;\n  if (nextUpIndex != null) {\n    if (element[animationSymbol][nextUpIndex]) {\n      // Cancel existing selection animation so we can construct a new one.\n      element[animationSymbol][nextUpIndex].cancel();\n      element[animationSymbol][nextUpIndex] = null;\n    }\n    const animationFraction = details.forward ? 0 : 1;\n    setAnimationFraction(element, nextUpIndex, animationFraction);\n    showItem(element.items[nextUpIndex], true);\n  }\n\n  element[lastAnimationSymbol].onfinish = null;\n  element[playingAnimationSymbol] = false;\n}\n\n/*\n * Pause the indicated animation and have it show the animation at the given\n * fraction (between 0 and 1) of the way through the animation.\n */\nfunction setAnimationFraction(element, itemIndex, fraction) {\n  const animation = getAnimationForItemIndex(element, itemIndex);\n  if (animation) {\n    const duration = element.selectionAnimationDuration;\n    if (duration) {\n      animation.currentTime = fraction * duration;\n    }\n  }\n}\n\nfunction showItem(item, flag) {\n  item.style.visibility = flag ? 'visible' : 'hidden';\n}\n\n/*\n * Figure out how many steps it will take to go from fromSelection to\n * toSelection. To go from item 3 to item 4 is one step.\n *\n * If wrapping is allowed, then going from the last item to the first will take\n * one step (forward), and going from the first item to the last will take one\n * step (backward).\n */\nfunction stepsToIndex(length, allowWrap, fromSelection, toSelection) {\n  let steps = toSelection - fromSelection;\n  // Wrapping only kicks in when list has more than 1 item.\n  if (allowWrap && length > 1) {\n    const wrapSteps = length - Math.abs(steps);\n    if (wrapSteps <= 1) {\n      // Special case\n      steps = steps < 0 ?\n        wrapSteps :   // Wrap forward from last item to first.\n        -wrapSteps;   // Wrap backward from first item to last.\n    }\n  }\n  return steps;\n}\n","import symbols from './symbols';\n\n\n// Used to assign unique IDs to item elements without IDs.\nlet idCount = 0;\n\n\n/* Exported function extends a base class with SelectionAriaActive. */\nexport default (base) => {\n\n  /**\n   * Mixin which treats the selected item in a list as the active item in ARIA\n   * accessibility terms.\n   *\n   * Handling ARIA selection state properly is actually quite complex:\n   *\n   * * The items in the list need to be indicated as possible items via an ARIA\n   *   `role` attribute value such as \"option\".\n   * * The selected item need to be marked as selected by setting the item's\n   *   `aria-selected` attribute to true *and* the other items need be marked as\n   *   *not* selected by setting `aria-selected` to false.\n   * * The outermost element with the keyboard focus needs to have attributes\n   *   set on it so that the selection is knowable at the list level via the\n   *   `aria-activedescendant` attribute.\n   * * Use of `aria-activedescendant` in turn requires that all items in the\n   *   list have ID attributes assigned to them.\n   *\n   * This mixin tries to address all of the above requirements. To that end,\n   * this mixin will assign generated IDs to any item that doesn't already have\n   * an ID.\n   *\n   * ARIA relies on elements to provide `role` attributes. This mixin will apply\n   * a default role of \"listbox\" on the outer list if it doesn't already have an\n   * explicit role. Similarly, this mixin will apply a default role of \"option\"\n   * to any list item that does not already have a role specified.\n   *\n   * This mixin expects a set of members that manage the state of the selection:\n   * `[symbols.itemSelected]`, `itemAdded`, and `selectedIndex`. You can\n   * supply these yourself, or do so via\n   * [SingleSelectionMixin](SingleSelectionMixin.md).\n   */\n  class SelectionAriaActive extends base {\n\n    connectedCallback() {\n      if (super.connectedCallback) { super.connectedCallback(); }\n      // Set default ARIA role.\n      if (this.getAttribute('role') == null && this[symbols.defaults].role) {\n        this.setAttribute('role', this[symbols.defaults].role);\n      }\n    }\n\n    get [symbols.defaults]() {\n      const defaults = super[symbols.defaults] || {};\n      defaults.role = 'listbox';\n      return defaults;\n    }\n\n    [symbols.itemAdded](item) {\n      if (super[symbols.itemAdded]) { super[symbols.itemAdded](item); }\n\n      if (!item.getAttribute('role')) {\n        // Assign a default ARIA role.\n        item.setAttribute('role', 'option');\n      }\n\n      // Ensure each item has an ID so we can set aria-activedescendant on the\n      // overall list whenever the selection changes.\n      //\n      // The ID will take the form of a base ID plus a unique integer. The base\n      // ID will be incorporate the component's own ID. E.g., if a component has\n      // ID \"foo\", then its items will have IDs that look like \"_fooOption1\". If\n      // the compnent has no ID itself, its items will get IDs that look like\n      // \"_option1\". Item IDs are prefixed with an underscore to differentiate\n      // them from manually-assigned IDs, and to minimize the potential for ID\n      // conflicts.\n      if (!item.id) {\n        const baseId = this.id ?\n            \"_\" + this.id + \"Option\" :\n            \"_option\";\n        item.id = baseId + idCount++;\n      }\n    }\n\n    [symbols.itemSelected](item, selected) {\n      if (super[symbols.itemSelected]) { super[symbols.itemSelected](item, selected); }\n      item.setAttribute('aria-selected', selected);\n      const itemId = item.id;\n      if (itemId && selected) {\n        this.setAttribute('aria-activedescendant', itemId);\n      }\n    }\n\n    get selectedItem() {\n      return super.selectedItem;\n    }\n    set selectedItem(item) {\n      if ('selectedItem' in base.prototype) { super.selectedItem = item; }\n      if (item == null) {\n        // Selection was removed.\n        this.removeAttribute('aria-activedescendant');\n      }\n    }\n\n  }\n\n  return SelectionAriaActive;\n};\n","/* Exported function extends a base class with ShadowElementReferences. */\nexport default (base) => {\n\n  /**\n   * Mixin to create references to elements in a component's Shadow DOM subtree.\n   *\n   * This adds a member on the component called `this.$` that can be used to\n   * reference shadow elements with IDs. E.g., if component's shadow contains an\n   * element `<button id=\"foo\">`, then this mixin will create a member\n   * `this.$.foo` that points to that button.\n   *\n   * Such references simplify a component's access to its own elements. In\n   * exchange, this mixin trades off a one-time cost of querying all elements in\n   * the shadow tree instead of paying an ongoing cost to query for an element\n   * each time the component wants to inspect or manipulate it.\n   *\n   * This mixin expects the component to define a Shadow DOM subtree. You can\n   * create that tree yourself, or make use of\n   * [ShadowTemplateMixin](ShadowTemplateMixin.md).\n   *\n   * This mixin is inspired by Polymer's [automatic\n   * node finding](https://www.polymer-project.org/1.0/docs/devguide/local-dom.html#node-finding)\n   * feature.\n   */\n  class ShadowElementReferences extends base {\n\n    constructor() {\n      super();\n      if (this.shadowRoot) {\n        // Look for elements in the shadow subtree that have id attributes.\n        // An alternatively implementation of this mixin would be to just define\n        // a this.$ getter that lazily does this search the first time someone\n        // tries to access this.$. That might introduce some complexity – if the\n        // the tree changed after it was first populated, the result of\n        // searching for a node might be somewhat unpredictable.\n        this.$ = {};\n        const nodesWithIds = this.shadowRoot.querySelectorAll('[id]');\n        [].forEach.call(nodesWithIds, node => {\n          const id = node.getAttribute('id');\n          this.$[id] = node;\n        });\n      }\n    }\n\n    /**\n     * The collection of references to the elements with IDs in a component's\n     * Shadow DOM subtree.\n     *\n     * @type {object}\n     * @member $\n     */\n  }\n\n  return ShadowElementReferences;\n};\n","import symbols from '../src/symbols';\n\n\n/* Exported function extends a base class with ShadowTemplate. */\nexport default (base) => {\n\n  /**\n   * Mixin for stamping a template into a Shadow DOM subtree upon component\n   * instantiation.\n   *\n   * To use this mixin, define a `template` property as a string or HTML\n   * `<template>` element:\n   *\n   *     class MyElement extends ShadowTemplateMixin(HTMLElement) {\n   *       get [symbols.template]() {\n   *         return `Hello, <em>world</em>.`;\n   *       }\n   *     }\n   *\n   * When your component class is instantiated, a shadow root will be created on\n   * the instance, and the contents of the template will be cloned into the\n   * shadow root. If your component does not define a `template` property, this\n   * mixin has no effect.\n   *\n   * For the time being, this extension retains support for Shadow DOM v0. That\n   * will eventually be deprecated as browsers (and the Shadow DOM polyfill)\n   * implement Shadow DOM v1.\n   */\n  class ShadowTemplate extends base {\n\n    /*\n     * If the component defines a template, a shadow root will be created on the\n     * component instance, and the template stamped into it.\n     */\n    constructor() {\n      super();\n      let template = this[symbols.template];\n      // TODO: Save the processed template with the component's class prototype\n      // so it doesn't need to be processed with every instantiation.\n      if (template) {\n\n        if (typeof template === 'string') {\n          // Upgrade plain string to real template.\n          template = createTemplateWithInnerHTML(template);\n        }\n\n        if (window.ShadowDOMPolyfill) {\n          shimTemplateStyles(template, this.localName);\n        }\n\n        const root = this.attachShadow({ mode: 'open' });\n        const clone = document.importNode(template.content, true);\n        root.appendChild(clone);\n      }\n    }\n\n  }\n\n  return ShadowTemplate;\n};\n\n\n// Convert a plain string of HTML into a real template element.\nfunction createTemplateWithInnerHTML(innerHTML) {\n  const template = document.createElement('template');\n  // REVIEW: Is there an easier way to do this?\n  // We'd like to just set innerHTML on the template content, but since it's\n  // a DocumentFragment, that doesn't work.\n  const div = document.createElement('div');\n  div.innerHTML = innerHTML;\n  while (div.childNodes.length > 0) {\n    template.content.appendChild(div.childNodes[0]);\n  }\n  return template;\n}\n\n// Invoke basic style shimming with ShadowCSS.\nfunction shimTemplateStyles(template, tag) {\n  window.WebComponents.ShadowCSS.shimStyling(template.content, tag);\n}\n","import createSymbol from './createSymbol';\nimport symbols from './symbols';\n\n\n// Symbols for private data members on an element.\nconst canSelectNextSymbol = createSymbol('canSelectNext');\nconst canSelectPreviousSymbol = createSymbol('canSelectPrevious');\nconst selectionRequiredSymbol = createSymbol('selectionRequired');\nconst selectionWrapsSymbol = createSymbol('selectionWraps');\n\n// We want to expose both selectedIndex and selectedItem as independent\n// properties but keep them in sync. This allows a component user to reference\n// the selection by whatever means is most natural for their situation.\n//\n// To efficiently keep these properties in sync, we track \"external\" and\n// \"internal\" references for each property:\n//\n// The external index or item is the one we report to the outside world when\n// asked for selection.  When handling a change to index or item, we update the\n// external reference as soon as possible, so that if anyone immediately asks\n// for the current selection, they will receive a stable answer.\n//\n// The internal index or item tracks whichever index or item last received the\n// full set of processing. Processing includes raising a change event for the\n// new value. Once we've begun that processing, we store the new value as the\n// internal value to indicate we've handled it.\n//\nconst externalSelectedIndexSymbol = createSymbol('externalSelectedIndex');\nconst externalSelectedItemSymbol = createSymbol('externalSelectedItem');\nconst internalSelectedIndexSymbol = createSymbol('internalSelectedIndex');\nconst internalSelectedItemSymbol = createSymbol('internalSelectedItem');\n\n\n/* Exported function extends a base class with SingleSelection. */\nexport default (base) => {\n\n  /**\n   * Mixin which manages single-selection semantics for items in a list.\n   *\n   * This mixin expects a component to provide an `items` Array or NodeList of\n   * all elements in the list. A standard way to do that with is the\n   * [ContentItemsMixin](ContentItemsMixin.md), which takes a component's\n   * content (typically its distributed children) as the set of list items; see\n   * that mixin for details.\n   *\n   * This mixin tracks a single selected item in the list, and provides means to\n   * get and set that state by item position (`selectedIndex`) or item identity\n   * (`selectedItem`). The selection can be moved in the list via the methods\n   * `selectFirst`, `selectLast`, `selectNext`, and `selectPrevious`.\n   *\n   * This mixin does not produce any user-visible effects to represent\n   * selection. Other mixins, such as\n   * [SelectionAriaActiveMixin](SelectionAriaActiveMixin.md),\n   * [SelectionHighlightMixin](SelectionHighlightMixin.md) and\n   * [SelectionInViewMixin](SelectionInViewMixin.md), modify the selected item\n   * in common ways to let the user know a given item is selected or not\n   * selected.\n   */\n  class SingleSelection extends base {\n\n    constructor() {\n      super();\n      // Set defaults.\n      if (typeof this.selectionRequired === 'undefined') {\n        this.selectionRequired = this[symbols.defaults].selectionRequired;\n      }\n      if (typeof this.selectionWraps === 'undefined') {\n        this.selectionWraps = this[symbols.defaults].selectionWraps;\n      }\n    }\n\n    /**\n     * True if the selection can be moved to the next item, false if not (the\n     * selected item is the last item in the list).\n     *\n     * @type {boolean}\n     */\n    get canSelectNext() {\n      return this[canSelectNextSymbol];\n    }\n    set canSelectNext(canSelectNext) {\n      const previousCanSelectNext = this[canSelectNextSymbol];\n      this[canSelectNextSymbol] = canSelectNext;\n      if ('canSelectNext' in base.prototype) { super.canSelectNext = canSelectNext; }\n      if (canSelectNext !== previousCanSelectNext) {\n        this.dispatchEvent(new CustomEvent('can-select-next-changed'));\n      }\n    }\n\n    /**\n     * True if the selection can be moved to the previous item, false if not\n     * (the selected item is the first one in the list).\n     *\n     * @type {boolean}\n     */\n    get canSelectPrevious() {\n      return this[canSelectPreviousSymbol];\n    }\n    set canSelectPrevious(canSelectPrevious) {\n      const previousCanSelectPrevious = this[canSelectPreviousSymbol];\n      this[canSelectPreviousSymbol] = canSelectPrevious;\n      if ('canSelectPrevious' in base.prototype) { super.canSelectPrevious = canSelectPrevious; }\n      if (canSelectPrevious !== previousCanSelectPrevious) {\n        this.dispatchEvent(new CustomEvent('can-select-previous-changed'));\n      }\n    }\n\n    get [symbols.defaults]() {\n      const defaults = super[symbols.defaults] || {};\n      defaults.selectionRequired = false;\n      defaults.selectionWraps = false;\n      return defaults;\n    }\n\n    /**\n     * Handle a new item being added to the list.\n     *\n     * The default implementation of this method simply sets the item's\n     * selection state to false.\n     *\n     * @param {HTMLElement} item - the item being added\n     */\n    [symbols.itemAdded](item) {\n      if (super[symbols.itemAdded]) { super[symbols.itemAdded](item); }\n      this[symbols.itemSelected](item, item === this.selectedItem);\n    }\n\n    [symbols.itemsChanged]() {\n      if (super[symbols.itemsChanged]) { super[symbols.itemsChanged](); }\n\n      // In case selected item changed position or was removed.\n      trackSelectedItem(this);\n\n      // In case the change in items affected which navigations are possible.\n      updatePossibleNavigations(this);\n    }\n\n    /**\n     * Apply the indicate selection state to the item.\n     *\n     * The default implementation of this method does nothing. User-visible\n     * effects will typically be handled by other mixins.\n     *\n     * @param {HTMLElement} item - the item being selected/deselected\n     * @param {boolean} selected - true if the item is selected, false if not\n     */\n    [symbols.itemSelected](item, selected) {\n      if (super[symbols.itemSelected]) { super[symbols.itemSelected](item, selected); }\n    }\n\n    /**\n     * The index of the item which is currently selected.\n     *\n     * A `selectedIndex` of -1 indicates there is no selection. Setting this\n     * property to -1 will remove any existing selection.\n     *\n     * @type {number}\n     */\n    get selectedIndex() {\n      return this[externalSelectedIndexSymbol] != null ?\n        this[externalSelectedIndexSymbol] :\n        -1;\n    }\n    set selectedIndex(index) {\n      // See notes at top about internal vs. external copies of this property.\n      const previousSelectedIndex = this[internalSelectedIndexSymbol];\n      let item;\n      if (index !== this[externalSelectedIndexSymbol]) {\n        // Store the new index and the corresponding item.\n        const items = this.items;\n        const hasItems = items && items.length > 0;\n        if (!(hasItems && index >= 0 && index < items.length)) {\n          index = -1; // No item at that index.\n        }\n        this[externalSelectedIndexSymbol] = index;\n        item = hasItems && index >= 0 ? items[index] : null;\n        this[externalSelectedItemSymbol] = item;\n      } else {\n        item = this[externalSelectedItemSymbol];\n      }\n\n      // Now let super do any work.\n      if ('selectedIndex' in base.prototype) { super.selectedIndex = index; }\n\n      if (index !== previousSelectedIndex) {\n        // The selected index changed.\n        this[internalSelectedIndexSymbol] = index;\n\n        const event = new CustomEvent('selected-index-changed', {\n          detail: {\n            selectedIndex: index,\n            value: index // for Polymer binding. TODO: Verify still necessary\n          }\n        });\n        this.dispatchEvent(event);\n      }\n\n      if (this[internalSelectedItemSymbol] !== item) {\n        // Update selectedItem property so it can have its own effects.\n        this.selectedItem = item;\n      }\n    }\n\n    /**\n     * The currently selected item, or null if there is no selection.\n     *\n     * Setting this property to null deselects any currently-selected item.\n     * Setting this property to an object that is not in the list has no effect.\n     *\n     * TODO: Even if selectionRequired, can still explicitly set selectedItem to null.\n     * TODO: If selectionRequired, leave selection alone?\n     *\n     * @type {object}\n     */\n    get selectedItem() {\n      return this[externalSelectedItemSymbol] || null;\n    }\n    set selectedItem(item) {\n      // See notes at top about internal vs. external copies of this property.\n      const previousSelectedItem = this[internalSelectedItemSymbol];\n      let index;\n      if (item !== this[externalSelectedItemSymbol]) {\n        // Store item and look up corresponding index.\n        const items = this.items;\n        const hasItems = items && items.length > 0;\n        index = hasItems ? Array.prototype.indexOf.call(items, item) : -1;\n        this[externalSelectedIndexSymbol] = index;\n        if (index < 0) {\n          item = null; // The indicated item isn't actually in `items`.\n        }\n        this[externalSelectedItemSymbol] = item;\n      } else {\n        index = this[externalSelectedIndexSymbol];\n      }\n\n      // Now let super do any work.\n      if ('selectedItem' in base.prototype) { super.selectedItem = item; }\n\n      if (item !== previousSelectedItem) {\n        // The selected item changed.\n        this[internalSelectedItemSymbol] = item;\n\n        if (previousSelectedItem) {\n          // Update selection state of old item.\n          this[symbols.itemSelected](previousSelectedItem, false);\n        }\n        if (item) {\n          // Update selection state to new item.\n          this[symbols.itemSelected](item, true);\n        }\n\n        updatePossibleNavigations(this);\n\n        const event = new CustomEvent('selected-item-changed', {\n          detail: {\n            selectedItem: item,\n            value: item // for Polymer binding\n          }\n        });\n        this.dispatchEvent(event);\n      }\n\n      if (this[internalSelectedIndexSymbol] !== index) {\n        // Update selectedIndex property so it can have its own effects.\n        this.selectedIndex = index;\n      }\n    }\n\n    /**\n     * Select the first item in the list.\n     */\n    selectFirst() {\n      if (super.selectFirst) { super.selectFirst(); }\n      return selectIndex(this, 0);\n    }\n\n    /**\n     * True if the list should always have a selection (if it has items).\n     *\n     * @type {boolean}\n     * @default false\n     */\n    get selectionRequired() {\n      return this[selectionRequiredSymbol];\n    }\n    set selectionRequired(selectionRequired) {\n      this[selectionRequiredSymbol] = selectionRequired;\n      if ('selectionRequired' in base.prototype) { super.selectionRequired = selectionRequired; }\n      trackSelectedItem(this);\n    }\n\n    /**\n     * True if selection navigations wrap from last to first, and vice versa.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    get selectionWraps() {\n      return this[selectionWrapsSymbol];\n    }\n    set selectionWraps(value) {\n      this[selectionWrapsSymbol] = String(value) === 'true';\n      if ('selectionWraps' in base.prototype) { super.selectionWraps = value; }\n      updatePossibleNavigations(this);\n    }\n\n    /**\n     * Select the last item in the list.\n     */\n    selectLast() {\n      if (super.selectLast) { super.selectLast(); }\n      return selectIndex(this, this.items.length - 1);\n    }\n\n    /**\n     * Select the next item in the list.\n     */\n    selectNext() {\n      if (super.selectNext) { super.selectNext(); }\n      return selectIndex(this, this.selectedIndex + 1);\n    }\n\n    /**\n     * Select the previous item in the list.\n     *\n     * If the list has no selection, the last item will be selected.\n     */\n    selectPrevious() {\n      if (super.selectPrevious) { super.selectPrevious(); }\n      const newIndex = this.selectedIndex < 0 ?\n        this.items.length - 1 :     // No selection yet; select last item.\n        this.selectedIndex - 1;\n      return selectIndex(this, newIndex);\n    }\n\n    /**\n     * Fires when the selectedItem property changes.\n     *\n     * @memberof SingleSelection\n     * @event selected-item-changed\n     * @param {HTMLElement} detail.selectedItem The new selected item.\n     * @param {HTMLElement} detail.previousItem The previously selected item.\n     */\n\n    /**\n     * Fires when the selectedIndex property changes.\n     *\n     * @memberof SingleSelection\n     * @event selected-index-changed\n     * @param {number} detail.selectedIndex The new selected index.\n     */\n\n  }\n\n  return SingleSelection;\n};\n\n\n// Ensure the given index is within bounds, and select it if it's not already\n// selected.\nfunction selectIndex(element, index) {\n  const count = element.items.length;\n\n  const boundedIndex = (element.selectionWraps) ?\n    // JavaScript mod doesn't handle negative numbers the way we want to wrap.\n    // See http://stackoverflow.com/a/18618250/76472\n    ((index % count) + count) % count :\n\n    // Keep index within bounds of array.\n    Math.max(Math.min(index, count - 1), 0);\n\n  const previousIndex = element.selectedIndex;\n  if (previousIndex !== boundedIndex) {\n    element.selectedIndex = boundedIndex;\n    return true;\n  } else {\n    return false;\n  }\n}\n\n// Following a change in the set of items, or in the value of the\n// `selectionRequired` property, reacquire the selected item. If it's moved,\n// update `selectedIndex`. If it's been removed, and a selection is required,\n// try to select another item.\nfunction trackSelectedItem(element) {\n\n  const items = element.items;\n  const itemCount = items ? items.length : 0;\n\n  const previousSelectedItem = element.selectedItem;\n  if (!previousSelectedItem) {\n    // No item was previously selected.\n    if (element.selectionRequired) {\n      // Select the first item by default.\n      element.selectedIndex = 0;\n    }\n  } else if (itemCount === 0) {\n    // We've lost the selection, and there's nothing left to select.\n    element.selectedItem = null;\n  } else {\n    // Try to find the previously-selected item in the current set of items.\n    const indexInCurrentItems = Array.prototype.indexOf.call(items, previousSelectedItem);\n    const previousSelectedIndex = element.selectedIndex;\n    if (indexInCurrentItems < 0) {\n      // Previously-selected item was removed from the items.\n      // Select the item at the same index (if it exists) or as close as possible.\n      const newSelectedIndex = Math.min(previousSelectedIndex, itemCount - 1);\n      // Select by item, since index may be the same, and we want to raise the\n      // selected-item-changed event.\n      element.selectedItem = items[newSelectedIndex];\n    } else if (indexInCurrentItems !== previousSelectedIndex) {\n      // Previously-selected item still there, but changed position.\n      element.selectedIndex = indexInCurrentItems;\n    }\n  }\n}\n\n// Following a change in selection, report whether it's now possible to\n// go next/previous from the given index.\nfunction updatePossibleNavigations(element) {\n  let canSelectNext;\n  let canSelectPrevious;\n  const items = element.items;\n  if (items == null || items.length === 0) {\n    // No items to select.\n    canSelectNext = false;\n    canSelectPrevious = false;\n  } if (element.selectionWraps) {\n    // Since there are items, can always go next/previous.\n    canSelectNext = true;\n    canSelectPrevious = true;\n  } else {\n    const index = element.selectedIndex;\n    if (index < 0 && items.length > 0) {\n      // Special case. If there are items but no selection, declare that it's\n      // always possible to go next/previous to create a selection.\n      canSelectNext = true;\n      canSelectPrevious = true;\n    } else {\n      // Normal case: we have an index in a list that has items.\n      canSelectPrevious = (index > 0);\n      canSelectNext = (index < items.length - 1);\n    }\n  }\n  if (element.canSelectNext !== canSelectNext) {\n    element.canSelectNext = canSelectNext;\n  }\n  if (element.canSelectPrevious !== canSelectPrevious) {\n    element.canSelectPrevious = canSelectPrevious;\n  }\n}\n","import createSymbol from './createSymbol';\nimport symbols from './symbols';\n\n\n// Symbols for private data members on an element.\nconst deltaXSymbol = createSymbol('deltaX');\nconst deltaYSymbol = createSymbol('deltaY');\nconst multiTouchSymbol = createSymbol('multiTouch');\nconst previousXSymbol = createSymbol('previousX');\nconst previousYSymbol = createSymbol('previousY');\nconst startXSymbol = createSymbol('startX');\nconst travelFractionSymbol = createSymbol('travelFraction');\n\n\n/* Exported function extends a base class with SwipeDirection. */\nexport default (base) => {\n\n  /**\n   * Mixin which maps touch gestures (swipe left, swipe right) to direction\n   * semantics (go right, go left).\n   *\n   * By default, this mixin presents no user-visible effects; it just indicates\n   * a direction in which the user is currently swiping or has finished swiping.\n   * To map the direction to a change in selection, use\n   * [DirectionSelectionMixin](DirectionSelectionMixin.md).\n   */\n  class SwipeDirection extends base {\n\n    constructor() {\n      super();\n\n      this.travelFraction = 0;\n\n      // In all touch events, only handle single touches. We don't want to\n      // inadvertently do work when the user's trying to pinch-zoom for example.\n      // TODO: Even better approach than below would be to ignore touches after\n      // the first if the user has already begun a swipe.\n      // TODO: Touch events should probably be factored out into its own mixin.\n      if (window.PointerEvent) {\n        // Prefer listening to standard pointer events.\n        this.addEventListener('pointerdown', event => {\n          if (isEventForPenOrPrimaryTouch(event)) {\n            touchStart(this, event.clientX, event.clientY);\n          }\n        });\n        this.addEventListener('pointermove', event => {\n          if (isEventForPenOrPrimaryTouch(event)) {\n            const handled = touchMove(this, event.clientX, event.clientY);\n            if (handled) {\n              event.preventDefault();\n            }\n          }\n        });\n        this.addEventListener('pointerup', event => {\n          if (isEventForPenOrPrimaryTouch(event)) {\n            touchEnd(this, event.clientX, event.clientY);\n          }\n        });\n      } else {\n        // Pointer events not supported -- listen to older touch events.\n        this.addEventListener('touchstart', event => {\n          if (this[multiTouchSymbol]) {\n            return;\n          } else if (event.touches.length === 1) {\n            const clientX = event.changedTouches[0].clientX;\n            const clientY = event.changedTouches[0].clientY;\n            touchStart(this, clientX, clientY);\n          } else {\n            this[multiTouchSymbol] = true;\n          }\n        });\n        this.addEventListener('touchmove', event => {\n          if (!this[multiTouchSymbol] && event.touches.length === 1) {\n            const clientX = event.changedTouches[0].clientX;\n            const clientY = event.changedTouches[0].clientY;\n            const handled = touchMove(this, clientX, clientY);\n            if (handled) {\n              event.preventDefault();\n            }\n          }\n        });\n        this.addEventListener('touchend', event => {\n          if (event.touches.length === 0) {\n            // All touches removed; gesture is complete.\n            if (!this[multiTouchSymbol]) {\n              // Single-touch swipe has finished.\n              const clientX = event.changedTouches[0].clientX;\n              const clientY = event.changedTouches[0].clientY;\n              touchEnd(this, clientX, clientY);\n            }\n            this[multiTouchSymbol] = false;\n          }\n        });\n      }\n    }\n\n    connectedCallback() {\n      if (super.connectedCallback) { super.connectedCallback(); }\n\n      // For the component to receive PointerEvents in IE/Edge, we need to set\n      // touch-action: none. Only make this change if touch-action is currently\n      // the default value (\"auto\"), in case the developer knows better than we\n      // do what they want in their particular context.\n      if (getComputedStyle(this).touchAction === 'auto') {\n        this.style.touchAction = 'none';\n      }\n    }\n\n    // Default implementation.\n    get [symbols.dragging]() {\n      return super[symbols.dragging];\n    }\n    set [symbols.dragging](value) {\n      if (symbols.dragging in base.prototype) { super[symbols.dragging] = value; }\n    }\n\n    /**\n     * Invoked when the user wants to go/navigate left.\n     * The default implementation of this method does nothing.\n     */\n    [symbols.goLeft]() {\n      if (super[symbols.goLeft]) { return super[symbols.goLeft](); }\n    }\n\n    /**\n     * Invoked when the user wants to go/navigate right.\n     * The default implementation of this method does nothing.\n     */\n    [symbols.goRight]() {\n      if (super[symbols.goRight]) { return super[symbols.goRight](); }\n    }\n\n    /**\n     * The distance the first touchpoint has traveled since the beginning of a\n     * drag, expressed as a fraction of the element's width.\n     *\n     * @type number\n     */\n    get travelFraction() {\n      return this[travelFractionSymbol];\n    }\n    set travelFraction(value) {\n      this[travelFractionSymbol] = value;\n      if ('travelFraction' in base.prototype) { super.travelFraction = value; }\n    }\n\n  }\n\n  return SwipeDirection;\n};\n\n\n// Return true if the pointer event is for the pen, or the primary touch point.\nfunction isEventForPenOrPrimaryTouch(event) {\n  return event.pointerType === 'pen' ||\n      (event.pointerType === 'touch' && event.isPrimary);\n}\n\n/*\n * Invoked when the user has finished a touch operation.\n */\nfunction touchEnd(element, clientX, clientY) {\n  element[symbols.dragging] = false;\n  if (element[deltaXSymbol] >= 20) {\n    // Finished going right at high speed.\n    element[symbols.goLeft]();\n  } else if (element[deltaXSymbol] <= -20) {\n    // Finished going left at high speed.\n    element[symbols.goRight]();\n  } else {\n    // Finished at low speed.\n    trackTo(element, clientX);\n    const travelFraction = element.travelFraction;\n    if (travelFraction >= 0.5) {\n      element[symbols.goRight]();\n    } else if (travelFraction <= -0.5) {\n      element[symbols.goLeft]();\n    }\n  }\n  element.travelFraction = 0;\n  element[deltaXSymbol] = null;\n  element[deltaYSymbol] = null;\n}\n\n/*\n * Invoked when the user has moved during a touch operation.\n */\nfunction touchMove(element, clientX, clientY) {\n\n  element[deltaXSymbol] = clientX - element[previousXSymbol];\n  element[deltaYSymbol] = clientY - element[previousYSymbol];\n  element[previousXSymbol] = clientX;\n  element[previousYSymbol] = clientY;\n  if (Math.abs(element[deltaXSymbol]) > Math.abs(element[deltaYSymbol])) {\n    // Move was mostly horizontal.\n    trackTo(element, clientX);\n    // Indicate that the event was handled. It'd be nicer if we didn't have\n    // to do this so that, e.g., a user could be swiping left and right\n    // while simultaneously scrolling up and down. (Native touch apps can do\n    // that.) However, Mobile Safari wants to handle swipe events near the\n    // page and interpret them as navigations. To avoid having a horiziontal\n    // swipe misintepreted as a navigation, we indicate that we've handled\n    // the event, and prevent default behavior.\n    return true;\n  } else {\n    // Move was mostly vertical.\n    return false; // Not handled\n  }\n}\n\n/*\n * Invoked when the user has begun a touch operation.\n */\nfunction touchStart(element, clientX, clientY) {\n  element[symbols.dragging] = true;\n  element[startXSymbol] = clientX;\n  element[previousXSymbol] = clientX;\n  element[previousYSymbol] = clientY;\n  element[deltaXSymbol] = 0;\n  element[deltaYSymbol] = 0;\n}\n\nfunction trackTo(element, x) {\n  const width = element.offsetWidth;\n  const dragDistance = element[startXSymbol] - x;\n  const fraction = width > 0 ?\n    dragDistance / width :\n    0;\n  element.travelFraction = fraction;\n}\n","import createSymbol from '../../basic-component-mixins/src/createSymbol';\nimport symbols from './symbols';\n\n\n// Symbols for private data members on an element.\nconst absorbDecelerationSymbol = createSymbol('absorbDeceleration');\nconst lastDeltaXSymbol = createSymbol('lastDeltaX');\nconst lastWheelTimeoutSymbol = createSymbol('lastWheelTimeout');\nconst postNavigateDelayCompleteSymbol = createSymbol('postNavigateDelayComplete');\nconst wheelDistanceSymbol = createSymbol('wheelDistance');\n\n\n/* Exported function extends a base class with TrackpadDirection. */\nexport default (base) => {\n\n  /**\n   * Mixin which maps a horizontal trackpad swipe gestures (or horizontal mouse\n   * wheel actions) to direction semantics.\n   *\n   * You can use this mixin with a mixin like\n   * [DirectionSelectionMixin](DirectionSelectionMixin.md) to let the user\n   * change the selection with the trackpad or mouse wheel.\n   *\n   * To respond to the trackpad, we can listen to the DOM's \"wheel\" events.\n   * These events are fired as the user drags their fingers across a trackpad.\n   * Unfortunately, browsers are missing a critical event — there is no event\n   * when the user *stops* a gestured on the trackpad or mouse wheel.\n   *\n   * To make things worse, the mainstream browsers continue to generate fake\n   * wheel events even after the user has stopped dragging their fingers. These\n   * fake events simulate the user gradually slowing down the drag until they\n   * come to a smooth stop. In some contexts, these fake wheel events might be\n   * helpful, but in trying to supply typical trackpad swipe navigation, these\n   * fake events get in the way.\n   *\n   * This component uses heuristics to work around these problems, but the\n   * complex nature of the problem make it extremely difficult to achieve the\n   * same degree of trackpad responsiveness possible with native applications.\n   */\n  class TrackpadDirection extends base {\n\n    constructor() {\n      super();\n      this.addEventListener('wheel', event => {\n        const handled = wheel(this, event);\n        if (handled) {\n          event.preventDefault();\n        }\n      });\n      resetWheelTracking(this);\n    }\n\n    // Default implementation.\n    get [symbols.dragging]() {\n      return super[symbols.dragging];\n    }\n    set [symbols.dragging](value) {\n      if (symbols.dragging in base.prototype) { super[symbols.dragging] = value; }\n    }\n\n    /**\n     * Invoked when the user wants to go/navigate left.\n     * The default implementation of this method does nothing.\n     */\n    [symbols.goLeft]() {\n      if (super[symbols.goLeft]) { return super[symbols.goLeft](); }\n    }\n\n    /**\n     * Invoked when the user wants to go/navigate right.\n     * The default implementation of this method does nothing.\n     */\n    [symbols.goRight]() {\n      if (super[symbols.goRight]) { return super[symbols.goRight](); }\n    }\n\n    /**\n     * The distance the user has moved the first touchpoint since the beginning\n     * of a trackpad/wheel operation, expressed as a fraction of the element's\n     * width.\n     *\n     * @type number\n     */\n    get travelFraction() {\n      return super.travelFraction;\n    }\n    set travelFraction(value) {\n      if ('travelFraction' in base.prototype) { super.travelFraction = value; }\n    }\n\n  }\n\n  return TrackpadDirection;\n};\n\n\n// Time we wait following a navigation before paying attention to wheel\n// events again.\nconst POST_NAVIGATE_TIME = 250;\n\n// Time we wait after the last wheel event before we reset things.\nconst WHEEL_TIME = 100;\n\n\n// Following a navigation, partially reset our wheel tracking.\nfunction postNavigate(element) {\n  element.travelFraction = 0;\n  element[wheelDistanceSymbol] = 0;\n  element[postNavigateDelayCompleteSymbol] = true;\n  element[absorbDecelerationSymbol] = true;\n  setTimeout(() => {\n    element[postNavigateDelayCompleteSymbol] = false;\n  }, POST_NAVIGATE_TIME);\n}\n\n// Reset all state related to the tracking of the wheel.\nfunction resetWheelTracking(element) {\n  element.travelFraction = 0;\n  element[wheelDistanceSymbol] = 0;\n  element[lastDeltaXSymbol] = 0;\n  element[absorbDecelerationSymbol] = false;\n  element[postNavigateDelayCompleteSymbol] = false;\n  if (element[lastWheelTimeoutSymbol]) {\n    clearTimeout(element[lastWheelTimeoutSymbol]);\n    element[lastWheelTimeoutSymbol] = null;\n  }\n}\n\n// Define our own sign function, since (as of May 2015), Safari and IE don't\n// supply Math.sign().\nfunction sign(x) {\n  return (x === 0) ?\n    0 :\n    (x > 0) ?\n      1 :\n      -1;\n}\n\n// TODO: Damping, or some other treatment for going past the ends.\n\n/*\n * A wheel event has been generated. This could be a real wheel event, or it\n * could be fake (see notes in the header).\n *\n * This handler uses several strategies to try to approximate native trackpad\n * swipe navigation.\n *\n * If the user has dragged enough to cause a navigation, then for a short\n * delay following that navigation, subsequent wheel events will be ignored.\n *\n * Furthermore, follwowing a navigation, we ignore all wheel events until we\n * receive at least one event where the event's deltaX (distance traveled) is\n * *greater* than the previous event's deltaX. This helps us filter out the\n * fake wheel events generated by the browser to simulate deceleration.\n *\n */\nfunction wheel(element, event) {\n\n  // Since we have a new wheel event, reset our timer waiting for the last\n  // wheel event to pass.\n  if (element[lastWheelTimeoutSymbol]) {\n    clearTimeout(element[lastWheelTimeoutSymbol]);\n  }\n  element[lastWheelTimeoutSymbol] = setTimeout(() => {\n    wheelTimedOut(element);\n  }, WHEEL_TIME);\n\n  const deltaX = event.deltaX;\n  const deltaY = event.deltaY;\n\n  // See if element event represents acceleration or deceleration.\n  const acceleration = sign(deltaX) * (deltaX - element[lastDeltaXSymbol]);\n  element[lastDeltaXSymbol] = deltaX;\n\n  if (Math.abs(deltaX) < Math.abs(deltaY)) {\n    // Move was mostly vertical. The user may be trying scroll with the\n    // trackpad/wheel. To be on the safe, we ignore such events.\n    return false;\n  }\n\n  if (element[postNavigateDelayCompleteSymbol]) {\n    // It's too soon after a navigation; ignore the event.\n    return true;\n  }\n\n  if (acceleration > 0) {\n    // The events are not (or are no longer) decelerating, so we can start\n    // paying attention to them again.\n    element[absorbDecelerationSymbol] = false;\n  } else if (element[absorbDecelerationSymbol]) {\n    // The wheel event was likely faked to simulate deceleration; ignore it.\n    return true;\n  }\n\n  element[wheelDistanceSymbol] += deltaX;\n\n  // Update the travel fraction of the element being navigated.\n  const width = element.offsetWidth;\n  let travelFraction = width > 0 ?\n    element[wheelDistanceSymbol] / width :\n    0;\n  element[symbols.dragging] = true;\n  travelFraction = sign(travelFraction) * Math.min(Math.abs(travelFraction), 1);\n  element.travelFraction = travelFraction;\n\n  // If the user has dragged enough to reach the previous/next item, then\n  // complete a navigation to that item.\n  if (travelFraction === 1) {\n    element[symbols.dragging] = false;\n    element[symbols.goRight]();\n    postNavigate(element);\n  } else if (travelFraction === -1) {\n    element[symbols.dragging] = false;\n    element[symbols.goLeft]();\n    postNavigate(element);\n  }\n\n  return true;\n}\n\n// A sufficiently long period of time has passed since the last wheel event.\n// We snap the selection to the closest item, then reset our state.\nfunction wheelTimedOut(element) {\n\n  // Snap to the closest item.\n  element[symbols.dragging] = false;\n  const travelFraction = element.travelFraction;\n  if (travelFraction >= 0.5) {\n    element[symbols.goRight]();\n  } else if (travelFraction <= -0.5) {\n    element[symbols.goLeft]();\n  }\n\n  // TODO: Listen for the transition to complete, and then restore\n  // dragging to false (or the previous value).\n\n  resetWheelTracking(element);\n}\n","/**\n * Helper function to create a symbol that can be used for associating private\n * data with an element.\n *\n * Mixins and component classes often want to associate private data with an\n * element instance, but JavaScript does not have direct support for true\n * private properties. One approach is to use the\n * [Symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol)\n * data type to set and retrieve data on an element.\n *\n * Unfortunately, the Symbol type is not available in Internet Explorer 11. The\n * `createSymbol` helper function exists as a workaround for IE 11. Rather than\n * returning a true Symbol, it simply returns an underscore-prefixed string.\n *\n * Usage:\n *\n *     const fooSymbol = createSymbol('foo');\n *\n *     class MyElement extends HTMLElement {\n *       get foo() {\n *         return this[fooSymbol];\n *       }\n *       set foo(value) {\n *         this[fooSymbol] = value;\n *       }\n *     }\n *\n * In IE 11, this sample will \"hide\" data behind an instance property this._foo.\n * The use of the underscore is meant to reduce (not eliminate) the potential\n * for name conflicts, and discourage (not prevent) external access to this\n * data. In modern browsers, the above code will eliminate the potential of\n * naming conflicts, and better hide the data behind a real Symbol.\n *\n * @function createSymbol\n * @param {string} description - A string to identify the symbol when debugging\n */\nexport default function createSymbol(description) {\n  return typeof Symbol === 'function' ?\n    Symbol(description) :\n    `_${description}`;\n}\n","/*\n * Microtask helper for IE 11.\n *\n * Executing a function as a microtask is trivial in browsers that support\n * promises, whose then() clauses use microtask timing. IE 11 doesn't support\n * promises, but does support MutationObservers, which are also executed as\n * microtasks. So this helper uses an MutationObserver to achieve microtask\n * timing.\n *\n * See https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/\n *\n * Inspired by Polymer's async() function.\n */\n\n\n// The queue of pending callbacks to be executed as microtasks.\nconst callbacks = [];\n\n// Create an element that we will modify to force observable mutations.\nconst element = document.createTextNode('');\n\n// A monotonically-increasing value.\nlet counter = 0;\n\n\n/**\n * Add a callback to the microtask queue.\n *\n * This uses a MutationObserver so that it works on IE 11.\n *\n * NOTE: IE 11 may actually use timeout timing with MutationObservers. This\n * needs more investigation.\n *\n * @function microtask\n * @param {function} callback\n */\nexport default function microtask(callback) {\n  callbacks.push(callback);\n  // Force a mutation.\n  element.textContent = ++counter;\n}\n\n\n// Execute any pending callbacks.\nfunction executeCallbacks() {\n  while (callbacks.length > 0) {\n    const callback = callbacks.shift();\n    callback();\n  }\n}\n\n\n// Create the observer.\nconst observer = new MutationObserver(executeCallbacks);\nobserver.observe(element, {\n  characterData: true\n});\n","import createSymbol from './createSymbol';\nimport toggleClass from './toggleClass';\n\n\n// Symbols for private data members on an element.\nconst safeToSetAttributesSymbol = createSymbol('safeToSetAttributes');\nconst pendingAttributesSymbol = createSymbol('pendingAttributes');\nconst pendingClassesSymbol = createSymbol('pendingClasses');\n\n\n/**\n * Helper functions for updating attributes, including the `class` attribute.\n */\nexport default {\n\n  /**\n   * Perform any pending updates to attributes and classes.\n   *\n   * This writes any `setAttribute` or `toggleClass` values that were performed\n   * before an element was attached to the document for the first time.\n   *\n   * This method should be called by mixins/components in their\n   * `connectedCallback`. If mulitple mixins/components invoke this during the\n   * same `connectedCallback`, only the first call will have any effect. The\n   * subsequent calls will be harmless.\n   *\n   * @param {HTMLElement} element - The element being added to the document.\n   */\n  connected(element) {\n    element[safeToSetAttributesSymbol] = true;\n\n    // Set any pending attributes.\n    if (element[pendingAttributesSymbol]) {\n      for (let attribute in element[pendingAttributesSymbol]) {\n        const value = element[pendingAttributesSymbol][attribute];\n        setAttributeToElement(element, attribute, value);\n      }\n      element[pendingAttributesSymbol] = null;\n    }\n\n    // Set any pending classes.\n    if (element[pendingClassesSymbol]) {\n      for (let className in element[pendingClassesSymbol]) {\n        const value = element[pendingClassesSymbol][className];\n        toggleClass(element, className, value);\n      }\n      element[pendingClassesSymbol] = null;\n    }\n  },\n\n  /**\n   * Set/unset the attribute with the indicated name.\n   *\n   * This method exists primarily to handle the case where an element wants to\n   * set a default property value that should be reflected as an attribute. An\n   * important limitation of custom element consturctors is that they cannot\n   * set attributes. A call to `setAttribute` during the constructor will\n   * be deferred until the element is connected to the document.\n   *\n   * @param {string} attribute - The name of the *attribute* (not property) to set.\n   * @param {object} value - The value to set. If null, the attribute will be removed.\n   */\n  setAttribute(element, attribute, value) {\n    if (element[safeToSetAttributesSymbol]) {\n      // Safe to set attributes immediately.\n      setAttributeToElement(element, attribute, value);\n    } else {\n      // Defer setting attributes until the first time we're connected.\n      if (!element[pendingAttributesSymbol]) {\n        element[pendingAttributesSymbol] = {};\n      }\n      element[pendingAttributesSymbol][attribute] = value;\n    }\n  },\n\n  /**\n   * Set/unset the class with the indicated name.\n   *\n   * This method exists primarily to handle the case where an element wants to\n   * set a default property value that should be reflected as as class. An\n   * important limitation of custom element consturctors is that they cannot\n   * set attributes, including the `class` attribute. A call to\n   * `toggleClass` during the constructor will be deferred until the element\n   * is connected to the document.\n   *\n   * @param {string} className - The name of the class to set.\n   * @param {object} value - True to set the class, false to remove it.\n   */\n  toggleClass(element, className, value) {\n    if (element[safeToSetAttributesSymbol]) {\n      // Safe to set class immediately.\n      toggleClass(element, className, value);\n    } else {\n      // Defer setting class until the first time we're connected.\n      if (!element[pendingClassesSymbol]) {\n        element[pendingClassesSymbol] = {};\n      }\n      element[pendingClassesSymbol][className] = value;\n    }\n  }\n\n};\n\n\n// Reflect the attribute to the given element.\n// If the value is null, remove the attribute.\nfunction setAttributeToElement(element, attributeName, value) {\n  if (value === null || typeof value === 'undefined') {\n    element.removeAttribute(attributeName);\n  } else {\n    const text = String(value);\n    // Avoid recursive attributeChangedCallback calls.\n    if (element.getAttribute(attributeName) !== text) {\n      element.setAttribute(attributeName, value);\n    }\n  }\n}\n","import createSymbol from './createSymbol';\n\n/**\n * A collection of Symbol objects for standard component properties and methods.\n *\n * These Symbol objects are used to allow mixins and a component to internally\n * communicate, without exposing these properties and methods in the component's\n * public API.\n *\n * To use these Symbol objects in your own component, include this module and\n * then create a property or method whose key is the desired Symbol.\n *\n *     import 'SingleSelectionMixin' from 'basic-component-mixins/src/SingleSelectionMixin';\n *     import 'symbols' from 'basic-component-mixins/src/symbols';\n *\n *     class MyElement extends SingleSelectionMixin(HTMLElement) {\n *       [symbols.itemSelected](item, selected) {\n *         // This will be invoked whenever an item is selected/deselected.\n *       }\n *     }\n *\n * @module symbols\n */\nconst symbols = {\n\n  /**\n   * Symbol for the `defaults` property.\n   *\n   * This property can be used to set or override defaults that will be applied\n   * to a new component instance. When implementing this property, take care to\n   * first acquire any defaults defined by the superclass. The standard idiom is\n   * as follows:\n   *\n   *     get [symbols.defaults]() {\n   *       const defaults = super[symbols.defaults] || {};\n   *       // Set or override default values here\n   *       defaults.customProperty = false;\n   *       return defaults;\n   *     }\n   *\n   * @var {object} defaults\n   */\n  defaults: createSymbol('defaults'),\n\n  /**\n   * Symbol for the `dragging` property.\n   *\n   * Components like carousels often define animated CSS transitions for\n   * sliding effects. Such a transition should usually *not* be applied while\n   * the user is dragging, because a CSS animation will introduce a lag that\n   * makes the swipe feel sluggish. Instead, as long as the user is dragging\n   * with their finger down, the transition should be suppressed. When the\n   * user releases their finger, the transition can be restored, allowing the\n   * animation to show the carousel sliding into its final position.\n   *\n   * @type {boolean} true if a drag is in progress, false if not.\n   */\n  dragging: createSymbol('dragging'),\n\n  /**\n   * Symbol for the `goDown` method.\n   *\n   * This method is invoked when the user wants to go/navigate down.\n   *\n   * @function goDown\n   */\n  goDown: createSymbol('goDown'),\n\n  /**\n   * Symbol for the `goEnd` method.\n   *\n   * This method is invoked when the user wants to go/navigate to the end (e.g.,\n   * of a list).\n   *\n   * @function goEnd\n   */\n  goEnd: createSymbol('goEnd'),\n\n  /**\n   * Symbol for the `goLeft` method.\n   *\n   * This method is invoked when the user wants to go/navigate left.\n   *\n   * @function goLeft\n   */\n  goLeft: createSymbol('goLeft'),\n\n  /**\n   * Symbol for the `goRight` method.\n   *\n   * This method is invoked when the user wants to go/navigate right.\n   *\n   * @function goRight\n   */\n  goRight: createSymbol('goRight'),\n\n  /**\n   * Symbol for the `goStart` method.\n   *\n   * This method is invoked when the user wants to go/navigate to the start\n   * (e.g., of a list).\n   *\n   * @function goStart\n   */\n  goStart: createSymbol('goStart'),\n\n  /**\n   * Symbol for the `goUp` method.\n   *\n   * This method is invoked when the user wants to go/navigate up.\n   *\n   * @function goUp\n   */\n  goUp: createSymbol('goUp'),\n\n  /**\n   * Symbol for the `itemAdded` method.\n   *\n   * This method is invoked when a new item is added to a list.\n   *\n   * @function itemAdded\n   * @param {HTMLElement} item - the item being selected/deselected\n   */\n  itemAdded: createSymbol('itemAdded'),\n\n\n  /**\n   * Symbol for the `itemsChanged` method.\n   *\n   * This method is invoked when the underlying contents change. It is also\n   * invoked on component initialization – since the items have \"changed\" from\n   * being nothing.\n   */\n  itemsChanged: createSymbol('itemsChanged'),\n\n  /**\n   * Symbol for the `itemSelected` method.\n   *\n   * This method is invoked when an item becomes selected or deselected.\n   *\n   * @function itemSelected\n   * @param {HTMLElement} item - the item being selected/deselected\n   * @param {boolean} selected - true if the item is selected, false if not\n   */\n  itemSelected: createSymbol('itemSelected'),\n\n  /**\n   * Symbol for the `keydown` method.\n   *\n   * This method is invoked when an element receives a `keydown` event.\n   *\n   * @function keydown\n   * @param {KeyboardEvent} event - the event being processed\n   */\n  keydown: createSymbol('keydown'),\n\n  /**\n   * Symbol for the `template` property.\n   *\n   * This property returns a component's template.\n   *\n   * @type {string|HTMLElement}\n   */\n  template: createSymbol('template')\n};\n\nexport default symbols;\n","/**\n * Helper function for standard classList.toggle() behavior on old browsers,\n * namely IE 11.\n *\n * The standard\n * [classlist](https://developer.mozilla.org/en-US/docs/Web/API/Element/classList)\n * object has a `toggle()` function that supports a second Boolean parameter\n * that can be used to succinctly turn a class on or off. This feature is often\n * useful in designing custom elements, which may want to externally reflect\n * component state in a CSS class that can be used for styling purposes.\n *\n * Unfortunately, IE 11 does not support the Boolean parameter to\n * `classList.toggle()`. This helper function behaves like the standard\n * `toggle()`, including support for the Boolean parameter, so that it can be\n * used even on IE 11.\n *\n * @function toggleClass\n * @param {HTMLElement} element - The element to modify\n * @param {string} className - The class to add/remove\n * @param {boolean} [force] - Force the class to be added (if true) or removed\n *                            (if false)\n */\nexport default function toggleClass(element, className, force) {\n  const classList = element.classList;\n  const addClass = (typeof force === 'undefined') ?\n    !classList.contains(className) :\n    force;\n  if (addClass) {\n    classList.add(className);\n  } else {\n    classList.remove(className);\n  }\n  return addClass;\n}\n","import AttributeMarshallingMixin from '../../basic-component-mixins/src/AttributeMarshallingMixin';\nimport ComposableMixin from '../../basic-component-mixins/src/ComposableMixin';\nimport DistributedChildrenMixin from '../../basic-component-mixins/src/DistributedChildrenMixin';\nimport ShadowElementReferencesMixin from '../../basic-component-mixins/src/ShadowElementReferencesMixin';\nimport ShadowTemplateMixin from '../../basic-component-mixins/src/ShadowTemplateMixin';\n\n\n/**\n * A sample general-purpose base class for defining custom elements that mixes\n * in some common features: template stamping into a shadow root, shadow element\n * references, marshalling attributes to properties, and retrieving the children\n * distributed to a component.\n *\n * This base class is not special in any way, and is defined only as a\n * convenient shorthand for applying the mixins listed above. You can use this\n * class as a base class for your own elements, or easily create your own base\n * class by applying the same set of mixins.\n *\n * The ElementBase base class does not register itself as a custom element with\n * the browser, and hence cannot be independently instantiated.\n *\n * @mixes AttributeMarshallingMixin\n * @mixes ComposableMixin\n * @mixes DistributedChildrenMixin\n * @mixes ShadowElementReferencesMixin\n * @mixes ShadowTemplateMixin\n */\nclass ElementBase extends ComposableMixin(HTMLElement).compose(\n  ShadowTemplateMixin,          // before node finding, so shadow root is populated\n  ShadowElementReferencesMixin, // before marshalling, so properties can use refs\n  AttributeMarshallingMixin,\n  DistributedChildrenMixin\n) {}\n\nexport default ElementBase;\n"]}