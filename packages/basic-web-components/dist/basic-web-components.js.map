{"version":3,"sources":["node_modules/browser-pack/_prelude.js","packages/basic-animation-stage/globals.js","packages/basic-animation-stage/src/AnimationStage.js","packages/basic-autosize-textarea/globals.js","packages/basic-autosize-textarea/src/AutosizeTextarea.js","packages/basic-carousel/globals.js","packages/basic-carousel/src/Carousel.js","packages/basic-collapsible-panel/globals.js","packages/basic-collapsible-panel/src/CollapsiblePanel.js","packages/basic-component-mixins/globals.js","packages/basic-component-mixins/src/ArrowSelectionMixin.js","packages/basic-component-mixins/src/AttributeMarshallingMixin.js","packages/basic-component-mixins/src/ClickSelectionMixin.js","packages/basic-component-mixins/src/ComposableMixin.js","packages/basic-component-mixins/src/ContentItemsMixin.js","packages/basic-component-mixins/src/DirectionSelectionMixin.js","packages/basic-component-mixins/src/DistributedChildrenContentMixin.js","packages/basic-component-mixins/src/DistributedChildrenMixin.js","packages/basic-component-mixins/src/FractionalSelectionMixin.js","packages/basic-component-mixins/src/GenericMixin.js","packages/basic-component-mixins/src/KeyboardDirectionMixin.js","packages/basic-component-mixins/src/KeyboardMixin.js","packages/basic-component-mixins/src/KeyboardPagedSelectionMixin.js","packages/basic-component-mixins/src/KeyboardPrefixSelectionMixin.js","packages/basic-component-mixins/src/OpenCloseMixin.js","packages/basic-component-mixins/src/PageDotsMixin.js","packages/basic-component-mixins/src/PlayControlsMixin.js","packages/basic-component-mixins/src/SelectedItemTextValueMixin.js","packages/basic-component-mixins/src/SelectionAnimationMixin.js","packages/basic-component-mixins/src/SelectionAriaActiveMixin.js","packages/basic-component-mixins/src/SelectionHighlightMixin.js","packages/basic-component-mixins/src/SelectionInViewMixin.js","packages/basic-component-mixins/src/ShadowElementReferencesMixin.js","packages/basic-component-mixins/src/ShadowTemplateMixin.js","packages/basic-component-mixins/src/SingleSelectionMixin.js","packages/basic-component-mixins/src/SwipeDirectionMixin.js","packages/basic-component-mixins/src/TimerSelectionMixin.js","packages/basic-component-mixins/src/TrackpadDirectionMixin.js","packages/basic-component-mixins/src/createSymbol.js","packages/basic-component-mixins/src/microtask.js","packages/basic-component-mixins/src/renderArrayAsElements.js","packages/basic-component-mixins/src/safeAttributes.js","packages/basic-component-mixins/src/symbols.js","packages/basic-component-mixins/src/toggleClass.js","packages/basic-current-anchor/globals.js","packages/basic-current-anchor/src/CurrentAnchor.js","packages/basic-element-base/globals.js","packages/basic-element-base/src/ElementBase.js","packages/basic-fade-overflow/globals.js","packages/basic-fade-overflow/src/FadeOverflow.js","packages/basic-list-box/globals.js","packages/basic-list-box/src/ListBox.js","packages/basic-modes/globals.js","packages/basic-modes/src/Modes.js","packages/basic-slideshow-with-controls/globals.js","packages/basic-slideshow-with-controls/src/SlideshowWithControls.js","packages/basic-slideshow/globals.js","packages/basic-slideshow/src/Slideshow.js","packages/basic-sliding-carousel/globals.js","packages/basic-sliding-carousel/src/SlidingCarousel.js","packages/basic-sliding-viewport/globals.js","packages/basic-sliding-viewport/src/SlidingViewport.js","packages/basic-spread-items/globals.js","packages/basic-spread-items/src/SpreadItems.js","packages/basic-tab-strip/globals.js","packages/basic-tab-strip/src/TabStrip.js","packages/basic-tab-strip/src/TabStripMixin.js","packages/basic-tabs/globals.js","packages/basic-tabs/src/Tabs.js","packages/basic-web-components/globals.js","packages/basic-wrapped-standard-element/globals.js","packages/basic-wrapped-standard-element/src/WrappedStandardElement.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","_AnimationStage","window","Basic","AnimationStage","_AnimationStage2","default","_ElementBase","_ContentItemsMixin","_DistributedChildrenContentMixin","_FractionalSelectionMixin","_SelectionAnimationMixin","_SelectionAriaActiveMixin","_SingleSelectionMixin","_symbols","base","_ElementBase2","compose","_ContentItemsMixin2","_DistributedChildrenContentMixin2","_FractionalSelectionMixin2","_SelectionAnimationMixin2","_SelectionAriaActiveMixin2","_SingleSelectionMixin2","_symbols2","defaults","_get","prototype","__proto__","Object","getPrototypeOf","this","selectionRequired","template","customElements","define","_AutosizeTextarea","AutosizeTextarea","_AutosizeTextarea2","getTextContent","element","text","distributedTextContent","trim","initializeWhenRendered","clientHeight","setTimeout","textBoxStyle","getComputedStyle","inner","copyContainerStyle","$","copyContainer","style","borderBottomStyle","borderBottomWidth","borderLeftStyle","borderLeftWidth","borderRightStyle","borderRightWidth","borderTopStyle","borderTopWidth","paddingBottom","paddingLeft","paddingRight","paddingTop","extraLine","display","lineHeightSymbol","setMinimumHeight","keypress","event","keyCode","outerHeight","getBoundingClientRect","height","parseFloat","innerHeight","bordersPlusPadding","minHeight","minimumRows","Math","ceil","unescapeHtml","html","replace","valueChanged","autoSize","dispatchEvent","CustomEvent","_createSymbol","_WrappedStandardElement","_GenericMixin","_createSymbol2","minimumRowsSymbol","valueTracksContentSymbol","_WrappedStandardElement2","wrap","_GenericMixin2","_classCallCheck","_this","_possibleConstructorReturn","addEventListener","textCopy","textContent","value","parseInt","_Carousel","Carousel","_Carousel2","_DirectionSelectionMixin","_KeyboardDirectionMixin","_KeyboardMixin","_SwipeDirectionMixin","_TrackpadDirectionMixin","_DirectionSelectionMixin2","_KeyboardMixin2","_KeyboardDirectionMixin2","_SwipeDirectionMixin2","_TrackpadDirectionMixin2","navigationAxis","selectionAnimationEffect","_CollapsiblePanel","CollapsiblePanel","_CollapsiblePanel2","_OpenCloseMixin2","overflow","closed","classList","remove","closing","naturalHeight","container","oldHeight","offsetHeight","add","newHeight","_OpenCloseMixin3","_ArrowSelectionMixin","_AttributeMarshallingMixin","_ClickSelectionMixin","_ComposableMixin","_DistributedChildrenMixin","_KeyboardPagedSelectionMixin","_KeyboardPrefixSelectionMixin","_microtask","_PageDotsMixin","_PlayControlsMixin","_safeAttributes","_SelectionHighlightMixin","_SelectionInViewMixin","_ShadowElementReferencesMixin","_ShadowTemplateMixin","_TimerSelectionMixin","ArrowSelectionMixin","_ArrowSelectionMixin2","AttributeMarshallingMixin","_AttributeMarshallingMixin2","ClickSelectionMixin","_ClickSelectionMixin2","ComposableMixin","_ComposableMixin2","ContentItemsMixin","createSymbol","DirectionSelectionMixin","DistributedChildrenMixin","_DistributedChildrenMixin2","DistributedChildrenContentMixin","generic","KeyboardMixin","KeyboardDirectionMixin","KeyboardPagedSelectionMixin","_KeyboardPagedSelectionMixin2","KeyboardPrefixSelectionMixin","_KeyboardPrefixSelectionMixin2","microtask","_microtask2","PageDotsMixin","_PageDotsMixin2","PlayControlsMixin","_PlayControlsMixin2","safeAttributes","_safeAttributes2","SelectionAnimationMixin","SelectionAriaActiveMixin","SelectionHighlightMixin","_SelectionHighlightMixin2","SelectionInViewMixin","_SelectionInViewMixin2","ShadowElementReferencesMixin","_ShadowElementReferencesMixin2","ShadowTemplateMixin","_ShadowTemplateMixin2","SingleSelectionMixin","SwipeDirectionMixin","symbols","TimerSelectionMixin","_TimerSelectionMixin2","TrackpadDirectionMixin","assumeButtonFocus","button","focus","preventDefault","deviceSupportsTouch","DocumentTouch","document","listenForMouse","mousedownListenerSymbol","mouseTimeoutSymbol","clearTimeout","lastMouseXSymbol","pageX","lastMouseYSymbol","pageY","mousemoveListenerSymbol","mouseDetected","showArrows","removeEventListener","ArrowSelection","_base","buttonLeft","selectPrevious","stopPropagation","buttonRight","selectNext","_inherits","_createClass","key","contains","get","set","canSelectNext","_set","disabled","canSelectPrevious","baseTemplate","attributeToPropertyName","attributeName","propertyName","attributeToPropertyNames","hypenRegEx","match","toUpperCase","attributesForClass","classFn","HTMLElement","baseClass","constructor","baseAttributes","propertyNames","getOwnPropertyNames","setterNames","filter","getOwnPropertyDescriptor","attributes","map","setterName","propertyNameToAttribute","diff","attribute","indexOf","concat","propertyNamesToAttributes","uppercaseRegEx","toLowerCase","AttributeMarshalling","apply","arguments","oldValue","newValue","connected","setAttribute","className","toggleClass","indexOfContainingItem","target","items","itemCount","item","ClickSelection","path","index","selectedIndex","composeClass","mixin","Subclass","_base2","copyOwnProperties","NON_MIXABLE_OBJECT_PROPERTIES","source","ignorePropertyNames","undefined","forEach","name","descriptor","defineProperty","Composable","_len","mixins","Array","_key","reduce","filterAuxiliaryElements","auxiliaryTags","localName","_toggleClass","itemsSymbol","itemInitializedSymbol","ContentItems","itemsChanged","itemAdded","itemSelected","selected","_toggleClass2","_this2","content","DirectionSelection","goDown","goEnd","selectLast","goLeft","goRight","goStart","selectFirst","goUp","selectedFraction","DistributedChildrenContent","shadowRoot","slots","querySelectorAll","slot","contentChanged","distributedChildren","console","warn","expandContentElements","nodes","includeTextNodes","_ref","expanded","node","isSlot","HTMLSlotElement","assignedNodes","flatten","Text","flattened","_toConsumableArray","DistributedChildren","children","childNodes","strings","distributedChildNodes","child","join","FractionalSelection","selectedFractionSymbol","helpers","dampedSelection","selection","bound","damped","damping","x","y","elementSelection","selectionParts","floor","fraction","wrappedSelection","wrappedSelectionParts","genericSymbol","Generic","parsed","String","removeAttribute","navigationAxisSymbol","KeyboardDirection","keydown","handled","axis","horizontal","vertical","metaKey","altKey","Keyboard","getAttribute","tabindex","getIndexOfItemAtY","downward","start","end","step","scrollTarget","topOfClientArea","offsetTop","clientTop","itemIndex","itemTop","found","itemBottom","itemStyle","itemPaddingTop","itemPaddingBottom","contentTop","contentBottom","scrollOnePage","edge","scrollTop","indexOfItemAtEdge","newIndex","delta","KeyboardPagedSelection","pageUp","pageDown","getIndexOfItemWithTextPrefix","prefix","itemTextContents","getItemTextContents","prefixLength","itemTextContent","substr","itemTextContentsSymbol","alt","handleBackspace","typedPrefixSymbol","selectItemWithTextPrefix","setPrefixTimeout","handlePlainCharacter","char","resetPrefixTimeout","prefixTimeoutSymbol","resetTypedPrefix","PREFIX_TIMEOUT_DURATION","KeyboardPrefixSelection","resetPrefix","ctrlKey","which","fromCharCode","closedSymbol","OpenClose","render","previousClosed","keepIndexWithinBounds","renderTransition","dots","dotCount","opacityMinimum","opacityMaximum","opacityRange","fractionalIndex","leftIndex","rightIndex","selectionWraps","awayIndex","towardIndex","truncatedSelectedFraction","progress","opacityProgressThroughRange","abs","dot","dotOpacity","opacity","refreshDots","_renderArrayAsElements","PageDots","dotIndex","_renderArrayAsElements2","createElement","slice","PlayControls","previousButton","playButton","playing","nextButton","SelectedItemTextValue","selectedItem","currentIndex","SelectionAnimation","selectionAnimationDuration","selectionAnimationKeyframes","dragging","_resetAnimations","renderSelection","draggingSymbol","previousValue","resetAnimationsOnNextRenderSymbol","selectionAnimationDurationSymbol","selectionAnimationEffectSymbol","standardEffectKeyframes","selectionAnimationKeyframesSymbol","animateSelection","fromSelection","toSelection","keyframes","playingAnimationSymbol","timings","effectTimingsForSelectionAnimation","selectionIndex","totalSteps","stepsToIndex","forward","nextUpIndex","isItemIndexInBounds","lastAnimationDetails","timing","showItem","animation","animate","animationSymbol","endDelay","onfinish","selectionAnimationFinished","lastAnimationSymbol","getAnimationForItemIndex","duration","fill","pause","previousSelection","previousSelectionSymbol","renderSelectionInstantly","animationFractions","animationFractionsForSelection","animationFraction","setAnimationFraction","animations","cancel","details","currentTime","flag","visibility","allowWrap","steps","wrapSteps","toIndex","direction","totalDuration","stepDuration","positionInSequence","delay","crossfade","reveal","transform","zIndex","revealWithFade","showAdjacent","slide","slideWithGap","idCount","SelectionAriaActive","role","id","baseId","itemId","SelectionHighlight","SelectionInView","scrollItemIntoView","elementTop","elementBottom","scrollBottom","ShadowElementReferences","nodesWithIds","createTemplateWithInnerHTML","innerHTML","div","appendChild","shimTemplateStyles","tag","WebComponents","ShadowCSS","shimStyling","ShadowTemplate","ShadowDOMPolyfill","root","attachShadow","mode","clone","importNode","selectIndex","count","boundedIndex","max","min","previousIndex","trackSelectedItem","previousSelectedItem","indexInCurrentItems","previousSelectedIndex","newSelectedIndex","updatePossibleNavigations","canSelectNextSymbol","canSelectPreviousSymbol","selectionRequiredSymbol","selectionWrapsSymbol","externalSelectedIndexSymbol","externalSelectedItemSymbol","internalSelectedIndexSymbol","internalSelectedItemSymbol","SingleSelection","previousCanSelectNext","previousCanSelectPrevious","hasItems","detail","isEventForPenOrPrimaryTouch","pointerType","isPrimary","touchEnd","clientX","clientY","deltaXSymbol","trackTo","travelFraction","deltaYSymbol","touchMove","previousXSymbol","previousYSymbol","touchStart","startXSymbol","width","offsetWidth","dragDistance","multiTouchSymbol","travelFractionSymbol","SwipeDirection","PointerEvent","touches","changedTouches","touchAction","clearTimer","timerTimeoutSymbol","restartTimer","startTimer","selectNextWithWrap","selectionTimerDuration","playingSymbol","selectionTimerDurationSymbol","TimerSelection","previousPlaying","play","postNavigate","wheelDistanceSymbol","postNavigateDelayCompleteSymbol","absorbDecelerationSymbol","POST_NAVIGATE_TIME","resetWheelTracking","lastDeltaXSymbol","lastWheelTimeoutSymbol","sign","wheel","wheelTimedOut","WHEEL_TIME","deltaX","deltaY","acceleration","TrackpadDirection","description","Symbol","callback","callbacks","push","counter","executeCallbacks","shift","createTextNode","observer","MutationObserver","observe","characterData","renderArrayAsElements","renderItem","oldElement","newElement","replaceChild","removeChild","setAttributeToElement","safeToSetAttributesSymbol","pendingAttributesSymbol","pendingClassesSymbol","_value","_toggleClass3","force","addClass","_CurrentAnchor","CurrentAnchor","_CurrentAnchor2","refresh","url","location","href","areaLink","current","areaLinkSymbol","ElementBase","_FadeOverflow","FadeOverflow","_FadeOverflow2","findBackgroundColor","backgroundColor","parentNode","extractRgbValues","rgbString","rgbRegex","exec","g","b","fadeColorSymbol","fadeColor","rgb","fadeColorTransparent","gradient","fade","backgroundImage","_ListBox","ListBox","_ListBox2","_SelectedItemTextValueMixin","itemsContainer","_SelectedItemTextValueMixin2","_Modes","Modes","_Modes2","_SlideshowWithControls","SlideshowWithControls","_SlideshowWithControls2","_Slideshow","_PlayControlsMixin3","_Slideshow2","Slideshow","_SlidingCarousel","SlidingCarousel","_SlidingCarousel2","_SlidingViewport","viewport","showTransition","SlidingViewport","_SlidingViewport2","left","slidingContainer","webkitTransform","_SpreadItems","selectedItemSymbol","requestAnimationFrame","bind","reflectClass","SpreadItems","_SpreadItems2","spreadContainer","itemWidth","_TabStrip","_TabStripMixin","TabStrip","_TabStrip2","TabStripMixin","_TabStripMixin2","applySelectionToTab","tab","panelsSymbol","spreadTabsSymbol","tabPositionSymbol","tabPosition","tabs","panels","selectedPanel","panel","position","reflectAttribute","tabStrip","spreadTabs","firstElement","pages","lastElement","nextSibling","insertBefore","_Tabs","Tabs","_Tabs2","_globals","_globals2","_globals3","_globals4","_globals5","_globals6","_globals7","_globals8","_globals9","_globals10","_globals11","_globals12","_globals13","_globals14","_globals15","_globals16","_globals17","_globals18","_globals19","WrappedStandardElement","createPropertyDelegate","delegate","configurable","enumerable","writable","reraiseEvents","address","blockquote","caption","center","dd","dir","dl","dt","fieldset","form","frame","h1","h2","h3","h4","h5","h6","iframe","img","input","keygen","li","link","menu","object","ol","p","script","select","tbody","tfoot","thead","textarea","eventBubbles","abort","change","reset","blockElements","eventNames","extends","eventName","realEvent","Event","bubbles","label","extendsTag","Wrapped","_WrappedStandardEleme","extendsPrototype","names"],"mappings":"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","file":"basic-web-components.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/*\n * This file is transpiled to create an ES5-compatible distribution in which\n * the package's main feature(s) are available via the window.Basic global.\n * If you're already using ES6 yourself, ignore this file, and instead import\n * the source file(s) you want from the src folder.\n */\n\nimport AnimationStage from './src/AnimationStage';\n\nwindow.Basic = window.Basic || {};\nwindow.Basic.AnimationStage = AnimationStage;\n","import ElementBase from '../../basic-element-base/src/ElementBase';\nimport ContentItemsMixin from '../../basic-component-mixins/src/ContentItemsMixin';\nimport DistributedChildrenContentMixin from '../../basic-component-mixins/src/DistributedChildrenContentMixin';\nimport FractionalSelectionMixin from '../../basic-component-mixins/src/FractionalSelectionMixin';\nimport SelectionAnimationMixin from '../../basic-component-mixins/src/SelectionAnimationMixin';\nimport SelectionAriaActiveMixin from '../../basic-component-mixins/src/SelectionAriaActiveMixin';\nimport SingleSelectionMixin from '../../basic-component-mixins/src/SingleSelectionMixin';\nimport symbols from '../../basic-component-mixins/src/symbols';\n\n\nconst base = ElementBase.compose(\n  ContentItemsMixin,\n  DistributedChildrenContentMixin,\n  FractionalSelectionMixin,\n  SelectionAnimationMixin,\n  SelectionAriaActiveMixin,\n  SingleSelectionMixin\n);\n\n/**\n * Presents a single item as selected, providing animated transitions when the\n * selection changes. The same animation can be shown at an arbitrary point,\n * generally used to reflect a user-controlled touch or trackpad drag operation\n * in progress.\n *\n * [Live demo](http://basicwebcomponents.org/basic-web-components/packages/basic-animation-stage/)\n *\n * This component is intended to be used as a programmatic rendering surface for\n * components which want to show transitional effects.\n *\n * The component uses [SelectionAnimationMixin](../basic-component-mixins/docs/SelectionAnimationMixin.md)\n * mixin, which in turn uses the Web Animations API. For use on browsers which\n * do not support that API natively, you will need to load the\n * [Web Animations polyfill](https://github.com/web-animations/web-animations-js).\n *\n * For a simpler component that exhibits only a sliding effect, but does not\n * require the Web Animations API, see [basic-sliding-viewport](../basic-sliding-viewport).\n *\n * @extends ElementBase\n * @mixes ContentItemsMixin\n * @mixes DistributedChildrenContentMixin\n * @mixes SelectionAnimationMixin\n * @mixes SelectionAriaActiveMixin\n * @mixes SingleSelectionMixin\n */\nclass AnimationStage extends base {\n\n  get [symbols.defaults]() {\n    const defaults = super[symbols.defaults] || {};\n    defaults.selectionRequired = true;\n    return defaults;\n  }\n\n  get [symbols.template]() {\n    return `\n      <style>\n      :host {\n        overflow: hidden;\n        position: relative;\n      }\n\n      #container ::slotted(*) {\n        height: 100%;\n        object-fit: contain;\n        position: absolute;\n        width: 100%;\n        will-change: transform;\n      }\n      </style>\n\n      <div id=\"container\" role=\"none\">\n        <slot></slot>\n      </div>\n    `;\n  }\n\n}\n\n\ncustomElements.define('basic-animation-stage', AnimationStage);\nexport default AnimationStage;\n","/*\n * This file is transpiled to create an ES5-compatible distribution in which\n * the package's main feature(s) are available via the window.Basic global.\n * If you're already using ES6 yourself, ignore this file, and instead import\n * the source file(s) you want from the src folder.\n */\n\nimport AutosizeTextarea from './src/AutosizeTextarea';\n\nwindow.Basic = window.Basic || {};\nwindow.Basic.AutosizeTextarea = AutosizeTextarea;\n","import createSymbol from '../../basic-component-mixins/src/createSymbol';\nimport WrappedStandardElement from '../../basic-wrapped-standard-element/src/WrappedStandardElement';\nimport DistributedChildrenContentMixin from '../../basic-component-mixins/src/DistributedChildrenContentMixin';\nimport GenericMixin from '../../basic-component-mixins/src/GenericMixin';\nimport symbols from '../../basic-component-mixins/src/symbols';\n\n\n// Symbols for private data members on an element.\nconst lineHeightSymbol = createSymbol('lineHeight');\nconst minimumRowsSymbol = createSymbol('minimumRows');\nconst valueTracksContentSymbol = createSymbol('valueTracksContent');\n\nconst base = WrappedStandardElement.wrap('textarea').compose(\n  DistributedChildrenContentMixin,\n  GenericMixin\n);\n\n/**\n * A text area that makes itself big enough to show its content.\n *\n * [Live demo](http://basicwebcomponents.org/basic-web-components/packages/basic-autosize-textarea/)\n *\n * This text input component is useful in situations where you want to ask the\n * user to enter as much text as they want, but don't want to take up a lot of\n * room on the page.\n *\n * The component works by copying the text to an invisible element which will\n * automatically grow in size; the expanding copy will expand the container,\n * which in turn will vertically stretch the text area to match.\n *\n * This component generally exposes all the same attributes/properties as a\n * standard HTML `<textarea>`.\n *\n * @extends WrappedStandardElement\n * @mixes GenericMixin\n * @mixes DistributedChildrenContentMixin\n */\nclass AutosizeTextarea extends base {\n\n  constructor() {\n    super();\n\n    this.inner.addEventListener('input', event => {\n      valueChanged(this);\n    });\n    this.inner.addEventListener('keypress', event => {\n      keypress(this, event);\n    });\n\n    // Set defaults.\n    if (typeof this.minimumRows === 'undefined') {\n      this.minimumRows = this[symbols.defaults].minimumRows;\n    }\n\n    // A standard textarea has its value track its textContent by default.\n    // That is, changes to textContent update the value. However, if an attempt\n    // is made to change the value directly, this breaks the automatic tracking.\n    // From that point on, changes to textContent do *not* update the value.\n    this[valueTracksContentSymbol] = true;\n  }\n\n  /**\n   * Resize the element such that the textarea can exactly contain its content.\n   * By default, this method is invoked whenever the text content changes.\n   */\n  autoSize() {\n    // If we had speculatively added an extra line because of an Enter keypress,\n    // we can now hide the extra line.\n    this.$.extraLine.style.display = 'none';\n\n    // We resize by copying the textarea contents to the element itself; the\n    // text will then appear (via <slot>) inside the invisible div. If\n    // we've set things up correctly, this new content should take up the same\n    // amount of room as the same text in the textarea. Updating the element's\n    // content adjusts the element's size, which in turn will make the textarea\n    // the correct height.\n    this.$.textCopy.textContent = this.value;\n  }\n\n  // Normally the value of the element is set and read through its value\n  // attribute. As a convenience, and to mirror standard textarea behavior, it\n  // is possible to set the content of the textarea by including text between\n  // the opening and closing tag. This works only in one direction: setting the\n  // tag content updates the textarea, but user edits in the textarea are not\n  // reflected in the tag content. We capture the value of the initial text\n  // content in order to set the value property during the create event.\n  // TODO: Normalize indentation in the text content. Users will often want to\n  // indent the markup so that it looks pretty. We should detect the indentation\n  // level and remove any indentation whitespace\n  // TODO: Consider using content innerHTML rather than plain text. The native\n  // textarea element will include HTML, not just the stripped text, as initial\n  // value property text.\n  connectedCallback() {\n    if (super.connectedCallback) { super.connectedCallback(); }\n    initializeWhenRendered(this);\n  }\n\n  contentChanged() {\n    if (super.contentChanged) { super.contentChanged(); }\n    if (this[valueTracksContentSymbol]) {\n      const text = getTextContent(this);\n      this.inner.value = unescapeHtml(text);\n      valueChanged(this);\n    }\n  }\n\n  get [symbols.defaults]() {\n    const defaults = super[symbols.defaults] || {};\n    defaults.minimumRows = 1;\n    return defaults;\n  }\n\n  /**\n   * Determines the minimum number of rows shown. This is similar to the rows\n   * attribute on a standard textarea, but because this element can grow, is\n   * expressed as a minimum rather than a fixed number.\n   *\n   * By default, this property is 1, so when empty, the text area will be a\n   * single line tall. That's efficient in terms of the space it consumes, but\n   * until the user interacts with the element, they may not realize they can\n   * enter multiple lines of text. Setting the property to a value higher than 1\n   * will signal to the user that they can enter multiple lines of a text.\n   *\n   * By setting this property, you can also communicate to the user some sense\n   * of how much text you're expecting them to provide. For example, on a\n   * feedback form, asking the user to enter their feedback in a single-line\n   * text box implies you don't really want them to enter much text — even if\n   * the text box will grow when they type. By setting this to a value like,\n   * say, 10 rows, you can signal that you're fully expecting them to enter more\n   * text.\n   *\n   * @type {number}\n   * @default 1\n   */\n  get minimumRows() {\n    return this[minimumRowsSymbol];\n  }\n  set minimumRows(value) {\n    this[minimumRowsSymbol] = parseInt(value);\n    if (this[lineHeightSymbol]) {\n      setMinimumHeight(this);\n    }\n  }\n\n  get [symbols.template]() {\n    return `\n      <style>\n      :host {\n        display: block;\n      }\n\n      #autoSizeContainer {\n        position: relative;\n      }\n\n      /*\n       * Ensure both the text area and copy end up with the element's own font\n       * metrics, so that text will lay out the same in both of them.\n       */\n      #inner,\n      #copyContainer {\n        -moz-box-sizing: border-box;\n        box-sizing: border-box;\n        font-family: inherit;\n        font-size: inherit;\n        font-style: inherit;\n        font-weight: inherit;\n        line-height: inherit;\n        margin: 0;\n      }\n\n      #inner {\n        height: 100%;\n        overflow: hidden;\n        position: absolute;\n        resize: none;\n        top: 0;\n        width: 100%;\n        @apply(--textarea);\n      }\n\n      #copyContainer {\n        visibility: hidden;\n        white-space: pre-wrap; /* So lines wrap */\n        word-wrap: break-word; /* So we break at word boundaries when possible */\n      }\n\n      #contentContainer {\n        display: none;\n      }\n      </style>\n\n      <!--\n      The invisible copyContainer contains an extraSpace element that ensures that,\n      even if the last line of the textarea is blank, there will be something in the\n      line that forces the text copy to grow by a line. This extra space is a thin\n      space, to reduce the amount by which the text copy will prematurely grow.\n\n      The copyContainer also contains an extraLine element exists to deal with the\n      fact that, if the user presses the Enter key down, the textarea's content will\n      move before the complete text is available. See notes at _keypress.\n\n      Lastly, we put the HTML content element into a separate container so we can\n      hide it. We need to have a content element somewhere in the template to\n      convince Polymer that we care about the content in the Shady DOM case --\n      without that content element, Shady DOM will conclude the element doesn't\n      need its light DOM content, and will throw it away.\n      -->\n      <div id=\"autoSizeContainer\">\n        <textarea id=\"inner\"></textarea>\n        <div id=\"copyContainer\"><span id=\"textCopy\"></span><span id=\"extraSpace\">&thinsp;</span><div id=\"extraLine\">&nbsp;</div></div>\n      </div>\n      <div id=\"contentContainer\">\n        <slot></slot>\n      </div>\n    `;\n  }\n\n  /**\n   * The text currently shown in the textarea.\n   *\n   * Note that the text shown in the textarea can also be updated by changing\n   * the element's innerHTML/textContent. However, if the value property is\n   * explicitly set, that will override the innerHTML/textContent.\n   *\n   * @type {string}\n   */\n  get value() {\n    return this.inner.value;\n  }\n  set value(text) {\n    // Explicitly setting value breaks automatic update of value from content.\n    this[valueTracksContentSymbol] = false;\n    this.inner.value = text;\n    valueChanged(this);\n  }\n\n  /**\n   * Fires when the user types in the textarea.\n   *\n   * @memberof AutosizeTextarea\n   * @event change\n   */\n}\n\n\nfunction getTextContent(element) {\n  let text = element.distributedTextContent;\n\n  // Trim the text.\n  // This is non-standard textarea behavior. A standard textarea will trim the\n  // first character if it's a newline, but that's it. However, authors will\n  // want to be able to place the opening and closing tags on their own lines.\n  // So it seems more helpful to trim whitespace on either side.\n  text = text.trim();\n\n  return text;\n}\n\n\n// Set up once this component has been rendered.\n//\n// On Chrome (as of 10/23/14) at least, if an instance if this component is\n// added dynamically, its attached handler may trigger before its been\n// rendered. That would cause our layout calculations to be incorrect.\n//\nfunction initializeWhenRendered(element) {\n\n  // If the component has been rendered, our height should be nonzero.\n  if (element.clientHeight === 0) {\n    // Not rendered yet: wait a bit before trying again.\n    setTimeout(() => initializeWhenRendered(element), 10);\n    return;\n  }\n\n  // If we reach this point, the component's elements should by styled.\n\n  // For auto-sizing to work, we need the text copy to have the same border,\n  // padding, and other relevant characteristics as the original text area.\n  // Since those aspects are affected by CSS, we have to wait until the\n  // element is in the document before we can update the text copy.\n  const textBoxStyle = getComputedStyle(element.inner);\n  const copyContainerStyle = element.$.copyContainer.style;\n  copyContainerStyle.borderBottomStyle  = textBoxStyle.borderBottomStyle;\n  copyContainerStyle.borderBottomWidth  = textBoxStyle.borderBottomWidth;\n  copyContainerStyle.borderLeftStyle    = textBoxStyle.borderLeftStyle;\n  copyContainerStyle.borderLeftWidth    = textBoxStyle.borderLeftWidth;\n  copyContainerStyle.borderRightStyle   = textBoxStyle.borderRightStyle;\n  copyContainerStyle.borderRightWidth   = textBoxStyle.borderRightWidth;\n  copyContainerStyle.borderTopStyle     = textBoxStyle.borderTopStyle;\n  copyContainerStyle.borderTopWidth     = textBoxStyle.borderTopWidth;\n  copyContainerStyle.paddingBottom      = textBoxStyle.paddingBottom;\n  copyContainerStyle.paddingLeft        = textBoxStyle.paddingLeft;\n  copyContainerStyle.paddingRight       = textBoxStyle.paddingRight;\n  copyContainerStyle.paddingTop         = textBoxStyle.paddingTop;\n\n  // Use the extraLine member to gauge the expected height of a single line of\n  // text. We can't use lineHeight, because that can be reported as \"normal\",\n  // and we want to know the actual pixel height.\n  element.$.extraLine.style.display = 'inherit';\n  element[lineHeightSymbol] = element.$.extraLine.clientHeight;\n\n  // Now that we know the line height, we can hide the extra line.\n  element.$.extraLine.style.display = 'none';\n\n  // Use the line height in conjunction with minimumRows to establish the\n  // overall minimum height of the component.\n  setMinimumHeight(element);\n}\n\n\n// Speculatively add a line to our copy of the text. We're not sure what the\n// exact effect of typing this character will be, and at this point it's not\n// reflected yet in the textarea's content. We speculate that it will add a\n// line to the text and size accordingly. (One other possibility is that the\n// user's replacing a selected chunk of text with a newline.) In any event,\n// once we get the keyup or change event, we'll make any final adjustments.\n//\n// TODO: If the user holds down the Enter key, we can get a bunch of keypress\n// events before we get keyup. This causes flicker. Instead of supporting only\n// a single extra speculative line, we should grow the speculative element to\n// contain the number of Enter keypresses we've received.\nfunction keypress(element, event) {\n  if (event.keyCode === 13 /* Enter */) {\n    element.$.extraLine.style.display = 'inherit';\n  }\n}\n\n\n// Setting the minimumRows attribute translates into setting the minimum\n// height on the text copy container.\nfunction setMinimumHeight(element) {\n  const copyContainer = element.$.copyContainer;\n  const outerHeight = copyContainer.getBoundingClientRect().height;\n  const style = getComputedStyle(copyContainer);\n  const paddingTop = parseFloat(style.paddingTop);\n  const paddingBottom = parseFloat(style.paddingBottom);\n  const innerHeight = copyContainer.clientHeight - paddingTop - paddingBottom;\n  const bordersPlusPadding = outerHeight - innerHeight;\n  let minHeight = (element.minimumRows * element[lineHeightSymbol]) + bordersPlusPadding;\n  minHeight = Math.ceil(minHeight);\n  copyContainer.style.minHeight = minHeight + 'px';\n}\n\n\nfunction unescapeHtml(html) {\n  return html\n    .replace(/&amp;/g, '&')\n    .replace(/&lt;/g, '<')\n    .replace(/&gt;/g, \">\")\n    .replace(/&quot;/g, '\\\"')\n    .replace(/&#039;/g, '\\'');\n}\n\n\n/*\n * Handle a change in the element's value property.\n */\nfunction valueChanged(element) {\n  element.autoSize();\n  element.dispatchEvent(new CustomEvent('value-changed'));\n}\n\n\ncustomElements.define('basic-autosize-textarea', AutosizeTextarea);\nexport default AutosizeTextarea;\n","/*\n * This file is transpiled to create an ES5-compatible distribution in which\n * the package's main feature(s) are available via the window.Basic global.\n * If you're already using ES6 yourself, ignore this file, and instead import\n * the source file(s) you want from the src folder.\n */\n\nimport Carousel from './src/Carousel';\n\nwindow.Basic = window.Basic || {};\nwindow.Basic.Carousel = Carousel;\n","import AnimationStage from '../../basic-animation-stage/src/AnimationStage';\nimport DirectionSelectionMixin from '../../basic-component-mixins/src/DirectionSelectionMixin';\nimport KeyboardDirectionMixin from '../../basic-component-mixins/src/KeyboardDirectionMixin';\nimport KeyboardMixin from '../../basic-component-mixins/src/KeyboardMixin';\nimport SwipeDirectionMixin from '../../basic-component-mixins/src/SwipeDirectionMixin';\nimport symbols from '../../basic-component-mixins/src/symbols';\nimport TrackpadDirectionMixin from '../../basic-component-mixins/src/TrackpadDirectionMixin';\n\n\nconst base = AnimationStage.compose(\n  DirectionSelectionMixin,\n  KeyboardMixin,\n  KeyboardDirectionMixin,\n  SwipeDirectionMixin,\n  TrackpadDirectionMixin\n);\n\n\n/**\n * Lets the user navigate laterally through a sequence of child elements.\n *\n * basic-carousel is an implementation of the carousel user interface pattern,\n * commonly used for navigating between images, pages, and other elements. This\n * pattern presents the user with a linear sequence of elements, only one of\n * which is shown at a time. The user can navigate to the next/previous element\n * with a variety of input methods.\n *\n * [Live demo](http://basicwebcomponents.org/basic-web-components/packages/basic-carousel/)\n *\n * The above demo is a plain carousel. It's often combined, however, with\n * mixins like\n * [ArrowSelectionMixin](../basic-component-mixins/docs/ArrowSelectionMixin.md),\n * [PageDotsMixin](../basic-component-mixins/docs/PageDotsMixin.md),\n * [TimerSelectionMixin](../basic-component-mixins/docs/TimerSelectionMixin.md).\n * For example, you can view a\n * [demo with arrows and page dots](http://basicwebcomponents.org/basic-web-components/packages/demos/carousel-with-arrows-and-dots.html).\n * See the specific mixins for other carousel demos.\n *\n * basic-carousel uses its children as the elements the user will navigate\n * through. In a typical use, a basic-carousel can be used to navigate between a\n * sequence of images:\n *\n *     <basic-carousel>\n *       <img src=\"image1.jpg\">\n *       <img src=\"image2.jpg\">\n *       <img src=\"image3.jpg\">\n *     </basic-carousel>\n *\n * The child elements can be of any type — they are not restricted to images.\n *\n * This component attempts to meet the [Gold Standard for web components]\n * (https://github.com/webcomponents/gold-standard/wiki) so that it is generally\n * as flexible and robust as standard HTML elements. For example, it meets the\n * \"Content Changes\" criteria: the carousel will adapt to new child elements\n * added or removed at runtime.\n *\n * Currently, this component does not meet the Gold Standard criteria \"Size to\n * Content\". As a result, for the time being, **you must manually set a size on\n * this component**. Two approaches are to: 1) stretch the component across\n * whatever surface it is contained within, or 2) set it to be larger than the\n * largest child element you want to display. The former approach is more\n * common, and can be achieved with CSS styling such as:\n *\n *     html {\n *       height: 100%;\n *     }\n *\n *     body {\n *       display: -webkit-flex;\n *       display: flex;\n *       height: 100%;\n *       margin: 0;\n *     }\n *\n *     basic-carousel {\n *       -webkit-flex: 1;\n *       flex: 1;\n *     }\n *\n * The standard basic-carousel component supports navigation via the following\n * input methods:\n *\n * * Keyboard. When the carousel has focus, the user can press Left, Right,\n *   Home, or End. These navigate to the expected element.\n * * Touch. On mobile and other touch-enabled devices, the user can drag left or\n *   right.\n * * Trackpad. The user can swipe left or right on a trackpad to navigate.\n *\n * Because carousels are used in a wide variety of circumstances, by default\n * basic-carousel provides a minimal appearance and no separately interactive\n * elements such as arrow buttons on the side or dots along the bottom. Those\n * elements can be added by wrapping a Carousel in optional mixins:\n *\n * * [ArrowSelectionMixin](../basic-component-mixins/docs/ArrowSelectionMixin.md).\n *   Adds prominent left and right arrow buttons on the side of the carousel.\n * * [PageDotsMixin](../basic-component-mixins/docs/PageDotsMixin.md).\n *   Adds a series of small dots below the carousel to indicate the user's\n *   current position in the sequence.\n * * [TimerSelectionMixin](../basic-component-mixins/docs/TimerSelectionMixin.md).\n *   Advances to the next item on a timer.\n * * [TabStripMixin](../basic-tab-strip).\n *   Adds a strip of traditional tab buttons.\n *\n * See those components for more details, but in general you can construct a\n * common carousel with both arrow buttons and dots like so:\n *\n *     class MyCarousel extends\n *         ArrowSelectionMixin(PageDotsMixin(Carousel)) {}\n *     customElements.define('my-carousel', MyCarousel);\n *\n * For universal access, basic-carousel automatically adds a variety of\n * [ARIA](http://www.w3.org/WAI/intro/aria) properties to itself and to child\n * elements. This helps users navigate the sequence of elements in the carousel\n * using assistive technologies.\n *\n * @extends AnimationStage\n * @mixes DirectionSelectionMixin\n * @mixes GenericMixin\n * @mixes KeyboardMixin\n * @mixes KeyboardDirectionMixin\n * @mixes SwipeDirectionMixin\n * @mixes TrackpadDirectionMixin\n */\nclass Carousel extends base {\n\n  get [symbols.defaults]() {\n    const defaults = super[symbols.defaults] || {};\n    defaults.navigationAxis = 'horizontal';\n    defaults.selectionAnimationEffect = 'slideWithGap';\n    // defaults.selectionRequired = true;\n    return defaults;\n  }\n\n}\n\n\ncustomElements.define('basic-carousel', Carousel);\nexport default Carousel;\n","/*\n * This file is transpiled to create an ES5-compatible distribution in which\n * the package's main feature(s) are available via the window.Basic global.\n * If you're already using ES6 yourself, ignore this file, and instead import\n * the source file(s) you want from the src folder.\n */\n\nimport CollapsiblePanel from './src/CollapsiblePanel';\n\nwindow.Basic = window.Basic || {};\nwindow.Basic.CollapsiblePanel = CollapsiblePanel;\n","import ElementBase from '../../basic-element-base/src/ElementBase';\nimport OpenCloseMixin from '../../basic-component-mixins/src/OpenCloseMixin';\nimport symbols from '../../basic-component-mixins/src/symbols';\n\n\n/**\n * A panel which can be expanded/collapsed with an animated transition.\n *\n * [Live demo](http://basicwebcomponents.org/basic-web-components/packages/basic-collapsible-panel/)\n *\n * This component combines the OpenCloseMixin mixin and a simple CSS height\n * animation.\n *\n * This component handles only the duties of collapsing and expanding. It does\n * not provide a user interface for the user to trigger the change in state;\n * you must provide that user interface yourself.\n *\n * @extends ElementBase\n * @mixes OpenCloseMixin\n */\nclass CollapsiblePanel extends OpenCloseMixin(ElementBase) {\n\n  constructor() {\n    super();\n    this.$.overflow.addEventListener('transitionend', () => {\n      if (!this.closed) {\n        // Remove the hard-coded height we applied for the transition so that\n        // the element will reflow correctly, e.g., on window resize.\n        this.$.overflow.style.height = '';\n      }\n      // Ensure the animation only plays once. For some reason, Safari will show\n      // the animation twice without this line, even though the render function\n      // explicitly removes this class when it sets the old height. Neither\n      // Chrome nor Firefox seem to need this line.\n      this.classList.remove('showTransition');\n    });\n  }\n\n  render(closing) {\n    super.render(closing);\n\n    const naturalHeight = this.$.container.getBoundingClientRect().height;\n    if (naturalHeight === 0) {\n      // Most likely haven't had a chance to render yet.\n      this.$.overflow.style.height = closing ? 0 : '';\n      return;\n    }\n\n    // Without animating, set starting height of transition.\n    this.classList.remove('showTransition');\n    const oldHeight = closing ? naturalHeight : 0;\n    this.$.overflow.style.height = oldHeight + 'px';\n\n    // Force a relayout so that the starting height is applied.\n    // This can be achieved by reading a property like offsetHeight.\n    this.$.overflow.offsetHeight; // jshint ignore:line\n\n    // Turn animation on, and ending height of transition.\n    this.classList.add('showTransition');\n    const newHeight = closing ? 0 : naturalHeight;\n    this.$.overflow.style.height = newHeight + 'px';\n  }\n\n  get [symbols.template]() {\n    return `\n      <style>\n      :host {\n        display: block;\n        overflow: hidden;\n      }\n\n      :host(.showTransition) #overflow {\n        transition: height 0.2s;\n      }\n      </style>\n\n      <div id=\"overflow\" role=\"none\">\n        <div id=\"container\" role=\"none\">\n          <slot></slot>\n        </div>\n      </div>\n    `;\n  }\n\n}\n\n\ncustomElements.define('basic-collapsible-panel', CollapsiblePanel);\nexport default CollapsiblePanel;\n","/*\n * This file is transpiled to create an ES5-compatible distribution in which\n * the package's main feature(s) are available via the window.Basic global.\n * If you're already using ES6 yourself, ignore this file, and instead import\n * the source file(s) you want from the src folder.\n */\n\nimport ArrowSelectionMixin from './src/ArrowSelectionMixin';\nimport AttributeMarshallingMixin from './src/AttributeMarshallingMixin';\nimport ClickSelectionMixin from './src/ClickSelectionMixin';\nimport ComposableMixin from './src/ComposableMixin';\nimport ContentItemsMixin from './src/ContentItemsMixin';\nimport createSymbol from './src/createSymbol';\nimport DirectionSelectionMixin from './src/DirectionSelectionMixin';\nimport DistributedChildrenMixin from './src/DistributedChildrenMixin';\nimport DistributedChildrenContentMixin from './src/DistributedChildrenContentMixin';\nimport GenericMixin from './src/GenericMixin';\nimport KeyboardMixin from './src/KeyboardMixin';\nimport KeyboardDirectionMixin from './src/KeyboardDirectionMixin';\nimport KeyboardPagedSelectionMixin from './src/KeyboardPagedSelectionMixin';\nimport KeyboardPrefixSelectionMixin from './src/KeyboardPrefixSelectionMixin';\nimport microtask from './src/microtask';\nimport PageDotsMixin from './src/PageDotsMixin';\nimport PlayControlsMixin from './src/PlayControlsMixin';\nimport safeAttributes from './src/safeAttributes';\nimport SelectionAnimationMixin from './src/SelectionAnimationMixin';\nimport SelectionAriaActiveMixin from './src/SelectionAriaActiveMixin';\nimport SelectionHighlightMixin from './src/SelectionHighlightMixin';\nimport SelectionInViewMixin from './src/SelectionInViewMixin';\nimport ShadowElementReferencesMixin from './src/ShadowElementReferencesMixin';\nimport ShadowTemplateMixin from './src/ShadowTemplateMixin';\nimport SingleSelectionMixin from './src/SingleSelectionMixin';\nimport SwipeDirectionMixin from './src/SwipeDirectionMixin';\nimport symbols from './src/symbols';\nimport TimerSelectionMixin from './src/TimerSelectionMixin';\nimport TrackpadDirectionMixin from './src/TrackpadDirectionMixin';\n\nwindow.Basic = window.Basic || {};\n\nwindow.Basic.ArrowSelectionMixin = ArrowSelectionMixin;\nwindow.Basic.AttributeMarshallingMixin = AttributeMarshallingMixin;\nwindow.Basic.ClickSelectionMixin = ClickSelectionMixin;\nwindow.Basic.ComposableMixin = ComposableMixin;\nwindow.Basic.ContentItemsMixin = ContentItemsMixin;\nwindow.Basic.createSymbol = createSymbol;\nwindow.Basic.DirectionSelectionMixin = DirectionSelectionMixin;\nwindow.Basic.DistributedChildrenMixin = DistributedChildrenMixin;\nwindow.Basic.DistributedChildrenContentMixin = DistributedChildrenContentMixin;\nwindow.Basic.generic = GenericMixin;\nwindow.Basic.KeyboardMixin = KeyboardMixin;\nwindow.Basic.KeyboardDirectionMixin = KeyboardDirectionMixin;\nwindow.Basic.KeyboardPagedSelectionMixin = KeyboardPagedSelectionMixin;\nwindow.Basic.KeyboardPrefixSelectionMixin = KeyboardPrefixSelectionMixin;\nwindow.Basic.microtask = microtask;\nwindow.Basic.PageDotsMixin = PageDotsMixin;\nwindow.Basic.PlayControlsMixin = PlayControlsMixin;\nwindow.Basic.safeAttributes = safeAttributes;\nwindow.Basic.SelectionAnimationMixin = SelectionAnimationMixin;\nwindow.Basic.SelectionAriaActiveMixin = SelectionAriaActiveMixin;\nwindow.Basic.SelectionHighlightMixin = SelectionHighlightMixin;\nwindow.Basic.SelectionInViewMixin = SelectionInViewMixin;\nwindow.Basic.ShadowElementReferencesMixin = ShadowElementReferencesMixin;\nwindow.Basic.ShadowTemplateMixin = ShadowTemplateMixin;\nwindow.Basic.SingleSelectionMixin = SingleSelectionMixin;\nwindow.Basic.SwipeDirectionMixin = SwipeDirectionMixin;\nwindow.Basic.symbols = symbols;\nwindow.Basic.TimerSelectionMixin = TimerSelectionMixin;\nwindow.Basic.TrackpadDirectionMixin = TrackpadDirectionMixin;\n","import createSymbol from '../../basic-component-mixins/src/createSymbol';\nimport symbols from '../../basic-component-mixins/src/symbols';\n\n\n// Symbols for private data members on an element.\nconst mousedownListenerSymbol = createSymbol('mousedownListener');\nconst mousemoveListenerSymbol = createSymbol('mousemoveListener');\nconst lastMouseXSymbol = createSymbol('lastMouseX');\nconst lastMouseYSymbol = createSymbol('lastMouseY');\nconst mouseTimeoutSymbol = createSymbol('mouseTimeout');\n\n\n/* Exported function extends a base class with ArrowSelection. */\nexport default (base) => {\n\n  /**\n   * Template mixin which adds prominent left and right arrow buttons to a\n   * wrapped child such as a carousel.\n   *\n   * You can see a\n   * [live demo](http://basicwebcomponents.org/basic-web-components/packages/demos/carousel-with-arrows.html)\n   * of this mixin applied to a carousel.\n   *\n   * Clicking the left/right buttons selects the previous/next item.\n   *\n   * Typical usage:\n   *\n   *     class CarouselWithArrows extends ArrowSelectionMixin(Carousel) {}\n   *     customElements.define('carousel-with-arrows', CarouselWithArrows);\n   *\n   * By default, the arrow buttons are shown on devices with a mouse or mouse-like\n   * pointing device. They are not shown on a touch-capable device unless mouse\n   * movement is detected. To cause the buttons to always appear, apply the\n   * 'showArrows' CSS class.\n   */\n  class ArrowSelection extends base {\n\n    constructor() {\n      super();\n\n      this.$.buttonLeft.addEventListener('click', event => {\n        this.selectPrevious();\n        event.stopPropagation();\n      });\n      this.$.buttonRight.addEventListener('click', event => {\n        this.selectNext();\n        event.stopPropagation();\n      });\n      assumeButtonFocus(this, this.$.buttonLeft);\n      assumeButtonFocus(this, this.$.buttonRight);\n    }\n\n    get canSelectNext() {\n      return super.canSelectNext;\n    }\n    set canSelectNext(canSelectNext) {\n      if ('canSelectNext' in base.prototype) { super.canSelectNext = canSelectNext; }\n      this.$.buttonRight.disabled = !canSelectNext;\n    }\n\n    get canSelectPrevious() {\n      return super.canSelectPrevious;\n    }\n    set canSelectPrevious(canSelectPrevious) {\n      if ('canSelectPrevious' in base.prototype) { super.canSelectPrevious = canSelectPrevious; }\n      this.$.buttonLeft.disabled = !canSelectPrevious;\n    }\n\n    connectedCallback() {\n      if (super.connectedCallback) { super.connectedCallback(); }\n\n      if (!this.classList.contains('showArrows')) {\n        // Determine whether we should show arrow buttons or not.\n        if (deviceSupportsTouch()) {\n          // A touch device might also support a mouse, but we can't know whether\n          // there's actually a mouse until we hear from it.\n          listenForMouse(this);\n        } else {\n          // The device doesn't support touch, so assume it has a mouse.\n          showArrows(this);\n        }\n      }\n    }\n\n    get [symbols.defaults]() {\n      const defaults = super[symbols.defaults] || {};\n      defaults.navigationAxis = 'horizontal';\n      return defaults;\n    }\n\n    /*\n     * The template uses the chevron-left and chevron-right SVG icons from\n     * https://github.com/PolymerElements/iron-icons/blob/master/iron-icons.html.\n     */\n    get [symbols.template]() {\n      const baseTemplate = super[symbols.template] || '';\n      return `\n        <style>\n        :host {\n          -webkit-align-items: stretch;\n          align-items: stretch;\n          display: -webkit-flex;\n          display: flex;\n          -webkit-flex: 1;\n          flex: 1;\n          -webkit-justify-content: center;\n          justify-content: center;\n        }\n\n        #arrowNavigationContainer {\n          display: -webkit-flex;\n          display: flex;\n          -webkit-flex: 1;\n          flex: 1;\n          position: relative;\n        }\n\n        .navigationButton {\n          background: transparent;\n          border: 1px solid transparent;\n          box-sizing: border-box;\n          color: rgba(0, 0, 0, 0.7);\n          fill: currentColor;\n          margin: 0;\n          opacity: 1;\n          outline: none; /* REVIEW: Accessibility should be provided by other elements. */\n          padding: 0;\n          transition: opacity 1s;\n          z-index: 1;\n        }\n\n        .navigationButton:hover:not(:disabled) {\n          background: rgba(0, 0, 0, 0.5);\n          color: rgba(0, 0, 0, 0.8);\n          cursor: pointer;\n        }\n        .navigationButton:active:not(:disabled) {\n          background: rgba(0, 0, 0, 0.7);\n          color: rgba(0, 0, 0, 0.9);\n        }\n        .navigationButton:disabled {\n          color: rgba(0, 0, 0, 0.2);\n        }\n\n        :host(:not(.showArrows)) .navigationButton {\n          opacity: 0;\n          visibility: hidden;\n        }\n\n        .navigationButton .icon {\n          height: 48px;\n          width: 48px;\n        }\n\n        /* Overlay variant */\n        :host(.overlayArrows) {\n          position: relative;\n        }\n        :host(.overlayArrows) .navigationButton {\n          bottom: 0;\n          color: rgba(255, 255, 255, 0.7);\n          position: absolute;\n          top: 0;\n        }\n        :host(.overlayArrows) #buttonLeft {\n          left: 0;\n        }\n        :host(.overlayArrows) #buttonRight {\n          right: 0;\n        }\n        :host(.overlayArrows) .navigationButton:hover:not(:disabled) {\n          background: rgba(255, 255, 255, 0.2);\n          color: rgba(255, 255, 255, 0.8);\n        }\n        :host(.overlayArrows) .navigationButton:active:not(:disabled) {\n          background: rgba(255, 255, 255, 0.4);\n          color: rgba(255, 255, 255, 0.9);\n        }\n        :host(.overlayArrows) .navigationButton:disabled {\n          color: rgba(255, 255, 255, 0.3);\n        }\n        </style>\n\n        <!--\n        Accessibility note: since the navigation offered by the arrow buttons should\n        be redundant (that is, there should be other ways of navigating the list),\n        we mark the button as aria-hidden so that assistive devices ignore them.\n        -->\n        <button id=\"buttonLeft\" class=\"navigationButton\" disabled tabindex=\"-1\" aria-hidden=\"true\">\n          <svg class=\"icon\" viewBox=\"0 0 24 24\" preserveAspectRatio=\"xMidYMid meet\">\n            <g id=\"chevron-left\">\n              <path d=\"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z\"/>\n            </g>\n          </svg>\n        </button>\n        <div id=\"arrowNavigationContainer\" role=\"none\">\n          ${baseTemplate}\n        </div>\n        <button id=\"buttonRight\" class=\"navigationButton\" disabled tabindex=\"-1\" aria-hidden=\"true\">\n          <svg class=\"icon\" viewBox=\"0 0 24 24\" preserveAspectRatio=\"xMidYMid meet\">\n            <g id=\"chevron-right\">\n              <path d=\"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\"/>\n            </g>\n          </svg>\n        </button>\n      `;\n    }\n\n  }\n\n  return ArrowSelection;\n};\n\n\n/*\n * By default, a button will always take focus on mousedown. For this component,\n * we want to override that behavior, such that a mousedown on a button keeps\n * the focus on the outer component.\n */\nfunction assumeButtonFocus(element, button) {\n  button.addEventListener('mousedown', event => {\n    // Given the main element the focus if it doesn't already have it.\n    element.focus();\n    // Prevent the default focus-on-mousedown behavior.\n    event.preventDefault();\n  });\n}\n\nfunction deviceSupportsTouch() {\n  return 'ontouchstart' in window ||\n      (window.DocumentTouch && document instanceof window.DocumentTouch);\n}\n\n// We try to detect the presence of a mouse by listening for mousemove events\n// which are *not* the result of a mousedown. On a touch device, a tap on the\n// page will generate a fake mousemove, followed by a mousedown. We don't want\n// to respond to those fake mousemove events. To discriminate between fake and\n// real mousemove events, when we get a mousemove event, we wait for a bit to\n// see if the same location is reported as the location of a subsequent\n// mousedown.\nfunction listenForMouse(element) {\n\n  element[mousedownListenerSymbol] = event => {\n    if (element[mouseTimeoutSymbol]) {\n      clearTimeout(element[mouseTimeoutSymbol]);\n    }\n    element[lastMouseXSymbol] = event.pageX;\n    element[lastMouseYSymbol] = event.pageY;\n  };\n  window.addEventListener('mousedown', element[mousedownListenerSymbol]);\n\n  element[mousemoveListenerSymbol] = event => {\n    // Postpone checking the mousemove location to give the mousedown event a\n    // chance to fire. The 250 ms delay is just guesswork; a shorter delay\n    // doesn't seem to work.\n    element[mouseTimeoutSymbol] = setTimeout(() => {\n      if (element[lastMouseXSymbol] != null && event.pageX !== element[lastMouseXSymbol] ||\n          element[lastMouseYSymbol] != null && event.pageY !== element[lastMouseYSymbol]) {\n        // mousemove event was at a location other than the last mousedown,\n        // and hence most likely a real mousemove event.\n        mouseDetected(element);\n      } else {\n        element[lastMouseXSymbol] = event.pageX;\n        element[lastMouseYSymbol] = event.pageY;\n      }\n    }, 250);\n  };\n  window.addEventListener('mousemove', element[mousemoveListenerSymbol]);\n}\n\nfunction mouseDetected(element) {\n  showArrows(element);\n\n  // We can stop listening for mouse events now.\n  if (element[mouseTimeoutSymbol]) {\n    clearTimeout(element[mouseTimeoutSymbol]);\n  }\n  window.removeEventListener('mousedown', element[mousedownListenerSymbol]);\n  window.removeEventListener('mousemove', element[mousemoveListenerSymbol]);\n  element[mousedownListenerSymbol] = null;\n  element[mousemoveListenerSymbol] = null;\n}\n\nfunction showArrows(element) {\n  element.classList.add('showArrows');\n}\n","import safeAttributes from './safeAttributes';\n\n\n// Memoized maps of attribute to property names and vice versa.\nconst attributeToPropertyNames = {};\nconst propertyNamesToAttributes = {};\n\n\n/* Exported function extends a base class with AttributeMarshalling. */\nexport default (base) => {\n\n  /**\n   * Mixin which marshalls attributes to properties and vice versa.\n   *\n   * If your component exposes a setter for a property, it's generally a good\n   * idea to let devs using your component be able to set that property in HTML\n   * via an element attribute. You can code that yourself by writing an\n   * `attributeChangedCallback`, or you can use this mixin to get a degree of\n   * automatic support.\n   *\n   * This mixin implements an `attributeChangedCallback` that will attempt to\n   * convert a change in an element attribute into a call to the corresponding\n   * property setter. Attributes typically follow hyphenated names (\"foo-bar\"),\n   * whereas properties typically use camelCase names (\"fooBar\"). This mixin\n   * respects that convention, automatically mapping the hyphenated attribute\n   * name to the corresponding camelCase property name.\n   *\n   * Example: You define a component using this mixin:\n   *\n   *     class MyElement extends AttributeMarshallingMixin(HTMLElement) {\n   *       get fooBar() { return this._fooBar; }\n   *       set fooBar(value) { this._fooBar = value; }\n   *     }\n   *     customElements.define('my-element', MyElement);\n   *\n   * If someone then instantiates your component in HTML:\n   *\n   *     <my-element foo-bar=\"Hello\"></my-element>\n   *\n   * Then, after the element has been upgraded, the `fooBar` setter will\n   * automatically be invoked with the initial value \"Hello\".\n   *\n   * For the time being, this mixin only supports string-valued properties.\n   * If you'd like to convert string attributes to other types (numbers,\n   * booleans), you need to implement `attributeChangedCallback` yourself.\n   */\n  class AttributeMarshalling extends base {\n\n    /*\n     * Handle a change to the attribute with the given name.\n     */\n    attributeChangedCallback(attributeName, oldValue, newValue) {\n      if (super.attributeChangedCallback) { super.attributeChangedCallback(); }\n      const propertyName = attributeToPropertyName(attributeName);\n      // If the attribute name corresponds to a property name, set the property.\n      // Ignore standard HTMLElement properties handled by the DOM.\n      if (propertyName in this && !(propertyName in HTMLElement.prototype)) {\n        this[propertyName] = newValue;\n      }\n    }\n\n    connectedCallback() {\n      if (super.connectedCallback) { super.connectedCallback(); }\n      safeAttributes.connected(this);\n    }\n\n    static get observedAttributes() {\n      return attributesForClass(this);\n    }\n\n    /**\n     * Set/unset the attribute with the indicated name.\n     *\n     * This method exists primarily to handle the case where an element wants to\n     * set a default property value that should be reflected as an attribute. An\n     * important limitation of custom element consturctors is that they cannot\n     * set attributes. A call to `reflectAttribute` during the constructor will\n     * be deferred until the element is connected to the document.\n     *\n     * @param {string} attribute - The name of the *attribute* (not property) to set.\n     * @param {object} value - The value to set. If null, the attribute will be removed.\n     */\n    reflectAttribute(attribute, value) {\n      return safeAttributes.setAttribute(this, attribute, value);\n    }\n\n    /**\n     * Set/unset the class with the indicated name.\n     *\n     * This method exists primarily to handle the case where an element wants to\n     * set a default property value that should be reflected as as class. An\n     * important limitation of custom element consturctors is that they cannot\n     * set attributes, including the `class` attribute. A call to\n     * `reflectClass` during the constructor will be deferred until the element\n     * is connected to the document.\n     *\n     * @param {string} className - The name of the class to set.\n     * @param {object} value - True to set the class, false to remove it.\n     */\n    reflectClass(className, value) {\n      return safeAttributes.toggleClass(this, className, value);\n    }\n\n  }\n\n  return AttributeMarshalling;\n};\n\n\n// Convert hyphenated foo-bar attribute name to camel case fooBar property name.\nfunction attributeToPropertyName(attributeName) {\n  let propertyName = attributeToPropertyNames[attributeName];\n  if (!propertyName) {\n    // Convert and memoize.\n    const hypenRegEx = /-([a-z])/g;\n    propertyName = attributeName.replace(hypenRegEx,\n        match => match[1].toUpperCase());\n    attributeToPropertyNames[attributeName] = propertyName;\n  }\n  return propertyName;\n}\n\nfunction attributesForClass(classFn) {\n\n  // We treat the element base classes as if they have no attributes, since we\n  // don't want to receive attributeChangedCallback for them.\n  if (classFn === HTMLElement || classFn === Object) {\n    return [];\n  }\n\n  // Get attributes for parent class.\n  const baseClass = Object.getPrototypeOf(classFn.prototype).constructor;\n  const baseAttributes = attributesForClass(baseClass);\n\n  // Get attributes for this class.\n  const propertyNames = Object.getOwnPropertyNames(classFn.prototype);\n  const setterNames = propertyNames.filter(propertyName =>\n    typeof Object.getOwnPropertyDescriptor(\n        classFn.prototype, propertyName).set === 'function');\n  const attributes = setterNames.map(setterName =>\n      propertyNameToAttribute(setterName));\n\n  // Merge.\n  const diff = attributes.filter(attribute =>\n      baseAttributes.indexOf(attribute) < 0);\n  return baseAttributes.concat(diff);\n}\n\n// Convert a camel case fooBar property name to a hyphenated foo-bar attribute.\nfunction propertyNameToAttribute(propertyName) {\n  let attribute = propertyNamesToAttributes[propertyName];\n  if (!attribute) {\n    // Convert and memoize.\n    const uppercaseRegEx = /([A-Z])/g;\n    attribute = propertyName.replace(uppercaseRegEx, '-$1').toLowerCase();\n  }\n  return attribute;\n}\n","/* Exported function extends a base class with ClickSelection. */\nexport default (base) => {\n\n  /**\n   * Mixin which maps a click (actually, a mousedown) to a selection.\n   *\n   * This simple mixin is useful in list box-like elements, where a click on a\n   * list item implicitly selects it.\n   *\n   * This mixin expects the component to provide an `items` property. You can\n   * provide that property yourself, or use\n   * [ContentItemsMixin](ContentItemsMixin.md). This mixin also expects the\n   * component to define a `selectedIndex` property. You can provide that\n   * yourself, or use [SingleSelectionMixin](SingleSelectionMixin.md).\n   */\n  class ClickSelection extends base {\n\n    constructor() {\n      super();\n      /*\n       * REVIEW: Which event should we listen to here?\n       *\n       * The standard use for this mixin is in list boxes. List boxes don't\n       * appear to be consistent with regard to whether they select on mousedown\n       * or click/mouseup.\n       */\n      this.addEventListener('mousedown', event => {\n        // HACK: If the item is a button, the event seems to be raised in\n        // phase 2 (AT_TARGET), but the target is the component, not item.\n        // Need to invesigate.\n        const target = event.target === this ?\n          event.path[0] :\n          event.target;\n        const index = indexOfContainingItem(this, target);\n        if (index >= 0) {\n          this.selectedIndex = index;\n          // Note: We don't call preventDefault here. The default behavior for\n          // mousedown includes setting keyboard focus if the element doesn't\n          // already have the focus, and we want to preserve that behavior.\n          event.stopPropagation();\n        }\n      });\n    }\n\n    // Default implementation. This will typically be handled by other mixins.\n    get selectedIndex() {\n      return super.selectedIndex;\n    }\n    set selectedIndex(index) {\n      if ('selectedIndex' in base.prototype) { super.selectedIndex = index; }\n    }\n\n  }\n\n  return ClickSelection;\n};\n\n\n/*\n * Return index of the element items that either is or contains the indicated\n * target. Return -1 if not found.\n */\nfunction indexOfContainingItem(element, target) {\n  const items = element.items;\n  const itemCount = items ? items.length : 0;\n  for (let i = 0; i < itemCount; i++) {\n    let item = items[i];\n    if (item === target || item.contains(target)) {\n      return i;\n    }\n  }\n  return -1;\n}\n","/* Exported function extends a base class with Composable. */\nexport default (base) => {\n\n  /**\n   * Mixin to make a class more easily composable with other mixins.\n   *\n   * This mixin contributes a `compose` method that applies a set of mixin\n   * functions and returns the resulting new class. This sugar can make the\n   * application of many mixins at once easier to read.\n   */\n  class Composable extends base {\n\n    /**\n     * Apply a set of mixin functions or mixin objects to the present class and\n     * return the new class.\n     *\n     * Instead of writing:\n     *\n     *     let MyClass = Mixin1(Mixin2(Mixin3(Mixin4(Mixin5(BaseClass)))));\n     *\n     * You can write:\n     *\n     *     let MyClass = ComposableMixin(BaseClass).compose(\n     *       Mixin1,\n     *       Mixin2,\n     *       Mixin3,\n     *       Mixin4,\n     *       Mixin5\n     *     );\n     *\n     * This function can also take mixin objects. A mixin object is just a\n     * shorthand for a mixin function that creates a new subclass with the given\n     * members. The mixin object's members are *not* copied directly onto the\n     * prototype of the base class, as with traditional mixins.\n     *\n     * In addition to providing syntactic sugar, this mixin can be used to\n     * define a class in ES5, which lacks ES6's `class` keyword.\n     *\n     * @param {...mixins} mixins - A set of mixin functions or objects to apply.\n     */\n    static compose(...mixins) {\n      // We create a new subclass for each mixin in turn. The result becomes\n      // the base class extended by any subsequent mixins. It turns out that\n      // we can use Array.reduce() to concisely express this, using the current\n      // object as the seed for reduce().\n      return mixins.reduce(composeClass, this);\n    }\n\n  }\n\n  return Composable;\n};\n\n\n// Properties defined by Object that we don't want to mixin.\nconst NON_MIXABLE_OBJECT_PROPERTIES = [\n  'constructor'\n];\n\n/*\n * Apply the mixin to the given base class to return a new class.\n * The mixin can either be a function that returns the modified class, or a\n * plain object whose members will be copied to the new class' prototype.\n */\nfunction composeClass(base, mixin) {\n  if (typeof mixin === 'function') {\n    // Mixin function\n    return mixin(base);\n  } else {\n    // Mixin object\n    class Subclass extends base {}\n    copyOwnProperties(mixin, Subclass.prototype, NON_MIXABLE_OBJECT_PROPERTIES);\n    return Subclass;\n  }\n}\n\n\n/*\n * Copy the given properties/methods to the target.\n * Return the updated target.\n */\nfunction copyOwnProperties(source, target, ignorePropertyNames = []) {\n  Object.getOwnPropertyNames(source).forEach(name => {\n    if (ignorePropertyNames.indexOf(name) < 0) {\n      const descriptor = Object.getOwnPropertyDescriptor(source, name);\n      Object.defineProperty(target, name, descriptor);\n    }\n  });\n  return target;\n}\n","import createSymbol from './createSymbol';\nimport toggleClass from './toggleClass';\nimport symbols from './symbols';\n\n\n// Symbols for private data members on an element.\nconst itemsSymbol = createSymbol('items');\nconst itemInitializedSymbol = createSymbol('itemInitialized');\n\n\n/* Exported function extends a base class with ContentItems. */\nexport default (base) => {\n\n  /**\n   * Mixin which maps content semantics (elements) to list item semantics.\n   *\n   * Items differ from element contents in several ways:\n   *\n   * * They are often referenced via index.\n   * * They may have a selection state.\n   * * It's common to do work to initialize the appearance or state of a new\n   *   item.\n   * * Auxiliary invisible child elements are filtered out and not counted as\n   *   items. Auxiliary elements include link, script, style, and template\n   *   elements. This filtering ensures that those auxiliary elements can be\n   *   used in markup inside of a list without being treated as list items.\n   *\n   * This mixin expects a component to provide a `content` property returning a\n   * raw set of elements. You can provide that yourself, or use\n   * [DistributedChildrenContentMixin](DistributedChildrenContentMixin.md).\n   *\n   * The most commonly referenced property defined by this mixin is the `items`\n   * property. To avoid having to do work each time that property is requested,\n   * this mixin supports an optimized mode. If you invoke the `contentChanged`\n   * method when the set of items changes, the mixin concludes that you'll take\n   * care of notifying it of future changes, and turns on the optimization. With\n   * that on, the mixin saves a reference to the computed set of items, and will\n   * return that immediately on subsequent calls to the `items` property. If you\n   * use this mixin in conjunction with\n   * [DistributedChildrenContentMixin](DistributedChildrenContentMixin.md), the\n   * `contentChanged` method will be invoked for you when the element's children\n   * change, turning on the optimization automatically.\n   */\n  class ContentItems extends base {\n\n    contentChanged() {\n      if (super.contentChanged) { super.contentChanged(); }\n\n      // Since we got the contentChanged call, we'll assume we'll be notified if\n      // the set of items changes later. We turn on memoization of the items\n      // property by setting our internal property to null (instead of\n      // undefined).\n      this[itemsSymbol] = null;\n\n      this[symbols.itemsChanged]();\n    }\n\n    /**\n     * This method is invoked whenever a new item is added to the list.\n     *\n     * The default implementation of this method does nothing. You can override\n     * this to perform per-item initialization.\n     *\n     * @param {HTMLElement} item - The item that was added.\n     */\n    [symbols.itemAdded](item) {\n      if (super[symbols.itemAdded]) { super[symbols.itemAdded](item); }\n    }\n\n    /**\n     * The selection state for a single item has changed.\n     *\n     * Invoke this method to signal that the selected state of the indicated item\n     * has changed. By default, this applies a `selected` CSS class if the item\n     * is selected, and removed it if not selected.\n     *\n     * @param {HTMLElement} item - The item whose selection state has changed.\n     * @param {boolean} selected - True if the item is selected, false if not.\n     */\n    [symbols.itemSelected](item, selected) {\n      if (super[symbols.itemSelected]) { super[symbols.itemSelected](item, selected); }\n      toggleClass(item, 'selected', selected);\n    }\n\n    /**\n     * The current set of items in the list. See the top-level documentation for\n     * mixin for a description of how items differ from plain content.\n     *\n     * @type {HTMLElement[]}\n     */\n    get items() {\n      let items;\n      if (this[itemsSymbol] == null) {\n        items = filterAuxiliaryElements(this.content);\n        // Note: test for *equality* with null; don't treat undefined as a match.\n        if (this[itemsSymbol] === null) {\n          // Memoize the set of items.\n          this[itemsSymbol] = items;\n        }\n      } else {\n        // Return the memoized items.\n        items = this[itemsSymbol];\n      }\n      return items;\n    }\n\n    /**\n     * This method is invoked when the underlying contents change. It is also\n     * invoked on component initialization – since the items have \"changed\" from\n     * being nothing.\n     */\n    [symbols.itemsChanged]() {\n      if (super[symbols.itemsChanged]) { super[symbols.itemsChanged](); }\n\n      // Perform per-item initialization.\n      Array.prototype.forEach.call(this.items, item => {\n        if (!item[itemInitializedSymbol]) {\n          this[symbols.itemAdded](item);\n          item[itemInitializedSymbol] = true;\n        }\n      });\n\n      this.dispatchEvent(new CustomEvent('items-changed'));\n    }\n\n    /**\n     * Fires when the items in the list change.\n     *\n     * @memberof ContentItems\n     * @event items-changed\n     */\n  }\n\n  return ContentItems;\n};\n\n\n// Return the given elements, filtering out auxiliary elements that aren't\n// typically visible. Items which are not elements are returned as is.\nfunction filterAuxiliaryElements(items) {\n  const auxiliaryTags = [\n    'link',\n    'script',\n    'style',\n    'template'\n  ];\n  return [].filter.call(items, function(item) {\n    return !item.localName || auxiliaryTags.indexOf(item.localName) < 0;\n  });\n}\n","import symbols from './symbols';\n\n\n/* Exported function extends a base class with DirectionSelection. */\nexport default (base) => {\n\n  /**\n   * Mixin which maps direction semantics (goLeft, goRight, etc.) to selection\n   * semantics (selectPrevious, selectNext, etc.).\n   *\n   * This mixin can be used in conjunction with\n   * [KeyboardDirectionMixin](KeyboardDirectionMixin.md) (which maps keyboard\n   * events to directions) and a mixin that handles selection like\n   * [SingleSelectionMixin](SingleSelectionMixin.md).\n   */\n  class DirectionSelection extends base {\n\n    [symbols.goDown]() {\n      if (super[symbols.goDown]) { super[symbols.goDown](); }\n      return this.selectNext();\n    }\n\n    [symbols.goEnd]() {\n      if (super[symbols.goEnd]) { super[symbols.goEnd](); }\n      return this.selectLast();\n    }\n\n    [symbols.goLeft]() {\n      if (super[symbols.goLeft]) { super[symbols.goLeft](); }\n      return this.selectPrevious();\n    }\n\n    [symbols.goRight]() {\n      if (super[symbols.goRight]) { super[symbols.goRight](); }\n      return this.selectNext();\n    }\n\n    [symbols.goStart]() {\n      if (super[symbols.goStart]) { super[symbols.goStart](); }\n      return this.selectFirst();\n    }\n\n    [symbols.goUp]() {\n      if (super[symbols.goUp]) { super[symbols.goUp](); }\n      return this.selectPrevious();\n    }\n\n    // Default implementation. This will typically be handled by other mixins.\n    get selectedFraction() {\n      return super.selectedFraction;\n    }\n    set selectedFraction(value) {\n      if ('selectedFraction' in base.prototype) { super.selectedFraction = value; }\n    }\n\n    // Default implementation. This will typically be handled by other mixins.\n    selectFirst() {\n      if (super.selectFirst) { return super.selectFirst(); }\n    }\n\n    // Default implementation. This will typically be handled by other mixins.\n    selectLast() {\n      if (super.selectLast) { return super.selectLast(); }\n    }\n\n    // Default implementation. This will typically be handled by other mixins.\n    selectNext() {\n      if (super.selectNext) { return super.selectNext(); }\n    }\n\n    // Default implementation. This will typically be handled by other mixins.\n    selectPrevious() {\n      if (super.selectPrevious) { return super.selectPrevious(); }\n    }\n\n    // Map drag travel fraction to selection fraction.\n    get travelFraction() {\n      return super.travelFraction;\n    }\n    set travelFraction(value) {\n      if ('travelFraction' in base.prototype) { super.travelFraction = value; }\n      this.selectedFraction = value;\n    }\n\n  }\n\n  return DirectionSelection;\n};\n","import microtask from './microtask';\n\n\n/* Exported function extends a base class with DistributedChildrenContent. */\nexport default (base) => {\n\n  /**\n   * Mixin which defines a component's content as its children, expanding any\n   * nodes distributed to the component's slots.\n   *\n   * This also provides notification of changes to a component's content. It\n   * will invoke a `contentChanged` method when the component is first\n   * instantiated, and whenever its distributed children change. This is an\n   * easy way to satisfy the Gold Standard checklist item for monitoring\n   * [Content Changes](https://github.com/webcomponents/gold-standard/wiki/Content-Changes).\n   *\n   * Example:\n   *\n   * ```\n   * let base = DistributedChildrenContentMixin(DistributedChildrenMixin(HTMLElement));\n   * class CountingElement extends base {\n   *\n   *   constructor() {\n   *     super();\n   *     let root = this.attachShadow({ mode: 'open' });\n   *     root.innerHTML = `<slot></slot>`;\n   *   }\n   *\n   *   contentChanged() {\n   *     // Count the component's children, both initially and when changed.\n   *     this.count = this.distributedChildren.length;\n   *   }\n   *\n   * }\n   * ```\n   *\n   * Note that content change detection depends upon the element having at least\n   * one `slot` element in its shadow subtree.\n   *\n   * This mixin is intended for use with the\n   * [DistributedChildrenMixin](DistributedChildrenMixin.md). See that mixin for\n   * a discussion of how that works. This DistributedChildrenContentMixin\n   * provides an easy way of defining the \"content\" of a component as the\n   * component's distributed children. That in turn lets mixins like\n   * [ContentItemsMixin](ContentItemsMixin.md) manipulate the children as list\n   * items.\n   */\n  class DistributedChildrenContent extends base {\n\n    constructor() {\n      super();\n\n      if (this.shadowRoot) {\n        // Listen to changes on all slots.\n        const slots = this.shadowRoot.querySelectorAll('slot');\n        slots.forEach(slot => slot.addEventListener('slotchange', event => {\n          this.contentChanged();\n        }));\n      }\n\n      // Make an initial call to contentChanged() so that the component can do\n      // initialization that it normally does when content changes.\n      //\n      // This will invoke contentChanged() handlers in other mixins. In order\n      // that those mixins have a chance to complete their own initialization,\n      // we add the contentChanged() call to the microtask queue.\n      microtask(() => this.contentChanged());\n    }\n\n    /**\n     * Invoked when the contents of the component (including distributed\n     * children) have changed.\n     *\n     * This method is also invoked when a component is first instantiated; the\n     * contents have essentially \"changed\" from being nothing. This allows the\n     * component to perform initial processing of its children.\n     */\n    contentChanged() {\n      if (super.contentChanged) { super.contentChanged(); }\n      const event = new CustomEvent('content-changed');\n      this.dispatchEvent(event);\n    }\n\n    /**\n     * The content of this component, defined to be the flattened array of\n     * children distributed to the component.\n     *\n     * @type {HTMLElement[]}\n     */\n    get content() {\n      const distributedChildren = this.distributedChildren;\n      if (typeof distributedChildren === 'undefined') {\n        console.warn(`DistributedChildrenContentMixin expects the component to define a \"distributedChildren\" property.`);\n      }\n      return distributedChildren;\n    }\n    set content(value) {\n      if ('content' in base.prototype) { super.content = value; }\n      // TODO: Set the children to the given value (which should be an array of\n      // elements)?\n    }\n\n    /**\n     * This event is raised when the component's contents (including distributed\n     * children) have changed.\n     *\n     * @memberof DistributedChildrenContent\n     * @event content-changed\n     */\n  }\n\n  return DistributedChildrenContent;\n};\n","/* Exported function extends a base class with DistributedChildren. */\nexport default (base) => {\n\n  /**\n   * Mixin which defines helpers for accessing a component's distributed\n   * children as a flattened array or string.\n   *\n   * The standard DOM API provides several ways of accessing child content:\n   * `children`, `childNodes`, and `textContent`. None of these functions are\n   * Shadow DOM aware. This mixin defines variations of those functions that\n   * *are* Shadow DOM aware.\n   *\n   * Example: you create a component `<count-children>` that displays a number\n   * equal to the number of children placed inside that component. If someone\n   * instantiates your component like:\n   *\n   *     <count-children>\n   *       <div></div>\n   *       <div></div>\n   *       <div></div>\n   *     </count-children>\n   *\n   * Then the component should show \"3\", because there are three children. To\n   * calculate the number of children, the component can just calculate\n   * `this.children.length`. However, suppose someone instantiates your\n   * component inside one of their own components, and puts a `<slot>` element\n   * inside your component:\n   *\n   *     <count-children>\n   *       <slot></slot>\n   *     </count-children>\n   *\n   * If your component only looks at `this.children`, it will always see exactly\n   * one child — the `<slot>` element. But the user looking at the page will\n   * *see* any nodes distributed to that slot. To match what the user sees, your\n   * component should expand any `<slot>` elements it contains.\n   *\n   * That is the problem this mixin solves. After applying this mixin, your\n   * component code has access to `this.distributedChildren`, whose `length`\n   * will return the total number of all children distributed to your component\n   * in the composed tree.\n   *\n   * Note: The latest Custom Elements API design calls for a new function,\n   * `getAssignedNodes` that takes an optional `deep` parameter, that will solve\n   * this problem at the API level.\n   */\n  class DistributedChildren extends base {\n\n    /**\n     * An in-order collection of distributed children, expanding any slot\n     * elements. Like the standard children property, this skips text nodes.\n     *\n     * @type {HTMLElement[]}\n     */\n    get distributedChildren() {\n      return expandContentElements(this.children, false);\n    }\n\n    /**\n     * An in-order collection of distributed child nodes, expanding any slot\n     * elements. Like the standard childNodes property, this includes text\n     * nodes.\n     *\n     * @type {Node[]}\n     */\n    get distributedChildNodes() {\n      return expandContentElements(this.childNodes, true);\n    }\n\n    /**\n     * The concatenated text content of all distributed child nodes, expanding\n     * any slot elements.\n     *\n     * @type {string}\n     */\n    get distributedTextContent() {\n      const strings = this.distributedChildNodes.map(function(child) {\n        return child.textContent;\n      });\n      return strings.join('');\n    }\n\n  }\n\n  return DistributedChildren;\n};\n\n\n/*\n * Given a array of nodes, return a new array with any content elements expanded\n * to the nodes distributed to that content element. This rule is applied\n * recursively.\n *\n * If includeTextNodes is true, text nodes will be included, as in the\n * standard childNodes property; by default, this skips text nodes, like the\n * standard children property.\n */\nfunction expandContentElements(nodes, includeTextNodes) {\n  const expanded = Array.prototype.map.call(nodes, node => {\n    // We want to see if the node is an instanceof HTMLSlotELement, but\n    // that class won't exist if the browser that doesn't support native\n    // Shadow DOM and if the Shadow DOM polyfill hasn't been loaded. Instead,\n    // we do a simplistic check to see if the tag name is \"slot\".\n    const isSlot = typeof HTMLSlotElement !== 'undefined' ?\n      node instanceof HTMLSlotElement :\n      node.localName === 'slot';\n    if (isSlot) {\n      // Use the nodes assigned to this node instead.\n      const assignedNodes = node.assignedNodes({ flatten: true });\n      return assignedNodes ?\n        expandContentElements(assignedNodes, includeTextNodes) :\n        [];\n    } else if (node instanceof HTMLElement) {\n      // Plain element; use as is.\n      return [node];\n    } else if (node instanceof Text && includeTextNodes) {\n      // Text node.\n      return [node];\n    } else {\n      // Comment, processing instruction, etc.; skip.\n      return [];\n    }\n  });\n  const flattened = [].concat(...expanded);\n  return flattened;\n}\n","import createSymbol from './createSymbol';\n\n\n// Symbols for private data members on an element.\nconst selectedFractionSymbol = createSymbol('selectedFraction');\n\n\n/* Exported function extends a base class with FractionalSelection. */\nexport default function mixin(base) {\n\n  /**\n   * Adds support for fractional selection: treating a selection as a real\n   * number that combines an integer portion (an index into a list), and a\n   * fraction (indicating how far of the way we are to the next or previous\n   * item).\n   *\n   * This is useful in components that support incremental operations during\n   * dragging and swiping. Example: a carousel component has several items, and the\n   * currently selected item is item 3. The user begins swiping to the left,\n   * moving towards selecting item 4. Halfway through this operation, the\n   * fractional selection value is 3.5.\n   *\n   * This value permits communication between mixins like\n   * [SwipeDirectionMixin](./SwipeDirectionMixin.md) and\n   * [TrackpadDirectionMixin](./TrackpadDirectionMixin.md), which generate\n   * fractional selection values, and mixins like\n   * [SelectionAnimationMixin](./SelectionAnimationMixin.md), which can render\n   * selection at a fractional value.\n   */\n  class FractionalSelection extends base {\n\n    connectedCallback() {\n      if (super.connectedCallback) { super.connectedCallback(); }\n      this.selectedFraction = 0;\n    }\n\n    /**\n     * A fractional value indicating how far the user has currently advanced to\n     * the next/previous item. E.g., a `selectedFraction` of 3.5 indicates the\n     * user is halfway between items 3 and 4.\n     *\n     * @type {number}\n     */\n    get selectedFraction() {\n      return this[selectedFractionSymbol];\n    }\n    set selectedFraction(value) {\n      this[selectedFractionSymbol] = value;\n      if ('selectedFraction' in base.prototype) { super.selectedFraction = value; }\n      const event = new CustomEvent('selected-fraction-changed');\n      this.dispatchEvent(event);\n    }\n\n  }\n\n  return FractionalSelection;\n}\n\n\nmixin.helpers = {\n\n  /*\n   * Dampen a selection that goes past the beginning or end of a list. This is\n   * generally used to produce a visual effect of tension as the user tries to\n   * go further in a direction that has no more items.\n   *\n   * Example: suppose `itemCount` is 5, indicating a list of 5 items. The index of\n   * the last item is 4. If the `selection` parameter is 4.5, the user is trying\n   * to go past this last item. When a damping function is applied, the resulting\n   * value will be less than 4.5 (the actual value will be 4.25). When this\n   * selection state is rendered, the user will see that, each unit distance the\n   * drag travels has less and less visible effect. This is perceived as tension.\n   *\n   * @param {number} selection - A real number indicating a selection position\n   * @param {number} itemCount - An integer for the number of items in the list\n   * @returns {number} A real number representing the damped selection value.\n   */\n  dampedSelection(selection, itemCount) {\n    const bound = itemCount - 1;\n    let damped;\n    if (selection < 0) {\n      // Trying to go past beginning of list. Apply tension from the left edge.\n      damped = -mixin.helpers.damping(-selection);\n    } else if (selection >= bound) {\n      // Trying to go past end of list. Apply tension from the right edge.\n      damped = bound + mixin.helpers.damping(selection - bound);\n    } else {\n      // No damping required.\n      damped = selection;\n    }\n    return damped;\n  },\n\n  /*\n   * Calculate damping as a function of the distance past the minimum/maximum\n   * values.\n   *\n   * We want to asymptotically approach an absolute minimum of 1 unit\n   * below/above the actual minimum/maximum. This requires calculating a\n   * hyperbolic function.\n   *\n   * See http://www.wolframalpha.com/input/?i=y+%3D+-1%2F%28x%2B1%29+%2B+1\n   * for the one we use. The only portion of that function we care about is when\n   * x is zero or greater. An important consideration is that the curve be\n   * tangent to the diagonal line x=y at (0, 0). This ensures smooth continuity\n   * with the normal drag behavior, in which the visible sliding is linear with\n   * the distance the touchpoint has been dragged.\n   */\n  damping(x) {\n    const y = (-1 / (x + 1)) + 1;\n    return y;\n  },\n\n  /*\n   * Return the current fractional selection value for the given element.\n   *\n   * This simply adds the element's `selectedIndex` and `selectedFraction`\n   * properties.\n   *\n   * @param {HTMLElement} element - An element that supports selection\n   */\n  elementSelection(element) {\n    const selectedIndex = element.selectedIndex;\n    if (selectedIndex < 0) {\n      // No selection\n      return;\n    }\n    const selectedFraction = element.selectedFraction || 0;\n    return selectedIndex + selectedFraction;\n  },\n\n  /*\n   * Breaks a fractional selection into its integer and fractional parts.\n   *\n   * Example: if passed 3.5, this returns { index: 3, fraction: 5 }.\n   *\n   * @param {number} selection – A real number representing a selection point\n   * @returns {object} - An object with an `index` property holding the\n   * selection's integer component, and a `fraction` property holding the\n   * selection's fractional component.\n   */\n  selectionParts(selection) {\n    // Stupid IE doesn't have Math.trunc.\n    // const index = Math.trunc(selection);\n    const index = selection < 0 ? Math.ceil(selection) : Math.floor(selection);\n    const fraction = selection - index;\n    return { index, fraction };\n  },\n\n  /*\n   * Returns a fractional selection point after accounting for wrapping, ensuring\n   * that the integer portion of the selection stays between 0 and `itemCount`-1.\n   * That is, the integer portion will always be a valid index into the list.\n   *\n   * Example of wrapping past the end of the list: if `selection` is 5.5 and\n   * `itemCount` is 5, this returns 0.5. Example of wrapping past the beginning of\n   * the list: if `selection` is 0.5 and `itemCount` is 5, this returns 4.5.\n   *\n   * @param {number} selection - A real number representing a selection point\n   * @param {number} itemCount - The number of items in the list\n   * @returns {number} - The result of wrapping the selection point\n   */\n  wrappedSelection(selection, itemCount) {\n    // Handles possibility of negative mod.\n    // See http://stackoverflow.com/a/18618250/76472\n    return ((selection % itemCount) + itemCount) % itemCount;\n  },\n\n  /*\n   * Return the parts of a selection, first wrapping if necessary.\n   *\n   * @param {number} selection – A real number representing a selection point\n   * @param {number} itemCount - The number of items in the list\n   * @param {boolean} wrap – True if the selection should wrap to stay within the\n   * list\n   * @returns {object} – The parts of the selection, using the same format as\n   * `selectionParts`.\n   */\n  wrappedSelectionParts(selection, itemCount, wrap) {\n    if (wrap) {\n      selection = mixin.helpers.wrappedSelection(selection, itemCount);\n    }\n    return mixin.helpers.selectionParts(selection);\n  }\n\n};\n","import createSymbol from './createSymbol';\nimport safeAttributes from './safeAttributes';\nimport symbols from './symbols';\n\n\n// Symbols for private data members on an element.\nconst genericSymbol = createSymbol('generic');\n\n\n/* Exported function extends a base class with Generic. */\nexport default (base) => {\n\n  /**\n   * Mixin which allows a component to support a \"generic\" style: a minimalist\n   * style that can easily be removed to reset its visual appearance to a\n   * baseline state.\n   *\n   * By default, a component should provide a minimal visual presentation that\n   * allows the component to function. However, the more styling the component\n   * provides by default, the harder it becomes to get the component to fit in\n   * in other settings. Each CSS rule has to be overridden. Worse, new CSS rules\n   * added to the default style won't be overridden by default, making it hard\n   * to know whether a new version of a component will still look okay.\n   *\n   * As a compromise, the mixin defines a `generic` attribute. This attribute is\n   * normally set by default, and styles can be written that apply only when the\n   * generic attribute is set. This allows the construction of CSS rules that\n   * will only apply to generic components like:\n   *\n   *     :host([generic=\"\"]) {\n   *       ... generic appearance defined here ...\n   *     }\n   *\n   * This makes it easy to remove all default styling — set the `GenericMixin`\n   * attribute to false, and all default styling will be removed.\n   */\n  class Generic extends base {\n\n    constructor() {\n      super();\n      // Set defaults.\n      if (typeof this.generic === 'undefined') {\n        this.generic = this[symbols.defaults].generic;\n      }\n    }\n\n    // This mixin doesn't actually respond to attribute changes, but relies\n    // on separately-defined behavior (e.g., in AttributeMarshallingMixin) for that.\n    // Still, we need define a baseline attributeChangedCallback that does\n    // nothing, in case this mixin gets used on its own.\n    attributeChangedCallback(name, oldValue, newValue) {\n      if (super.attributeChangedCallback) { super.attributeChangedCallback(name, oldValue, newValue); }\n    }\n\n    connectedCallback() {\n      if (super.connectedCallback) { super.connectedCallback(); }\n      safeAttributes.connected(this);\n    }\n\n    get [symbols.defaults]() {\n      const defaults = super[symbols.defaults] || {};\n      defaults.generic = true;\n      return defaults;\n    }\n\n    /**\n     * True if the component would like to receive generic styling.\n     *\n     * This property is true by default — set it to false to turn off all\n     * generic styles. This makes it easier to apply custom styling; you won't\n     * have to explicitly override styling you don't want.\n     *\n     * @type Boolean\n     * @default true\n     */\n    get generic() {\n      return this[genericSymbol];\n    }\n    set generic(value) {\n      const parsed = typeof value === 'string' ?\n        String(value) !== 'false' :\n        value;\n      this[genericSymbol] = parsed;\n\n      if ('generic' in base.prototype) { super.generic = value; }\n\n      // We roll our own attribute setting so that an explicitly false value\n      // shows up as GenericMixin=\"false\".\n      if (parsed === false) {\n        // Explicitly use false string.\n        safeAttributes.setAttribute(this, 'generic', 'false');\n      } else if (parsed == null) {\n        // Explicitly remove attribute. (Always safe to do this.)\n        this.removeAttribute('generic');\n      } else {\n        // Use the empty string to get attribute to appear with no value.\n        safeAttributes.setAttribute(this, 'generic', '');\n      }\n    }\n\n  }\n\n  return Generic;\n};\n\n\n","import createSymbol from './createSymbol';\nimport symbols from './symbols';\n\n\n// Symbols for private data members on an element.\nconst navigationAxisSymbol = createSymbol('navigationAxis');\n\n\n/* Exported function extends a base class with KeyboardDirection. */\nexport default (base) => {\n\n  /**\n   * Mixin which maps direction keys (Left, Right, etc.) to direction semantics\n   * (go left, go right, etc.).\n   *\n   * This mixin expects the component to invoke a `keydown` method when a key is\n   * pressed. You can use [KeyboardMixin](KeyboardMixin.md) for that\n   * purpose, or wire up your own keyboard handling and call `keydown` yourself.\n   *\n   * This mixin calls methods such as `goLeft` and `goRight`. You can define\n   * what that means by implementing those methods yourself. If you want to use\n   * direction keys to navigate a selection, use this mixin with\n   * [DirectionSelectionMixin](DirectionSelectionMixin.md).\n   */\n  class KeyboardDirection extends base {\n\n    constructor() {\n      super();\n      // Set defaults.\n      if (typeof this.navigationAxis === 'undefined') {\n        this.navigationAxis = this[symbols.defaults].navigationAxis;\n      }\n    }\n\n    get [symbols.defaults]() {\n      const defaults = super[symbols.defaults] || {};\n      defaults.navigationAxis = 'both';\n      return defaults;\n    }\n\n    /**\n     * Invoked when the user wants to go/navigate down.\n     * The default implementation of this method does nothing.\n     */\n    [symbols.goDown]() {\n      if (super[symbols.goDown]) { return super[symbols.goDown](); }\n    }\n\n    /**\n     * Invoked when the user wants to go/navigate to the end (e.g., of a list).\n     * The default implementation of this method does nothing.\n     */\n    [symbols.goEnd]() {\n      if (super[symbols.goEnd]) { return super[symbols.goEnd](); }\n    }\n\n    /**\n     * Invoked when the user wants to go/navigate left.\n     * The default implementation of this method does nothing.\n     */\n    [symbols.goLeft]() {\n      if (super[symbols.goLeft]) { return super[symbols.goLeft](); }\n    }\n\n    /**\n     * Invoked when the user wants to go/navigate right.\n     * The default implementation of this method does nothing.\n     */\n    [symbols.goRight]() {\n      if (super[symbols.goRight]) { return super[symbols.goRight](); }\n    }\n\n    /**\n     * Invoked when the user wants to go/navigate to the start (e.g., of a\n     * list). The default implementation of this method does nothing.\n     */\n    [symbols.goStart]() {\n      if (super[symbols.goStart]) { return super[symbols.goStart](); }\n    }\n\n    /**\n     * Invoked when the user wants to go/navigate up.\n     * The default implementation of this method does nothing.\n     */\n    [symbols.goUp]() {\n      if (super[symbols.goUp]) { return super[symbols.goUp](); }\n    }\n\n    /**\n     * Indicates the direction of permitted navigation with the keyboard.\n     *\n     * Accepted values are \"horizontal\", \"vertical\", or \"both\" (the default).\n     * If this property is \"horizontal\", the Up Arrow and Down Arrow keys will\n     * be ignored. Conversely, if this is \"vertical\", the Left Arrow and Right\n     * Arrow keys will be ignored.\n     *\n     * @type {string}\n     */\n    get navigationAxis() {\n      return this[navigationAxisSymbol];\n    }\n    set navigationAxis(value) {\n      this[navigationAxisSymbol] = value;\n      if ('navigationAxis' in base.prototype) { super.navigationAxis = value; }\n    }\n\n    [symbols.keydown](event) {\n      let handled;\n\n      const axis = this.navigationAxis;\n      const horizontal = (axis === 'horizontal' || axis === 'both');\n      const vertical = (axis === 'vertical' || axis === 'both');\n\n      // Ignore Left/Right keys when metaKey or altKey modifier is also pressed,\n      // as the user may be trying to navigate back or forward in the browser.\n      switch (event.keyCode) {\n        case 35: // End\n          handled = this[symbols.goEnd]();\n          break;\n        case 36: // Home\n          handled = this[symbols.goStart]();\n          break;\n        case 37: // Left\n          if (horizontal && !event.metaKey && !event.altKey) {\n            handled = this[symbols.goLeft]();\n          }\n          break;\n        case 38: // Up\n          if (vertical) {\n            handled = event.altKey ? this[symbols.goStart]() : this[symbols.goUp]();\n          }\n          break;\n        case 39: // Right\n          if (horizontal && !event.metaKey && !event.altKey) {\n            handled = this[symbols.goRight]();\n          }\n          break;\n        case 40: // Down\n          if (vertical) {\n            handled = event.altKey ? this[symbols.goEnd]() : this[symbols.goDown]();\n          }\n          break;\n      }\n      // Prefer mixin result if it's defined, otherwise use base result.\n      return handled || (super[symbols.keydown] && super[symbols.keydown](event));\n    }\n\n  }\n\n  return KeyboardDirection;\n};\n","import symbols from './symbols';\n\n\n/* Exported function extends a base class with Keyboard. */\nexport default (base) => {\n\n  /**\n   * Mixin which manages the keydown handling for a component.\n   *\n   * This mixin handles several keyboard-related features.\n   *\n   * First, it wires up a single keydown event handler that can be shared by\n   * multiple mixins on a component. The event handler will invoke a `keydown`\n   * method with the event object, and any mixin along the prototype chain that\n   * wants to handle that method can do so.\n   *\n   * If a mixin wants to indicate that keyboard event has been handled, and that\n   * other mixins should *not* handle it, the mixin's `keydown` handler should\n   * return a value of true. The convention that seems to work well is that a\n   * mixin should see if it wants to handle the event and, if not, then ask the\n   * superclass to see if it wants to handle the event. This has the effect of\n   * giving the mixin that was applied last the first chance at handling a\n   * keyboard event.\n   *\n   * Example:\n   *\n   *     [symbols.keydown](event) {\n   *       let handled;\n   *       switch (event.keyCode) {\n   *         // Handle the keys you want, setting handled = true if appropriate.\n   *       }\n   *       // Prefer mixin result if it's defined, otherwise use base result.\n   *       return handled || (super[symbols.keydown] && super[symbols.keydown](event));\n   *     }\n   *\n   * A second feature provided by this mixin is that it implicitly makes the\n   * component a tab stop if it isn't already, by setting `tabIndex` to 0. This\n   * has the effect of adding the component to the tab order in document order.\n   */\n  class Keyboard extends base {\n\n    constructor() {\n      super();\n      this.addEventListener('keydown', event => {\n        const handled = this[symbols.keydown](event);\n        if (handled) {\n          event.preventDefault();\n          event.stopPropagation();\n        }\n      });\n    }\n\n    connectedCallback() {\n      if (super.connectedCallback) { super.connectedCallback(); }\n      if (this.getAttribute('tabindex') == null && this[symbols.defaults].tabindex !== null) {\n        this.setAttribute('tabindex', this[symbols.defaults].tabindex);\n      }\n    }\n\n    get [symbols.defaults]() {\n      const defaults = super[symbols.defaults] || {};\n      // The default tab index is 0 (document order).\n      defaults.tabindex = 0;\n      return defaults;\n    }\n\n    /**\n     * Handle the indicated keyboard event.\n     *\n     * The default implementation of this method does nothing. This will\n     * typically be handled by other mixins.\n     *\n     * @param {KeyboardEvent} event - the keyboard event\n     * @return {boolean} true if the event was handled\n     */\n    [symbols.keydown](event) {\n      if (super[symbols.keydown]) { return super[symbols.keydown](event); }\n    }\n\n  }\n\n  return Keyboard;\n};\n","import symbols from './symbols';\n\n\n/* Exported function extends a base class with KeyboardPagedSelection. */\nexport default (base) => {\n\n  /**\n   * Mixin which maps page keys (Page Up, Page Down) into operations that move\n   * the selection by one page.\n   *\n   * The keyboard interaction model generally follows that of Microsoft Windows'\n   * list boxes instead of those in OS X:\n   *\n   * * The Page Up/Down and Home/End keys actually change the selection, rather\n   *   than just scrolling. The former behavior seems more generally useful for\n   *   keyboard users.\n   *\n   * * Pressing Page Up/Down will change the selection to the topmost/bottommost\n   *   visible item if the selection is not already there. Thereafter, the key\n   *   will move the selection up/down by a page, and (per the above point) make\n   *   the selected item visible.\n   *\n   * To ensure the selected item is in view following use of Page Up/Down, use\n   * the related [SelectionInViewMixin](SelectionInViewMixin.md).\n   *\n   * This mixin expects the component to invoke a `keydown` method when a key is\n   * pressed. You can use [KeyboardMixin](KeyboardMixin.md) for that\n   * purpose, or wire up your own keyboard handling and call `keydown` yourself.\n   */\n  class KeyboardPagedSelection extends base {\n\n    [symbols.keydown](event) {\n      let handled;\n      switch (event.keyCode) {\n        case 33: // Page Up\n          handled = this.pageUp();\n          break;\n        case 34: // Page Down\n          handled = this.pageDown();\n          break;\n      }\n      // Prefer mixin result if it's defined, otherwise use base result.\n      return handled || (super[symbols.keydown] && super[symbols.keydown](event));\n    }\n\n    /**\n     * Scroll down one page.\n     */\n    pageDown() {\n      if (super.pageDown) { super.pageDown(); }\n      return scrollOnePage(this, true);\n    }\n\n    /**\n     * Scroll up one page.\n     */\n    pageUp() {\n      if (super.pageUp) { super.pageUp(); }\n      return scrollOnePage(this, false);\n    }\n\n    /**\n     * The element that should be scrolled with the Page Up/Down keys.\n     * Default is the current element.\n     *\n     * @type {HTMLElement}\n     */\n    get scrollTarget() {\n      // Prefer base result.\n      return 'scrollTarget' in base.prototype ? super.scrollTarget : this;\n    }\n    set scrollTarget(element) {\n      if ('scrollTarget' in base.prototype) { super.scrollTarget = element; }\n    }\n  }\n\n  return KeyboardPagedSelection;\n};\n\n\n// Return the item whose content spans the given y position (relative to the\n// top of the list's scrolling client area), or null if not found.\n//\n// If downward is true, move down the list of items to find the first item\n// found at the given y position; if downward is false, move up the list of\n// items to find the last item at that position.\nfunction getIndexOfItemAtY(element, y, downward) {\n  const items = element.items;\n  const start = downward ? 0 : items.length - 1;\n  const end = downward ? items.length : 0;\n  const step = downward ? 1 : -1;\n  const scrollTarget = element.scrollTarget;\n  const topOfClientArea = scrollTarget.offsetTop + scrollTarget.clientTop;\n\n  // Find the item spanning the indicated y coordinate.\n  let item;\n  let itemIndex = start;\n  let itemTop;\n  let found = false;\n  while (itemIndex !== end) {\n    item = items[itemIndex];\n    itemTop = item.offsetTop - topOfClientArea;\n    const itemBottom = itemTop + item.offsetHeight;\n    if (itemTop <= y && itemBottom >= y) {\n      // Item spans the indicated y coordinate.\n      found = true;\n      break;\n    }\n    itemIndex += step;\n  }\n\n  if (!found) {\n    return null;\n  }\n\n  // We may have found an item whose padding spans the given y coordinate,\n  // but whose content is actually above/below that point.\n  // TODO: If the item has a border, then padding should be included in\n  // considering a hit.\n  const itemStyle = getComputedStyle(item);\n  const itemPaddingTop = parseFloat(itemStyle.paddingTop);\n  const itemPaddingBottom = parseFloat(itemStyle.paddingBottom);\n  const contentTop = itemTop + item.clientTop + itemPaddingTop;\n  const contentBottom = contentTop + item.clientHeight - itemPaddingTop - itemPaddingBottom;\n  if (downward && contentTop <= y || !downward && contentBottom >= y) {\n    // The indicated coordinate hits the actual item content.\n    return itemIndex;\n  }\n  else {\n    // The indicated coordinate falls within the item's padding. Back up to\n    // the item below/above the item we found and return that.\n    return itemIndex - step;\n  }\n}\n\n// Move by one page downward (if downward is true), or upward (if false).\n// Return true if we ended up changing the selection, false if not.\n// TODO: Better support for horizontal lists.\nfunction scrollOnePage(element, downward) {\n\n  // Determine the item visible just at the edge of direction we're heading.\n  // We'll select that item if it's not already selected.\n  const scrollTarget = element.scrollTarget;\n  const edge = scrollTarget.scrollTop + (downward ? scrollTarget.clientHeight : 0);\n  const indexOfItemAtEdge = getIndexOfItemAtY(element, edge, downward);\n\n  const selectedIndex = element.selectedIndex;\n  let newIndex;\n  if (indexOfItemAtEdge && selectedIndex === indexOfItemAtEdge) {\n    // The item at the edge was already selected, so scroll in the indicated\n    // direction by one page. Leave the new item at that edge selected.\n    const delta = (downward ? 1 : -1) * scrollTarget.clientHeight;\n    newIndex = getIndexOfItemAtY(element, edge + delta, downward);\n  }\n  else {\n    // The item at the edge wasn't selected yet. Instead of scrolling, we'll\n    // just select that item. That is, the first attempt to page up/down\n    // usually just moves the selection to the edge in that direction.\n    newIndex = indexOfItemAtEdge;\n  }\n\n  if (!newIndex) {\n    // We can't find an item in the direction we want to travel. Select the\n    // last item (if moving downward) or first item (if moving upward).\n    newIndex = (downward ? element.items.length - 1 : 0);\n  }\n\n  if (newIndex !== selectedIndex) {\n    element.selectedIndex = newIndex;\n    return true; // We handled the page up/down ourselves.\n  }\n  else {\n    return false; // We didn't do anything.\n  }\n}\n","import createSymbol from './createSymbol';\nimport symbols from './symbols';\n\n\n// Symbols for private data members on an element.\nconst itemTextContentsSymbol = createSymbol('itemTextContents');\nconst typedPrefixSymbol = createSymbol('typedPrefix');\nconst prefixTimeoutSymbol = createSymbol('prefixTimeout');\n\n\n/* Exported function extends a base class with KeyboardPrefixSelection. */\nexport default (base) => {\n\n  /**\n   * Mixin that handles list box-style prefix typing, in which the user can type\n   * a string to select the first item that begins with that string.\n   *\n   * Example: suppose a component using this mixin has the following items:\n   *\n   *     <sample-list-component>\n   *       <div>Apple</div>\n   *       <div>Apricot</div>\n   *       <div>Banana</div>\n   *       <div>Blackberry</div>\n   *       <div>Blueberry</div>\n   *       <div>Cantaloupe</div>\n   *       <div>Cherry</div>\n   *       <div>Lemon</div>\n   *       <div>Lime</div>\n   *     </sample-list-component>\n   *\n   * If this component receives the focus, and the user presses the \"b\" or \"B\"\n   * key, the \"Banana\" item will be selected, because it's the first item that\n   * matches the prefix \"b\". (Matching is case-insensitive.) If the user now\n   * presses the \"l\" or \"L\" key quickly, the prefix to match becomes \"bl\", so\n   * \"Blackberry\" will be selected.\n   *\n   * The prefix typing feature has a one second timeout — the prefix to match\n   * will be reset after a second has passed since the user last typed a key.\n   * If, in the above example, the user waits a second between typing \"b\" and\n   * \"l\", the prefix will become \"l\", so \"Lemon\" would be selected.\n   *\n   * This mixin expects the component to invoke a `keydown` method when a key is\n   * pressed. You can use [KeyboardMixin](KeyboardMixin.md) for that\n   * purpose, or wire up your own keyboard handling and call `keydown` yourself.\n   *\n   * This mixin also expects the component to provide an `items` property. The\n   * `textContent` of those items will be used for purposes of prefix matching.\n   */\n  class KeyboardPrefixSelection extends base {\n\n    // TODO: If the set of items is changed, reset the prefix.\n    // [symbols.itemsChanged]() {\n    //   this[itemTextContentsSymbol] = null;\n    //   resetTypedPrefix(this);\n    // }\n\n    // TODO: If the selection is changed by some other means (e.g., arrow keys)\n    // other than prefix typing, then that act should reset the prefix.\n\n    [symbols.keydown](event) {\n      let handled;\n      let resetPrefix = true;\n\n      switch (event.keyCode) {\n        case 8: // Backspace\n          handleBackspace(this);\n          handled = true;\n          resetPrefix = false;\n          break;\n        case 27: // Escape\n          handled = true;\n          break;\n        default:\n          if (!event.ctrlKey && !event.metaKey && !event.altKey &&\n              event.which !== 32 /* Space */) {\n            handlePlainCharacter(this, String.fromCharCode(event.which));\n          }\n          resetPrefix = false;\n      }\n\n      if (resetPrefix) {\n        resetTypedPrefix(this);\n      }\n\n      // Prefer mixin result if it's defined, otherwise use base result.\n      return handled || (super[symbols.keydown] && super[symbols.keydown](event));\n    }\n\n    /**\n     * Select the first item whose text content begins with the given prefix.\n     *\n     * @param prefix [String] The prefix string to search for\n     */\n    selectItemWithTextPrefix(prefix) {\n      if (super.selectItemWithTextPrefix) { super.selectItemWithTextPrefix(prefix); }\n      if (prefix == null || prefix.length === 0) {\n        return;\n      }\n      const index = getIndexOfItemWithTextPrefix(this, prefix);\n      if (index >= 0) {\n        this.selectedIndex = index;\n      }\n    }\n\n  }\n\n  return KeyboardPrefixSelection;\n};\n\n\n// Time in milliseconds after which the user is considered to have stopped\n// typing.\nconst PREFIX_TIMEOUT_DURATION = 1000;\n\n\n// Return the index of the first item with the given prefix, else -1.\nfunction getIndexOfItemWithTextPrefix(element, prefix) {\n  const itemTextContents = getItemTextContents(element);\n  const prefixLength = prefix.length;\n  for (let i = 0; i < itemTextContents.length; i++) {\n    const itemTextContent = itemTextContents[i];\n    if (itemTextContent.substr(0, prefixLength) === prefix) {\n      return i;\n    }\n  }\n  return -1;\n}\n\n// Return an array of the text content (in lowercase) of all items.\n// Cache these results.\nfunction getItemTextContents(element) {\n  if (!element[itemTextContentsSymbol]) {\n    const items = element.items;\n    element[itemTextContentsSymbol] = items.map(child => {\n      const text = child.textContent || child.alt;\n      return text.toLowerCase();\n    });\n  }\n  return element[itemTextContentsSymbol];\n}\n\nfunction handleBackspace(element) {\n  const length = element[typedPrefixSymbol] ? element[typedPrefixSymbol].length : 0;\n  if (length > 0) {\n    element[typedPrefixSymbol] = element[typedPrefixSymbol].substr(0, length - 1);\n  }\n  element.selectItemWithTextPrefix(element[typedPrefixSymbol]);\n  setPrefixTimeout(element);\n}\n\nfunction handlePlainCharacter(element, char) {\n  const prefix = element[typedPrefixSymbol] || '';\n  element[typedPrefixSymbol] = prefix + char.toLowerCase();\n  element.selectItemWithTextPrefix(element[typedPrefixSymbol]);\n  setPrefixTimeout(element);\n}\n\nfunction resetPrefixTimeout(element) {\n  if (element[prefixTimeoutSymbol]) {\n    clearTimeout(element[prefixTimeoutSymbol]);\n    element[prefixTimeoutSymbol] = false;\n  }\n}\n\nfunction resetTypedPrefix(element) {\n  element[typedPrefixSymbol] = '';\n  resetPrefixTimeout(element);\n}\n\nfunction setPrefixTimeout(element) {\n  resetPrefixTimeout(element);\n  element[prefixTimeoutSymbol] = setTimeout(() => {\n    resetTypedPrefix(element);\n  }, PREFIX_TIMEOUT_DURATION);\n}\n","import createSymbol from './createSymbol';\nimport safeAttributes from './safeAttributes';\nimport symbols from './symbols';\n\n\n// Symbols for private data members on an element.\nconst closedSymbol = createSymbol('closed');\n\n\n/* Exported function extends a base class with OpenClose. */\nexport default (base) => {\n\n  /**\n   * Mixin which adds close/open semantics.\n   *\n   * This mixin does not produce any user-visible effects. Instead it applies\n   * a `basic-closed` CSS class to the component host if the host is\n   * closed, and a `basic-opened` class if opened. It also invokes a `render`\n   * function that can be overridden to apply custom effects.\n   */\n  class OpenClose extends base {\n\n    constructor() {\n      super();\n      // Set defaults.\n      if (typeof this.closed === 'undefined') {\n        this.closed = this[symbols.defaults].closed;\n      }\n    }\n\n    /**\n     * Close the component.\n     *\n     * This is equivalent to setting the `closed` property to true.\n     */\n    close() {\n      this.closed = true;\n    }\n\n    /**\n     * True if the component is curently closed.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    get closed() {\n      return this[closedSymbol];\n    }\n    set closed(value) {\n      const previousClosed = this[closedSymbol];\n      this[closedSymbol] = value;\n      if ('closed' in base.prototype) { super.closed = value; }\n      if (value !== previousClosed) {\n        this.render(value);\n\n        const event = new CustomEvent('closed-changed');\n        this.dispatchEvent(event);\n      }\n    }\n\n    connectedCallback() {\n      if (super.connectedCallback) { super.connectedCallback(); }\n      safeAttributes.connected(this);\n      this.render(this.closed);\n    }\n\n    get [symbols.defaults]() {\n      const defaults = super[symbols.defaults] || {};\n      defaults.closed = false;\n      return defaults;\n    }\n\n    /**\n     * Open the component.\n     *\n     * This is equivalent to setting the `closed` property to false.\n     */\n    open() {\n      this.closed = false;\n    }\n\n    /**\n     * Perform custom rendering of the close/open transition.\n     *\n     * You can override this method to perform custom effects. If you do so,\n     * be sure to invoke `super()` in your implementation to get the baseline\n     * behavior.\n     *\n     * @param {boolean} closing - True if the component is being closed,\n     *        false if it's being opened.\n     */\n    render(closing) {\n      if (super.render) { super.render(); }\n      safeAttributes.toggleClass(this, 'basic-closed', closing);\n      safeAttributes.toggleClass(this, 'basic-opened', !closing);\n      safeAttributes.setAttribute(this, 'aria-expanded', !closing);\n    }\n\n    /**\n     * Toggle the component's open/closed state.\n     */\n    toggle() {\n      this.closed = !this.closed;\n    }\n\n  }\n\n  return OpenClose;\n};\n","import renderArrayAsElements from '../../basic-component-mixins/src/renderArrayAsElements';\nimport symbols from '../../basic-component-mixins/src/symbols';\nimport toggleClass from '../../basic-component-mixins/src/toggleClass';\n\n\n/* Exported function extends a base class with PageDots. */\nexport default (base) => {\n\n  /**\n   * Template mixin which adds small dots to show the number of items and let\n   * the user select a specific item.\n   *\n   * You can see a\n   * [live demo](http://basicwebcomponents.org/basic-web-components/packages/demos/carousel-with-dots.html)\n   * of this mixin applied to a carousel.\n   *\n   * There will be one dot for each item, and the dot for the currently selected\n   * item will be shown selected.\n   *\n   * Typical usage:\n   *\n   *     class CarouselWithDots extends PageDotsMixin(Carousel) {}\n   *     customElements.define('carousel-with-dots', CarouselWithDots);\n   *\n   * Although the dots are quite small by default, clicking/tapping a dot will\n   * will select the corresponding list item.\n   */\n  class PageDots extends base {\n\n    constructor() {\n      super();\n\n      this.$.dots.addEventListener('click', event => {\n        const dot = event.target;\n        const dotIndex = this.dots.indexOf(dot);\n        if (dotIndex >= 0) {\n          this.selectedIndex = dotIndex;\n        }\n      });\n    }\n\n    get dots() {\n      return [].slice.call(this.$.dots.querySelectorAll('.dot'));\n    }\n\n    [symbols.itemsChanged]() {\n      if (super[symbols.itemsChanged]) { super[symbols.itemsChanged](); }\n      renderArrayAsElements(this.items, this.$.dots, (item, element) => {\n        // We don't use the item parameter, because any item will produce an\n        // identical corresponding dot.\n        if (!element) {\n          element = document.createElement('div');\n          element.classList.add('dot');\n          element.classList.add('style-scope');\n          element.classList.add('basic-page-dots');\n          element.setAttribute('role', 'none');\n          return element;\n        }\n      });\n      refreshDots(this);\n    }\n\n    [symbols.itemSelected](item, selected) {\n      if (super[symbols.itemSelected]) { super[symbols.itemSelected](item, selected); }\n      const index = this.items.indexOf(item);\n      // See if the corresponding dot has already been created.\n      // If not, the correct dot will be selected when it gets created.\n      const dots = this.dots;\n      if (dots && dots.length > index) {\n        const dot = this.dots[index];\n        if (dot) {\n          toggleClass(dot, 'selected', selected);\n        }\n      }\n    }\n\n    /**\n     * The distance the user has moved the first touchpoint since the beginning\n     * of a drag, expressed as a fraction of the element's width.\n     *\n     * @type number\n     */\n    get selectedFraction() {\n      return super.selectedFraction;\n    }\n    set selectedFraction(value) {\n      if ('selectedFraction' in base.prototype) { super.selectedFraction = value; }\n      renderTransition(this, this.selectedIndex, value);\n    }\n\n    get selectedIndex() {\n      return super.selectedIndex;\n    }\n    set selectedIndex(index) {\n      if ('selectedIndex' in base.prototype) { super.selectedIndex = index; }\n      refreshDots(this);\n    }\n\n    get [symbols.template]() {\n      const baseTemplate = super[symbols.template] || '';\n      return `\n        <style>\n        :host {\n          display: -webkit-flex;\n          display: flex;\n          position: relative;\n        }\n\n        #dots {\n          bottom: 0;\n          display: -webkit-flex;\n          display: flex;\n          -webkit-justify-content: center;\n          justify-content: center;\n          position: absolute;\n          width: 100%;\n          z-index: 1;\n        }\n\n        #dotNavigationContainer {\n          display: -webkit-flex;\n          display: flex;\n          -webkit-flex: 1;\n          flex: 1;\n          position: relative;\n          z-index: 0;\n        }\n\n        #container ::slotted(*) {\n          -webkit-flex: 1;\n          flex: 1;\n        }\n\n        .dot {\n          background: rgb(255, 255, 255);\n          border-radius: 7px;\n          box-shadow: 0 0 1px 1px rgba(0, 0, 0, 0.5);\n          box-sizing: border-box;\n          cursor: pointer;\n          height: 8px;\n          margin: 7px 5px;\n          opacity: 0.4;\n          padding: 0;\n          transition: background 0.2s box-shadow 0.2s;\n          width: 8px;\n        }\n\n        .dot:hover {\n          background: rgba(0, 0, 0, 0.75);\n          box-shadow: 0 0 1px 3px rgba(255, 255, 255, 0.5);\n        }\n\n        .dot.selected {\n          opacity: 0.95;\n        }\n\n        @media (min-width: 768px) {\n          .dot {\n            height: 12px;\n            width: 12px;\n          }\n        }\n        </style>\n\n        <div id=\"dots\" role=\"none\"></div>\n        <div id=\"dotNavigationContainer\" role=\"none\">\n          ${baseTemplate}\n        </div>\n      `;\n    }\n\n  }\n\n  return PageDots;\n};\n\n\n// Return the index, ensuring it stays between 0 and the given length.\nfunction keepIndexWithinBounds(length, index) {\n  // Handle possibility of negative mod.\n  // See http://stackoverflow.com/a/18618250/76472\n  return ((index % length) + length) % length;\n}\n\nfunction renderTransition(element, selectedIndex, selectedFraction) {\n  const dots = element.dots;\n  if (!dots || dots.length === 0) {\n    return;\n  }\n  const dotCount = dots.length;\n  const opacityMinimum = 0.4;\n  const opacityMaximum = 0.95;\n  const opacityRange = opacityMaximum - opacityMinimum;\n  const fractionalIndex = selectedIndex + selectedFraction;\n  const leftIndex = Math.floor(fractionalIndex);\n  const rightIndex = Math.ceil(fractionalIndex);\n  const selectionWraps = element.selectionWraps;\n  let awayIndex = selectedFraction >= 0 ? leftIndex : rightIndex;\n  let towardIndex = selectedFraction >= 0 ? rightIndex : leftIndex;\n  if (selectionWraps) {\n    awayIndex = keepIndexWithinBounds(dotCount, awayIndex);\n    towardIndex = keepIndexWithinBounds(dotCount, towardIndex);\n  }\n  // Stupid IE doesn't have Math.trunc.\n  // const truncatedSelectedFraction = Math.trunc(selectedFraction);\n  const truncatedSelectedFraction = selectedFraction < 0 ? Math.ceil(selectedFraction) : Math.floor(selectedFraction);\n  const progress = selectedFraction - truncatedSelectedFraction;\n  const opacityProgressThroughRange = Math.abs(progress) * opacityRange;\n  dots.forEach((dot, index) => {\n    let dotOpacity;\n    if (selectedFraction === 0) {\n      // Remove explicit opacity and rely on styling.\n      dotOpacity = '';\n    } else if (index === awayIndex) {\n      dotOpacity = opacityMaximum - opacityProgressThroughRange;\n    } else if (index === towardIndex) {\n      dotOpacity = opacityMinimum + opacityProgressThroughRange;\n    } else {\n      dotOpacity = opacityMinimum;\n    }\n    dot.style.opacity = dotOpacity;\n  });\n}\n\nfunction refreshDots(element) {\n  const selectedIndex = element.selectedIndex;\n  element.dots.forEach((dot, i) => {\n    toggleClass(dot, 'selected', i === selectedIndex);\n  });\n}\n","import safeAttributes from '../../basic-component-mixins/src/safeAttributes';\nimport symbols from '../../basic-component-mixins/src/symbols';\n\n\n/* Exported function extends a base class with PlayControls. */\nexport default (base) => {\n\n  /**\n   * Template mixin which adds buttons for managing playback of a slideshow,\n   * audio playlist, etc.\n   *\n   * Typical usage:\n   *\n   *     class SlideshowWithControls extends PlayControlsMixin(Slideshow) {}\n   *     customElements.define('slideshow-with-controls', SlideshowWithControls);\n   *\n   */\n  class PlayControls extends base {\n\n    constructor() {\n      super();\n      this.$.previousButton.addEventListener('click', event => {\n        this.selectPrevious();\n      });\n      this.$.playButton.addEventListener('click', event => {\n        this.playing = !this.playing;\n      });\n      this.$.nextButton.addEventListener('click', event => {\n        this.selectNext();\n      });\n    }\n\n    connectedCallback() {\n      if (super.connectedCallback) { super.connectedCallback(); }\n      safeAttributes.connected(this);\n    }\n\n    [symbols.keydown](event) {\n      let handled;\n\n      switch (event.keyCode) {\n        case 32: /* Space */\n          this.playing = !this.playing;\n          handled = true;\n          break;\n      }\n\n      // Prefer mixin result if it's defined, otherwise use base result.\n      return handled || (super[symbols.keydown] && super[symbols.keydown](event));\n    }\n\n    get playing() {\n      return super.playing;\n    }\n    set playing(value) {\n      if ('playing' in base.prototype) { super.playing = value; }\n      safeAttributes.toggleClass(this, 'playing', value);\n    }\n\n    get [symbols.template]() {\n      const baseTemplate = super[symbols.template] || '';\n      return `\n        <style>\n        :host {\n          display: -webkit-flex;\n          display: flex;\n          position: relative;\n        }\n\n        #buttons {\n          bottom: 0;\n          box-sizing: border-box;\n          padding: 0.5em;\n          position: absolute;\n          text-align: center;\n          width: 100%;\n          z-index: 1;\n        }\n\n        button {\n          background: transparent;\n          border: none;\n          fill: rgba(255, 255, 255, 0.5);\n          padding: 0;\n          transition: fill 0.5s;\n          vertical-align: middle;\n        }\n        :host(:hover) button {\n          fill: rgba(255, 255, 255, 0.7);\n        }\n        button:hover {\n          fill: rgba(255, 255, 255, 0.85);\n        }\n        button:active {\n          fill: white;\n        }\n\n        .icon {\n          height: 30px;\n          width: 30px;\n        }\n        #playButton .icon {\n          height: 40px;\n          width: 40px;\n        }\n\n        :host(.playing) .pausedControl {\n          display: none;\n        }\n        :host(:not(.playing)) .playingControl {\n          display: none;\n        }\n\n        #container {\n          display: -webkit-flex;\n          display: flex;\n          -webkit-flex: 1;\n          flex: 1;\n        }\n\n        #container ::slotted(*) {\n          -webkit-flex: 1;\n          flex: 1;\n        }\n        </style>\n\n        <div id=\"buttons\">\n          <button id=\"previousButton\">\n            <svg class=\"icon\" viewBox=\"0 0 24 24\" preserveAspectRatio=\"xMidYMid meet\">\n              <g id=\"skip-previous\">\n                <path d=\"M6 6h2v12H6zm3.5 6l8.5 6V6z\"/>\n              </g>\n            </svg>\n          </button>\n          <button id=\"playButton\">\n            <svg class=\"icon playingControl\" viewBox=\"0 0 24 24\" preserveAspectRatio=\"xMidYMid meet\">\n              <g id=\"pause-circle-outline\">\n                <path d=\"M9 16h2V8H9v8zm3-14C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm1-4h2V8h-2v8z\"></path>\n              </g>\n            </svg>\n            <svg class=\"icon pausedControl\" viewBox=\"0 0 24 24\" preserveAspectRatio=\"xMidYMid meet\">\n              <g id=\"play-circle-outline\">\n                <path d=\"M10 16.5l6-4.5-6-4.5v9zM12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z\"></path>\n              </g>\n            </svg>\n          </button>\n          <button id=\"nextButton\">\n            <svg class=\"icon\" viewBox=\"0 0 24 24\" preserveAspectRatio=\"xMidYMid meet\">\n              <g id=\"skip-next\">\n                <path d=\"M6 18l8.5-6L6 6v12zM16 6v12h2V6h-2z\"/>\n              </g>\n            </svg>\n          </button>\n        </div>\n\n        <div id=\"container\" role=\"none\">\n          ${baseTemplate}\n        </div>\n      `;\n    }\n\n  }\n\n  return PlayControls;\n};\n","/* Exported function extends a base class with SelectedItemTextValue. */\nexport default (base) => {\n\n  /**\n   * Mixin which defines a `value` property that reflects the text content of a\n   * selected item.\n   *\n   * This mixin exists for list-like components that want to provide a more\n   * convenient way to get/set the selected item using text.\n   *\n   * This mixin expects a component to provide an `items` array of all elements\n   * in the list. A standard way to do that with is\n   * [ContentItemsMixin](ContentItemsMixin.md). This also expects the definition\n   * of `selectedIndex` and `selectedItem` properties, which can be obtained\n   * from [SingleSelectionMixin](SingleSelectionMixin.md).\n   */\n  class SelectedItemTextValue extends base {\n\n    /**\n     * The text content of the selected item.\n     *\n     * Setting this value to a string will attempt to select the first list item\n     * whose text content match that string. Setting this to a string not matching\n     * any list item will result in no selection.\n     *\n     * @type {string}\n     */\n    get value() {\n      return this.selectedItem == null || this.selectedItem.textContent == null ?\n        '' :\n        this.selectedItem.textContent;\n    }\n    set value(text) {\n\n      const currentIndex = this.selectedIndex;\n      let newIndex = -1; // Assume we won't find the text.\n\n      // Find the item with the indicated text.\n      const items = this.items;\n      for (let i = 0, length = items.length; i < length; i++) {\n        if (items[i].textContent === text) {\n          newIndex = i;\n          break;\n        }\n      }\n\n      if (newIndex !== currentIndex) {\n        this.selectedIndex = newIndex;\n        const event = new CustomEvent('value-changed');\n        this.dispatchEvent(event);\n      }\n    }\n  }\n\n  return SelectedItemTextValue;\n};\n","import createSymbol from './createSymbol';\nimport FractionalSelectionMixin from './FractionalSelectionMixin';\nimport symbols from './symbols';\n\n\n// Symbols for private data members on an element.\nconst animationSymbol = createSymbol('animation');\nconst draggingSymbol = createSymbol('dragging');\nconst lastAnimationSymbol = createSymbol('lastAnimation');\nconst playingAnimationSymbol = createSymbol('animatingSelection');\nconst previousSelectionSymbol = createSymbol('previousSelection');\nconst selectionAnimationDurationSymbol = createSymbol('selectionAnimationDuration');\nconst selectionAnimationEffectSymbol = createSymbol('selectionAnimationEffect');\nconst selectionAnimationKeyframesSymbol = createSymbol('selectionAnimationKeyframes');\nconst resetAnimationsOnNextRenderSymbol = createSymbol('resetAnimationsOnNextRender');\n\n\n/* Exported function extends a base class with SelectionAnimation. */\nexport default function mixin(base) {\n\n  /**\n   * Mixin which uses animation to show transitions between selection states.\n   *\n   * This mixin can be used by components that want to provide visible\n   * animations when changing the selection. For example, a carousel component\n   * may want to define a sliding animation effect shown when moving between\n   * items.\n   *\n   * The animation is defined by a `selectionAnimationKeyframes` property; see\n   * that property for details on how to define these keyframes. This animation\n   * will be used in two ways. First, when moving strictly between items, the\n   * animation will play smoothly to show the selection changing. Second, the\n   * animation can be used to render the selection at a fixed point in the\n   * transition between states. E.g., if the user pauses halfway through\n   * dragging an element using [SwipeDirectionMixin](SwipeDirectionMixin.md)\n   * or [TrackpadDirectionMixin](TrackpadDirectionMixin.md)s, then the selection\n   * animation will be shown at the point exactly halfway through.\n   *\n   * This mixin expects a component to provide an `items` array of all elements\n   * in the list, which can be provided via\n   * [ContentItemsMixin](ContentItemsMixin.md). This mixin also expects\n   * `selectedIndex` and `selectedItem` properties, which can be provided via\n   * [SingleSelectionMixin](SingleSelectionMixin.md).\n   *\n   * This mixin supports a `selectionWraps` property. When true, the user can\n   * navigate forward from the last item in the list and wrap around to the\n   * first item, or navigate backward from the first item and wrap around to the\n   * last item.\n   *\n   * This mixin uses the Web Animations API. For use on browsers which\n   * do not support that API natively, you will need to load the\n   * [Web Animations polyfill](https://github.com/web-animations/web-animations-js).\n   */\n  class SelectionAnimation extends base {\n\n    constructor() {\n      super();\n\n      // Set defaults.\n      if (typeof this.selectionAnimationDuration === 'undefined') {\n        this.selectionAnimationDuration = this[symbols.defaults].selectionAnimationDuration;\n      }\n      if (typeof this.selectionAnimationEffect === 'undefined' && this.selectionAnimationKeyframes == null) {\n        this.selectionAnimationEffect = this[symbols.defaults].selectionAnimationEffect;\n      }\n\n      this[symbols.dragging] = false;\n    }\n\n    get [symbols.defaults]() {\n      const defaults = super[symbols.defaults] || {};\n      defaults.selectionAnimationDuration = 250;\n      defaults.selectionAnimationEffect = 'slide';\n      return defaults;\n    }\n\n    /*\n     * Provide backing for the dragging property.\n     * Also, when a drag begins, reset the animations.\n     */\n    get [symbols.dragging]() {\n      return this[draggingSymbol];\n    }\n    set [symbols.dragging](value) {\n      const previousValue = this[symbols.dragging];\n      this[draggingSymbol] = value;\n      if (symbols.dragging in base.prototype) { super[symbols.dragging] = value; }\n      if (value && !previousValue) {\n        // Have begun a drag.\n        this[resetAnimationsOnNextRenderSymbol] = true;\n      }\n    }\n\n    [symbols.itemAdded](item) {\n      // We mark new items in the list as explicitly visible to ARIA. Otherwise,\n      // when an item isn't visible on the screen, ARIA will assume the item is\n      // of no interest to the user, and leave it out of the accessibility tree.\n      // If the list contains 10 items, but only 3 are visible, a screen reader\n      // might then announce the list only has 3 items. To ensure that screen\n      // readers and other assistive technologies announce the correct total\n      // number of items, we explicitly mark all items as not hidden. This will\n      // expose them all in the accessibility tree, even the items which are\n      // currently not rendered.\n      //\n      // TODO: Generally speaking, this entire mixin assumes that the user can\n      // navigate through all items in a list. But an app could style an item as\n      // display:none or visibility:hidden because the user is not allowed to\n      // interact with that item at the moment. Support for this scenario should\n      // be added. This would entail changing all locations where a mixin\n      // function is counting items, iterating over the (visible) items, and\n      // showing or hiding items. Among other things, the code below to make\n      // items visible to ARIA would need to discriminate between items which\n      // are invisible because of animation state, or invisible because the user\n      // shouldn't interact with them.\n      item.setAttribute('aria-hidden', false);\n    }\n\n    [symbols.itemsChanged]() {\n      if (super[symbols.itemsChanged]) { super[symbols.itemsChanged](); }\n\n      resetAnimations(this);\n\n      // TODO: Also reset our notion of the last rendered selection? This comes\n      // up when a DOM removal causes the selected item to change position.\n      // this[previousSelectionSymbol] = null;\n\n      renderSelection(this);\n    }\n\n    resetAnimations() {\n      resetAnimations(this);\n    }\n\n    /**\n     * A fractional value indicating how far the user has currently advanced to\n     * the next/previous item. E.g., a `selectedFraction` of 3.5 indicates the\n     * user is halfway between items 3 and 4.\n     *\n     * For more details, see [FractionalSelectionMixin](FractionalSelectionMixin.md)\n     * mixin.\n     *\n     * @type {number}\n     */\n    get selectedFraction() {\n      return super.selectedFraction || 0;\n    }\n    set selectedFraction(value) {\n      if ('selectedFraction' in base.prototype) { super.selectedFraction = value; }\n      renderSelection(this, this.selectedIndex, value);\n    }\n\n    get selectedIndex() {\n      return super.selectedIndex;\n    }\n    set selectedIndex(index) {\n      if ('selectedIndex' in base.prototype) { super.selectedIndex = index; }\n      renderSelection(this, index, 0);\n    }\n\n    /**\n     * The duration of a selection animation in milliseconds.\n     *\n     * This measures the amount of time required for a selection animation to\n     * complete. This number remains constant, even if the number of items being\n     * animated increases.\n     *\n     * The default value is 250 milliseconds (a quarter a second).\n     *\n     * @type {number}\n     * @default 250\n     */\n    get selectionAnimationDuration() {\n      return this[selectionAnimationDurationSymbol];\n    }\n    set selectionAnimationDuration(value) {\n      this[selectionAnimationDurationSymbol] = value;\n      if ('selectionAnimationDuration' in base.prototype) { super.selectionAnimationDuration = value; }\n    }\n\n    /**\n     * The name of a standard selection animation effect.\n     *\n     * This is a shorthand for setting the `selectionAnimationKeyframes`\n     * property to standard keyframes. Supported string values:\n     *\n     * * \"crossfade\"\n     * * \"reveal\"\n     * * \"revealWithFade\"\n     * * \"showAdjacent\"\n     * * \"slide\"\n     * * \"slideWithGap\"\n     *\n     * @type {string}\n     * @default \"slide\"\n     */\n    get selectionAnimationEffect() {\n      return this[selectionAnimationEffectSymbol];\n    }\n    set selectionAnimationEffect(value) {\n      this[selectionAnimationEffectSymbol] = value;\n      if ('selectionAnimationEffect' in base.prototype) { super.selectionAnimationEffect = value; }\n      this.selectionAnimationKeyframes = mixin.standardEffectKeyframes[value];\n    }\n\n    /**\n     * The keyframes that define an animation that plays for an item when moving\n     * forward in the sequence.\n     *\n     * This is an array of CSS rules that will be applied. These are used as\n     * [keyframes](http://w3c.github.io/web-animations/#keyframes-section)\n     * to animate the item with the\n     * [Web Animations API](https://developer.mozilla.org/en-US/docs/Web/API/animation).\n     *\n     * The animation represents the state of the next item as it moves from\n     * completely unselected (offstage, usually right), to selected (center\n     * stage), to completely unselected (offstage, usually left). The center time\n     * of the animation should correspond to the item's quiscent selected state,\n     * typically in the center of the stage and at the item's largest size.\n     *\n     * The default forward animation is a smooth slide at full size from right to\n     * left.\n     *\n     * When moving the selection backward, this animation is played in reverse.\n     *\n     * @type {cssRules[]}\n     */\n    get selectionAnimationKeyframes() {\n      // Standard animation slides left/right, keeps adjacent items out of view.\n      return this[selectionAnimationKeyframesSymbol];\n    }\n    set selectionAnimationKeyframes(value) {\n      this[selectionAnimationKeyframesSymbol] = value;\n      if ('selectionAnimationKeyframes' in base.prototype) { super.selectionAnimationKeyframes = value; }\n      resetAnimations(this);\n      renderSelection(this);\n    }\n\n    get selectionWraps() {\n      return super.selectionWraps;\n    }\n    set selectionWraps(value) {\n      if ('selectionWraps' in base.prototype) { super.selectionWraps = value; }\n      resetAnimations(this);\n      renderSelection(this);\n    }\n  }\n\n  return SelectionAnimation;\n}\n\n\n// We expose helpers on the mixin function that we want to be able to unit test.\n// Since these are on the function, not on the class emitted by the function,\n// they don't end up getting exposed on actual element instances.\nmixin.helpers = {\n\n  /*\n   * Calculate the animation fractions for an element's items at the given\n   * selection point. This is used when rendering the element's selection state\n   * instantaneously.\n   *\n   * This function considers the selectedIndex parameter, which can be a whole\n   * or fractional number, and determines which items will be visible at that\n   * index. This function then calculates a corresponding animation fraction: a\n   * number between 0 and 1 indicating how far through the selection animation\n   * an item should be shown, or null if the item should not be visible at that\n   * selection index. These fractions are returned as an array, where the\n   * animation fraction at position N corresponds to how item N should be shown.\n   */\n  animationFractionsForSelection(element, selection) {\n\n    const items = element.items;\n    if (!items) {\n      return;\n    }\n\n    const itemCount = items.length;\n    const selectionWraps = element.selectionWraps;\n\n    return items.map((item, itemIndex) => {\n      // How many steps from the selection point to this item?\n      const steps = stepsToIndex(itemCount, selectionWraps, selection, itemIndex);\n      // To convert steps to animation fraction:\n      // steps      animation fraction\n      //  1         0     (stage right)\n      //  0         0.5   (center stage)\n      // -1         1     (stage left)\n      const animationFraction = (1 - steps) / 2;\n      return (animationFraction >= 0 && animationFraction <= 1) ?\n        animationFraction :\n        null; // Outside animation range\n    });\n  },\n\n  /*\n   * Calculate the animation timings that should be used to smoothly animate the\n   * element's items from one selection state to another.\n   *\n   * This returns an array of timings, where the timing at position N should be\n   * used to animate item N. If an item's timing is null, then that item should\n   * not take place in the animation, and should be hidden instead.\n   */\n  effectTimingsForSelectionAnimation(element, fromSelection, toSelection) {\n\n    const items = element.items;\n    if (!items) {\n      return;\n    }\n    const itemCount = items.length;\n    const selectionWraps = element.selectionWraps;\n    const toIndex = FractionalSelectionMixin.helpers.wrappedSelectionParts(toSelection, itemCount, selectionWraps).index;\n    const totalSteps = stepsToIndex(itemCount, selectionWraps, fromSelection, toSelection);\n    const direction = totalSteps >= 0 ? 'normal': 'reverse';\n    const fill = 'both';\n    const totalDuration = element.selectionAnimationDuration;\n    const stepDuration = totalSteps !== 0 ?\n      totalDuration * 2 / Math.ceil(Math.abs(totalSteps)) :\n      0;  // No steps required, animation will be instantenous.\n\n    const timings = items.map((item, itemIndex) => {\n      const steps = stepsToIndex(itemCount, selectionWraps, itemIndex, toSelection);\n      // If we include this item in the staggered sequence of animations we're\n      // creating, where would the item appear in the sequence?\n      let positionInSequence = totalSteps - steps;\n      if (totalSteps < 0) {\n        positionInSequence = -positionInSequence;\n      }\n      // So, is this item really included in the sequence?\n      if (Math.ceil(positionInSequence) >= 0 && positionInSequence <= Math.abs(totalSteps)) {\n        // Note that delay for first item will be negative. That will cause\n        // the animation to start halfway through, which is what we want.\n        const delay = stepDuration * (positionInSequence - 1)/2;\n        const endDelay = itemIndex === toIndex ?\n          -stepDuration/2 :   // Stop halfway through.\n          0;              // Play animation until end.\n        return { duration: stepDuration, direction, fill, delay, endDelay };\n      } else {\n        return null;\n      }\n    });\n\n    return timings;\n  }\n\n};\n\n\n// Keyframes for standard selection animation effects.\nmixin.standardEffectKeyframes = {\n\n  // Simple crossfade\n  crossfade: [\n    { opacity: 0 },\n    { opacity: 1 },\n    { opacity: 0 }\n  ],\n\n  // Reveal, as if sliding the top card off a deck of cards\n  reveal: [\n    { transform: 'translateX(0%)', zIndex: 0 },\n    { transform: 'translateX(0%)', zIndex: 1 },\n    { transform: 'translateX(-100%)', zIndex: 2 }\n  ],\n\n  // Google Photos-style reveal-with-fade animation\n  revealWithFade: [\n    { transform: 'translateX(0%) scale(0.75)', opacity: 0, zIndex: 0 },\n    { transform: 'translateX(0%) scale(1.0)', opacity: 1, zIndex: 1 },\n    { transform: 'translateX(-100%) scale(1.0)', opacity: 1, zIndex: 2 }\n  ],\n\n  // Carousel variant with a bit of off-stage elements showing\n  showAdjacent: [\n    { transform: 'translateX(78%) scale(0.7)', zIndex: 0 },\n    { transform: 'translateX(0%) scale(0.82)', zIndex: 1 },\n    { transform: 'translateX(-78%) scale(0.7)', zIndex: 0 }\n  ],\n\n  // Simple slide\n  slide: [\n    { transform: 'translateX(100%)' },\n    { transform: 'translateX(-100%)' }\n  ],\n\n  // Slide, with a gap between\n  slideWithGap: [\n    { transform: 'translateX(110%)' },\n    { transform: 'translateX(-110%)' }\n  ]\n\n};\n\n\n/*\n * Smoothly animate the selection between the indicated \"from\" and \"to\"\n * indices. The former can be a fraction, e.g., when the user releases a finger\n * to complete a touch drag, and the selection will snap to the closest whole\n * index.\n */\nfunction animateSelection(element, fromSelection, toSelection) {\n\n  resetAnimations(element);\n\n  // Calculate the animation timings.\n  const items = element.items;\n  const keyframes = element.selectionAnimationKeyframes;\n  element[playingAnimationSymbol] = true;\n  const timings = mixin.helpers.effectTimingsForSelectionAnimation(element, fromSelection, toSelection);\n\n  // Figure out which item will be the one *after* the one we're selecting.\n  const itemCount = items.length;\n  const selectionWraps = element.selectionWraps;\n  const selectionIndex = FractionalSelectionMixin.helpers.selectionParts(toSelection, itemCount, selectionWraps).index;\n  const totalSteps = stepsToIndex(itemCount, selectionWraps, fromSelection, toSelection);\n  const forward = totalSteps >= 0;\n  let nextUpIndex = selectionIndex + (forward ? 1 : - 1);\n  if (selectionWraps) {\n    nextUpIndex = FractionalSelectionMixin.helpers.wrappedSelection(nextUpIndex, itemCount);\n  } else if (!isItemIndexInBounds(element, nextUpIndex)) {\n    nextUpIndex = null; // At start/end of list; don't have a next item to show.\n  }\n\n  // Play the animations using those timings.\n  let lastAnimationDetails;\n  timings.forEach((timing, index) => {\n    const item = items[index];\n    if (timing) {\n      showItem(item, true);\n      const animation = item.animate(keyframes, timing);\n      element[animationSymbol][index] = animation;\n      if (index === nextUpIndex) {\n        // This item will be animated, so will already be in the desired state\n        // after the animation completes.\n        nextUpIndex = null;\n      }\n      if (timing.endDelay !== 0) {\n        // This is the animation for the item that will be left selected.\n        // We want to clean up when this animation completes.\n        lastAnimationDetails = { animation, index, timing, forward };\n      }\n    } else {\n      // This item doesn't participate in the animation.\n      showItem(item, false);\n    }\n  });\n\n  if (lastAnimationDetails != null) {\n    // Arrange for clean-up work to be performed.\n    lastAnimationDetails.nextUpIndex = nextUpIndex;\n    lastAnimationDetails.animation.onfinish = event => selectionAnimationFinished(element, lastAnimationDetails);\n    element[lastAnimationSymbol] = lastAnimationDetails.animation;\n  } else {\n    // Shouldn't happen -- we should always have at least one animation.\n    element[playingAnimationSymbol] = false;\n  }\n}\n\n\nfunction getAnimationForItemIndex(element, index) {\n  if (element[animationSymbol] == null) {\n    // Not ready yet;\n    return null;\n  }\n  let animation = element[animationSymbol][index];\n  if (!animation) {\n    const item = element.items[index];\n    animation = item.animate(element.selectionAnimationKeyframes, {\n      duration: element.selectionAnimationDuration,\n      fill: 'both'\n    });\n    animation.pause();\n    element[animationSymbol][index] = animation;\n  }\n  return animation;\n}\n\nfunction isItemIndexInBounds(element, index) {\n  return index >= 0 && element.items && index < element.items.length;\n}\n\n/*\n * Render the selection state of the element.\n *\n * This can be used to re-render a previous selection state (if the\n * selectedIndex param is omitted), render the selection instantly at a given\n * whole or fractional selection index, or animate to a given selection index.\n *\n * There are several distinct scenarios we need to cover:\n *\n * 1. Initial positioning, or repositioning after changing a property like\n *    selectionAnimationKeyframes that affects rendering.\n * 2. Animate on selectedIndex change. This should override any animation/swipe\n *    already in progress.\n * 3. Instantly render the current position of a drag operation in progress.\n * 4. Complete a drag operation. If the drag wasn't far enough to affect\n *    selection, we'll just be restoring the selectedFraction to 0.\n *\n * If the list does not wrap, any selection position outside the list's bounds\n * will be damped to produce a visual effect of tension.\n */\nfunction renderSelection(element, selectedIndex=element.selectedIndex, selectedFraction=element.selectedFraction) {\n  const itemCount = element.items ? element.items.length : 0;\n  if (itemCount === 0) {\n    // Nothing to render.\n    return;\n  }\n  if (selectedIndex < 0) {\n    // TODO: Handle no selection.\n    return;\n  }\n  let selection = selectedIndex + selectedFraction;\n  if (element.selectionWraps) {\n    // Apply wrapping to ensure consistent representation of selection.\n    selection = FractionalSelectionMixin.helpers.wrappedSelection(selection, itemCount);\n  } else {\n    // Apply damping if necessary.\n    selection = FractionalSelectionMixin.helpers.dampedSelection(selection, itemCount);\n  }\n  const previousSelection = element[previousSelectionSymbol];\n  // TODO: If an item changes position in the DOM, we end up animating from\n  // its old index to its new index, but we really don't want to animate at all.\n  if (!element[symbols.dragging] && previousSelection != null &&\n      previousSelection !== selection) {\n    // Animate selection from previous state to new state.\n    animateSelection(element, previousSelection, selection);\n  } else if (selectedFraction === 0 && element[playingAnimationSymbol]) {\n    // Already in process of animating to fraction 0. During that process,\n    // ignore subsequent attempts to renderSelection to fraction 0.\n    return;\n  } else {\n    // Render current selection state instantly.\n    renderSelectionInstantly(element, selection);\n  }\n  element[previousSelectionSymbol] = selection;\n}\n\n/*\n * Instantly render (don't animate) the element's items at the given whole or\n * fractional selection index.\n */\nfunction renderSelectionInstantly(element, toSelection) {\n  if (element[resetAnimationsOnNextRenderSymbol]) {\n    resetAnimations(element);\n    element[resetAnimationsOnNextRenderSymbol] = false;\n  }\n  const animationFractions = mixin.helpers.animationFractionsForSelection(element, toSelection);\n  animationFractions.map((animationFraction, index) => {\n    const item = element.items[index];\n    if (animationFraction != null) {\n      showItem(item, true);\n      setAnimationFraction(element, index, animationFraction);\n    } else {\n      showItem(item, false);\n    }\n  });\n}\n\n/*\n * We maintain an array containing an animation per item. This is used for two\n * reasons:\n *\n * * During a drag operation, we want to be able to reuse animations between\n *   drag updates.\n * * When a selection animation completes, we need to be able to leave the\n *   visibile items in a paused state. Later, we'll want to be able to clean up\n *   those animations.\n *\n * Note that this array is sparse: it will only hold up from 0–3 animations at\n * any given point.\n */\nfunction resetAnimations(element) {\n  const animations = element[animationSymbol];\n  if (animations) {\n    // Cancel existing animations to remove the effects they're applying.\n    animations.forEach((animation, index) => {\n      if (animation) {\n        animation.cancel();\n        animations[index] = null;\n      }\n    });\n  }\n  const itemCount = element.items ? element.items.length : 0;\n  if (!animations || animations.length !== itemCount) {\n    // Haven't animated before with this number of items; (re)create array.\n    element[animationSymbol] = new Array(itemCount);\n  }\n}\n\n/*\n * The last animation in our selection animation has completed. Clean up.\n */\nfunction selectionAnimationFinished(element, details) {\n\n  // When the last animation completes, show the next item in the direction\n  // we're going. Waiting to that until this point is a bit of a hack to avoid\n  // having a next item that's higher in the natural z-order obscure other items\n  // during animation.\n  const nextUpIndex = details.nextUpIndex;\n  if (nextUpIndex != null) {\n    if (element[animationSymbol][nextUpIndex]) {\n      // Cancel existing selection animation so we can construct a new one.\n      element[animationSymbol][nextUpIndex].cancel();\n      element[animationSymbol][nextUpIndex] = null;\n    }\n    const animationFraction = details.forward ? 0 : 1;\n    setAnimationFraction(element, nextUpIndex, animationFraction);\n    showItem(element.items[nextUpIndex], true);\n  }\n\n  element[lastAnimationSymbol].onfinish = null;\n  element[playingAnimationSymbol] = false;\n}\n\n/*\n * Pause the indicated animation and have it show the animation at the given\n * fraction (between 0 and 1) of the way through the animation.\n */\nfunction setAnimationFraction(element, itemIndex, fraction) {\n  const animation = getAnimationForItemIndex(element, itemIndex);\n  if (animation) {\n    const duration = element.selectionAnimationDuration;\n    if (duration) {\n      animation.currentTime = fraction * duration;\n    }\n  }\n}\n\nfunction showItem(item, flag) {\n  item.style.visibility = flag ? 'visible' : 'hidden';\n}\n\n/*\n * Figure out how many steps it will take to go from fromSelection to\n * toSelection. To go from item 3 to item 4 is one step.\n *\n * If wrapping is allowed, then going from the last item to the first will take\n * one step (forward), and going from the first item to the last will take one\n * step (backward).\n */\nfunction stepsToIndex(length, allowWrap, fromSelection, toSelection) {\n  let steps = toSelection - fromSelection;\n  // Wrapping only kicks in when list has more than 1 item.\n  if (allowWrap && length > 1) {\n    const wrapSteps = length - Math.abs(steps);\n    if (wrapSteps <= 1) {\n      // Special case\n      steps = steps < 0 ?\n        wrapSteps :   // Wrap forward from last item to first.\n        -wrapSteps;   // Wrap backward from first item to last.\n    }\n  }\n  return steps;\n}\n","import symbols from './symbols';\n\n\n// Used to assign unique IDs to item elements without IDs.\nlet idCount = 0;\n\n\n/* Exported function extends a base class with SelectionAriaActive. */\nexport default (base) => {\n\n  /**\n   * Mixin which treats the selected item in a list as the active item in ARIA\n   * accessibility terms.\n   *\n   * Handling ARIA selection state properly is actually quite complex:\n   *\n   * * The items in the list need to be indicated as possible items via an ARIA\n   *   `role` attribute value such as \"option\".\n   * * The selected item need to be marked as selected by setting the item's\n   *   `aria-selected` attribute to true *and* the other items need be marked as\n   *   *not* selected by setting `aria-selected` to false.\n   * * The outermost element with the keyboard focus needs to have attributes\n   *   set on it so that the selection is knowable at the list level via the\n   *   `aria-activedescendant` attribute.\n   * * Use of `aria-activedescendant` in turn requires that all items in the\n   *   list have ID attributes assigned to them.\n   *\n   * This mixin tries to address all of the above requirements. To that end,\n   * this mixin will assign generated IDs to any item that doesn't already have\n   * an ID.\n   *\n   * ARIA relies on elements to provide `role` attributes. This mixin will apply\n   * a default role of \"listbox\" on the outer list if it doesn't already have an\n   * explicit role. Similarly, this mixin will apply a default role of \"option\"\n   * to any list item that does not already have a role specified.\n   *\n   * This mixin expects a set of members that manage the state of the selection:\n   * `[symbols.itemSelected]`, `itemAdded`, and `selectedIndex`. You can\n   * supply these yourself, or do so via\n   * [SingleSelectionMixin](SingleSelectionMixin.md).\n   */\n  class SelectionAriaActive extends base {\n\n    connectedCallback() {\n      if (super.connectedCallback) { super.connectedCallback(); }\n      // Set default ARIA role.\n      if (this.getAttribute('role') == null && this[symbols.defaults].role) {\n        this.setAttribute('role', this[symbols.defaults].role);\n      }\n    }\n\n    get [symbols.defaults]() {\n      const defaults = super[symbols.defaults] || {};\n      defaults.role = 'listbox';\n      return defaults;\n    }\n\n    [symbols.itemAdded](item) {\n      if (super[symbols.itemAdded]) { super[symbols.itemAdded](item); }\n\n      if (!item.getAttribute('role')) {\n        // Assign a default ARIA role.\n        item.setAttribute('role', 'option');\n      }\n\n      // Ensure each item has an ID so we can set aria-activedescendant on the\n      // overall list whenever the selection changes.\n      //\n      // The ID will take the form of a base ID plus a unique integer. The base\n      // ID will be incorporate the component's own ID. E.g., if a component has\n      // ID \"foo\", then its items will have IDs that look like \"_fooOption1\". If\n      // the compnent has no ID itself, its items will get IDs that look like\n      // \"_option1\". Item IDs are prefixed with an underscore to differentiate\n      // them from manually-assigned IDs, and to minimize the potential for ID\n      // conflicts.\n      if (!item.id) {\n        const baseId = this.id ?\n            \"_\" + this.id + \"Option\" :\n            \"_option\";\n        item.id = baseId + idCount++;\n      }\n    }\n\n    [symbols.itemSelected](item, selected) {\n      if (super[symbols.itemSelected]) { super[symbols.itemSelected](item, selected); }\n      item.setAttribute('aria-selected', selected);\n      const itemId = item.id;\n      if (itemId && selected) {\n        this.setAttribute('aria-activedescendant', itemId);\n      }\n    }\n\n    get selectedItem() {\n      return super.selectedItem;\n    }\n    set selectedItem(item) {\n      if ('selectedItem' in base.prototype) { super.selectedItem = item; }\n      if (item == null) {\n        // Selection was removed.\n        this.removeAttribute('aria-activedescendant');\n      }\n    }\n\n  }\n\n  return SelectionAriaActive;\n};\n","import symbols from '../src/symbols';\n\n\n/* Exported function extends a base class with SelectionHighlight. */\nexport default (base) => {\n\n  /**\n   * Template mixin which applies standard highlight colors to a selected item.\n   *\n   * This mixin highlights textual items (e.g., in a list) in a standard way by\n   * using the CSS `highlight` and `highlighttext` color values. These values\n   * respect operating system defaults and user preferences, and hence are good\n   * default values for highlight colors.\n   *\n   * This mixin expects a `selected` class to be applied to selected items. You\n   * can use [ContentItemsMixin](ContentItemsMixin.md) for that purpose.\n   */\n  class SelectionHighlight extends base {\n\n    get [symbols.template]() {\n      const baseTemplate = super[symbols.template] || '';\n      return `\n        <style>\n          :host([generic=\"\"]) ::slotted(.selected) {\n            background-color: highlight;\n            color: highlighttext;\n          }\n        </style>\n        ${baseTemplate}\n      `;\n    }\n\n  }\n\n  return SelectionHighlight;\n};\n","/* Exported function extends a base class with SelectionInView. */\nexport default (base) => {\n\n  /**\n   * Mixin which scrolls a container to ensure that a newly-selected item is\n   * visible to the user.\n   *\n   * When the selected item in a list-like component changes, it's easier for\n   * the to confirm that the selection has changed to an appropriate item if the\n   * user can actually see that item.\n   *\n   * This mixin expects a `selectedItem` property to be set when the selection\n   * changes. You can supply that yourself, or use\n   * [SingleSelectionMixin](SingleSelectionMixin.md).\n   */\n  class SelectionInView extends base {\n\n    connectedCallback() {\n      if (super.connectedCallback) { super.connectedCallback(); }\n      const selectedItem = this.selectedItem;\n      if (selectedItem) {\n        this.scrollItemIntoView(selectedItem);\n      }\n    }\n\n    get selectedItem() {\n      return super.selectedItem;\n    }\n    set selectedItem(item) {\n      if ('selectedItem' in base.prototype) { super.selectedItem = item; }\n      if (item) {\n        // Keep the selected item in view.\n        this.scrollItemIntoView(item);\n      }\n    }\n\n    /**\n     * Scroll the given element completely into view, minimizing the degree of\n     * scrolling performed.\n     *\n     * Blink has a `scrollIntoViewIfNeeded()` function that does something\n     * similar, but unfortunately it's non-standard, and in any event often ends\n     * up scrolling more than is absolutely necessary.\n     *\n     * @param {HTMLElement} item - the item to scroll into view.\n     */\n    scrollItemIntoView(item) {\n      if (super.scrollItemIntoView) { super.scrollItemIntoView(); }\n      // Get the relative position of the item with respect to the top of the\n      // list's scrollable canvas. An item at the top of the list will have a\n      // elementTop of 0.\n\n      const scrollTarget = this.scrollTarget;\n      const elementTop = item.offsetTop - scrollTarget.offsetTop - scrollTarget.clientTop;\n      const elementBottom = elementTop + item.offsetHeight;\n      // Determine the bottom of the scrollable canvas.\n      const scrollBottom = scrollTarget.scrollTop + scrollTarget.clientHeight;\n      if (elementBottom > scrollBottom) {\n        // Scroll up until item is entirely visible.\n        scrollTarget.scrollTop += elementBottom - scrollBottom;\n      }\n      else if (elementTop < scrollTarget.scrollTop) {\n        // Scroll down until item is entirely visible.\n        scrollTarget.scrollTop = elementTop;\n      }\n    }\n\n    /**\n     * The element that should be scrolled to bring an item into view.\n     *\n     * The default value of this property is the element itself.\n     *\n     * @type {HTMLElement}\n     */\n    get scrollTarget() {\n      // Prefer base result.\n      return 'scrollTarget' in base.prototype ? super.scrollTarget : this;\n    }\n    set scrollTarget(element) {\n      if ('scrollTarget' in base.prototype) { super.scrollTarget = element; }\n    }\n\n  }\n\n  return SelectionInView;\n};\n","/* Exported function extends a base class with ShadowElementReferences. */\nexport default (base) => {\n\n  /**\n   * Mixin to create references to elements in a component's Shadow DOM subtree.\n   *\n   * This adds a member on the component called `this.$` that can be used to\n   * reference shadow elements with IDs. E.g., if component's shadow contains an\n   * element `<button id=\"foo\">`, then this mixin will create a member\n   * `this.$.foo` that points to that button.\n   *\n   * Such references simplify a component's access to its own elements. In\n   * exchange, this mixin trades off a one-time cost of querying all elements in\n   * the shadow tree instead of paying an ongoing cost to query for an element\n   * each time the component wants to inspect or manipulate it.\n   *\n   * This mixin expects the component to define a Shadow DOM subtree. You can\n   * create that tree yourself, or make use of\n   * [ShadowTemplateMixin](ShadowTemplateMixin.md).\n   *\n   * This mixin is inspired by Polymer's [automatic\n   * node finding](https://www.polymer-project.org/1.0/docs/devguide/local-dom.html#node-finding)\n   * feature.\n   */\n  class ShadowElementReferences extends base {\n\n    constructor() {\n      super();\n      if (this.shadowRoot) {\n        // Look for elements in the shadow subtree that have id attributes.\n        // An alternatively implementation of this mixin would be to just define\n        // a this.$ getter that lazily does this search the first time someone\n        // tries to access this.$. That might introduce some complexity – if the\n        // the tree changed after it was first populated, the result of\n        // searching for a node might be somewhat unpredictable.\n        this.$ = {};\n        const nodesWithIds = this.shadowRoot.querySelectorAll('[id]');\n        [].forEach.call(nodesWithIds, node => {\n          const id = node.getAttribute('id');\n          this.$[id] = node;\n        });\n      }\n    }\n\n    /**\n     * The collection of references to the elements with IDs in a component's\n     * Shadow DOM subtree.\n     *\n     * @type {object}\n     * @member $\n     */\n  }\n\n  return ShadowElementReferences;\n};\n","import symbols from '../src/symbols';\n\n\n/* Exported function extends a base class with ShadowTemplate. */\nexport default (base) => {\n\n  /**\n   * Mixin for stamping a template into a Shadow DOM subtree upon component\n   * instantiation.\n   *\n   * To use this mixin, define a `template` property as a string or HTML\n   * `<template>` element:\n   *\n   *     class MyElement extends ShadowTemplateMixin(HTMLElement) {\n   *       get [symbols.template]() {\n   *         return `Hello, <em>world</em>.`;\n   *       }\n   *     }\n   *\n   * When your component class is instantiated, a shadow root will be created on\n   * the instance, and the contents of the template will be cloned into the\n   * shadow root. If your component does not define a `template` property, this\n   * mixin has no effect.\n   *\n   * For the time being, this extension retains support for Shadow DOM v0. That\n   * will eventually be deprecated as browsers (and the Shadow DOM polyfill)\n   * implement Shadow DOM v1.\n   */\n  class ShadowTemplate extends base {\n\n    /*\n     * If the component defines a template, a shadow root will be created on the\n     * component instance, and the template stamped into it.\n     */\n    constructor() {\n      super();\n      let template = this[symbols.template];\n      // TODO: Save the processed template with the component's class prototype\n      // so it doesn't need to be processed with every instantiation.\n      if (template) {\n\n        if (typeof template === 'string') {\n          // Upgrade plain string to real template.\n          template = createTemplateWithInnerHTML(template);\n        }\n\n        if (window.ShadowDOMPolyfill) {\n          shimTemplateStyles(template, this.localName);\n        }\n\n        const root = this.attachShadow({ mode: 'open' });\n        const clone = document.importNode(template.content, true);\n        root.appendChild(clone);\n      }\n    }\n\n  }\n\n  return ShadowTemplate;\n};\n\n\n// Convert a plain string of HTML into a real template element.\nfunction createTemplateWithInnerHTML(innerHTML) {\n  const template = document.createElement('template');\n  // REVIEW: Is there an easier way to do this?\n  // We'd like to just set innerHTML on the template content, but since it's\n  // a DocumentFragment, that doesn't work.\n  const div = document.createElement('div');\n  div.innerHTML = innerHTML;\n  while (div.childNodes.length > 0) {\n    template.content.appendChild(div.childNodes[0]);\n  }\n  return template;\n}\n\n// Invoke basic style shimming with ShadowCSS.\nfunction shimTemplateStyles(template, tag) {\n  window.WebComponents.ShadowCSS.shimStyling(template.content, tag);\n}\n","import createSymbol from './createSymbol';\nimport symbols from './symbols';\n\n\n// Symbols for private data members on an element.\nconst canSelectNextSymbol = createSymbol('canSelectNext');\nconst canSelectPreviousSymbol = createSymbol('canSelectPrevious');\nconst selectionRequiredSymbol = createSymbol('selectionRequired');\nconst selectionWrapsSymbol = createSymbol('selectionWraps');\n\n// We want to expose both selectedIndex and selectedItem as independent\n// properties but keep them in sync. This allows a component user to reference\n// the selection by whatever means is most natural for their situation.\n//\n// To efficiently keep these properties in sync, we track \"external\" and\n// \"internal\" references for each property:\n//\n// The external index or item is the one we report to the outside world when\n// asked for selection.  When handling a change to index or item, we update the\n// external reference as soon as possible, so that if anyone immediately asks\n// for the current selection, they will receive a stable answer.\n//\n// The internal index or item tracks whichever index or item last received the\n// full set of processing. Processing includes raising a change event for the\n// new value. Once we've begun that processing, we store the new value as the\n// internal value to indicate we've handled it.\n//\nconst externalSelectedIndexSymbol = createSymbol('externalSelectedIndex');\nconst externalSelectedItemSymbol = createSymbol('externalSelectedItem');\nconst internalSelectedIndexSymbol = createSymbol('internalSelectedIndex');\nconst internalSelectedItemSymbol = createSymbol('internalSelectedItem');\n\n\n/* Exported function extends a base class with SingleSelection. */\nexport default (base) => {\n\n  /**\n   * Mixin which manages single-selection semantics for items in a list.\n   *\n   * This mixin expects a component to provide an `items` Array or NodeList of\n   * all elements in the list. A standard way to do that with is the\n   * [ContentItemsMixin](ContentItemsMixin.md), which takes a component's\n   * content (typically its distributed children) as the set of list items; see\n   * that mixin for details.\n   *\n   * This mixin tracks a single selected item in the list, and provides means to\n   * get and set that state by item position (`selectedIndex`) or item identity\n   * (`selectedItem`). The selection can be moved in the list via the methods\n   * `selectFirst`, `selectLast`, `selectNext`, and `selectPrevious`.\n   *\n   * This mixin does not produce any user-visible effects to represent\n   * selection. Other mixins, such as\n   * [SelectionAriaActiveMixin](SelectionAriaActiveMixin.md),\n   * [SelectionHighlightMixin](SelectionHighlightMixin.md) and\n   * [SelectionInViewMixin](SelectionInViewMixin.md), modify the selected item\n   * in common ways to let the user know a given item is selected or not\n   * selected.\n   */\n  class SingleSelection extends base {\n\n    constructor() {\n      super();\n      // Set defaults.\n      if (typeof this.selectionRequired === 'undefined') {\n        this.selectionRequired = this[symbols.defaults].selectionRequired;\n      }\n      if (typeof this.selectionWraps === 'undefined') {\n        this.selectionWraps = this[symbols.defaults].selectionWraps;\n      }\n    }\n\n    /**\n     * True if the selection can be moved to the next item, false if not (the\n     * selected item is the last item in the list).\n     *\n     * @type {boolean}\n     */\n    get canSelectNext() {\n      return this[canSelectNextSymbol];\n    }\n    set canSelectNext(canSelectNext) {\n      const previousCanSelectNext = this[canSelectNextSymbol];\n      this[canSelectNextSymbol] = canSelectNext;\n      if ('canSelectNext' in base.prototype) { super.canSelectNext = canSelectNext; }\n      if (canSelectNext !== previousCanSelectNext) {\n        this.dispatchEvent(new CustomEvent('can-select-next-changed'));\n      }\n    }\n\n    /**\n     * True if the selection can be moved to the previous item, false if not\n     * (the selected item is the first one in the list).\n     *\n     * @type {boolean}\n     */\n    get canSelectPrevious() {\n      return this[canSelectPreviousSymbol];\n    }\n    set canSelectPrevious(canSelectPrevious) {\n      const previousCanSelectPrevious = this[canSelectPreviousSymbol];\n      this[canSelectPreviousSymbol] = canSelectPrevious;\n      if ('canSelectPrevious' in base.prototype) { super.canSelectPrevious = canSelectPrevious; }\n      if (canSelectPrevious !== previousCanSelectPrevious) {\n        this.dispatchEvent(new CustomEvent('can-select-previous-changed'));\n      }\n    }\n\n    get [symbols.defaults]() {\n      const defaults = super[symbols.defaults] || {};\n      defaults.selectionRequired = false;\n      defaults.selectionWraps = false;\n      return defaults;\n    }\n\n    /**\n     * Handle a new item being added to the list.\n     *\n     * The default implementation of this method simply sets the item's\n     * selection state to false.\n     *\n     * @param {HTMLElement} item - the item being added\n     */\n    [symbols.itemAdded](item) {\n      if (super[symbols.itemAdded]) { super[symbols.itemAdded](item); }\n      this[symbols.itemSelected](item, item === this.selectedItem);\n    }\n\n    [symbols.itemsChanged]() {\n      if (super[symbols.itemsChanged]) { super[symbols.itemsChanged](); }\n\n      // In case selected item changed position or was removed.\n      trackSelectedItem(this);\n\n      // In case the change in items affected which navigations are possible.\n      updatePossibleNavigations(this);\n    }\n\n    /**\n     * Apply the indicate selection state to the item.\n     *\n     * The default implementation of this method does nothing. User-visible\n     * effects will typically be handled by other mixins.\n     *\n     * @param {HTMLElement} item - the item being selected/deselected\n     * @param {boolean} selected - true if the item is selected, false if not\n     */\n    [symbols.itemSelected](item, selected) {\n      if (super[symbols.itemSelected]) { super[symbols.itemSelected](item, selected); }\n    }\n\n    /**\n     * The index of the item which is currently selected.\n     *\n     * A `selectedIndex` of -1 indicates there is no selection. Setting this\n     * property to -1 will remove any existing selection.\n     *\n     * @type {number}\n     */\n    get selectedIndex() {\n      return this[externalSelectedIndexSymbol] != null ?\n        this[externalSelectedIndexSymbol] :\n        -1;\n    }\n    set selectedIndex(index) {\n      // See notes at top about internal vs. external copies of this property.\n      const previousSelectedIndex = this[internalSelectedIndexSymbol];\n      let item;\n      if (index !== this[externalSelectedIndexSymbol]) {\n        // Store the new index and the corresponding item.\n        const items = this.items;\n        const hasItems = items && items.length > 0;\n        if (!(hasItems && index >= 0 && index < items.length)) {\n          index = -1; // No item at that index.\n        }\n        this[externalSelectedIndexSymbol] = index;\n        item = hasItems && index >= 0 ? items[index] : null;\n        this[externalSelectedItemSymbol] = item;\n      } else {\n        item = this[externalSelectedItemSymbol];\n      }\n\n      // Now let super do any work.\n      if ('selectedIndex' in base.prototype) { super.selectedIndex = index; }\n\n      if (index !== previousSelectedIndex) {\n        // The selected index changed.\n        this[internalSelectedIndexSymbol] = index;\n\n        const event = new CustomEvent('selected-index-changed', {\n          detail: {\n            selectedIndex: index,\n            value: index // for Polymer binding. TODO: Verify still necessary\n          }\n        });\n        this.dispatchEvent(event);\n      }\n\n      if (this[internalSelectedItemSymbol] !== item) {\n        // Update selectedItem property so it can have its own effects.\n        this.selectedItem = item;\n      }\n    }\n\n    /**\n     * The currently selected item, or null if there is no selection.\n     *\n     * Setting this property to null deselects any currently-selected item.\n     * Setting this property to an object that is not in the list has no effect.\n     *\n     * TODO: Even if selectionRequired, can still explicitly set selectedItem to null.\n     * TODO: If selectionRequired, leave selection alone?\n     *\n     * @type {object}\n     */\n    get selectedItem() {\n      return this[externalSelectedItemSymbol] || null;\n    }\n    set selectedItem(item) {\n      // See notes at top about internal vs. external copies of this property.\n      const previousSelectedItem = this[internalSelectedItemSymbol];\n      let index;\n      if (item !== this[externalSelectedItemSymbol]) {\n        // Store item and look up corresponding index.\n        const items = this.items;\n        const hasItems = items && items.length > 0;\n        index = hasItems ? Array.prototype.indexOf.call(items, item) : -1;\n        this[externalSelectedIndexSymbol] = index;\n        if (index < 0) {\n          item = null; // The indicated item isn't actually in `items`.\n        }\n        this[externalSelectedItemSymbol] = item;\n      } else {\n        index = this[externalSelectedIndexSymbol];\n      }\n\n      // Now let super do any work.\n      if ('selectedItem' in base.prototype) { super.selectedItem = item; }\n\n      if (item !== previousSelectedItem) {\n        // The selected item changed.\n        this[internalSelectedItemSymbol] = item;\n\n        if (previousSelectedItem) {\n          // Update selection state of old item.\n          this[symbols.itemSelected](previousSelectedItem, false);\n        }\n        if (item) {\n          // Update selection state to new item.\n          this[symbols.itemSelected](item, true);\n        }\n\n        updatePossibleNavigations(this);\n\n        const event = new CustomEvent('selected-item-changed', {\n          detail: {\n            selectedItem: item,\n            value: item // for Polymer binding\n          }\n        });\n        this.dispatchEvent(event);\n      }\n\n      if (this[internalSelectedIndexSymbol] !== index) {\n        // Update selectedIndex property so it can have its own effects.\n        this.selectedIndex = index;\n      }\n    }\n\n    /**\n     * Select the first item in the list.\n     */\n    selectFirst() {\n      if (super.selectFirst) { super.selectFirst(); }\n      return selectIndex(this, 0);\n    }\n\n    /**\n     * True if the list should always have a selection (if it has items).\n     *\n     * @type {boolean}\n     * @default false\n     */\n    get selectionRequired() {\n      return this[selectionRequiredSymbol];\n    }\n    set selectionRequired(selectionRequired) {\n      this[selectionRequiredSymbol] = selectionRequired;\n      if ('selectionRequired' in base.prototype) { super.selectionRequired = selectionRequired; }\n      trackSelectedItem(this);\n    }\n\n    /**\n     * True if selection navigations wrap from last to first, and vice versa.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    get selectionWraps() {\n      return this[selectionWrapsSymbol];\n    }\n    set selectionWraps(value) {\n      this[selectionWrapsSymbol] = String(value) === 'true';\n      if ('selectionWraps' in base.prototype) { super.selectionWraps = value; }\n      updatePossibleNavigations(this);\n    }\n\n    /**\n     * Select the last item in the list.\n     */\n    selectLast() {\n      if (super.selectLast) { super.selectLast(); }\n      return selectIndex(this, this.items.length - 1);\n    }\n\n    /**\n     * Select the next item in the list.\n     */\n    selectNext() {\n      if (super.selectNext) { super.selectNext(); }\n      return selectIndex(this, this.selectedIndex + 1);\n    }\n\n    /**\n     * Select the previous item in the list.\n     *\n     * If the list has no selection, the last item will be selected.\n     */\n    selectPrevious() {\n      if (super.selectPrevious) { super.selectPrevious(); }\n      const newIndex = this.selectedIndex < 0 ?\n        this.items.length - 1 :     // No selection yet; select last item.\n        this.selectedIndex - 1;\n      return selectIndex(this, newIndex);\n    }\n\n    /**\n     * Fires when the selectedItem property changes.\n     *\n     * @memberof SingleSelection\n     * @event selected-item-changed\n     * @param {HTMLElement} detail.selectedItem The new selected item.\n     * @param {HTMLElement} detail.previousItem The previously selected item.\n     */\n\n    /**\n     * Fires when the selectedIndex property changes.\n     *\n     * @memberof SingleSelection\n     * @event selected-index-changed\n     * @param {number} detail.selectedIndex The new selected index.\n     */\n\n  }\n\n  return SingleSelection;\n};\n\n\n// Ensure the given index is within bounds, and select it if it's not already\n// selected.\nfunction selectIndex(element, index) {\n  const count = element.items.length;\n\n  const boundedIndex = (element.selectionWraps) ?\n    // JavaScript mod doesn't handle negative numbers the way we want to wrap.\n    // See http://stackoverflow.com/a/18618250/76472\n    ((index % count) + count) % count :\n\n    // Keep index within bounds of array.\n    Math.max(Math.min(index, count - 1), 0);\n\n  const previousIndex = element.selectedIndex;\n  if (previousIndex !== boundedIndex) {\n    element.selectedIndex = boundedIndex;\n    return true;\n  } else {\n    return false;\n  }\n}\n\n// Following a change in the set of items, or in the value of the\n// `selectionRequired` property, reacquire the selected item. If it's moved,\n// update `selectedIndex`. If it's been removed, and a selection is required,\n// try to select another item.\nfunction trackSelectedItem(element) {\n\n  const items = element.items;\n  const itemCount = items ? items.length : 0;\n\n  const previousSelectedItem = element.selectedItem;\n  if (!previousSelectedItem) {\n    // No item was previously selected.\n    if (element.selectionRequired) {\n      // Select the first item by default.\n      element.selectedIndex = 0;\n    }\n  } else if (itemCount === 0) {\n    // We've lost the selection, and there's nothing left to select.\n    element.selectedItem = null;\n  } else {\n    // Try to find the previously-selected item in the current set of items.\n    const indexInCurrentItems = Array.prototype.indexOf.call(items, previousSelectedItem);\n    const previousSelectedIndex = element.selectedIndex;\n    if (indexInCurrentItems < 0) {\n      // Previously-selected item was removed from the items.\n      // Select the item at the same index (if it exists) or as close as possible.\n      const newSelectedIndex = Math.min(previousSelectedIndex, itemCount - 1);\n      // Select by item, since index may be the same, and we want to raise the\n      // selected-item-changed event.\n      element.selectedItem = items[newSelectedIndex];\n    } else if (indexInCurrentItems !== previousSelectedIndex) {\n      // Previously-selected item still there, but changed position.\n      element.selectedIndex = indexInCurrentItems;\n    }\n  }\n}\n\n// Following a change in selection, report whether it's now possible to\n// go next/previous from the given index.\nfunction updatePossibleNavigations(element) {\n  let canSelectNext;\n  let canSelectPrevious;\n  const items = element.items;\n  if (items == null || items.length === 0) {\n    // No items to select.\n    canSelectNext = false;\n    canSelectPrevious = false;\n  } if (element.selectionWraps) {\n    // Since there are items, can always go next/previous.\n    canSelectNext = true;\n    canSelectPrevious = true;\n  } else {\n    const index = element.selectedIndex;\n    if (index < 0 && items.length > 0) {\n      // Special case. If there are items but no selection, declare that it's\n      // always possible to go next/previous to create a selection.\n      canSelectNext = true;\n      canSelectPrevious = true;\n    } else {\n      // Normal case: we have an index in a list that has items.\n      canSelectPrevious = (index > 0);\n      canSelectNext = (index < items.length - 1);\n    }\n  }\n  if (element.canSelectNext !== canSelectNext) {\n    element.canSelectNext = canSelectNext;\n  }\n  if (element.canSelectPrevious !== canSelectPrevious) {\n    element.canSelectPrevious = canSelectPrevious;\n  }\n}\n","import createSymbol from './createSymbol';\nimport symbols from './symbols';\n\n\n// Symbols for private data members on an element.\nconst deltaXSymbol = createSymbol('deltaX');\nconst deltaYSymbol = createSymbol('deltaY');\nconst multiTouchSymbol = createSymbol('multiTouch');\nconst previousXSymbol = createSymbol('previousX');\nconst previousYSymbol = createSymbol('previousY');\nconst startXSymbol = createSymbol('startX');\nconst travelFractionSymbol = createSymbol('travelFraction');\n\n\n/* Exported function extends a base class with SwipeDirection. */\nexport default (base) => {\n\n  /**\n   * Mixin which maps touch gestures (swipe left, swipe right) to direction\n   * semantics (go right, go left).\n   *\n   * By default, this mixin presents no user-visible effects; it just indicates\n   * a direction in which the user is currently swiping or has finished swiping.\n   * To map the direction to a change in selection, use\n   * [DirectionSelectionMixin](DirectionSelectionMixin.md).\n   */\n  class SwipeDirection extends base {\n\n    constructor() {\n      super();\n\n      this.travelFraction = 0;\n\n      // In all touch events, only handle single touches. We don't want to\n      // inadvertently do work when the user's trying to pinch-zoom for example.\n      // TODO: Even better approach than below would be to ignore touches after\n      // the first if the user has already begun a swipe.\n      // TODO: Touch events should probably be factored out into its own mixin.\n      if (window.PointerEvent) {\n        // Prefer listening to standard pointer events.\n        this.addEventListener('pointerdown', event => {\n          if (isEventForPenOrPrimaryTouch(event)) {\n            touchStart(this, event.clientX, event.clientY);\n          }\n        });\n        this.addEventListener('pointermove', event => {\n          if (isEventForPenOrPrimaryTouch(event)) {\n            const handled = touchMove(this, event.clientX, event.clientY);\n            if (handled) {\n              event.preventDefault();\n            }\n          }\n        });\n        this.addEventListener('pointerup', event => {\n          if (isEventForPenOrPrimaryTouch(event)) {\n            touchEnd(this, event.clientX, event.clientY);\n          }\n        });\n      } else {\n        // Pointer events not supported -- listen to older touch events.\n        this.addEventListener('touchstart', event => {\n          if (this[multiTouchSymbol]) {\n            return;\n          } else if (event.touches.length === 1) {\n            const clientX = event.changedTouches[0].clientX;\n            const clientY = event.changedTouches[0].clientY;\n            touchStart(this, clientX, clientY);\n          } else {\n            this[multiTouchSymbol] = true;\n          }\n        });\n        this.addEventListener('touchmove', event => {\n          if (!this[multiTouchSymbol] && event.touches.length === 1) {\n            const clientX = event.changedTouches[0].clientX;\n            const clientY = event.changedTouches[0].clientY;\n            const handled = touchMove(this, clientX, clientY);\n            if (handled) {\n              event.preventDefault();\n            }\n          }\n        });\n        this.addEventListener('touchend', event => {\n          if (event.touches.length === 0) {\n            // All touches removed; gesture is complete.\n            if (!this[multiTouchSymbol]) {\n              // Single-touch swipe has finished.\n              const clientX = event.changedTouches[0].clientX;\n              const clientY = event.changedTouches[0].clientY;\n              touchEnd(this, clientX, clientY);\n            }\n            this[multiTouchSymbol] = false;\n          }\n        });\n      }\n    }\n\n    connectedCallback() {\n      if (super.connectedCallback) { super.connectedCallback(); }\n\n      // For the component to receive PointerEvents in IE/Edge, we need to set\n      // touch-action: none. Only make this change if touch-action is currently\n      // the default value (\"auto\"), in case the developer knows better than we\n      // do what they want in their particular context.\n      if (getComputedStyle(this).touchAction === 'auto') {\n        this.style.touchAction = 'none';\n      }\n    }\n\n    // Default implementation.\n    get [symbols.dragging]() {\n      return super[symbols.dragging];\n    }\n    set [symbols.dragging](value) {\n      if (symbols.dragging in base.prototype) { super[symbols.dragging] = value; }\n    }\n\n    /**\n     * Invoked when the user wants to go/navigate left.\n     * The default implementation of this method does nothing.\n     */\n    [symbols.goLeft]() {\n      if (super[symbols.goLeft]) { return super[symbols.goLeft](); }\n    }\n\n    /**\n     * Invoked when the user wants to go/navigate right.\n     * The default implementation of this method does nothing.\n     */\n    [symbols.goRight]() {\n      if (super[symbols.goRight]) { return super[symbols.goRight](); }\n    }\n\n    /**\n     * The distance the first touchpoint has traveled since the beginning of a\n     * drag, expressed as a fraction of the element's width.\n     *\n     * @type number\n     */\n    get travelFraction() {\n      return this[travelFractionSymbol];\n    }\n    set travelFraction(value) {\n      this[travelFractionSymbol] = value;\n      if ('travelFraction' in base.prototype) { super.travelFraction = value; }\n    }\n\n  }\n\n  return SwipeDirection;\n};\n\n\n// Return true if the pointer event is for the pen, or the primary touch point.\nfunction isEventForPenOrPrimaryTouch(event) {\n  return event.pointerType === 'pen' ||\n      (event.pointerType === 'touch' && event.isPrimary);\n}\n\n/*\n * Invoked when the user has finished a touch operation.\n */\nfunction touchEnd(element, clientX, clientY) {\n  element[symbols.dragging] = false;\n  if (element[deltaXSymbol] >= 20) {\n    // Finished going right at high speed.\n    element[symbols.goLeft]();\n  } else if (element[deltaXSymbol] <= -20) {\n    // Finished going left at high speed.\n    element[symbols.goRight]();\n  } else {\n    // Finished at low speed.\n    trackTo(element, clientX);\n    const travelFraction = element.travelFraction;\n    if (travelFraction >= 0.5) {\n      element[symbols.goRight]();\n    } else if (travelFraction <= -0.5) {\n      element[symbols.goLeft]();\n    }\n  }\n  element.travelFraction = 0;\n  element[deltaXSymbol] = null;\n  element[deltaYSymbol] = null;\n}\n\n/*\n * Invoked when the user has moved during a touch operation.\n */\nfunction touchMove(element, clientX, clientY) {\n\n  element[deltaXSymbol] = clientX - element[previousXSymbol];\n  element[deltaYSymbol] = clientY - element[previousYSymbol];\n  element[previousXSymbol] = clientX;\n  element[previousYSymbol] = clientY;\n  if (Math.abs(element[deltaXSymbol]) > Math.abs(element[deltaYSymbol])) {\n    // Move was mostly horizontal.\n    trackTo(element, clientX);\n    // Indicate that the event was handled. It'd be nicer if we didn't have\n    // to do this so that, e.g., a user could be swiping left and right\n    // while simultaneously scrolling up and down. (Native touch apps can do\n    // that.) However, Mobile Safari wants to handle swipe events near the\n    // page and interpret them as navigations. To avoid having a horiziontal\n    // swipe misintepreted as a navigation, we indicate that we've handled\n    // the event, and prevent default behavior.\n    return true;\n  } else {\n    // Move was mostly vertical.\n    return false; // Not handled\n  }\n}\n\n/*\n * Invoked when the user has begun a touch operation.\n */\nfunction touchStart(element, clientX, clientY) {\n  element[symbols.dragging] = true;\n  element[startXSymbol] = clientX;\n  element[previousXSymbol] = clientX;\n  element[previousYSymbol] = clientY;\n  element[deltaXSymbol] = 0;\n  element[deltaYSymbol] = 0;\n}\n\nfunction trackTo(element, x) {\n  const width = element.offsetWidth;\n  const dragDistance = element[startXSymbol] - x;\n  const fraction = width > 0 ?\n    dragDistance / width :\n    0;\n  element.travelFraction = fraction;\n}\n","import createSymbol from './createSymbol';\nimport symbols from './symbols';\n\n\nconst playingSymbol = createSymbol('playing');\nconst selectionTimerDurationSymbol = createSymbol('selectionTimerDuration');\nconst timerTimeoutSymbol = createSymbol('timerTimeout');\n\n\n/* Exported function extends a base class with TimerSelection. */\nexport default (base) => {\n\n  /**\n   * Mixin which provides for automatic timed changes in selection.\n   *\n   * This mixin is useful for creating slideshow-like elements such as\n   * [basic-slideshow](../../basic-slideshow) and\n   * [basic-slideshow-with-controls](../../basic-slideshow-with-controls).\n   *\n   * Typical usage:\n   *\n   *     class CarouselWithTimer extends TimerSelectionMixin(Carousel) {}\n   *     customElements.define('carousel-with-arrows', CarouselWithTimer);\n   *\n   * This mixin expects the component to define an `items` property, as well as\n   * `selectFirst` and `selectNext` methods. You can implement those yourself,\n   * or use [ContentItemsMixin](ContentItemsMixin.md) and\n   * [SingleSelectionMixin](SingleSelectionMixin.md).\n   */\n  class TimerSelection extends base {\n\n    constructor() {\n      super();\n      // Set defaults.\n      if (typeof this.playing === 'undefined') {\n        this.playing = this[symbols.defaults].playing;\n      }\n      if (typeof this.selectionTimerDuration === 'undefined') {\n        this.selectionTimerDuration = this[symbols.defaults].selectionTimerDuration;\n      }\n    }\n\n    contentChanged() {\n      if (super.contentChanged) { super.contentChanged(); }\n      restartTimer(this);\n    }\n\n    get [symbols.defaults]() {\n      const defaults = super[symbols.defaults] || {};\n      defaults.playing = false;\n      defaults.selectionTimerDuration = 1000;\n      return defaults;\n    }\n\n    /**\n     * Begin automatic progression of the selection.\n     */\n    play() {\n      if (super.play) { super.play(); }\n      startTimer(this);\n      this[playingSymbol] = true;\n    }\n\n    /**\n     * Pause automatic progression of the selection.\n     */\n    pause() {\n      if (super.pause) { super.pause(); }\n      clearTimer(this);\n      this[playingSymbol] = false;\n    }\n\n    /**\n     * True if the selection is being automatically advanced.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    get playing() {\n      return this[playingSymbol];\n    }\n    set playing(playing) {\n      const previousPlaying = this[playingSymbol];\n      const parsed = String(playing) === 'true'; // Cast to boolean\n      if ('playing' in base.prototype) { super.playing = playing; }\n      if (parsed !== previousPlaying) {\n        if (playing) {\n          this.play();\n        } else {\n          this.pause();\n        }\n      }\n    }\n\n    /*\n     * When the selected item changes (because of something this mixin did, or\n     * was changed by an outside agent like the user), we wait before advancing\n     * to the next item. By triggering the next item this way, we implicitly get\n     * a desirable behavior: if the user changes the selection (e.g., in a\n     * carousel), we let them see that selection state for a while before\n     * advancing the selection ourselves.\n     */\n    get selectedItem() {\n      return super.selectedItem;\n    }\n    set selectedItem(item) {\n      if ('selectedItem' in base.prototype) { super.selectedItem = item; }\n      restartTimer(this);\n    }\n\n    /**\n     * The time in milliseconds that will elapse after the selection changes\n     * before the selection will be advanced to the next item in the list.\n     *\n     * @type {number} - Time in milliseconds\n     * @default 1000 (1 second)\n     */\n    get selectionTimerDuration() {\n      return this[selectionTimerDurationSymbol];\n    }\n    set selectionTimerDuration(value) {\n      this[selectionTimerDurationSymbol] = parseInt(value);\n      if ('selectionTimerDuration' in base.prototype) { super.selectionTimerDuration = value; }\n    }\n\n  }\n\n  return TimerSelection;\n};\n\n\nfunction clearTimer(element) {\n  if (element[timerTimeoutSymbol]) {\n    clearTimeout(element[timerTimeoutSymbol]);\n    element[timerTimeoutSymbol] = null;\n  }\n}\n\nfunction restartTimer(element) {\n  clearTimer(element);\n  if (element.playing && element.items && element.items.length > 0) {\n    startTimer(element);\n  }\n}\n\nfunction startTimer(element) {\n  // If play() is called more than once, cancel any existing timer.\n  clearTimer(element);\n  element[timerTimeoutSymbol] = setTimeout(() => {\n    selectNextWithWrap(element);\n  }, element.selectionTimerDuration);\n}\n\n// Select the next item, wrapping to first item if necessary.\nfunction selectNextWithWrap(element) {\n  const items = element.items;\n  if (items && items.length > 0) {\n    if (element.selectedIndex == null || element.selectedIndex === items.length - 1) {\n      element.selectFirst();\n    } else {\n      element.selectNext();\n    }\n  }\n}\n","import createSymbol from '../../basic-component-mixins/src/createSymbol';\nimport symbols from './symbols';\n\n\n// Symbols for private data members on an element.\nconst absorbDecelerationSymbol = createSymbol('absorbDeceleration');\nconst lastDeltaXSymbol = createSymbol('lastDeltaX');\nconst lastWheelTimeoutSymbol = createSymbol('lastWheelTimeout');\nconst postNavigateDelayCompleteSymbol = createSymbol('postNavigateDelayComplete');\nconst wheelDistanceSymbol = createSymbol('wheelDistance');\n\n\n/* Exported function extends a base class with TrackpadDirection. */\nexport default (base) => {\n\n  /**\n   * Mixin which maps a horizontal trackpad swipe gestures (or horizontal mouse\n   * wheel actions) to direction semantics.\n   *\n   * You can use this mixin with a mixin like\n   * [DirectionSelectionMixin](DirectionSelectionMixin.md) to let the user\n   * change the selection with the trackpad or mouse wheel.\n   *\n   * To respond to the trackpad, we can listen to the DOM's \"wheel\" events.\n   * These events are fired as the user drags their fingers across a trackpad.\n   * Unfortunately, browsers are missing a critical event — there is no event\n   * when the user *stops* a gestured on the trackpad or mouse wheel.\n   *\n   * To make things worse, the mainstream browsers continue to generate fake\n   * wheel events even after the user has stopped dragging their fingers. These\n   * fake events simulate the user gradually slowing down the drag until they\n   * come to a smooth stop. In some contexts, these fake wheel events might be\n   * helpful, but in trying to supply typical trackpad swipe navigation, these\n   * fake events get in the way.\n   *\n   * This component uses heuristics to work around these problems, but the\n   * complex nature of the problem make it extremely difficult to achieve the\n   * same degree of trackpad responsiveness possible with native applications.\n   */\n  class TrackpadDirection extends base {\n\n    constructor() {\n      super();\n      this.addEventListener('wheel', event => {\n        const handled = wheel(this, event);\n        if (handled) {\n          event.preventDefault();\n        }\n      });\n      resetWheelTracking(this);\n    }\n\n    // Default implementation.\n    get [symbols.dragging]() {\n      return super[symbols.dragging];\n    }\n    set [symbols.dragging](value) {\n      if (symbols.dragging in base.prototype) { super[symbols.dragging] = value; }\n    }\n\n    /**\n     * Invoked when the user wants to go/navigate left.\n     * The default implementation of this method does nothing.\n     */\n    [symbols.goLeft]() {\n      if (super[symbols.goLeft]) { return super[symbols.goLeft](); }\n    }\n\n    /**\n     * Invoked when the user wants to go/navigate right.\n     * The default implementation of this method does nothing.\n     */\n    [symbols.goRight]() {\n      if (super[symbols.goRight]) { return super[symbols.goRight](); }\n    }\n\n    /**\n     * The distance the user has moved the first touchpoint since the beginning\n     * of a trackpad/wheel operation, expressed as a fraction of the element's\n     * width.\n     *\n     * @type number\n     */\n    get travelFraction() {\n      return super.travelFraction;\n    }\n    set travelFraction(value) {\n      if ('travelFraction' in base.prototype) { super.travelFraction = value; }\n    }\n\n  }\n\n  return TrackpadDirection;\n};\n\n\n// Time we wait following a navigation before paying attention to wheel\n// events again.\nconst POST_NAVIGATE_TIME = 250;\n\n// Time we wait after the last wheel event before we reset things.\nconst WHEEL_TIME = 100;\n\n\n// Following a navigation, partially reset our wheel tracking.\nfunction postNavigate(element) {\n  element.travelFraction = 0;\n  element[wheelDistanceSymbol] = 0;\n  element[postNavigateDelayCompleteSymbol] = true;\n  element[absorbDecelerationSymbol] = true;\n  setTimeout(() => {\n    element[postNavigateDelayCompleteSymbol] = false;\n  }, POST_NAVIGATE_TIME);\n}\n\n// Reset all state related to the tracking of the wheel.\nfunction resetWheelTracking(element) {\n  element.travelFraction = 0;\n  element[wheelDistanceSymbol] = 0;\n  element[lastDeltaXSymbol] = 0;\n  element[absorbDecelerationSymbol] = false;\n  element[postNavigateDelayCompleteSymbol] = false;\n  if (element[lastWheelTimeoutSymbol]) {\n    clearTimeout(element[lastWheelTimeoutSymbol]);\n    element[lastWheelTimeoutSymbol] = null;\n  }\n}\n\n// Define our own sign function, since (as of May 2015), Safari and IE don't\n// supply Math.sign().\nfunction sign(x) {\n  return (x === 0) ?\n    0 :\n    (x > 0) ?\n      1 :\n      -1;\n}\n\n// TODO: Damping, or some other treatment for going past the ends.\n\n/*\n * A wheel event has been generated. This could be a real wheel event, or it\n * could be fake (see notes in the header).\n *\n * This handler uses several strategies to try to approximate native trackpad\n * swipe navigation.\n *\n * If the user has dragged enough to cause a navigation, then for a short\n * delay following that navigation, subsequent wheel events will be ignored.\n *\n * Furthermore, follwowing a navigation, we ignore all wheel events until we\n * receive at least one event where the event's deltaX (distance traveled) is\n * *greater* than the previous event's deltaX. This helps us filter out the\n * fake wheel events generated by the browser to simulate deceleration.\n *\n */\nfunction wheel(element, event) {\n\n  // Since we have a new wheel event, reset our timer waiting for the last\n  // wheel event to pass.\n  if (element[lastWheelTimeoutSymbol]) {\n    clearTimeout(element[lastWheelTimeoutSymbol]);\n  }\n  element[lastWheelTimeoutSymbol] = setTimeout(() => {\n    wheelTimedOut(element);\n  }, WHEEL_TIME);\n\n  const deltaX = event.deltaX;\n  const deltaY = event.deltaY;\n\n  // See if element event represents acceleration or deceleration.\n  const acceleration = sign(deltaX) * (deltaX - element[lastDeltaXSymbol]);\n  element[lastDeltaXSymbol] = deltaX;\n\n  if (Math.abs(deltaX) < Math.abs(deltaY)) {\n    // Move was mostly vertical. The user may be trying scroll with the\n    // trackpad/wheel. To be on the safe, we ignore such events.\n    return false;\n  }\n\n  if (element[postNavigateDelayCompleteSymbol]) {\n    // It's too soon after a navigation; ignore the event.\n    return true;\n  }\n\n  if (acceleration > 0) {\n    // The events are not (or are no longer) decelerating, so we can start\n    // paying attention to them again.\n    element[absorbDecelerationSymbol] = false;\n  } else if (element[absorbDecelerationSymbol]) {\n    // The wheel event was likely faked to simulate deceleration; ignore it.\n    return true;\n  }\n\n  element[wheelDistanceSymbol] += deltaX;\n\n  // Update the travel fraction of the element being navigated.\n  const width = element.offsetWidth;\n  let travelFraction = width > 0 ?\n    element[wheelDistanceSymbol] / width :\n    0;\n  element[symbols.dragging] = true;\n  travelFraction = sign(travelFraction) * Math.min(Math.abs(travelFraction), 1);\n  element.travelFraction = travelFraction;\n\n  // If the user has dragged enough to reach the previous/next item, then\n  // complete a navigation to that item.\n  if (travelFraction === 1) {\n    element[symbols.dragging] = false;\n    element[symbols.goRight]();\n    postNavigate(element);\n  } else if (travelFraction === -1) {\n    element[symbols.dragging] = false;\n    element[symbols.goLeft]();\n    postNavigate(element);\n  }\n\n  return true;\n}\n\n// A sufficiently long period of time has passed since the last wheel event.\n// We snap the selection to the closest item, then reset our state.\nfunction wheelTimedOut(element) {\n\n  // Snap to the closest item.\n  element[symbols.dragging] = false;\n  const travelFraction = element.travelFraction;\n  if (travelFraction >= 0.5) {\n    element[symbols.goRight]();\n  } else if (travelFraction <= -0.5) {\n    element[symbols.goLeft]();\n  }\n\n  // TODO: Listen for the transition to complete, and then restore\n  // dragging to false (or the previous value).\n\n  resetWheelTracking(element);\n}\n","/**\n * Helper function to create a symbol that can be used for associating private\n * data with an element.\n *\n * Mixins and component classes often want to associate private data with an\n * element instance, but JavaScript does not have direct support for true\n * private properties. One approach is to use the\n * [Symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol)\n * data type to set and retrieve data on an element.\n *\n * Unfortunately, the Symbol type is not available in Internet Explorer 11. The\n * `createSymbol` helper function exists as a workaround for IE 11. Rather than\n * returning a true Symbol, it simply returns an underscore-prefixed string.\n *\n * Usage:\n *\n *     const fooSymbol = createSymbol('foo');\n *\n *     class MyElement extends HTMLElement {\n *       get foo() {\n *         return this[fooSymbol];\n *       }\n *       set foo(value) {\n *         this[fooSymbol] = value;\n *       }\n *     }\n *\n * In IE 11, this sample will \"hide\" data behind an instance property this._foo.\n * The use of the underscore is meant to reduce (not eliminate) the potential\n * for name conflicts, and discourage (not prevent) external access to this\n * data. In modern browsers, the above code will eliminate the potential of\n * naming conflicts, and better hide the data behind a real Symbol.\n *\n * @function createSymbol\n * @param {string} description - A string to identify the symbol when debugging\n */\nexport default function createSymbol(description) {\n  return typeof Symbol === 'function' ?\n    Symbol(description) :\n    `_${description}`;\n}\n","/*\n * Microtask helper for IE 11.\n *\n * Executing a function as a microtask is trivial in browsers that support\n * promises, whose then() clauses use microtask timing. IE 11 doesn't support\n * promises, but does support MutationObservers, which are also executed as\n * microtasks. So this helper uses an MutationObserver to achieve microtask\n * timing.\n *\n * See https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/\n *\n * Inspired by Polymer's async() function.\n */\n\n\n// The queue of pending callbacks to be executed as microtasks.\nconst callbacks = [];\n\n// Create an element that we will modify to force observable mutations.\nconst element = document.createTextNode('');\n\n// A monotonically-increasing value.\nlet counter = 0;\n\n\n/**\n * Add a callback to the microtask queue.\n *\n * This uses a MutationObserver so that it works on IE 11.\n *\n * NOTE: IE 11 may actually use timeout timing with MutationObservers. This\n * needs more investigation.\n *\n * @function microtask\n * @param {function} callback\n */\nexport default function microtask(callback) {\n  callbacks.push(callback);\n  // Force a mutation.\n  element.textContent = ++counter;\n}\n\n\n// Execute any pending callbacks.\nfunction executeCallbacks() {\n  while (callbacks.length > 0) {\n    const callback = callbacks.shift();\n    callback();\n  }\n}\n\n\n// Create the observer.\nconst observer = new MutationObserver(executeCallbacks);\nobserver.observe(element, {\n  characterData: true\n});\n","/**\n * Helper function for rendering an array of items as elements.\n *\n * This is not a mixin, but a function components can use if they need to\n * generate a set of elements for the items in an array.\n *\n * This function will reuse existing elements if possible. E.g., if it is called\n * to render an array of 4 items, and later called to render an array of 5\n * items, it can reuse the existing 4 items, creating just one new element.\n * Note, however, that this re-rendering is not automatic. If, after calling\n * this function, you manipulate the array you used, you must still call this\n * function again to re-render the array.\n *\n * The `renderItem` parameter takes a function of two arguments: an item to\n * to render, and an existing element (if one exists) which can be repurposed to\n * render that item. If the latter argument is null, the `renderItem()` function\n * should create a new element and return it. The function should do the same\n * if the supplied existing element is not suitable for rendering the given\n * item; the returned element will be used to replace the existing one. If the\n * existing element *is* suitable, the function can simply update it and return\n * it as is.\n *\n * Example: The following will render an array of strings in divs as children\n * of the `container` element:\n *\n *     let strings = ['a', 'b', 'c', ...];\n *     let container = this.querySelector(...);\n *     renderArrayAsElements(strings, container, (string, element) => {\n *       if (!element) {\n *         // No element exists yet, so create a new one.\n *         element = document.createElement('div');\n *       }\n *       // Set/update the text content of the element.\n *       element.textContent = string;\n *       return element;\n *     });\n *\n * @param {Array} items - the items to render\n * @param {HTMLElement} container - the parent that will hold the elements\n * @param {function} renderItem - returns a new element for an item, or\n *                                repurposes an existing element for an item\n */\nfunction renderArrayAsElements(items, container, renderItem) {\n  // Create a new set of elements for the current items.\n  items.forEach((item, index) => {\n    const oldElement = container.childNodes[index];\n    const newElement = renderItem(item, oldElement);\n    if (newElement) {\n      if (!oldElement) {\n        container.appendChild(newElement);\n      } else if (newElement !== oldElement) {\n        container.replaceChild(newElement, oldElement);\n      }\n    }\n  });\n\n  // If the array shrank, remove the extra elements which are no longer needed.\n  while (container.childNodes.length > items.length) {\n    container.removeChild(container.childNodes[items.length]);\n  }\n}\n\nexport default renderArrayAsElements;\n","import createSymbol from './createSymbol';\nimport toggleClass from './toggleClass';\n\n\n// Symbols for private data members on an element.\nconst safeToSetAttributesSymbol = createSymbol('safeToSetAttributes');\nconst pendingAttributesSymbol = createSymbol('pendingAttributes');\nconst pendingClassesSymbol = createSymbol('pendingClasses');\n\n\n/**\n * Helper functions for updating attributes, including the `class` attribute.\n */\nexport default {\n\n  /**\n   * Perform any pending updates to attributes and classes.\n   *\n   * This writes any `setAttribute` or `toggleClass` values that were performed\n   * before an element was attached to the document for the first time.\n   *\n   * This method should be called by mixins/components in their\n   * `connectedCallback`. If mulitple mixins/components invoke this during the\n   * same `connectedCallback`, only the first call will have any effect. The\n   * subsequent calls will be harmless.\n   *\n   * @param {HTMLElement} element - The element being added to the document.\n   */\n  connected(element) {\n    element[safeToSetAttributesSymbol] = true;\n\n    // Set any pending attributes.\n    if (element[pendingAttributesSymbol]) {\n      for (let attribute in element[pendingAttributesSymbol]) {\n        const value = element[pendingAttributesSymbol][attribute];\n        setAttributeToElement(element, attribute, value);\n      }\n      element[pendingAttributesSymbol] = null;\n    }\n\n    // Set any pending classes.\n    if (element[pendingClassesSymbol]) {\n      for (let className in element[pendingClassesSymbol]) {\n        const value = element[pendingClassesSymbol][className];\n        toggleClass(element, className, value);\n      }\n      element[pendingClassesSymbol] = null;\n    }\n  },\n\n  /**\n   * Set/unset the attribute with the indicated name.\n   *\n   * This method exists primarily to handle the case where an element wants to\n   * set a default property value that should be reflected as an attribute. An\n   * important limitation of custom element consturctors is that they cannot\n   * set attributes. A call to `setAttribute` during the constructor will\n   * be deferred until the element is connected to the document.\n   *\n   * @param {string} attribute - The name of the *attribute* (not property) to set.\n   * @param {object} value - The value to set. If null, the attribute will be removed.\n   */\n  setAttribute(element, attribute, value) {\n    if (element[safeToSetAttributesSymbol]) {\n      // Safe to set attributes immediately.\n      setAttributeToElement(element, attribute, value);\n    } else {\n      // Defer setting attributes until the first time we're connected.\n      if (!element[pendingAttributesSymbol]) {\n        element[pendingAttributesSymbol] = {};\n      }\n      element[pendingAttributesSymbol][attribute] = value;\n    }\n  },\n\n  /**\n   * Set/unset the class with the indicated name.\n   *\n   * This method exists primarily to handle the case where an element wants to\n   * set a default property value that should be reflected as as class. An\n   * important limitation of custom element consturctors is that they cannot\n   * set attributes, including the `class` attribute. A call to\n   * `toggleClass` during the constructor will be deferred until the element\n   * is connected to the document.\n   *\n   * @param {string} className - The name of the class to set.\n   * @param {object} value - True to set the class, false to remove it.\n   */\n  toggleClass(element, className, value) {\n    if (element[safeToSetAttributesSymbol]) {\n      // Safe to set class immediately.\n      toggleClass(element, className, value);\n    } else {\n      // Defer setting class until the first time we're connected.\n      if (!element[pendingClassesSymbol]) {\n        element[pendingClassesSymbol] = {};\n      }\n      element[pendingClassesSymbol][className] = value;\n    }\n  }\n\n};\n\n\n// Reflect the attribute to the given element.\n// If the value is null, remove the attribute.\nfunction setAttributeToElement(element, attributeName, value) {\n  if (value === null || typeof value === 'undefined') {\n    element.removeAttribute(attributeName);\n  } else {\n    const text = String(value);\n    // Avoid recursive attributeChangedCallback calls.\n    if (element.getAttribute(attributeName) !== text) {\n      element.setAttribute(attributeName, value);\n    }\n  }\n}\n","import createSymbol from './createSymbol';\n\n/**\n * A collection of Symbol objects for standard component properties and methods.\n *\n * These Symbol objects are used to allow mixins and a component to internally\n * communicate, without exposing these properties and methods in the component's\n * public API.\n *\n * To use these Symbol objects in your own component, include this module and\n * then create a property or method whose key is the desired Symbol.\n *\n *     import 'SingleSelectionMixin' from 'basic-component-mixins/src/SingleSelectionMixin';\n *     import 'symbols' from 'basic-component-mixins/src/symbols';\n *\n *     class MyElement extends SingleSelectionMixin(HTMLElement) {\n *       [symbols.itemSelected](item, selected) {\n *         // This will be invoked whenever an item is selected/deselected.\n *       }\n *     }\n *\n * @module symbols\n */\nconst symbols = {\n\n  /**\n   * Symbol for the `defaults` property.\n   *\n   * This property can be used to set or override defaults that will be applied\n   * to a new component instance. When implementing this property, take care to\n   * first acquire any defaults defined by the superclass. The standard idiom is\n   * as follows:\n   *\n   *     get [symbols.defaults]() {\n   *       const defaults = super[symbols.defaults] || {};\n   *       // Set or override default values here\n   *       defaults.customProperty = false;\n   *       return defaults;\n   *     }\n   *\n   * @var {object} defaults\n   */\n  defaults: createSymbol('defaults'),\n\n  /**\n   * Symbol for the `dragging` property.\n   *\n   * Components like carousels often define animated CSS transitions for\n   * sliding effects. Such a transition should usually *not* be applied while\n   * the user is dragging, because a CSS animation will introduce a lag that\n   * makes the swipe feel sluggish. Instead, as long as the user is dragging\n   * with their finger down, the transition should be suppressed. When the\n   * user releases their finger, the transition can be restored, allowing the\n   * animation to show the carousel sliding into its final position.\n   *\n   * @type {boolean} true if a drag is in progress, false if not.\n   */\n  dragging: createSymbol('dragging'),\n\n  /**\n   * Symbol for the `goDown` method.\n   *\n   * This method is invoked when the user wants to go/navigate down.\n   *\n   * @function goDown\n   */\n  goDown: createSymbol('goDown'),\n\n  /**\n   * Symbol for the `goEnd` method.\n   *\n   * This method is invoked when the user wants to go/navigate to the end (e.g.,\n   * of a list).\n   *\n   * @function goEnd\n   */\n  goEnd: createSymbol('goEnd'),\n\n  /**\n   * Symbol for the `goLeft` method.\n   *\n   * This method is invoked when the user wants to go/navigate left.\n   *\n   * @function goLeft\n   */\n  goLeft: createSymbol('goLeft'),\n\n  /**\n   * Symbol for the `goRight` method.\n   *\n   * This method is invoked when the user wants to go/navigate right.\n   *\n   * @function goRight\n   */\n  goRight: createSymbol('goRight'),\n\n  /**\n   * Symbol for the `goStart` method.\n   *\n   * This method is invoked when the user wants to go/navigate to the start\n   * (e.g., of a list).\n   *\n   * @function goStart\n   */\n  goStart: createSymbol('goStart'),\n\n  /**\n   * Symbol for the `goUp` method.\n   *\n   * This method is invoked when the user wants to go/navigate up.\n   *\n   * @function goUp\n   */\n  goUp: createSymbol('goUp'),\n\n  /**\n   * Symbol for the `itemAdded` method.\n   *\n   * This method is invoked when a new item is added to a list.\n   *\n   * @function itemAdded\n   * @param {HTMLElement} item - the item being selected/deselected\n   */\n  itemAdded: createSymbol('itemAdded'),\n\n\n  /**\n   * Symbol for the `itemsChanged` method.\n   *\n   * This method is invoked when the underlying contents change. It is also\n   * invoked on component initialization – since the items have \"changed\" from\n   * being nothing.\n   */\n  itemsChanged: createSymbol('itemsChanged'),\n\n  /**\n   * Symbol for the `itemSelected` method.\n   *\n   * This method is invoked when an item becomes selected or deselected.\n   *\n   * @function itemSelected\n   * @param {HTMLElement} item - the item being selected/deselected\n   * @param {boolean} selected - true if the item is selected, false if not\n   */\n  itemSelected: createSymbol('itemSelected'),\n\n  /**\n   * Symbol for the `keydown` method.\n   *\n   * This method is invoked when an element receives a `keydown` event.\n   *\n   * @function keydown\n   * @param {KeyboardEvent} event - the event being processed\n   */\n  keydown: createSymbol('keydown'),\n\n  /**\n   * Symbol for the `template` property.\n   *\n   * This property returns a component's template.\n   *\n   * @type {string|HTMLElement}\n   */\n  template: createSymbol('template')\n};\n\nexport default symbols;\n","/**\n * Helper function for standard classList.toggle() behavior on old browsers,\n * namely IE 11.\n *\n * The standard\n * [classlist](https://developer.mozilla.org/en-US/docs/Web/API/Element/classList)\n * object has a `toggle()` function that supports a second Boolean parameter\n * that can be used to succinctly turn a class on or off. This feature is often\n * useful in designing custom elements, which may want to externally reflect\n * component state in a CSS class that can be used for styling purposes.\n *\n * Unfortunately, IE 11 does not support the Boolean parameter to\n * `classList.toggle()`. This helper function behaves like the standard\n * `toggle()`, including support for the Boolean parameter, so that it can be\n * used even on IE 11.\n *\n * @function toggleClass\n * @param {HTMLElement} element - The element to modify\n * @param {string} className - The class to add/remove\n * @param {boolean} [force] - Force the class to be added (if true) or removed\n *                            (if false)\n */\nexport default function toggleClass(element, className, force) {\n  const classList = element.classList;\n  const addClass = (typeof force === 'undefined') ?\n    !classList.contains(className) :\n    force;\n  if (addClass) {\n    classList.add(className);\n  } else {\n    classList.remove(className);\n  }\n  return addClass;\n}\n","/*\n * This file is transpiled to create an ES5-compatible distribution in which\n * the package's main feature(s) are available via the window.Basic global.\n * If you're already using ES6 yourself, ignore this file, and instead import\n * the source file(s) you want from the src folder.\n */\n\nimport CurrentAnchor from './src/CurrentAnchor';\n\nwindow.Basic = window.Basic || {};\nwindow.Basic.CurrentAnchor = CurrentAnchor;\n","import createSymbol from '../../basic-component-mixins/src/createSymbol';\nimport safeAttributes from '../../basic-component-mixins/src/safeAttributes';\nimport symbols from '../../basic-component-mixins/src/symbols';\nimport WrappedStandardElement from '../../basic-wrapped-standard-element/src/WrappedStandardElement';\n\n\n// Symbols for private data members on an element.\nconst areaLinkSymbol = createSymbol('areaLink');\n\n\n/**\n * An anchor (link) that highlights itself when its destination matches the\n * current location.\n *\n * [Live demo](http://basicwebcomponents.org/basic-web-components/packages/basic-current-anchor/)\n *\n * Such a link commonly appears in toolbars, side bars, and other navigation\n * elements. In these situations, you generally want the user to understand what\n * page or area the user is already on.\n *\n * When the link is current — when it points to the current location — the\n * link will have the CSS `current` class applied to it, and its `current`\n * property will be true.\n *\n * Note: one limitation of this component is that, by default, the link does\n * *not* show the standard link color (usually blue) and text decoration\n * (underline). However, in navigation elements like toolbars, you often will\n * want to explicitly specific link colors anyway, e.g., to reflect your\n * application's visual style and brand.\n *\n * @extends WrappedStandardElement\n */\nclass CurrentAnchor extends WrappedStandardElement.wrap('a') {\n\n  constructor() {\n    super();\n\n    window.addEventListener('popstate', event => {\n      refresh(this);\n    });\n\n    // Stupid Edge/IE \"support\" popstate, but don't fire it on hashchange.\n    // So we have to listen for hashchange as well, with the result that a\n    // standards-compliant browser may end up refreshing the link twice.\n    window.addEventListener('hashchange', event => {\n      refresh(this);\n    });\n\n    // Set defaults.\n    if (typeof this.areaLink === 'undefined') {\n      this.areaLink = this[symbols.defaults].areaLink;\n    }\n  }\n\n  /**\n   * True if the link points to an area within a site, not just a single page.\n   *\n   * If true, the matching rule to determine whether the link is current changes:\n   * an area link is considered to be current if the link's destination forms a\n   * prefix of the current location (instead of matching the complete URL).\n   *\n   * @type {boolean}\n   */\n  get areaLink() {\n    return this[areaLinkSymbol];\n  }\n  set areaLink(value) {\n    // Cast boolean or string values to boolean.\n    this[areaLinkSymbol] = (String(value) === 'true');\n    refresh(this);\n  }\n\n  connectedCallback() {\n    if (super.connectedCallback) { super.connectedCallback(); }\n    safeAttributes.connected(this);\n    refresh(this);\n  }\n\n  /**\n   * True if the link's destination matches the current page location.\n   *\n   * If this is true, the element will have an `current` CSS class applied to it.\n   *\n   * @type {boolean}\n   */\n  get current() {\n    return this.classList.contains('current');\n  }\n  set current(value) {\n    safeAttributes.toggleClass(this, 'current', value);\n    this.dispatchEvent(new CustomEvent('current-changed'));\n  }\n\n  get [symbols.defaults]() {\n    const defaults = super[symbols.defaults] || {};\n    defaults.areaLink = false;\n    return defaults;\n  }\n\n  // Augment href implementation so that changing href checks the active status.\n  get href() {\n    return super.href;\n  }\n  set href(value) {\n    super.href = value;\n    refresh(this);\n  }\n\n  get [symbols.template]() {\n    // Reset styles so that color can be specified from the outside without\n    // having to define a CSS variable.\n    return `\n      <style>\n      :host {\n        display: inline-block;\n      }\n\n      #inner {\n        color: inherit;\n        display: inline-block;\n        text-decoration: inherit;\n      }\n      </style>\n      <a id=\"inner\"><slot></slot></a>`;\n  }\n\n}\n\n\n// Update the current status of the element based on the current location.\nfunction refresh(element) {\n  const url = window.location.href;\n  let match;\n  if (element.areaLink) {\n    // Match prefix\n    let prefix = element.href;\n    // If prefix doesn't end in slash, add a slash.\n    // We want to avoid matching in the middle of a folder name.\n    if (prefix.length < url.length && prefix.substr(-1) !== '/') {\n      prefix += '/';\n    }\n    match = (url.substr(0, prefix.length) === prefix);\n  } else {\n    // Match whole path\n    match = (url === element.href);\n  }\n  element.current = match;\n}\n\n\ncustomElements.define('basic-current-anchor', CurrentAnchor);\n","/*\n * This file is transpiled to create an ES5-compatible distribution in which\n * the package's main feature(s) are available via the window.Basic global.\n * If you're already using ES6 yourself, ignore this file, and instead import\n * the source file(s) you want from the src folder.\n */\n\nimport ElementBase from './src/ElementBase';\n\nwindow.Basic = window.Basic || {};\nwindow.Basic.ElementBase = ElementBase;\n","import AttributeMarshallingMixin from '../../basic-component-mixins/src/AttributeMarshallingMixin';\nimport ComposableMixin from '../../basic-component-mixins/src/ComposableMixin';\nimport DistributedChildrenMixin from '../../basic-component-mixins/src/DistributedChildrenMixin';\nimport ShadowElementReferencesMixin from '../../basic-component-mixins/src/ShadowElementReferencesMixin';\nimport ShadowTemplateMixin from '../../basic-component-mixins/src/ShadowTemplateMixin';\n\n\n/**\n * A sample general-purpose base class for defining custom elements that mixes\n * in some common features: template stamping into a shadow root, shadow element\n * references, marshalling attributes to properties, and retrieving the children\n * distributed to a component.\n *\n * This base class is not special in any way, and is defined only as a\n * convenient shorthand for applying the mixins listed above. You can use this\n * class as a base class for your own elements, or easily create your own base\n * class by applying the same set of mixins.\n *\n * The ElementBase base class does not register itself as a custom element with\n * the browser, and hence cannot be independently instantiated.\n *\n * @mixes AttributeMarshallingMixin\n * @mixes ComposableMixin\n * @mixes DistributedChildrenMixin\n * @mixes ShadowElementReferencesMixin\n * @mixes ShadowTemplateMixin\n */\nclass ElementBase extends ComposableMixin(HTMLElement).compose(\n  ShadowTemplateMixin,          // before node finding, so shadow root is populated\n  ShadowElementReferencesMixin, // before marshalling, so properties can use refs\n  AttributeMarshallingMixin,\n  DistributedChildrenMixin\n) {}\n\nexport default ElementBase;\n","/*\n * This file is transpiled to create an ES5-compatible distribution in which\n * the package's main feature(s) are available via the window.Basic global.\n * If you're already using ES6 yourself, ignore this file, and instead import\n * the source file(s) you want from the src folder.\n */\n\nimport FadeOverflow from './src/FadeOverflow';\n\nwindow.Basic = window.Basic || {};\nwindow.Basic.FadeOverflow = FadeOverflow;\n","import createSymbol from '../../basic-component-mixins/src/createSymbol';\nimport ElementBase from '../../basic-element-base/src/ElementBase';\nimport symbols from '../../basic-component-mixins/src/symbols';\n\n\n// Symbols for private data members on an element.\nconst fadeColorSymbol = createSymbol('fadeColor');\n\n\n/**\n * Fades out content that overflows so the user knows there's more.\n *\n * This component doesn't handle interactivity.\n *\n * The component needs to know the color it should fade to, which it tries to\n * infer from the background color. In some situations, this may not work, in\n * which case you can explicitly set the fadeColor attribute.\n *\n * The component currently always displays the fade, even if the component's\n * content is short enough to fit completely in view.\n *\n * @extends ElementBase\n */\nclass FadeOverflow extends ElementBase {\n\n  connectedCallback() {\n    if (super.connectedCallback) { super.connectedCallback(); }\n    if (this.fadeColor == null) {\n      this.refresh();\n    }\n  }\n\n  /**\n   * The color of the fade.\n   *\n   * The fade color should match the background color. The component does its\n   * best to infer the background color, but in some situations, that may not\n   * work. In those cases, you can manually identify the background color.\n   * This should be a solid color.\n   *\n   * @attribute fadeColor\n   * @default white\n   */\n  get fadeColor() {\n    return this[fadeColorSymbol];\n  }\n  set fadeColor(value) {\n    this[fadeColorSymbol] = value;\n    if (value) {\n      const rgb = extractRgbValues(value);\n      if (rgb) {\n        const fadeColorTransparent = `rgba(${rgb.r},${rgb.g},${rgb.b},0)`;\n        const gradient = `linear-gradient(${fadeColorTransparent} 0%, ${value} 100%)`;\n        this.$.fade.style.backgroundImage = gradient;\n      }\n    }\n  }\n\n  /**\n   * Infer the fade color from background color. If you have programmatically\n   * changed the color behind the component, you can invoke this method to have\n   * the component try to pick up the new background color.\n   */\n  refresh() {\n    // TODO: Automatically hide the fade if all the content can be seen.\n    this.fadeColor = findBackgroundColor(this);\n  }\n\n  /**\n   * True if the component should show the fade to the background color.\n   *\n   * @type {boolean}\n   * @default true\n   */\n  get showFade() {\n    return this.$.fade.style.display !== 'none';\n  }\n  set showFade(value) {\n    this.$.fade.style.display = value ? '' : 'none';\n  }\n\n  get [symbols.template]() {\n    return `\n      <style>\n      :host {\n        display: block;\n        position: relative;\n        overflow: hidden;\n      }\n\n      #fade {\n        bottom: 0;\n        height: 3em;\n        max-height: 50%;\n        pointer-events: none; /* Lets user interact with content through the fade. */\n        position: absolute;\n        width: 100%;\n      }\n      </style>\n\n      <div id=\"fade\"></div>\n      <slot></slot>\n    `;\n  }\n\n}\n\n\n// Return the background color of the given element. If the color is\n// \"transparent\" (the default in Mozilla and IE) or \"rgba(0, 0, 0, 0)\" (the\n// default transparent value in Blink and Webkit), walk up the parent chain\n// until a non-transparent color is found.\nfunction findBackgroundColor(element) {\n  if (element == null || typeof element.style === 'undefined') {\n    // This element has no background, assume white.\n    return 'rgb(255,255,255)';\n  }\n  const backgroundColor = getComputedStyle(element).backgroundColor;\n  if (backgroundColor === 'transparent' || backgroundColor === 'rgba(0, 0, 0, 0)') {\n    return findBackgroundColor(element.parentNode);\n  } else {\n    return backgroundColor;\n  }\n}\n\n\n// Return the individual RGB values from a CSS color string.\nfunction extractRgbValues(rgbString) {\n  const rgbRegex = /rgba?\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(?:,\\s*[\\d\\.]+\\s*)?\\)/;\n  const match = rgbRegex.exec(rgbString);\n  if (match) {\n    return {\n      r: parseInt(match[1]),\n      g: parseInt(match[2]),\n      b: parseInt(match[3])\n    };\n  } else {\n    return null;\n  }\n}\n\n\ncustomElements.define('basic-fade-overflow', FadeOverflow);\nexport default FadeOverflow;\n","/*\n * This file is transpiled to create an ES5-compatible distribution in which\n * the package's main feature(s) are available via the window.Basic global.\n * If you're already using ES6 yourself, ignore this file, and instead import\n * the source file(s) you want from the src folder.\n */\n\nimport ListBox from './src/ListBox';\n\nwindow.Basic = window.Basic || {};\nwindow.Basic.ListBox = ListBox;\n","import ElementBase from '../../basic-element-base/src/ElementBase';\nimport DistributedChildrenContentMixin from '../../basic-component-mixins/src/DistributedChildrenContentMixin';\nimport ClickSelectionMixin from '../../basic-component-mixins/src/ClickSelectionMixin';\nimport ContentItemsMixin from '../../basic-component-mixins/src/ContentItemsMixin';\nimport DirectionSelectionMixin from '../../basic-component-mixins/src/DirectionSelectionMixin';\nimport GenericMixin from '../../basic-component-mixins/src/GenericMixin';\nimport KeyboardMixin from '../../basic-component-mixins/src/KeyboardMixin';\nimport KeyboardDirectionMixin from '../../basic-component-mixins/src/KeyboardDirectionMixin';\nimport KeyboardPagedSelectionMixin from '../../basic-component-mixins/src/KeyboardPagedSelectionMixin';\nimport KeyboardPrefixSelectionMixin from '../../basic-component-mixins/src/KeyboardPrefixSelectionMixin';\nimport SelectedItemTextValueMixin from '../../basic-component-mixins/src/SelectedItemTextValueMixin';\nimport SelectionAriaActiveMixin from '../../basic-component-mixins/src/SelectionAriaActiveMixin';\nimport SelectionHighlightMixin from '../../basic-component-mixins/src/SelectionHighlightMixin';\nimport SelectionInViewMixin from '../../basic-component-mixins/src/SelectionInViewMixin';\nimport SingleSelectionMixin from '../../basic-component-mixins/src/SingleSelectionMixin';\nimport symbols from '../../basic-component-mixins/src/symbols';\n\n\n/**\n * A single-selection list box that supports selection highlighting (using the\n * system highlight color) and keyboard navigation.\n *\n * [Live demo](http://basicwebcomponents.org/basic-web-components/packages/basic-list-box/)\n *\n * The user can select an item with the mouse/touch or keyboard: Up/Down, Page\n * Up/Down, Home/End.\n *\n * Like other Basic Web Components, this can handle distributed content: you can\n * include a content element inside a basic-list-box, and the list will navigate\n * through the distributed content.\n *\n * This component includes basic ARIA support to provide a reasonable default\n * experience, e.g., for screen readers. The list component itself will be\n * assigned an appropriate ARIA role (default is \"listbox\"). The ID of the\n * selected item will be reflected in an \"aria-activedescendant\" attribute\n * applied to the list. To support this feature, all items in the list need\n * unique IDs. If an item does not have an ID, basic-list-box will automatically\n * assign a default ID.\n *\n * The keyboard interaction model generally follows that of Microsoft Windows'\n * list boxes instead of those in OS X:\n *\n * * The Page Up/Down and Home/End keys actually move the selection, rather than\n *   just scrolling the list. The former behavior seems more generally useful\n *   for keyboard users.\n *\n * * Pressing Page Up/Down will move the selection to the topmost/bottommost\n *   visible item if the selection is not already there. Thereafter, the key\n *   will move the selection up/down by a page, and (per the above point) make\n *   the selected item visible.\n *\n * Programmatically selecting an item (by setting the selected property) scrolls\n * the item into view.\n *\n * The user can also select an item by typing the beginning of an item's text.\n *\n * @extends ElementBase\n * @mixes ClickSelectionMixin\n * @mixes ContentItemsMixin\n * @mixes DirectionSelectionMixin\n * @mixes DistributedChildrenContentMixin\n * @mixes GenericMixin\n * @mixes KeyboardMixin\n * @mixes KeyboardDirectionMixin\n * @mixes KeyboardPagedSelectionMixin\n * @mixes KeyboardPrefixSelectionMixin\n * @mixis SelectedItemTextValueMixin\n * @mixes SelectionAriaActiveMixin\n * @mixes SelectionHighlightMixin\n * @mixes SelectionInViewMixin\n * @mixes SingleSelectionMixin\n */\nclass ListBox extends ElementBase.compose(\n  ClickSelectionMixin,\n  ContentItemsMixin,\n  DirectionSelectionMixin,\n  DistributedChildrenContentMixin,\n  GenericMixin,\n  KeyboardMixin,\n  KeyboardDirectionMixin,\n  KeyboardPagedSelectionMixin,\n  KeyboardPrefixSelectionMixin,\n  SelectedItemTextValueMixin,\n  SelectionAriaActiveMixin,\n  SelectionHighlightMixin,\n  SelectionInViewMixin,\n  SingleSelectionMixin\n) {\n\n  get [symbols.defaults]() {\n    const defaults = super[symbols.defaults] || {};\n    defaults.navigationAxis = 'vertical';\n    return defaults;\n  }\n\n  get scrollTarget() {\n    return this.$.itemsContainer;\n  }\n\n  get [symbols.template]() {\n    const baseTemplate = super[symbols.template] || '';\n    return `\n      <style>\n      :host {\n        display: -webkit-flex;\n        display: flex;\n        -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n      }\n\n      [target=\"child\"] {\n        display: -webkit-flex;\n        display: flex;\n        -webkit-flex: 1;\n        flex: 1;\n      }\n\n      #itemsContainer {\n        -webkit-flex: 1;\n        flex: 1;\n        -webkit-overflow-scrolling: touch;\n        overflow-y: scroll; /* for momentum scrolling */\n      }\n\n      /* GenericMixin appearance */\n      :host([generic=\"\"]) {\n        border: 1px solid gray;\n        box-sizing: border-box;\n        cursor: default;\n      }\n\n      :host([generic=\"\"]) #itemsContainer ::slotted(*) {\n        cursor: default;\n        padding: 0.25em;\n        -webkit-user-select: none;\n        -moz-user-select: none;\n        -ms-user-select: none;\n        user-select: none;\n      }\n      </style>\n\n      <div id=\"itemsContainer\" role=\"none\">\n        <slot></slot>\n      </div>\n      ${baseTemplate}\n    `;\n  }\n\n  /**\n   * Fires when the list's value property changes.\n   *\n   * @memberof ListBox\n   * @event value-changed\n   */\n}\n\n\ncustomElements.define('basic-list-box', ListBox);\nexport default ListBox;\n","/*\n * This file is transpiled to create an ES5-compatible distribution in which\n * the package's main feature(s) are available via the window.Basic global.\n * If you're already using ES6 yourself, ignore this file, and instead import\n * the source file(s) you want from the src folder.\n */\n\nimport Modes from './src/Modes';\n\nwindow.Basic = window.Basic || {};\nwindow.Basic.Modes = Modes;\n","import ElementBase from '../../basic-element-base/src/ElementBase';\nimport DistributedChildrenContentMixin from '../../basic-component-mixins/src/DistributedChildrenContentMixin';\nimport ContentItemsMixin from '../../basic-component-mixins/src/ContentItemsMixin';\nimport SingleSelectionMixin from '../../basic-component-mixins/src/SingleSelectionMixin';\nimport symbols from '../../basic-component-mixins/src/symbols';\n\nconst base = ElementBase.compose(\n  ContentItemsMixin,\n  DistributedChildrenContentMixin,\n  SingleSelectionMixin\n);\n\n\n/**\n * Shows exactly one child element at a time. This can be useful, for example,\n * if a given UI element has multiple modes that present substantially different\n * elements.\n *\n * The transition between child elements is instantenous. If you'd like the\n * transition to be accompanied by visible animated effects, see\n * [basic-animation-stage](../basic-animation-stage).\n *\n * This component doesn't provide any UI for changing which mode is shown.\n *\n * @extends ElementBase\n * @mixes ContentItemsMixin\n * @mixes DistributedChildrenContentMixin\n * @mixes SingleSelectionMixin\n */\nclass Modes extends base {\n\n  get [symbols.defaults]() {\n    const defaults = super[symbols.defaults] || {};\n    defaults.selectionRequired = true;\n    return defaults;\n  }\n\n  [symbols.itemSelected](item, selected) {\n    if (super[symbols.itemSelected]) { super[symbols.itemSelected](item, selected); }\n    item.style.display = selected ? '' : 'none';\n    item.setAttribute('aria-hidden', !selected);\n  }\n\n  get [symbols.template]() {\n    return `<slot></slot>`;\n  }\n\n}\n\n\ncustomElements.define('basic-modes', Modes);\nexport default Modes;\n","/*\n * This file is transpiled to create an ES5-compatible distribution in which\n * the package's main feature(s) are available via the window.Basic global.\n * If you're already using ES6 yourself, ignore this file, and instead import\n * the source file(s) you want from the src folder.\n */\n\nimport SlideshowWithControls from './src/SlideshowWithControls';\n\nwindow.Basic = window.Basic || {};\nwindow.Basic.SlideshowWithControls = SlideshowWithControls;\n","import Slideshow from '../../basic-slideshow/src/Slideshow';\nimport PlayControlsMixin from '../../basic-component-mixins/src/PlayControlsMixin';\n\n/**\n * An extension of\n * [basic-slideshow](../basic-slideshow) that adds play controls\n * via [PlayControlsMixin](../basic-component-mixins/docs/PlayControlsMixin.md).\n *\n * [Live demo](http://basicwebcomponents.org/basic-web-components/packages/basic-slideshow-with-controls/)\n *\n * @extends Slideshow\n * @mixes PlayControlsMixin\n */\nclass SlideshowWithControls extends PlayControlsMixin(Slideshow) {}\ncustomElements.define('basic-slideshow-with-controls', SlideshowWithControls);\n\nexport default SlideshowWithControls;\n","/*\n * This file is transpiled to create an ES5-compatible distribution in which\n * the package's main feature(s) are available via the window.Basic global.\n * If you're already using ES6 yourself, ignore this file, and instead import\n * the source file(s) you want from the src folder.\n */\n\nimport Slideshow from './src/Slideshow';\n\nwindow.Basic = window.Basic || {};\nwindow.Basic.Slideshow = Slideshow;\n","import ElementBase from '../../basic-element-base/src/ElementBase';\nimport ContentItemsMixin from '../../basic-component-mixins/src/ContentItemsMixin';\nimport DistributedChildrenContentMixin from '../../basic-component-mixins/src/DistributedChildrenContentMixin';\nimport FractionalSelectionMixin from '../../basic-component-mixins/src/FractionalSelectionMixin';\nimport SelectionAnimationMixin from '../../basic-component-mixins/src/SelectionAnimationMixin';\nimport SelectionAriaActiveMixin from '../../basic-component-mixins/src/SelectionAriaActiveMixin';\nimport SingleSelectionMixin from '../../basic-component-mixins/src/SingleSelectionMixin';\nimport symbols from '../../basic-component-mixins/src/symbols';\nimport TimerSelectionMixin from '../../basic-component-mixins/src/TimerSelectionMixin';\n\n\nconst base = ElementBase.compose(\n  ContentItemsMixin,\n  DistributedChildrenContentMixin,\n  FractionalSelectionMixin,\n  SelectionAnimationMixin,\n  SelectionAriaActiveMixin,\n  SingleSelectionMixin,\n  TimerSelectionMixin\n);\n\n\n/**\n * Slideshow with animated transitions.\n *\n * [Live demo](http://basicwebcomponents.org/basic-web-components/packages/basic-slideshow/)\n *\n * By default the slideshow will immediately begin playing when it is connected\n * to the document, advance every 3000 ms (3 seconds), and use a simple\n * crossfade effect. For a variation with play controls, see\n * [basic-slideshow-with-controls](../basic-slideshow-with-controls).\n *\n * This component can be used on its own. To incorporate slideshow behavior into\n * a component of your own, apply the\n * [TimerSelectionMixin](../basic-component-mixins/docs/TimerSelectionMixin.md).\n *\n * @extends ElementBase\n * @mixes ContentItemsMixin\n * @mixes DistributedChildrenContentMixin\n * @mixes FractionalSelectionMixin\n * @mixes SelectionAnimationMixin\n * @mixes SelectionAriaActiveMixin\n * @mixes SingleSelectionMixin\n * @mixes TimerSelectionMixin\n */\nclass Slideshow extends base {\n\n  get [symbols.defaults]() {\n    const defaults = super[symbols.defaults] || {};\n    defaults.playing = true;\n    defaults.selectionAnimationDuration = 500;\n    defaults.selectionAnimationEffect = 'crossfade';\n    defaults.selectionRequired = true;\n    defaults.selectionTimerDuration = 3000;\n    defaults.selectionWraps = true;\n    return defaults;\n  }\n\n  get [symbols.template]() {\n    return `\n      <style>\n      :host {\n        display: -webkit-flex;\n        display: flex;\n        overflow: hidden;\n        position: relative;\n      }\n\n      #container ::slotted(*) {\n        height: 100%;\n        object-fit: contain;\n        position: absolute;\n        width: 100%;\n        will-change: transform;\n      }\n      </style>\n\n      <div id=\"container\" role=\"none\">\n        <slot></slot>\n      </div>\n    `;\n  }\n\n}\n\n\ncustomElements.define('basic-slideshow', Slideshow);\nexport default Slideshow;\n","/*\n * This file is transpiled to create an ES5-compatible distribution in which\n * the package's main feature(s) are available via the window.Basic global.\n * If you're already using ES6 yourself, ignore this file, and instead import\n * the source file(s) you want from the src folder.\n */\n\nimport SlidingCarousel from './src/SlidingCarousel';\n\nwindow.Basic = window.Basic || {};\nwindow.Basic.SlidingCarousel = SlidingCarousel;\n","import ElementBase from '../../basic-element-base/src/ElementBase';\nimport ContentItemsMixin from '../../basic-component-mixins/src/ContentItemsMixin';\nimport DirectionSelectionMixin from '../../basic-component-mixins/src/DirectionSelectionMixin';\nimport DistributedChildrenContentMixin from '../../basic-component-mixins/src/DistributedChildrenContentMixin';\nimport FractionalSelectionMixin from '../../basic-component-mixins/src/FractionalSelectionMixin';\nimport KeyboardMixin from '../../basic-component-mixins/src/KeyboardMixin';\nimport KeyboardDirectionMixin from '../../basic-component-mixins/src/KeyboardDirectionMixin';\nimport SelectionAriaActiveMixin from '../../basic-component-mixins/src/SelectionAriaActiveMixin';\nimport SingleSelectionMixin from '../../basic-component-mixins/src/SingleSelectionMixin';\nimport SlidingViewport from '../../basic-sliding-viewport/src/SlidingViewport'; // jshint ignore:line\nimport SwipeDirectionMixin from '../../basic-component-mixins/src/SwipeDirectionMixin';\nimport symbols from '../../basic-component-mixins/src/symbols';\nimport TrackpadDirectionMixin from '../../basic-component-mixins/src/TrackpadDirectionMixin';\n\nconst base = ElementBase.compose(\n  ContentItemsMixin,\n  DirectionSelectionMixin,\n  DistributedChildrenContentMixin,\n  FractionalSelectionMixin,\n  KeyboardMixin,\n  KeyboardDirectionMixin,\n  SelectionAriaActiveMixin,\n  SingleSelectionMixin,\n  SwipeDirectionMixin,\n  TrackpadDirectionMixin\n);\n\n\n/**\n * Lets the user navigate laterally through a sequence of child elements.\n *\n * [Live demo](http://basicwebcomponents.org/basic-web-components/packages/basic-carousel/)\n *\n * basic-sliding-carousel is an implementation of the carousel user interface pattern,\n * commonly used for navigating between images, pages, and other elements. This\n * pattern presents the user with a linear sequence of elements, only one of\n * which is shown at a time. The user can navigate to the next/previous element\n * with a variety of input methods.\n *\n * basic-sliding-carousel is a simpler variation of the more sophisticated\n * [basic-carousel](../basic-carousel) component. The latter includes support\n * for _wrapping_ (going forward from the last item to the first, and vice versa),\n * and more complex visual transitions. Those transitions entail use of the\n * Web Animation API, which requires a polyfill in older browsers. Hence, the\n * simpler basic-sliding-carousel may be a more appropriate choice if factors\n * such as download size are critical.\n *\n * Beyond those differences, basic-sliding-carousel offers the same API, usage\n * recommendations, and support for keyboard/touch/mouse and assistive devices.\n * See that component for more details on use.\n *\n * @extends ElementBase\n * @mixes ContentItemsMixin\n * @mixes DirectionSelectionMixin\n * @mixes DistributedChildrenContentMixin\n * @mixes GenericMixin\n * @mixes KeyboardMixin\n * @mixes KeyboardDirectionMixin\n * @mixes SelectionAriaActiveMixin\n * @mixes SingleSelectionMixin\n * @mixes SwipeDirectionMixin\n * @mixes TrackpadDirectionMixin\n */\nclass SlidingCarousel extends base {\n\n  connectedCallback() {\n    if (super.connectedCallback) { super.connectedCallback(); }\n    // HACK\n    this[symbols.itemsChanged]();\n  }\n\n  get [symbols.defaults]() {\n    const defaults = super[symbols.defaults] || {};\n    defaults.navigationAxis = 'horizontal';\n    defaults.selectionRequired = true;\n    return defaults;\n  }\n\n  /*\n   * During drags, don't show CSS transitions.\n   */\n  get [symbols.dragging]() {\n    return !this.$.viewport.showTransition;\n  }\n  set [symbols.dragging](value) {\n    if (symbols.dragging in base.prototype) { super[symbols.dragging] = value; }\n    this.$.viewport.showTransition = !value;\n  }\n\n  get selectedFraction() {\n    return this.$.viewport.selectedFraction;\n  }\n  set selectedFraction(value) {\n    if ('selectedFraction' in base.prototype) { super.selectedFraction = value; }\n    this.$.viewport.selectedFraction = value;\n    const event = new CustomEvent('selected-fraction-changed');\n    this.dispatchEvent(event);\n  }\n\n  get selectedIndex() {\n    return super.selectedIndex;\n  }\n  set selectedIndex(value) {\n    if ('selectedIndex' in base.prototype) { super.selectedIndex = value; }\n    this.$.viewport.selectedIndex = value;\n  }\n\n  get selectedItem() {\n    return super.selectedItem;\n  }\n  set selectedItem(item) {\n    if ('selectedItem' in base.prototype) { super.selectedItem = item; }\n    this.$.viewport.selectedItem = item;\n  }\n\n  get [symbols.template]() {\n    return `\n      <style>\n      :host {\n        display: -webkit-flex;\n        display: flex;\n      }\n\n      basic-sliding-viewport {\n        display: -webkit-flex;\n        display: flex;\n        -webkit-flex: 1;\n        flex: 1;\n      }\n      </style>\n\n      <basic-sliding-viewport id=\"viewport\" role=\"none\">\n        <slot></slot>\n      </basic-sliding-viewport>\n    `;\n  }\n}\n\n\ncustomElements.define('basic-sliding-carousel', SlidingCarousel);\nexport default SlidingCarousel;\n","/*\n * This file is transpiled to create an ES5-compatible distribution in which\n * the package's main feature(s) are available via the window.Basic global.\n * If you're already using ES6 yourself, ignore this file, and instead import\n * the source file(s) you want from the src folder.\n */\n\nimport SlidingViewport from './src/SlidingViewport';\n\nwindow.Basic = window.Basic || {};\nwindow.Basic.SlidingViewport = SlidingViewport;\n","import createSymbol from '../../basic-component-mixins/src/createSymbol';\nimport ElementBase from '../../basic-element-base/src/ElementBase';\nimport FractionalSelectionMixin from '../../basic-component-mixins/src/FractionalSelectionMixin';\nimport SpreadItems from '../../basic-spread-items/src/SpreadItems'; // jshint ignore:line\nimport symbols from '../../basic-component-mixins/src/symbols';\n\n\n// Symbols for private data members on an element.\nconst selectedItemSymbol = createSymbol('selectedItem');\n\n\nconst base = ElementBase.compose(\n  FractionalSelectionMixin\n);\n\n\n/**\n * Presents list items in a viewport such that only a single item is visible at\n * a time.\n *\n * Navigating between items will be represented with a horizontal visual\n * sliding effect. For more complex visual effects, see\n * [basic-animation-stage](../basic-animation-stage), which takes advantage of\n * the Web Animations API.\n *\n * This component handles the rendering responsibilities for the basic-carousel\n * component.\n *\n * This component currently requires that you explicitly apply a size to it.\n *\n * @extends ElementBase\n * @mixes FractionalSelectionMixin\n */\nclass SlidingViewport extends base {\n\n  constructor() {\n    super();\n    this.selectedFraction = 0;\n    this.showTransition = true;\n  }\n\n  connectedCallback() {\n    if (super.connectedCallback) { super.connectedCallback(); }\n    this.render();\n  }\n\n  get content() {\n    return this.$.slidingContainer.content;\n  }\n\n  get items() {\n    return this.$.slidingContainer.items;\n  }\n\n  render() {\n    if (super.render) { super.render(); }\n    requestAnimationFrame(renderSelection.bind(this));\n  }\n\n  get selectedFraction() {\n    return super.selectedFraction;\n  }\n  set selectedFraction(value) {\n    if ('selectedFraction' in base.prototype) { super.selectedFraction = value; }\n    this.render();\n  }\n\n  get selectedIndex() {\n    const items = this.items;\n    const selectedItem = this.selectedItem;\n    return items && selectedItem ?\n      items.indexOf(selectedItem) :\n      -1;\n  }\n  set selectedIndex(index) {\n    if ('selectedIndex' in base.prototype) { super.selectedIndex = index; }\n    const item = this.items && this.items[index];\n    if (item) {\n      this.selectedItem = item;\n    }\n  }\n\n  get selectedItem() {\n    return this[selectedItemSymbol];\n  }\n  set selectedItem(item) {\n    if ('selectedItem' in base.prototype) { super.selectedItem = item; }\n    this[selectedItemSymbol] = item;\n    this.render();\n  }\n\n  get showTransition() {\n    return super.showTransition || this.classList.contains('showTransition');\n  }\n  set showTransition(value) {\n    if ('showTransition' in base.prototype) { super.showTransition = value; }\n    this.reflectClass('showTransition', value);\n  }\n\n  get [symbols.template]() {\n    return `\n      <style>\n      :host {\n        display: block;\n        overflow: hidden;\n        position: relative;\n      }\n\n      #slidingContainer {\n        height: 100%;\n        position: absolute;\n        /*\n         Set width for IE/Edge. It's not clear why they need this, and the other\n         browsers don't.\n         */\n        width: 100%;\n        will-change: transform;\n      }\n\n      :host(.showTransition) #slidingContainer {\n        -webkit-transition: -webkit-transform 0.2s ease-out;\n        transition: transform 0.2s ease-out;\n      }\n      </style>\n\n      <basic-spread-items id=\"slidingContainer\" role=\"none\">\n        <slot></slot>\n      </basic-spread-items>\n    `;\n  }\n\n}\n\n\n// Note: In this routine, \"this\" is bound to an element instance.\nfunction renderSelection() {\n  if (!this.selectedItem) {\n    return;\n  }\n  const selection = FractionalSelectionMixin.helpers.elementSelection(this);\n  const itemCount = this.items ? this.items.length : 0;\n  const damped = FractionalSelectionMixin.helpers.dampedSelection(selection, itemCount);\n  // Use a percentage so the transform will still work if screen size changes\n  // (e.g., if device orientation changes).\n  const left = -damped * 100;\n  const transform = 'translateX(' + left + '%)';\n  this.$.slidingContainer.style.webkitTransform = transform;\n  this.$.slidingContainer.style.transform = transform;\n}\n\n\ncustomElements.define('basic-sliding-viewport', SlidingViewport);\nexport default SlidingViewport;\n","/*\n * This file is transpiled to create an ES5-compatible distribution in which\n * the package's main feature(s) are available via the window.Basic global.\n * If you're already using ES6 yourself, ignore this file, and instead import\n * the source file(s) you want from the src folder.\n */\n\nimport SpreadItems from './src/SpreadItems';\n\nwindow.Basic = window.Basic || {};\nwindow.Basic.SpreadItems = SpreadItems;\n","import ElementBase from '../../basic-element-base/src/ElementBase';\nimport DistributedChildrenContentMixin from '../../basic-component-mixins/src/DistributedChildrenContentMixin';\nimport symbols from '../../basic-component-mixins/src/symbols';\n\n\n/**\n * Spreads out a set of items horizontally so they take equal space.\n *\n * [Live demo](http://basicwebcomponents.org/basic-web-components/packages/basic-spread-items/)\n *\n * This component is used, for example, by the basic-sliding-viewport component\n * to ensure that children of different size will take up the same amount of\n * horizontal space.\n *\n * This component currently requires an explicit size by applied to it.\n *\n * @extends ElementBase\n * @mixes DistributedChildrenContentMixin\n */\nclass SpreadItems extends ElementBase.compose(\n  DistributedChildrenContentMixin\n) {\n\n  connectedCallback() {\n    if (super.connectedCallback) { super.connectedCallback(); }\n    // HACK\n    this[symbols.itemsChanged]();\n  }\n\n  get items() {\n    return this.content;\n  }\n\n  // TODO: Should also handle contentChanged(), but need to rationalize with\n  // invocation of [symbols.itemsChanged] in connectedCallback.\n  [symbols.itemsChanged]() {\n    if (super[symbols.itemsChanged]) { super[symbols.itemsChanged](); }\n    const items = this.items;\n    const count = items.length;\n    this.$.spreadContainer.style.width = (count * 100) + '%';\n    const itemWidth = (100 / count) + \"%\";\n    [].forEach.call(items, item => {\n      item.style.width = itemWidth;\n    });\n  }\n\n  get [symbols.template]() {\n    return `\n      <style>\n      :host {\n        display: block;\n      }\n\n      #spreadContainer {\n        display: -webkit-flex;\n        display: flex;\n        height: 100%;\n        position: relative;\n      }\n\n      #spreadContainer ::slotted(*) {\n        object-fit: contain;\n        object-fit: var(--basic-item-object-fit, contain);\n        height: 100%;\n        -webkit-user-drag: none;\n        -webkit-user-select: none;\n        -moz-user-select: none;\n        -ms-user-select: none;\n        user-select: none;\n      }\n      </style>\n\n      <div id=\"spreadContainer\" role=\"none\">\n        <slot></slot>\n      </div>\n    `;\n  }\n\n}\n\n\ncustomElements.define('basic-spread-items', SpreadItems);\nexport default SpreadItems;\n","/*\n * This file is transpiled to create an ES5-compatible distribution in which\n * the package's main feature(s) are available via the window.Basic global.\n * If you're already using ES6 yourself, ignore this file, and instead import\n * the source file(s) you want from the src folder.\n */\n\nimport TabStrip from './src/TabStrip';\nimport TabStripMixin from './src/TabStripMixin';\n\nwindow.Basic = window.Basic || {};\nwindow.Basic.TabStrip = TabStrip;\nwindow.Basic.TabStripMixin = TabStripMixin;\n","// import ClickSelectionMixin from '../../basic-component-mixins/src/ClickSelectionMixin';\nimport ContentItemsMixin from '../../basic-component-mixins/src/ContentItemsMixin';\nimport createSymbol from '../../basic-component-mixins/src/createSymbol';\nimport DirectionSelectionMixin from '../../basic-component-mixins/src/DirectionSelectionMixin';\nimport DistributedChildrenContentMixin from '../../basic-component-mixins/src/DistributedChildrenContentMixin';\nimport ElementBase from '../../basic-element-base/src/ElementBase';\nimport GenericMixin from '../../basic-component-mixins/src/GenericMixin';\nimport KeyboardDirectionMixin from '../../basic-component-mixins/src/KeyboardDirectionMixin';\nimport KeyboardMixin from '../../basic-component-mixins/src/KeyboardMixin';\nimport renderArrayAsElements from '../../basic-component-mixins/src/renderArrayAsElements';\nimport SingleSelectionMixin from '../../basic-component-mixins/src/SingleSelectionMixin';\nimport symbols from '../../basic-component-mixins/src/symbols';\nimport toggleClass from '../../basic-component-mixins/src/toggleClass';\n\n\n// Symbols for private data members on an element.\nconst panelsSymbol = createSymbol('panels');\nconst spreadTabsSymbol = createSymbol('spreadTabs');\nconst tabPositionSymbol = createSymbol('tabPosition');\n\n\n/**\n * A set of pages with a tab strip governing which page is shown.\n *\n * This stock combination applies the [TabStripMixin](../basic-tab-strip/) to a\n * [basic-modes](../basic-modes/) element. If you'd like to create something\n * more complex than this arrangement, you can use either of those elements on\n * its own.\n *\n * Since this component uses `TabStripMixin`, it obtains the names of the\n * individual tabs from a child's `aria-label` property. Example:\n *\n *     <basic-tabs>\n *       <div aria-label=\"One\">Page one</div>\n *       <div aria-label=\"Two\">Page two</div>\n *       <div aria-label=\"Three\">Page three</div>\n *     </basic-tabs>\n *\n * @extends ElementBase\n * @mixes ClickSelectionMixin\n * @mixes ContentItemsMixin\n * @mixes DirectionSelectionMixin\n * @mixes DistributedChildrenContentMixin\n * @mixes GenericMixin\n * @mixes KeyboardMixin\n * @mixes KeyboardDirectionMixin\n * @mixes SingleSelectionMixin\n */\nclass TabStrip extends ElementBase.compose(\n  // ClickSelectionMixin,\n  DirectionSelectionMixin,\n  GenericMixin,\n  KeyboardMixin,\n  KeyboardDirectionMixin,\n  ContentItemsMixin,\n  DistributedChildrenContentMixin,\n  SingleSelectionMixin\n) {\n\n  constructor() {\n    super();\n\n    // Handle clicks/Enter on tab buttons.\n    // TODO: Rationalize with ClickSelection?\n    this.addEventListener('click', event => {\n      const tab = event.path[0];\n      const index = Array.prototype.indexOf.call(this.items, tab);\n      if (index >= 0 && this.selectedIndex !== index) {\n        this.selectedIndex = index;\n        // Note: We don't call preventDefault here. The default behavior for\n        // mousedown includes setting keyboard focus if the element doesn't\n        // already have the focus, and we want to preserve that behavior.\n        event.stopPropagation();\n      }\n    });\n\n    // Set defaults.\n    if (typeof this.tabPosition === 'undefined') {\n      this.tabPosition = this[symbols.defaults].tabPosition;\n    }\n  }\n\n  get [symbols.defaults]() {\n    const defaults = super[symbols.defaults] || {};\n    defaults.tabindex = null;\n    defaults.tabPosition = 'top';\n    return defaults;\n  }\n\n  get items() {\n    return this.$.tabs.children;\n  }\n\n  [symbols.itemSelected](item, selected) {\n    if (super[symbols.itemSelected]) { super[symbols.itemSelected](item, selected); }\n    applySelectionToTab(item, selected);\n  }\n\n  [symbols.keydown](event) {\n    const handled = super[symbols.keydown] && super[symbols.keydown](event);\n    if (handled && this.selectedItem) {\n      // If the event resulted in a change of selection, move the focus to the\n      // newly-selected tab.\n      this.selectedItem.focus();\n    }\n    return handled;\n  }\n\n  get panels() {\n    return this[panelsSymbol];\n  }\n  set panels(panels) {\n    this[panelsSymbol] = panels;\n\n    // Create one tab for each panel.\n    const selectedIndex = this.selectedIndex;\n    const selectedPanel = panels[selectedIndex];\n    renderArrayAsElements(panels, this.$.tabs, (panel, tab) => {\n      if (!tab) {\n        tab = document.createElement('button');\n        tab.classList.add('tab');\n        tab.classList.add('style-scope');\n        tab.classList.add('basic-tab-strip');\n        tab.setAttribute('role', 'tab');\n        tab.setAttribute('tabindex', 0);\n      }\n      tab.id = panel.id + '_tab';\n      tab.textContent = panel.getAttribute('aria-label');\n\n      // Point tab and panel at each other.\n      tab.setAttribute('aria-controls', panel.id);\n      panel.setAttribute('aria-labelledby', tab.id);\n\n      applySelectionToTab(tab, panel === selectedPanel);\n\n      return tab;\n    });\n\n    this[symbols.itemsChanged]();\n  }\n\n  get spreadTabs() {\n    return this[spreadTabsSymbol];\n  }\n  set spreadTabs(value) {\n    this[spreadTabsSymbol] = value;\n    toggleClass(this, 'spread', value);\n  }\n\n  /**\n   * The position of the tab strip relative to the element's children. Valid\n   * values are \"top\", \"left\", \"right\", and \"bottom\".\n   *\n   * @default \"top\"\n   * @type {string}\n   */\n  get tabPosition() {\n    return this[tabPositionSymbol];\n  }\n  set tabPosition(position) {\n    this[tabPositionSymbol] = position;\n    this.reflectAttribute('tab-position', position);\n    this.navigationAxis = (position === 'top' || position === 'bottom') ?\n      'horizontal' :\n      'vertical';\n  }\n\n  get [symbols.template]() {\n    return `\n      <style>\n        :host {\n          display: -webkit-flex;\n          display: flex;\n        }\n\n        /*\n         * Avoid having tab container stretch across. User won't be able to see\n         * it, but since it handles the keyboard, in Mobile Safari a tap on the\n         * container background will cause the region to flash. Aligning the\n         * region collapses it down to hold its contents.\n         */\n        #tabs {\n          /* For IE bug (clicking tab produces gap between tab and page). */\n          display: -webkit-flex;\n          display: flex;\n          -webkit-flex-direction: row;\n          flex-direction: row;\n          -webkit-flex: 1;\n          flex: 1;\n          /*\n           * Try to obtain fast-tap behavior on all tabs.\n           * See https://webkit.org/blog/5610/more-responsive-tapping-on-ios/.\n           */\n          touch-action: manipulation;\n        }\n        :host(:not(.spread)) #tabs {\n          -webkit-align-self: flex-start;\n          align-self: flex-start;\n        }\n\n        .tab {\n          cursor: pointer;\n          display: inline-block;\n          font-family: inherit;\n          font-size: inherit;\n          position: relative;\n        }\n\n        :host([generic=\"\"]) .tab {\n          background: white;\n          border: 1px solid #ccc;\n          margin: 0;\n          padding: 0.5em 0.75em;\n          transition: border-color 0.25s;\n        }\n\n        :host([generic=\"\"]) .tab.selected {\n          border-color: #ccc;\n          opacity: 1;\n        }\n\n        :host([generic=\"\"]) .tab:hover {\n          background-color: #eee;\n        }\n\n        /* Left/right positions */\n        :host([tab-position=\"left\"]) #tabs,\n        :host([tab-position=\"right\"]) #tabs {\n          -webkit-flex-direction: column;\n          flex-direction: column;\n        }\n\n        /* Spread variant */\n        :host(.spread) #tabs {\n          -webkit-align-items: stretch;\n          align-items: stretch;\n        }\n        :host(.spread) .tab {\n          -webkit-flex: 1;\n          flex: 1;\n        }\n\n        /* Generic style, top/bottom positions */\n        :host([generic=\"\"][tab-position=\"top\"]) .tab:not(:last-child),\n        :host([generic=\"\"][tab-position=\"bottom\"]) .tab:not(:last-child) {\n          margin-right: 0.2em;\n        }\n\n        /* Generic style, top position */\n        :host([generic=\"\"][tab-position=\"top\"]) .tab {\n          border-radius: 0.25em 0.25em 0 0;\n          margin-bottom: -1px;\n        }\n        :host([generic=\"\"][tab-position=\"top\"]) .tab.selected {\n          border-bottom-color: transparent;\n        }\n\n        /* Generic style, bottom position */\n        :host([generic=\"\"][tab-position=\"bottom\"]) .tab {\n          border-radius: 0 0 0.25em 0.25em;\n          margin-top: -1px;\n        }\n        :host([generic=\"\"][tab-position=\"bottom\"]) .tab.selected {\n          border-top-color: transparent;\n        }\n\n        /* Generic style, left/right positions */\n        :host([generic=\"\"][tab-position=\"left\"]) .tab:not(:last-child),\n        :host([generic=\"\"][tab-position=\"right\"]) .tab:not(:last-child) {\n          margin-bottom: 0.2em;\n        }\n\n        /* Generic style, left position */\n        :host([generic=\"\"][tab-position=\"left\"]) .tab {\n          border-radius: 0.25em 0 0 0.25em;\n          margin-right: -1px;\n        }\n        :host([generic=\"\"][tab-position=\"left\"]) .tab.selected {\n          border-right-color: transparent;\n        }\n\n        /* Generic style, right position */\n        :host([generic=\"\"][tab-position=\"right\"]) .tab {\n          border-radius: 0 0.25em 0.25em 0;\n          margin-left: -1px;\n        }\n        :host([generic=\"\"][tab-position=\"right\"]) .tab.selected {\n          border-left-color: transparent;\n        }\n      </style>\n      <div id=\"tabs\" role=\"tablist\"></div>\n    `;\n  }\n}\n\n\nfunction applySelectionToTab(tab, selected) {\n  tab.setAttribute('aria-selected', selected);\n}\n\n\ncustomElements.define('basic-tab-strip', TabStrip);\nexport default TabStrip;\n","import TabStrip from './TabStrip'; // jshint ignore:line\nimport symbols from '../../basic-component-mixins/src/symbols';\n\n\n// Used to assign unique IDs to tabs for ARIA purposes.\nlet idCount = 0;\n\n\n/* Exported function extends a base class with TabStrip. */\nexport default (base) => {\n\n  /**\n   * A template mixin which adds strip of tabs for selecting one of the\n   * component's children.\n   *\n   * The component creates a tab to represent each of its light DOM children.\n   * The tab name is obtained by examining the children for an `aria-label`\n   * property.\n   *\n   * Use tabs when you want to provide a large set of options or elements than\n   * can comfortably fit inline, the options can be coherently grouped into pages,\n   * and you want to avoid making the user navigate to a separate page. Tabs work\n   * best if you only have a small handful of pages, say 2–7.\n   *\n   * The basic-tab-strip component does not define how a selected child is\n   * represented. If you're looking for the standard behavior of just showing only\n   * the selected child, you can use this component in combination with the\n   * separate [basic-modes](../basic-modes/) component. A typical arrangement:\n   *\n   *     <basic-tab-strip>\n   *       <basic-modes aria-label=\"Panels\">\n   *         <div aria-label=\"One\">Page one</div>\n   *         <div aria-label=\"Two\">Page two</div>\n   *         <div aria-label=\"Three\">Page three</div>\n   *       </basic-modes>\n   *     </basic-tab-strip>\n   *\n   * The above combination is so common it is provided as a single component,\n   * [basic-tabs](../basic-tabs/).\n   *\n   * The user can select a tab with the mouse or touch, as well as by through the\n   * keyboard. Each tab appears as a separate button in the tab order.\n   * Additionally, if the focus is currently on a tab, the user can quickly\n   * navigate between tabs with the left/right arrow keys (or, if the tabs are\n   * in vertical position, the up/down arrow keys).\n   *\n   * By default, the tabs are shown grouped to the left, where each tab is only\n   * as big as necessary. You can apply the `spread` CSS class to a\n   * basic-tab-strip element for a variant appearance in which the available width\n   * of the element is divided up equally among tabs.\n   *\n   * The GenericMixin default styling of the tab strip will present the classic\n   * skeumorphic look of rounded tabs attached to a surface. You can remove this\n   * styling by setting the `GenericMixin` property/attribute to false.\n   */\n  class TabStrip extends base {\n\n    constructor() {\n      super();\n      this.$.tabStrip.addEventListener('selected-item-changed', event => {\n        const selectedIndex = event.target.selectedIndex;\n        if (this.selectedIndex !== selectedIndex) {\n          this.selectedIndex = selectedIndex;\n        }\n      });\n    }\n\n    get [symbols.defaults]() {\n      const defaults = super[symbols.defaults] || {};\n      defaults.tabPosition = 'top';\n      return defaults;\n    }\n\n    get generic() {\n      return super.generic;\n    }\n    set generic(value) {\n      if ('generic' in base.prototype) { super.generic = value; }\n      this.$.tabStrip.generic = value;\n    }\n\n    [symbols.itemsChanged]() {\n      if (super[symbols.itemsChanged]) { super[symbols.itemsChanged](); }\n\n      const baseId = this.id ?\n        \"_\" + this.id + \"Panel\" :\n        \"_panel\";\n\n      // Confirm that items have at least a default role and ID for ARIA purposes.\n      this.items.forEach(item => {\n        // if (!item.getAttribute('role')) {\n          item.setAttribute('role', 'tabpanel');\n        // }\n        if (!item.id) {\n          item.id = baseId + idCount++;\n        }\n      });\n\n      // Point the tab strip at the panels.\n      this.$.tabStrip.panels = this.items;\n      this.$.tabStrip.selectedIndex = this.selectedIndex;\n    }\n\n    get selectedIndex() {\n      return super.selectedIndex;\n    }\n    set selectedIndex(value) {\n      if ('selectedIndex' in base.prototype) { super.selectedIndex = value; }\n      if (this.$.tabStrip.selectedIndex !== value) {\n        this.$.tabStrip.selectedIndex = value;\n      }\n    }\n\n    get spreadTabs() {\n      return this.$.tabStrip.spreadTabs;\n    }\n    set spreadTabs(value) {\n      this.$.tabStrip.spreadTabs = value;\n    }\n\n    get tabPosition() {\n      return this.$.tabStrip.tabPosition;\n    }\n    set tabPosition(position) {\n      this.$.tabStrip.tabPosition = position;\n      this.reflectAttribute('tab-position', position);\n\n      // Physically reorder the tabs and pages to reflect the desired arrangement.\n      // We could change the visual appearance by reversing the order of the flex\n      // box, but then the visual order wouldn't reflect the document order, which\n      // determines focus order. That would surprise a user trying to tab through\n      // the controls.\n      const firstElement = (position === 'top' || position === 'left') ?\n        this.$.tabStrip :\n        this.$.pages;\n      const lastElement = (position === 'top' || position === 'left') ?\n        this.$.pages :\n        this.$.tabStrip;\n      if (firstElement.nextSibling !== lastElement) {\n        this.shadowRoot.insertBefore(firstElement, lastElement);\n      }\n\n    }\n\n    get [symbols.template]() {\n      const baseTemplate = super[symbols.template] || '';\n      return `\n        <style>\n        :host {\n          display: -webkit-flex;\n          display: flex;\n          -webkit-flex-direction: column;\n          flex-direction: column;\n          position: relative;\n        }\n\n        #pages {\n          display: -webkit-flex;\n          display: flex;\n          -webkit-flex: 1;\n          flex: 1;\n          -webkit-flex-direction: column;\n          flex-direction: column;\n        }\n\n        #pages ::slotted(*) {\n          display: -webkit-flex;\n          display: flex;\n          -webkit-flex: 1;\n          flex: 1;\n        }\n\n        /* Left/right positions */\n        :host([tab-position=\"left\"]),\n        :host([tab-position=\"right\"]) {\n          -webkit-flex-direction: row;\n          flex-direction: row;\n        }\n\n        /* Generic style */\n        :host([generic=\"\"]) #pages {\n          background: white;\n          border: 1px solid #ccc;\n          box-sizing: border-box;\n        }\n        </style>\n\n        <basic-tab-strip id=\"tabStrip\" role=\"tablist\"></basic-tab-strip>\n        <div id=\"pages\">\n          ${baseTemplate}\n        </div>\n      `;\n    }\n\n  }\n\n  return TabStrip;\n};\n","/*\n * This file is transpiled to create an ES5-compatible distribution in which\n * the package's main feature(s) are available via the window.Basic global.\n * If you're already using ES6 yourself, ignore this file, and instead import\n * the source file(s) you want from the src folder.\n */\n\nimport Tabs from './src/Tabs';\n\nwindow.Basic = window.Basic || {};\nwindow.Basic.Tabs = Tabs;\n","import GenericMixin from '../../basic-component-mixins/src/GenericMixin';\nimport Modes from '../../basic-modes/src/Modes';\nimport TabStripMixin from '../../basic-tab-strip/src/TabStripMixin';\n\n\nconst base = Modes.compose(\n  GenericMixin,\n  TabStripMixin\n);\n\n\n/**\n * A set of pages with a tab strip governing which page is shown.\n *\n * This stock combination applies the [TabStripMixin](../basic-tab-strip/) to a\n * [basic-modes](../basic-modes/) element. If you'd like to create something\n * more complex than this arrangement, you can use either of those elements on\n * its own.\n *\n * Since this component uses `TabStripMixin`, it obtains the names of the\n * individual tabs from a child's `aria-label` property. Example:\n *\n *     <basic-tabs>\n *       <div aria-label=\"One\">Page one</div>\n *       <div aria-label=\"Two\">Page two</div>\n *       <div aria-label=\"Three\">Page three</div>\n *     </basic-tabs>\n *\n * @extends Modes\n * @mixes GenericMixin\n */\nclass Tabs extends base {}\n\ncustomElements.define('basic-tabs', Tabs);\nexport default Tabs;\n","/*\n * This file is transpiled to create an ES5-compatible distribution of all\n * components in the project. If you're already using ES6 yourself, ignore this\n * file, and instead import the source file(s) you want from the specific\n * package you want.\n */\n\n// Import all the globals from each package.\n// We tell jshint to ignore the fact that we're not actually using them here.\n/* jshint ignore:start */\n\nimport * as animationStage from '../basic-animation-stage/globals';\nimport * as autosizeTextarea from '../basic-autosize-textarea/globals';\nimport * as carousel from '../basic-carousel/globals';\nimport * as collapsiblePanel from '../basic-collapsible-panel/globals';\nimport * as componentMixins from '../basic-component-mixins/globals';\nimport * as currentAnchor from '../basic-current-anchor/globals';\nimport * as elementBase from '../basic-element-base/globals';\nimport * as fadeOverflow from '../basic-fade-overflow/globals';\nimport * as listBox from '../basic-list-box/globals';\nimport * as modes from '../basic-modes/globals';\nimport * as slideshow from '../basic-slideshow/globals';\nimport * as slideshowWithControls from '../basic-slideshow-with-controls/globals';\nimport * as slidingCarousel from '../basic-sliding-carousel/globals';\nimport * as slidingViewport from '../basic-sliding-viewport/globals';\nimport * as spreadItems from '../basic-spread-items/globals';\nimport * as tabs from '../basic-tabs/globals';\nimport * as tabStrip from '../basic-tab-strip/globals';\nimport * as webComponents from '../basic-web-components/globals';\nimport * as wrappedStandardElement from '../basic-wrapped-standard-element/globals';\n\n/* jshint ignore:end */\n","/*\n * This file is transpiled to create an ES5-compatible distribution in which\n * the package's main feature(s) are available via the window.Basic global.\n * If you're already using ES6 yourself, ignore this file, and instead import\n * the source file(s) you want from the src folder.\n */\n\nimport WrappedStandardElement from './src/WrappedStandardElement';\n\nwindow.Basic = window.Basic || {};\nwindow.Basic.WrappedStandardElement = WrappedStandardElement;\n","import ElementBase from '../../basic-element-base/src/ElementBase';\nimport symbols from '../../basic-component-mixins/src/symbols';\n\n\n/*\n * A set of events which, if fired by the inner standard element, should be\n * re-raised by the custom element. (We only need to do that under native\n * Shadow DOM, not the polyfill.)\n *\n * These are events which are spec'ed to NOT get retargetted across a Shadow DOM\n * boundary, organized by which element(s) raise the events. To properly\n * simulate these, we will need to listen for the real events, then re-raise a\n * simulation of the original event. For more information, see\n * https://www.w3.org/TR/shadow-dom/#h-events-that-are-not-leaked-into-ancestor-trees.\n *\n * It appears that we do *not* need to re-raise the non-bubbling \"focus\" and\n * \"blur\" events. These appear to be automatically re-raised as expected -- but\n * it's not clear why that happens.\n *\n * The list below is reasonably complete. It omits elements that cannot be\n * wrapped (see class notes above). Also, we haven't actually tried wrapping\n * every element in this list; some of the more obscure ones might not actually\n * work as expected, but it was easier to include them for completeness than\n * to actually verify whether or not the element can be wrapped.\n */\nconst reraiseEvents = {\n  address: ['scroll'],\n  blockquote: ['scroll'],\n  caption: ['scroll'],\n  center: ['scroll'],\n  dd: ['scroll'],\n  dir: ['scroll'],\n  div: ['scroll'],\n  dl: ['scroll'],\n  dt: ['scroll'],\n  fieldset: ['scroll'],\n  form: ['reset', 'scroll'],\n  frame: ['load'],\n  h1: ['scroll'],\n  h2: ['scroll'],\n  h3: ['scroll'],\n  h4: ['scroll'],\n  h5: ['scroll'],\n  h6: ['scroll'],\n  iframe: ['load'],\n  img: ['abort', 'error', 'load'],\n  input: ['abort', 'change', 'error', 'select', 'load'],\n  keygen: ['reset', 'select'],\n  li: ['scroll'],\n  link: ['load'],\n  menu: ['scroll'],\n  object: ['error', 'scroll'],\n  ol: ['scroll'],\n  p: ['scroll'],\n  script: ['error', 'load'],\n  select: ['change', 'scroll'],\n  tbody: ['scroll'],\n  tfoot: ['scroll'],\n  thead: ['scroll'],\n  textarea: ['change', 'select', 'scroll']\n};\n\n\n// Keep track of which re-raised events should bubble.\nconst eventBubbles = {\n  abort: true,\n  change: true,\n  reset: true\n};\n\n\n// Elements which are display: block by default.\n// Source: https://developer.mozilla.org/en-US/docs/Web/HTML/Block-level_elements\nconst blockElements = [\n  'address',\n  'article',\n  'aside',\n  'blockquote',\n  'canvas',\n  'dd',\n  'div',\n  'dl',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'header',\n  'hgroup',\n  'hr',\n  'li',\n  'main',\n  'nav',\n  'noscript',\n  'ol',\n  'output',\n  'p',\n  'pre',\n  'section',\n  'table',\n  'tfoot',\n  'ul',\n  'video'\n];\n\n\n/**\n * Wraps a standard HTML element so that the standard behavior can then be\n * extended.\n *\n * [Live demo](http://basicwebcomponents.org/basic-web-components/packages/basic-wrapped-standard-element/)\n *\n * See also [basic-autosize-textarea](../basic-autosize-textarea) and\n * [basic-current-anchor](../basic-current-anchor). The former uses\n * WrappedStandardElement to wrap a standard `<textarea>` and `<a>`,\n * respectively.\n *\n * The Custom Elements spec does not currently (as of March 2016) allow you to\n * extend the behavior of a standard HTML element like `<a>` or `<button>`.\n * As a partial workaround, the WrappedStandardElement class can create a class\n * for you that wraps an instance of a standard HTML element. For example, the\n * code below creates a class that will wrap an instance of a standard `<a>`\n * element:\n *\n *     class WrappedA extends WrappedStandardElement.wrap('a') {\n *       customMethod() { ... }\n *     }\n *     customElements.define('wrapped-a', WrappedA);\n *\n * An instance of the resulting class will look to the user like an instance of\n * the standard element class it wraps. The resulting class will *not* be an\n * `instanceof` the standard class (here, HTMLAnchorElement). Another limitation\n * is that the resulting `<wrapped-a>` will not automatically pick up CSS styles\n * for standard `<a>` elements. However, the resulting class *can* be extended.\n * E.g., instances of the above class have a `customMethod()` available to them.\n *\n * Any properties defined by the original standard element will be exposed on\n * the resulting wrapper class, and calls to get or set those properties will be\n * delegated to the wrapped element instance. Continuing the above example:\n *\n *     let wrapped = document.createElement('wrapped-a');\n *     wrapped.href = 'http://example.com/';\n *     wrapped.textContent = 'Click here';\n *\n * Here, the created custom `<wrapped-a>` element will contain inside its\n * shadow tree an instance of a standard `<a>` element. The call to set the\n * wrapper's `href` property will ultimately set the `href` on the inner link.\n * Moreover, the text content of the `<wrapped-a>` element will appear inside\n * the inner link. The result of all this is that the user will see what *looks*\n * like a normal link, just as if you had written\n * `<a href=\"http://example.com/\">Click here</a>`. However, the actual element\n * will be an instance of your custom class, with whatever behavior you've\n * defined for it.\n *\n * Wrapped elements should raise the same events as the original standard\n * elements. E.g., if you wrap an `<img>` element, the wrapped result will raise\n * the standard `load` event as expected.\n *\n * Some elements, such as `<body>`, `<html>`, and `<style>` cannot be wrapped\n * and still achieve their standard behavior.\n *\n * @extends ElementBase\n */\nclass WrappedStandardElement extends ElementBase {\n\n  constructor() {\n    super();\n\n    // Listen for any events raised by the inner element which will not\n    // automatically be retargetted across the Shadow DOM boundary, and re-raise\n    // those events when they happen.\n    //\n    // Note: It's unclear why we need to do this in the Shadow DOM polyfill.\n    // In theory, events in the light DOM should bubble as normal. But this\n    // code appears to be required in the polyfill case as well.\n    const eventNames = reraiseEvents[this.extends] || [];\n    eventNames.forEach(eventName => {\n      this.inner.addEventListener(eventName, realEvent => {\n        const event = new Event(eventName, {\n          bubbles: eventBubbles[eventName] || false\n        });\n        this.dispatchEvent(event);\n      });\n    });\n  }\n\n  /**\n   * A description for the user of the element's purpose on the page. Setting\n   * this applies the label to the inner element, ensuring that screen readers\n   * and other assistive technologies will provide a meaningful description to\n   * the user.\n   *\n   * @type {string}\n   */\n  get ariaLabel() {\n    return this.inner.getAttribute('aria-label');\n  }\n  set ariaLabel(label) {\n    // Propagate the ARIA label to the inner textarea.\n    this.inner.setAttribute('aria-label', label);\n  }\n\n  /**\n   * Returns a reference to the inner standard HTML element.\n   *\n   * @type {HTMLElement}\n   */\n  get inner() {\n    return this.$.inner;\n  }\n\n  /**\n   * The template copied into the shadow tree of new instances of this element.\n   *\n   * The default value of this property is a template that includes an instance\n   * the standard element being wrapped, with a `<slot>` element inside that\n   * to pick up the element's light DOM content. For example, if you wrap an\n   * `<a>` element, then the default template will look like:\n   *\n   *     <template>\n   *       <style>\n   *       :host {\n   *         display: inline-block;\n   *       }\n   *       </style>\n   *       <a id=\"inner\">\n   *         <slot></slot>\n   *       </a>\n   *     </template>\n   *\n   * The `display` styling applied to the host will be `block` for elements that\n   * are block elements by default, and `inline-block` (not `inline`) for other\n   * elements.\n   *\n   * If you'd like the template to include other elements, then override this\n   * property and return a template of your own. The template should include an\n   * instance of the standard HTML element you are wrapping, and the ID of that\n   * element should be \"inner\".\n   *\n   * @type {(string|HTMLTemplateElement)}\n   */\n  get [symbols.template]() {\n    const display = blockElements.indexOf(this.extends) >= 0 ?\n      'block' :\n      'inline-block';\n    return `<style>:host { display: ${display}}</style><${this.extends} id=\"inner\"><slot></slot></${this.extends}`;\n  }\n\n  /**\n   * Creates a class that wraps a standard HTML element.\n   *\n   * Note that the resulting class is a subclass of WrappedStandardElement, not\n   * the standard class being wrapped. E.g., if you call\n   * `WrappedStandardElement.wrap('a')`, you will get a class whose shadow tree\n   * will include an anchor element, but the class will *not* inherit from\n   * HTMLAnchorElement.\n   *\n   * @param {string} extendsTag - the standard HTML element tag to extend\n   */\n  static wrap(extendsTag) {\n\n    // Create the new class.\n    class Wrapped extends WrappedStandardElement {}\n\n    // Indicate which tag it wraps.\n    Wrapped.prototype.extends = extendsTag;\n\n    // Create getter/setters that delegate to the wrapped element.\n    const element = document.createElement(extendsTag);\n    const extendsPrototype = element.constructor.prototype;\n    const names = Object.getOwnPropertyNames(extendsPrototype);\n    names.forEach(name => {\n        const descriptor = Object.getOwnPropertyDescriptor(extendsPrototype, name);\n        const delegate = createPropertyDelegate(name, descriptor);\n        Object.defineProperty(Wrapped.prototype, name, delegate);\n    });\n\n    return Wrapped;\n  }\n\n}\n\n\nfunction createPropertyDelegate(name, descriptor) {\n  const delegate = {\n    configurable: descriptor.configurable,\n    enumerable: descriptor.enumerable,\n  };\n  if (descriptor.get) {\n    delegate.get = function() {\n      return this.inner[name];\n    };\n  }\n  if (descriptor.set) {\n    delegate.set = function(value) {\n      this.inner[name] = value;\n    };\n  }\n  if (descriptor.writable) {\n    delegate.writable = descriptor.writable;\n  }\n  return delegate;\n}\n\n\nexport default WrappedStandardElement;\n"]}