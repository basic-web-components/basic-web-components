{"version":3,"sources":["node_modules/browser-pack/_prelude.js","packages/basic-collapsible-panel/globals.js","packages/basic-collapsible-panel/src/CollapsiblePanel.js","packages/basic-component-mixins/src/AttributeMarshallingMixin.js","packages/basic-component-mixins/src/ComposableMixin.js","packages/basic-component-mixins/src/DistributedChildrenMixin.js","packages/basic-component-mixins/src/OpenCloseMixin.js","packages/basic-component-mixins/src/ShadowElementReferencesMixin.js","packages/basic-component-mixins/src/ShadowTemplateMixin.js","packages/basic-component-mixins/src/createSymbol.js","packages/basic-component-mixins/src/safeAttributes.js","packages/basic-component-mixins/src/symbols.js","packages/basic-component-mixins/src/toggleClass.js","packages/basic-element-base/src/ElementBase.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","_CollapsiblePanel","window","Basic","CollapsiblePanel","_CollapsiblePanel2","default","_ElementBase","_OpenCloseMixin2","_symbols","_classCallCheck","this","_this","_possibleConstructorReturn","__proto__","Object","getPrototypeOf","$","overflow","addEventListener","closed","style","height","classList","remove","closing","_get","prototype","naturalHeight","container","getBoundingClientRect","oldHeight","offsetHeight","add","newHeight","_symbols2","template","_OpenCloseMixin3","_ElementBase2","customElements","define","attributeToPropertyName","attributeName","propertyName","attributeToPropertyNames","hypenRegEx","replace","match","toUpperCase","attributesForClass","classFn","HTMLElement","baseClass","constructor","baseAttributes","propertyNames","getOwnPropertyNames","setterNames","filter","getOwnPropertyDescriptor","set","attributes","map","setterName","propertyNameToAttribute","diff","attribute","indexOf","concat","propertyNamesToAttributes","uppercaseRegEx","toLowerCase","_safeAttributes","base","AttributeMarshalling","_base","apply","arguments","_inherits","_createClass","key","value","oldValue","newValue","_safeAttributes2","connected","setAttribute","className","toggleClass","get","composeClass","mixin","Subclass","_base2","copyOwnProperties","NON_MIXABLE_OBJECT_PROPERTIES","source","target","ignorePropertyNames","undefined","forEach","name","descriptor","defineProperty","Composable","_len","mixins","Array","_key","reduce","expandContentElements","nodes","includeTextNodes","_ref","expanded","node","isSlot","HTMLSlotElement","localName","assignedNodes","flatten","Text","flattened","_toConsumableArray","DistributedChildren","children","childNodes","strings","distributedChildNodes","child","textContent","join","_createSymbol","closedSymbol","_createSymbol2","OpenClose","defaults","render","previousClosed","_set","handlingUserInteraction","event","CustomEvent","dispatchEvent","ShadowElementReferences","shadowRoot","nodesWithIds","querySelectorAll","id","getAttribute","createTemplateWithInnerHTML","innerHTML","document","createElement","div","content","appendChild","shimTemplateStyles","tag","WebComponents","ShadowCSS","shimStyling","ShadowTemplate","ShadowDOMPolyfill","root","attachShadow","mode","clone","importNode","createSymbol","description","Symbol","setAttributeToElement","element","removeAttribute","text","String","_toggleClass2","safeToSetAttributesSymbol","pendingAttributesSymbol","pendingClassesSymbol","_value","_toggleClass3","symbols","dragging","goDown","goEnd","goLeft","goRight","goStart","goUp","itemAdded","itemsChanged","itemSelected","keydown","force","addClass","contains","_AttributeMarshallingMixin","_ComposableMixin","_DistributedChildrenMixin","_ShadowElementReferencesMixin","_ShadowTemplateMixin","ElementBase","_ComposableMixin2","compose","_ShadowTemplateMixin2","_ShadowElementReferencesMixin2","_AttributeMarshallingMixin2","_DistributedChildrenMixin2"],"mappings":"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","file":"basic-collapsible-panel.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/*\n * This file is transpiled to create an ES5-compatible distribution in which\n * the package's main feature(s) are available via the window.Basic global.\n * If you're already using ES6 yourself, ignore this file, and instead import\n * the source file(s) you want from the src folder.\n */\n\nimport CollapsiblePanel from './src/CollapsiblePanel';\n\nwindow.Basic = window.Basic || {};\nwindow.Basic.CollapsiblePanel = CollapsiblePanel;\n","import ElementBase from '../../basic-element-base/src/ElementBase';\nimport OpenCloseMixin from '../../basic-component-mixins/src/OpenCloseMixin';\nimport symbols from '../../basic-component-mixins/src/symbols';\n\n\n/**\n * A panel which can be expanded/collapsed with an animated transition.\n *\n * [Live demo](http://basicwebcomponents.org/basic-web-components/packages/basic-collapsible-panel/)\n *\n * This component combines the OpenCloseMixin mixin and a simple CSS height\n * animation.\n *\n * This component handles only the duties of collapsing and expanding. It does\n * not provide a user interface for the user to trigger the change in state;\n * you must provide that user interface yourself.\n *\n * @extends ElementBase\n * @mixes OpenCloseMixin\n */\nclass CollapsiblePanel extends OpenCloseMixin(ElementBase) {\n\n  constructor() {\n    super();\n    this.$.overflow.addEventListener('transitionend', () => {\n      if (!this.closed) {\n        // Remove the hard-coded height we applied for the transition so that\n        // the element will reflow correctly, e.g., on window resize.\n        this.$.overflow.style.height = '';\n      }\n      // Ensure the animation only plays once. For some reason, Safari will show\n      // the animation twice without this line, even though the render function\n      // explicitly removes this class when it sets the old height. Neither\n      // Chrome nor Firefox seem to need this line.\n      this.classList.remove('showTransition');\n    });\n  }\n\n  render(closing) {\n    super.render(closing);\n\n    const naturalHeight = this.$.container.getBoundingClientRect().height;\n    if (naturalHeight === 0) {\n      // Most likely haven't had a chance to render yet.\n      this.$.overflow.style.height = closing ? 0 : '';\n      return;\n    }\n\n    // Without animating, set starting height of transition.\n    this.classList.remove('showTransition');\n    const oldHeight = closing ? naturalHeight : 0;\n    this.$.overflow.style.height = oldHeight + 'px';\n\n    // Force a relayout so that the starting height is applied.\n    // This can be achieved by reading a property like offsetHeight.\n    this.$.overflow.offsetHeight; // jshint ignore:line\n\n    // Turn animation on, and ending height of transition.\n    this.classList.add('showTransition');\n    const newHeight = closing ? 0 : naturalHeight;\n    this.$.overflow.style.height = newHeight + 'px';\n  }\n\n  get [symbols.template]() {\n    return `\n      <style>\n      :host {\n        display: block;\n        overflow: hidden;\n      }\n\n      :host(.showTransition) #overflow {\n        transition: height 0.2s;\n      }\n      </style>\n\n      <div id=\"overflow\" role=\"none\">\n        <div id=\"container\" role=\"none\">\n          <slot></slot>\n        </div>\n      </div>\n    `;\n  }\n\n}\n\n\ncustomElements.define('basic-collapsible-panel', CollapsiblePanel);\nexport default CollapsiblePanel;\n","import safeAttributes from './safeAttributes';\n\n\n// Memoized maps of attribute to property names and vice versa.\nconst attributeToPropertyNames = {};\nconst propertyNamesToAttributes = {};\n\n\n/* Exported function extends a base class with AttributeMarshalling. */\nexport default (base) => {\n\n  /**\n   * Mixin which marshalls attributes to properties and vice versa.\n   *\n   * If your component exposes a setter for a property, it's generally a good\n   * idea to let devs using your component be able to set that property in HTML\n   * via an element attribute. You can code that yourself by writing an\n   * `attributeChangedCallback`, or you can use this mixin to get a degree of\n   * automatic support.\n   *\n   * This mixin implements an `attributeChangedCallback` that will attempt to\n   * convert a change in an element attribute into a call to the corresponding\n   * property setter. Attributes typically follow hyphenated names (\"foo-bar\"),\n   * whereas properties typically use camelCase names (\"fooBar\"). This mixin\n   * respects that convention, automatically mapping the hyphenated attribute\n   * name to the corresponding camelCase property name.\n   *\n   * Example: You define a component using this mixin:\n   *\n   *     class MyElement extends AttributeMarshallingMixin(HTMLElement) {\n   *       get fooBar() { return this._fooBar; }\n   *       set fooBar(value) { this._fooBar = value; }\n   *     }\n   *     customElements.define('my-element', MyElement);\n   *\n   * If someone then instantiates your component in HTML:\n   *\n   *     <my-element foo-bar=\"Hello\"></my-element>\n   *\n   * Then, after the element has been upgraded, the `fooBar` setter will\n   * automatically be invoked with the initial value \"Hello\".\n   *\n   * For the time being, this mixin only supports string-valued properties.\n   * If you'd like to convert string attributes to other types (numbers,\n   * booleans), you need to implement `attributeChangedCallback` yourself.\n   */\n  class AttributeMarshalling extends base {\n\n    /*\n     * Handle a change to the attribute with the given name.\n     */\n    attributeChangedCallback(attributeName, oldValue, newValue) {\n      if (super.attributeChangedCallback) { super.attributeChangedCallback(); }\n      const propertyName = attributeToPropertyName(attributeName);\n      // If the attribute name corresponds to a property name, set the property.\n      // Ignore standard HTMLElement properties handled by the DOM.\n      if (propertyName in this && !(propertyName in HTMLElement.prototype)) {\n        this[propertyName] = newValue;\n      }\n    }\n\n    connectedCallback() {\n      if (super.connectedCallback) { super.connectedCallback(); }\n      safeAttributes.connected(this);\n    }\n\n    static get observedAttributes() {\n      return attributesForClass(this);\n    }\n\n    /**\n     * Set/unset the attribute with the indicated name.\n     *\n     * This method exists primarily to handle the case where an element wants to\n     * set a default property value that should be reflected as an attribute. An\n     * important limitation of custom element consturctors is that they cannot\n     * set attributes. A call to `reflectAttribute` during the constructor will\n     * be deferred until the element is connected to the document.\n     *\n     * @param {string} attribute - The name of the *attribute* (not property) to set.\n     * @param {object} value - The value to set. If null, the attribute will be removed.\n     */\n    reflectAttribute(attribute, value) {\n      return safeAttributes.setAttribute(this, attribute, value);\n    }\n\n    /**\n     * Set/unset the class with the indicated name.\n     *\n     * This method exists primarily to handle the case where an element wants to\n     * set a default property value that should be reflected as as class. An\n     * important limitation of custom element consturctors is that they cannot\n     * set attributes, including the `class` attribute. A call to\n     * `reflectClass` during the constructor will be deferred until the element\n     * is connected to the document.\n     *\n     * @param {string} className - The name of the class to set.\n     * @param {object} value - True to set the class, false to remove it.\n     */\n    reflectClass(className, value) {\n      return safeAttributes.toggleClass(this, className, value);\n    }\n\n  }\n\n  return AttributeMarshalling;\n};\n\n\n// Convert hyphenated foo-bar attribute name to camel case fooBar property name.\nfunction attributeToPropertyName(attributeName) {\n  let propertyName = attributeToPropertyNames[attributeName];\n  if (!propertyName) {\n    // Convert and memoize.\n    const hypenRegEx = /-([a-z])/g;\n    propertyName = attributeName.replace(hypenRegEx,\n        match => match[1].toUpperCase());\n    attributeToPropertyNames[attributeName] = propertyName;\n  }\n  return propertyName;\n}\n\nfunction attributesForClass(classFn) {\n\n  // We treat the element base classes as if they have no attributes, since we\n  // don't want to receive attributeChangedCallback for them.\n  if (classFn === HTMLElement || classFn === Object) {\n    return [];\n  }\n\n  // Get attributes for parent class.\n  const baseClass = Object.getPrototypeOf(classFn.prototype).constructor;\n  const baseAttributes = attributesForClass(baseClass);\n\n  // Get attributes for this class.\n  const propertyNames = Object.getOwnPropertyNames(classFn.prototype);\n  const setterNames = propertyNames.filter(propertyName =>\n    typeof Object.getOwnPropertyDescriptor(\n        classFn.prototype, propertyName).set === 'function');\n  const attributes = setterNames.map(setterName =>\n      propertyNameToAttribute(setterName));\n\n  // Merge.\n  const diff = attributes.filter(attribute =>\n      baseAttributes.indexOf(attribute) < 0);\n  return baseAttributes.concat(diff);\n}\n\n// Convert a camel case fooBar property name to a hyphenated foo-bar attribute.\nfunction propertyNameToAttribute(propertyName) {\n  let attribute = propertyNamesToAttributes[propertyName];\n  if (!attribute) {\n    // Convert and memoize.\n    const uppercaseRegEx = /([A-Z])/g;\n    attribute = propertyName.replace(uppercaseRegEx, '-$1').toLowerCase();\n  }\n  return attribute;\n}\n","/* Exported function extends a base class with Composable. */\nexport default (base) => {\n\n  /**\n   * Mixin to make a class more easily composable with other mixins.\n   *\n   * This mixin contributes a `compose` method that applies a set of mixin\n   * functions and returns the resulting new class. This sugar can make the\n   * application of many mixins at once easier to read.\n   */\n  class Composable extends base {\n\n    /**\n     * Apply a set of mixin functions or mixin objects to the present class and\n     * return the new class.\n     *\n     * Instead of writing:\n     *\n     *     let MyClass = Mixin1(Mixin2(Mixin3(Mixin4(Mixin5(BaseClass)))));\n     *\n     * You can write:\n     *\n     *     let MyClass = ComposableMixin(BaseClass).compose(\n     *       Mixin1,\n     *       Mixin2,\n     *       Mixin3,\n     *       Mixin4,\n     *       Mixin5\n     *     );\n     *\n     * This function can also take mixin objects. A mixin object is just a\n     * shorthand for a mixin function that creates a new subclass with the given\n     * members. The mixin object's members are *not* copied directly onto the\n     * prototype of the base class, as with traditional mixins.\n     *\n     * In addition to providing syntactic sugar, this mixin can be used to\n     * define a class in ES5, which lacks ES6's `class` keyword.\n     *\n     * @param {...mixins} mixins - A set of mixin functions or objects to apply.\n     */\n    static compose(...mixins) {\n      // We create a new subclass for each mixin in turn. The result becomes\n      // the base class extended by any subsequent mixins. It turns out that\n      // we can use Array.reduce() to concisely express this, using the current\n      // object as the seed for reduce().\n      return mixins.reduce(composeClass, this);\n    }\n\n  }\n\n  return Composable;\n};\n\n\n// Properties defined by Object that we don't want to mixin.\nconst NON_MIXABLE_OBJECT_PROPERTIES = [\n  'constructor'\n];\n\n/*\n * Apply the mixin to the given base class to return a new class.\n * The mixin can either be a function that returns the modified class, or a\n * plain object whose members will be copied to the new class' prototype.\n */\nfunction composeClass(base, mixin) {\n  if (typeof mixin === 'function') {\n    // Mixin function\n    return mixin(base);\n  } else {\n    // Mixin object\n    class Subclass extends base {}\n    copyOwnProperties(mixin, Subclass.prototype, NON_MIXABLE_OBJECT_PROPERTIES);\n    return Subclass;\n  }\n}\n\n\n/*\n * Copy the given properties/methods to the target.\n * Return the updated target.\n */\nfunction copyOwnProperties(source, target, ignorePropertyNames = []) {\n  Object.getOwnPropertyNames(source).forEach(name => {\n    if (ignorePropertyNames.indexOf(name) < 0) {\n      const descriptor = Object.getOwnPropertyDescriptor(source, name);\n      Object.defineProperty(target, name, descriptor);\n    }\n  });\n  return target;\n}\n","/* Exported function extends a base class with DistributedChildren. */\nexport default (base) => {\n\n  /**\n   * Mixin which defines helpers for accessing a component's distributed\n   * children as a flattened array or string.\n   *\n   * The standard DOM API provides several ways of accessing child content:\n   * `children`, `childNodes`, and `textContent`. None of these functions are\n   * Shadow DOM aware. This mixin defines variations of those functions that\n   * *are* Shadow DOM aware.\n   *\n   * Example: you create a component `<count-children>` that displays a number\n   * equal to the number of children placed inside that component. If someone\n   * instantiates your component like:\n   *\n   *     <count-children>\n   *       <div></div>\n   *       <div></div>\n   *       <div></div>\n   *     </count-children>\n   *\n   * Then the component should show \"3\", because there are three children. To\n   * calculate the number of children, the component can just calculate\n   * `this.children.length`. However, suppose someone instantiates your\n   * component inside one of their own components, and puts a `<slot>` element\n   * inside your component:\n   *\n   *     <count-children>\n   *       <slot></slot>\n   *     </count-children>\n   *\n   * If your component only looks at `this.children`, it will always see exactly\n   * one child — the `<slot>` element. But the user looking at the page will\n   * *see* any nodes distributed to that slot. To match what the user sees, your\n   * component should expand any `<slot>` elements it contains.\n   *\n   * That is the problem this mixin solves. After applying this mixin, your\n   * component code has access to `this.distributedChildren`, whose `length`\n   * will return the total number of all children distributed to your component\n   * in the composed tree.\n   *\n   * Note: The latest Custom Elements API design calls for a new function,\n   * `getAssignedNodes` that takes an optional `deep` parameter, that will solve\n   * this problem at the API level.\n   */\n  class DistributedChildren extends base {\n\n    /**\n     * An in-order collection of distributed children, expanding any slot\n     * elements. Like the standard children property, this skips text nodes.\n     *\n     * @type {HTMLElement[]}\n     */\n    get distributedChildren() {\n      return expandContentElements(this.children, false);\n    }\n\n    /**\n     * An in-order collection of distributed child nodes, expanding any slot\n     * elements. Like the standard childNodes property, this includes text\n     * nodes.\n     *\n     * @type {Node[]}\n     */\n    get distributedChildNodes() {\n      return expandContentElements(this.childNodes, true);\n    }\n\n    /**\n     * The concatenated text content of all distributed child nodes, expanding\n     * any slot elements.\n     *\n     * @type {string}\n     */\n    get distributedTextContent() {\n      const strings = this.distributedChildNodes.map(function(child) {\n        return child.textContent;\n      });\n      return strings.join('');\n    }\n\n  }\n\n  return DistributedChildren;\n};\n\n\n/*\n * Given a array of nodes, return a new array with any content elements expanded\n * to the nodes distributed to that content element. This rule is applied\n * recursively.\n *\n * If includeTextNodes is true, text nodes will be included, as in the\n * standard childNodes property; by default, this skips text nodes, like the\n * standard children property.\n */\nfunction expandContentElements(nodes, includeTextNodes) {\n  const expanded = Array.prototype.map.call(nodes, node => {\n    // We want to see if the node is an instanceof HTMLSlotELement, but\n    // that class won't exist if the browser that doesn't support native\n    // Shadow DOM and if the Shadow DOM polyfill hasn't been loaded. Instead,\n    // we do a simplistic check to see if the tag name is \"slot\".\n    const isSlot = typeof HTMLSlotElement !== 'undefined' ?\n      node instanceof HTMLSlotElement :\n      node.localName === 'slot';\n    if (isSlot) {\n      // Use the nodes assigned to this node instead.\n      const assignedNodes = node.assignedNodes({ flatten: true });\n      return assignedNodes ?\n        expandContentElements(assignedNodes, includeTextNodes) :\n        [];\n    } else if (node instanceof HTMLElement) {\n      // Plain element; use as is.\n      return [node];\n    } else if (node instanceof Text && includeTextNodes) {\n      // Text node.\n      return [node];\n    } else {\n      // Comment, processing instruction, etc.; skip.\n      return [];\n    }\n  });\n  const flattened = [].concat(...expanded);\n  return flattened;\n}\n","import createSymbol from './createSymbol';\nimport safeAttributes from './safeAttributes';\nimport symbols from './symbols';\n\n\n// Symbols for private data members on an element.\nconst closedSymbol = createSymbol('closed');\n\n\n/* Exported function extends a base class with OpenClose. */\nexport default (base) => {\n\n  /**\n   * Mixin which adds close/open semantics.\n   *\n   * This mixin does not produce any user-visible effects. Instead it applies\n   * a `basic-closed` CSS class to the component host if the host is\n   * closed, and a `basic-opened` class if opened. It also invokes a `render`\n   * function that can be overridden to apply custom effects.\n   */\n  class OpenClose extends base {\n\n    constructor() {\n      super();\n      // Set defaults.\n      if (typeof this.closed === 'undefined') {\n        this.closed = this[symbols.defaults].closed;\n      }\n    }\n\n    /**\n     * Close the component.\n     *\n     * This is equivalent to setting the `closed` property to true.\n     */\n    close() {\n      this.closed = true;\n    }\n\n    /**\n     * True if the component is curently closed.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    get closed() {\n      return this[closedSymbol];\n    }\n    set closed(value) {\n      const previousClosed = this[closedSymbol];\n      this[closedSymbol] = value;\n      if ('closed' in base.prototype) { super.closed = value; }\n      if (value !== previousClosed) {\n        this.render(value);\n\n        if (this[symbols.handlingUserInteraction]) {\n          const event = new CustomEvent('closed-changed');\n          this.dispatchEvent(event);\n        }\n      }\n    }\n\n    connectedCallback() {\n      if (super.connectedCallback) { super.connectedCallback(); }\n      safeAttributes.connected(this);\n      this.render(this.closed);\n    }\n\n    get [symbols.defaults]() {\n      const defaults = super[symbols.defaults] || {};\n      defaults.closed = false;\n      return defaults;\n    }\n\n    /**\n     * Open the component.\n     *\n     * This is equivalent to setting the `closed` property to false.\n     */\n    open() {\n      this.closed = false;\n    }\n\n    /**\n     * Perform custom rendering of the close/open transition.\n     *\n     * You can override this method to perform custom effects. If you do so,\n     * be sure to invoke `super()` in your implementation to get the baseline\n     * behavior.\n     *\n     * @param {boolean} closing - True if the component is being closed,\n     *        false if it's being opened.\n     */\n    render(closing) {\n      if (super.render) { super.render(); }\n      safeAttributes.toggleClass(this, 'basic-closed', closing);\n      safeAttributes.toggleClass(this, 'basic-opened', !closing);\n      safeAttributes.setAttribute(this, 'aria-expanded', !closing);\n    }\n\n    /**\n     * Toggle the component's open/closed state.\n     */\n    toggle() {\n      this.closed = !this.closed;\n    }\n\n  }\n\n  return OpenClose;\n};\n","/* Exported function extends a base class with ShadowElementReferences. */\nexport default (base) => {\n\n  /**\n   * Mixin to create references to elements in a component's Shadow DOM subtree.\n   *\n   * This adds a member on the component called `this.$` that can be used to\n   * reference shadow elements with IDs. E.g., if component's shadow contains an\n   * element `<button id=\"foo\">`, then this mixin will create a member\n   * `this.$.foo` that points to that button.\n   *\n   * Such references simplify a component's access to its own elements. In\n   * exchange, this mixin trades off a one-time cost of querying all elements in\n   * the shadow tree instead of paying an ongoing cost to query for an element\n   * each time the component wants to inspect or manipulate it.\n   *\n   * This mixin expects the component to define a Shadow DOM subtree. You can\n   * create that tree yourself, or make use of\n   * [ShadowTemplateMixin](ShadowTemplateMixin.md).\n   *\n   * This mixin is inspired by Polymer's [automatic\n   * node finding](https://www.polymer-project.org/1.0/docs/devguide/local-dom.html#node-finding)\n   * feature.\n   */\n  class ShadowElementReferences extends base {\n\n    constructor() {\n      super();\n      if (this.shadowRoot) {\n        // Look for elements in the shadow subtree that have id attributes.\n        // An alternatively implementation of this mixin would be to just define\n        // a this.$ getter that lazily does this search the first time someone\n        // tries to access this.$. That might introduce some complexity – if the\n        // the tree changed after it was first populated, the result of\n        // searching for a node might be somewhat unpredictable.\n        this.$ = {};\n        const nodesWithIds = this.shadowRoot.querySelectorAll('[id]');\n        [].forEach.call(nodesWithIds, node => {\n          const id = node.getAttribute('id');\n          this.$[id] = node;\n        });\n      }\n    }\n\n    /**\n     * The collection of references to the elements with IDs in a component's\n     * Shadow DOM subtree.\n     *\n     * @type {object}\n     * @member $\n     */\n  }\n\n  return ShadowElementReferences;\n};\n","import symbols from '../src/symbols';\n\n\n/* Exported function extends a base class with ShadowTemplate. */\nexport default (base) => {\n\n  /**\n   * Mixin for stamping a template into a Shadow DOM subtree upon component\n   * instantiation.\n   *\n   * To use this mixin, define a `template` property as a string or HTML\n   * `<template>` element:\n   *\n   *     class MyElement extends ShadowTemplateMixin(HTMLElement) {\n   *       get [symbols.template]() {\n   *         return `Hello, <em>world</em>.`;\n   *       }\n   *     }\n   *\n   * When your component class is instantiated, a shadow root will be created on\n   * the instance, and the contents of the template will be cloned into the\n   * shadow root. If your component does not define a `template` property, this\n   * mixin has no effect.\n   *\n   * For the time being, this extension retains support for Shadow DOM v0. That\n   * will eventually be deprecated as browsers (and the Shadow DOM polyfill)\n   * implement Shadow DOM v1.\n   */\n  class ShadowTemplate extends base {\n\n    /*\n     * If the component defines a template, a shadow root will be created on the\n     * component instance, and the template stamped into it.\n     */\n    constructor() {\n      super();\n      let template = this[symbols.template];\n      // TODO: Save the processed template with the component's class prototype\n      // so it doesn't need to be processed with every instantiation.\n      if (template) {\n\n        if (typeof template === 'string') {\n          // Upgrade plain string to real template.\n          template = createTemplateWithInnerHTML(template);\n        }\n\n        if (window.ShadowDOMPolyfill) {\n          shimTemplateStyles(template, this.localName);\n        }\n\n        const root = this.attachShadow({ mode: 'open' });\n        const clone = document.importNode(template.content, true);\n        root.appendChild(clone);\n      }\n    }\n\n  }\n\n  return ShadowTemplate;\n};\n\n\n// Convert a plain string of HTML into a real template element.\nfunction createTemplateWithInnerHTML(innerHTML) {\n  const template = document.createElement('template');\n  // REVIEW: Is there an easier way to do this?\n  // We'd like to just set innerHTML on the template content, but since it's\n  // a DocumentFragment, that doesn't work.\n  const div = document.createElement('div');\n  div.innerHTML = innerHTML;\n  while (div.childNodes.length > 0) {\n    template.content.appendChild(div.childNodes[0]);\n  }\n  return template;\n}\n\n// Invoke basic style shimming with ShadowCSS.\nfunction shimTemplateStyles(template, tag) {\n  window.WebComponents.ShadowCSS.shimStyling(template.content, tag);\n}\n","/**\n * Helper function to create a symbol that can be used for associating private\n * data with an element.\n *\n * Mixins and component classes often want to associate private data with an\n * element instance, but JavaScript does not have direct support for true\n * private properties. One approach is to use the\n * [Symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol)\n * data type to set and retrieve data on an element.\n *\n * Unfortunately, the Symbol type is not available in Internet Explorer 11. The\n * `createSymbol` helper function exists as a workaround for IE 11. Rather than\n * returning a true Symbol, it simply returns an underscore-prefixed string.\n *\n * Usage:\n *\n *     const fooSymbol = createSymbol('foo');\n *\n *     class MyElement extends HTMLElement {\n *       get foo() {\n *         return this[fooSymbol];\n *       }\n *       set foo(value) {\n *         this[fooSymbol] = value;\n *       }\n *     }\n *\n * In IE 11, this sample will \"hide\" data behind an instance property this._foo.\n * The use of the underscore is meant to reduce (not eliminate) the potential\n * for name conflicts, and discourage (not prevent) external access to this\n * data. In modern browsers, the above code will eliminate the potential of\n * naming conflicts, and better hide the data behind a real Symbol.\n *\n * @function createSymbol\n * @param {string} description - A string to identify the symbol when debugging\n */\nexport default function createSymbol(description) {\n  return typeof Symbol === 'function' ?\n    Symbol(description) :\n    `_${description}`;\n}\n","import createSymbol from './createSymbol';\nimport toggleClass from './toggleClass';\n\n\n// Symbols for private data members on an element.\nconst safeToSetAttributesSymbol = createSymbol('safeToSetAttributes');\nconst pendingAttributesSymbol = createSymbol('pendingAttributes');\nconst pendingClassesSymbol = createSymbol('pendingClasses');\n\n\n/**\n * Helper functions for updating attributes, including the `class` attribute.\n */\nexport default {\n\n  /**\n   * Perform any pending updates to attributes and classes.\n   *\n   * This writes any `setAttribute` or `toggleClass` values that were performed\n   * before an element was attached to the document for the first time.\n   *\n   * This method should be called by mixins/components in their\n   * `connectedCallback`. If mulitple mixins/components invoke this during the\n   * same `connectedCallback`, only the first call will have any effect. The\n   * subsequent calls will be harmless.\n   *\n   * @param {HTMLElement} element - The element being added to the document.\n   */\n  connected(element) {\n    element[safeToSetAttributesSymbol] = true;\n\n    // Set any pending attributes.\n    if (element[pendingAttributesSymbol]) {\n      for (let attribute in element[pendingAttributesSymbol]) {\n        const value = element[pendingAttributesSymbol][attribute];\n        setAttributeToElement(element, attribute, value);\n      }\n      element[pendingAttributesSymbol] = null;\n    }\n\n    // Set any pending classes.\n    if (element[pendingClassesSymbol]) {\n      for (let className in element[pendingClassesSymbol]) {\n        const value = element[pendingClassesSymbol][className];\n        toggleClass(element, className, value);\n      }\n      element[pendingClassesSymbol] = null;\n    }\n  },\n\n  /**\n   * Set/unset the attribute with the indicated name.\n   *\n   * This method exists primarily to handle the case where an element wants to\n   * set a default property value that should be reflected as an attribute. An\n   * important limitation of custom element consturctors is that they cannot\n   * set attributes. A call to `setAttribute` during the constructor will\n   * be deferred until the element is connected to the document.\n   *\n   * @param {string} attribute - The name of the *attribute* (not property) to set.\n   * @param {object} value - The value to set. If null, the attribute will be removed.\n   */\n  setAttribute(element, attribute, value) {\n    if (element[safeToSetAttributesSymbol]) {\n      // Safe to set attributes immediately.\n      setAttributeToElement(element, attribute, value);\n    } else {\n      // Defer setting attributes until the first time we're connected.\n      if (!element[pendingAttributesSymbol]) {\n        element[pendingAttributesSymbol] = {};\n      }\n      element[pendingAttributesSymbol][attribute] = value;\n    }\n  },\n\n  /**\n   * Set/unset the class with the indicated name.\n   *\n   * This method exists primarily to handle the case where an element wants to\n   * set a default property value that should be reflected as as class. An\n   * important limitation of custom element consturctors is that they cannot\n   * set attributes, including the `class` attribute. A call to\n   * `toggleClass` during the constructor will be deferred until the element\n   * is connected to the document.\n   *\n   * @param {string} className - The name of the class to set.\n   * @param {object} value - True to set the class, false to remove it.\n   */\n  toggleClass(element, className, value) {\n    if (element[safeToSetAttributesSymbol]) {\n      // Safe to set class immediately.\n      toggleClass(element, className, value);\n    } else {\n      // Defer setting class until the first time we're connected.\n      if (!element[pendingClassesSymbol]) {\n        element[pendingClassesSymbol] = {};\n      }\n      element[pendingClassesSymbol][className] = value;\n    }\n  }\n\n};\n\n\n// Reflect the attribute to the given element.\n// If the value is null, remove the attribute.\nfunction setAttributeToElement(element, attributeName, value) {\n  if (value === null || typeof value === 'undefined') {\n    element.removeAttribute(attributeName);\n  } else {\n    const text = String(value);\n    // Avoid recursive attributeChangedCallback calls.\n    if (element.getAttribute(attributeName) !== text) {\n      element.setAttribute(attributeName, value);\n    }\n  }\n}\n","import createSymbol from './createSymbol';\n\n/**\n * A collection of Symbol objects for standard component properties and methods.\n *\n * These Symbol objects are used to allow mixins and a component to internally\n * communicate, without exposing these properties and methods in the component's\n * public API.\n *\n * To use these Symbol objects in your own component, include this module and\n * then create a property or method whose key is the desired Symbol.\n *\n *     import 'SingleSelectionMixin' from 'basic-component-mixins/src/SingleSelectionMixin';\n *     import 'symbols' from 'basic-component-mixins/src/symbols';\n *\n *     class MyElement extends SingleSelectionMixin(HTMLElement) {\n *       [symbols.itemSelected](item, selected) {\n *         // This will be invoked whenever an item is selected/deselected.\n *       }\n *     }\n *\n * @module symbols\n */\nconst symbols = {\n\n  /**\n   * Symbol for the `defaults` property.\n   *\n   * This property can be used to set or override defaults that will be applied\n   * to a new component instance. When implementing this property, take care to\n   * first acquire any defaults defined by the superclass. The standard idiom is\n   * as follows:\n   *\n   *     get [symbols.defaults]() {\n   *       const defaults = super[symbols.defaults] || {};\n   *       // Set or override default values here\n   *       defaults.customProperty = false;\n   *       return defaults;\n   *     }\n   *\n   * @var {object} defaults\n   */\n  defaults: createSymbol('defaults'),\n\n  /**\n   * Symbol for the `dragging` property.\n   *\n   * Components like carousels often define animated CSS transitions for\n   * sliding effects. Such a transition should usually *not* be applied while\n   * the user is dragging, because a CSS animation will introduce a lag that\n   * makes the swipe feel sluggish. Instead, as long as the user is dragging\n   * with their finger down, the transition should be suppressed. When the\n   * user releases their finger, the transition can be restored, allowing the\n   * animation to show the carousel sliding into its final position.\n   *\n   * @type {boolean} true if a drag is in progress, false if not.\n   */\n  dragging: createSymbol('dragging'),\n\n  /**\n   * Symbol for the `goDown` method.\n   *\n   * This method is invoked when the user wants to go/navigate down.\n   *\n   * @function goDown\n   */\n  goDown: createSymbol('goDown'),\n\n  /**\n   * Symbol for the `goEnd` method.\n   *\n   * This method is invoked when the user wants to go/navigate to the end (e.g.,\n   * of a list).\n   *\n   * @function goEnd\n   */\n  goEnd: createSymbol('goEnd'),\n\n  /**\n   * Symbol for the `goLeft` method.\n   *\n   * This method is invoked when the user wants to go/navigate left.\n   *\n   * @function goLeft\n   */\n  goLeft: createSymbol('goLeft'),\n\n  /**\n   * Symbol for the `goRight` method.\n   *\n   * This method is invoked when the user wants to go/navigate right.\n   *\n   * @function goRight\n   */\n  goRight: createSymbol('goRight'),\n\n  /**\n   * Symbol for the `goStart` method.\n   *\n   * This method is invoked when the user wants to go/navigate to the start\n   * (e.g., of a list).\n   *\n   * @function goStart\n   */\n  goStart: createSymbol('goStart'),\n\n  /**\n   * Symbol for the `goUp` method.\n   *\n   * This method is invoked when the user wants to go/navigate up.\n   *\n   * @function goUp\n   */\n  goUp: createSymbol('goUp'),\n\n  /**\n   * Symbol for the `handlingUserInteraction` property.\n   *\n   * This property is used by mixins to determine whether they should raise\n   * property change events. The standard HTML pattern is to only raise such\n   * events in response to direct user interactions. This property can be used\n   * to manage events as follows.\n   *\n   * First, UI event listeners should set this property to `true` at the start\n   * of the event handler, then `false` at the end:\n   *\n   *     this.addEventListener('click', event => {\n   *       this[symbols.handlingUserInteraction] = true;\n   *       // Do work here, possibly setting properties, like:\n   *       this.foo = 'Hello';\n   *       this[symbols.handlingUserInteraction] = false;\n   *     });\n   *\n   * Elsewhere, property setters that raise change events should only do so it\n   * this property is `true`:\n   *\n   *     set foo(value) {\n   *       // Save foo value here, do any other work.\n   *       if (this[symbols.handlingUserInteraction]) {\n   *         const event = new CustomEvent('foo-changed');\n   *         this.dispatchEvent(event);\n   *       }\n   *     }\n   *\n   * In this way, programmatic attempts to set the `foo` property will not\n   * trigger the `foo-changed` event, but UI interactions that update that\n   * property will cause those events to be raised.\n   *\n   */\n  handlingUserInteraction: createSymbol('handlingUserInteraction'),\n\n  /**\n   * Symbol for the `itemAdded` method.\n   *\n   * This method is invoked when a new item is added to a list.\n   *\n   * @function itemAdded\n   * @param {HTMLElement} item - the item being selected/deselected\n   */\n  itemAdded: createSymbol('itemAdded'),\n\n\n  /**\n   * Symbol for the `itemsChanged` method.\n   *\n   * This method is invoked when the underlying contents change. It is also\n   * invoked on component initialization – since the items have \"changed\" from\n   * being nothing.\n   */\n  itemsChanged: createSymbol('itemsChanged'),\n\n  /**\n   * Symbol for the `itemSelected` method.\n   *\n   * This method is invoked when an item becomes selected or deselected.\n   *\n   * @function itemSelected\n   * @param {HTMLElement} item - the item being selected/deselected\n   * @param {boolean} selected - true if the item is selected, false if not\n   */\n  itemSelected: createSymbol('itemSelected'),\n\n  /**\n   * Symbol for the `keydown` method.\n   *\n   * This method is invoked when an element receives a `keydown` event.\n   *\n   * @function keydown\n   * @param {KeyboardEvent} event - the event being processed\n   */\n  keydown: createSymbol('keydown'),\n\n  /**\n   * Symbol for the `template` property.\n   *\n   * This property returns a component's template.\n   *\n   * @type {string|HTMLElement}\n   */\n  template: createSymbol('template')\n};\n\nexport default symbols;\n","/**\n * Helper function for standard classList.toggle() behavior on old browsers,\n * namely IE 11.\n *\n * The standard\n * [classlist](https://developer.mozilla.org/en-US/docs/Web/API/Element/classList)\n * object has a `toggle()` function that supports a second Boolean parameter\n * that can be used to succinctly turn a class on or off. This feature is often\n * useful in designing custom elements, which may want to externally reflect\n * component state in a CSS class that can be used for styling purposes.\n *\n * Unfortunately, IE 11 does not support the Boolean parameter to\n * `classList.toggle()`. This helper function behaves like the standard\n * `toggle()`, including support for the Boolean parameter, so that it can be\n * used even on IE 11.\n *\n * @function toggleClass\n * @param {HTMLElement} element - The element to modify\n * @param {string} className - The class to add/remove\n * @param {boolean} [force] - Force the class to be added (if true) or removed\n *                            (if false)\n */\nexport default function toggleClass(element, className, force) {\n  const classList = element.classList;\n  const addClass = (typeof force === 'undefined') ?\n    !classList.contains(className) :\n    force;\n  if (addClass) {\n    classList.add(className);\n  } else {\n    classList.remove(className);\n  }\n  return addClass;\n}\n","import AttributeMarshallingMixin from '../../basic-component-mixins/src/AttributeMarshallingMixin';\nimport ComposableMixin from '../../basic-component-mixins/src/ComposableMixin';\nimport DistributedChildrenMixin from '../../basic-component-mixins/src/DistributedChildrenMixin';\nimport ShadowElementReferencesMixin from '../../basic-component-mixins/src/ShadowElementReferencesMixin';\nimport ShadowTemplateMixin from '../../basic-component-mixins/src/ShadowTemplateMixin';\n\n\n/**\n * A sample general-purpose base class for defining custom elements that mixes\n * in some common features: template stamping into a shadow root, shadow element\n * references, marshalling attributes to properties, and retrieving the children\n * distributed to a component.\n *\n * This base class is not special in any way, and is defined only as a\n * convenient shorthand for applying the mixins listed above. You can use this\n * class as a base class for your own elements, or easily create your own base\n * class by applying the same set of mixins.\n *\n * The ElementBase base class does not register itself as a custom element with\n * the browser, and hence cannot be independently instantiated.\n *\n * @mixes AttributeMarshallingMixin\n * @mixes ComposableMixin\n * @mixes DistributedChildrenMixin\n * @mixes ShadowElementReferencesMixin\n * @mixes ShadowTemplateMixin\n */\nclass ElementBase extends ComposableMixin(HTMLElement).compose(\n  ShadowTemplateMixin,          // before node finding, so shadow root is populated\n  ShadowElementReferencesMixin, // before marshalling, so properties can use refs\n  AttributeMarshallingMixin,\n  DistributedChildrenMixin\n) {}\n\nexport default ElementBase;\n"]}