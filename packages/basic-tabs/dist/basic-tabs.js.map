{"version":3,"sources":["node_modules/browser-pack/_prelude.js","packages/basic-component-mixins/src/AttributeMarshallingMixin.js","packages/basic-component-mixins/src/ComposableMixin.js","packages/basic-component-mixins/src/ContentItemsMixin.js","packages/basic-component-mixins/src/DirectionSelectionMixin.js","packages/basic-component-mixins/src/DistributedChildrenContentMixin.js","packages/basic-component-mixins/src/DistributedChildrenMixin.js","packages/basic-component-mixins/src/GenericMixin.js","packages/basic-component-mixins/src/KeyboardDirectionMixin.js","packages/basic-component-mixins/src/KeyboardMixin.js","packages/basic-component-mixins/src/ShadowElementReferencesMixin.js","packages/basic-component-mixins/src/ShadowTemplateMixin.js","packages/basic-component-mixins/src/SingleSelectionMixin.js","packages/basic-component-mixins/src/createSymbol.js","packages/basic-component-mixins/src/microtask.js","packages/basic-component-mixins/src/renderArrayAsElements.js","packages/basic-component-mixins/src/safeAttributes.js","packages/basic-component-mixins/src/symbols.js","packages/basic-component-mixins/src/toggleClass.js","packages/basic-element-base/src/ElementBase.js","packages/basic-modes/src/Modes.js","packages/basic-tab-strip/src/TabStrip.js","packages/basic-tab-strip/src/TabStripMixin.js","packages/basic-tabs/globals.js","packages/basic-tabs/src/Tabs.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","attributeToPropertyName","attributeName","propertyName","attributeToPropertyNames","hypenRegEx","replace","match","toUpperCase","attributesForClass","classFn","HTMLElement","Object","baseClass","getPrototypeOf","prototype","constructor","baseAttributes","propertyNames","getOwnPropertyNames","setterNames","filter","getOwnPropertyDescriptor","set","attributes","map","setterName","propertyNameToAttribute","diff","attribute","indexOf","concat","propertyNamesToAttributes","uppercaseRegEx","toLowerCase","_safeAttributes","base","AttributeMarshalling","_base","_classCallCheck","this","_possibleConstructorReturn","__proto__","apply","arguments","_inherits","_createClass","key","value","oldValue","newValue","_get","_safeAttributes2","default","connected","setAttribute","className","toggleClass","get","composeClass","mixin","Subclass","_base2","copyOwnProperties","NON_MIXABLE_OBJECT_PROPERTIES","source","target","ignorePropertyNames","undefined","forEach","name","descriptor","defineProperty","Composable","_len","mixins","Array","_key","reduce","filterAuxiliaryElements","items","auxiliaryTags","item","localName","_createSymbol","_toggleClass","_symbols","itemsSymbol","_createSymbol2","itemInitializedSymbol","ContentItems","_symbols2","itemsChanged","itemAdded","itemSelected","selected","_toggleClass2","_this2","dispatchEvent","CustomEvent","content","DirectionSelection","goDown","selectNext","goEnd","selectLast","goLeft","selectPrevious","goRight","goStart","selectFirst","goUp","_set","selectedFraction","_microtask","DistributedChildrenContent","_this","shadowRoot","slots","querySelectorAll","slot","addEventListener","event","contentChanged","_microtask2","distributedChildren","console","warn","expandContentElements","nodes","includeTextNodes","_ref","expanded","node","isSlot","HTMLSlotElement","assignedNodes","flatten","Text","flattened","_toConsumableArray","DistributedChildren","children","childNodes","strings","distributedChildNodes","child","textContent","join","genericSymbol","Generic","generic","defaults","parsed","String","removeAttribute","navigationAxisSymbol","KeyboardDirection","navigationAxis","keydown","handled","axis","horizontal","vertical","keyCode","metaKey","altKey","Keyboard","preventDefault","stopPropagation","getAttribute","tabindex","ShadowElementReferences","$","nodesWithIds","id","createTemplateWithInnerHTML","innerHTML","template","document","createElement","div","appendChild","shimTemplateStyles","tag","window","WebComponents","ShadowCSS","shimStyling","ShadowTemplate","ShadowDOMPolyfill","root","attachShadow","mode","clone","importNode","selectIndex","element","index","count","boundedIndex","selectionWraps","Math","max","min","previousIndex","selectedIndex","trackSelectedItem","itemCount","previousSelectedItem","selectedItem","indexInCurrentItems","previousSelectedIndex","newSelectedIndex","selectionRequired","updatePossibleNavigations","canSelectNext","canSelectPrevious","canSelectNextSymbol","canSelectPreviousSymbol","selectionRequiredSymbol","selectionWrapsSymbol","externalSelectedIndexSymbol","externalSelectedItemSymbol","internalSelectedIndexSymbol","internalSelectedItemSymbol","SingleSelection","newIndex","previousCanSelectNext","previousCanSelectPrevious","hasItems","detail","createSymbol","description","Symbol","microtask","callback","callbacks","push","counter","executeCallbacks","shift","createTextNode","observer","MutationObserver","observe","characterData","renderArrayAsElements","container","renderItem","oldElement","newElement","replaceChild","removeChild","setAttributeToElement","text","safeToSetAttributesSymbol","pendingAttributesSymbol","pendingClassesSymbol","_value","_toggleClass3","symbols","dragging","force","classList","addClass","contains","add","remove","_AttributeMarshallingMixin","_ComposableMixin","_DistributedChildrenMixin","_ShadowElementReferencesMixin","_ShadowTemplateMixin","ElementBase","_ComposableMixin2","compose","_ShadowTemplateMixin2","_ShadowElementReferencesMixin2","_AttributeMarshallingMixin2","_DistributedChildrenMixin2","_ElementBase","_DistributedChildrenContentMixin","_ContentItemsMixin","_SingleSelectionMixin","_ElementBase2","_ContentItemsMixin2","_DistributedChildrenContentMixin2","_SingleSelectionMixin2","Modes","style","display","customElements","define","applySelectionToTab","tab","_DirectionSelectionMixin","_GenericMixin","_KeyboardDirectionMixin","_KeyboardMixin","_renderArrayAsElements","panelsSymbol","spreadTabsSymbol","tabPositionSymbol","TabStrip","path","tabPosition","focus","tabs","panels","selectedPanel","_renderArrayAsElements2","panel","position","reflectAttribute","_DirectionSelectionMixin2","_GenericMixin2","_KeyboardMixin2","_KeyboardDirectionMixin2","_TabStrip","idCount","tabStrip","baseId","spreadTabs","firstElement","pages","lastElement","nextSibling","insertBefore","baseTemplate","_Tabs","Basic","Tabs","_Tabs2","_Modes","_TabStripMixin","_Modes2","_TabStripMixin2"],"mappings":"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","file":"basic-tabs.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import safeAttributes from './safeAttributes';\n\n\n// Memoized maps of attribute to property names and vice versa.\nconst attributeToPropertyNames = {};\nconst propertyNamesToAttributes = {};\n\n\n/* Exported function extends a base class with AttributeMarshalling. */\nexport default (base) => {\n\n  /**\n   * Mixin which marshalls attributes to properties and vice versa.\n   *\n   * If your component exposes a setter for a property, it's generally a good\n   * idea to let devs using your component be able to set that property in HTML\n   * via an element attribute. You can code that yourself by writing an\n   * `attributeChangedCallback`, or you can use this mixin to get a degree of\n   * automatic support.\n   *\n   * This mixin implements an `attributeChangedCallback` that will attempt to\n   * convert a change in an element attribute into a call to the corresponding\n   * property setter. Attributes typically follow hyphenated names (\"foo-bar\"),\n   * whereas properties typically use camelCase names (\"fooBar\"). This mixin\n   * respects that convention, automatically mapping the hyphenated attribute\n   * name to the corresponding camelCase property name.\n   *\n   * Example: You define a component using this mixin:\n   *\n   *     class MyElement extends AttributeMarshallingMixin(HTMLElement) {\n   *       get fooBar() { return this._fooBar; }\n   *       set fooBar(value) { this._fooBar = value; }\n   *     }\n   *     customElements.define('my-element', MyElement);\n   *\n   * If someone then instantiates your component in HTML:\n   *\n   *     <my-element foo-bar=\"Hello\"></my-element>\n   *\n   * Then, after the element has been upgraded, the `fooBar` setter will\n   * automatically be invoked with the initial value \"Hello\".\n   *\n   * For the time being, this mixin only supports string-valued properties.\n   * If you'd like to convert string attributes to other types (numbers,\n   * booleans), you need to implement `attributeChangedCallback` yourself.\n   */\n  class AttributeMarshalling extends base {\n\n    /*\n     * Handle a change to the attribute with the given name.\n     */\n    attributeChangedCallback(attributeName, oldValue, newValue) {\n      if (super.attributeChangedCallback) { super.attributeChangedCallback(); }\n      const propertyName = attributeToPropertyName(attributeName);\n      // If the attribute name corresponds to a property name, set the property.\n      // Ignore standard HTMLElement properties handled by the DOM.\n      if (propertyName in this && !(propertyName in HTMLElement.prototype)) {\n        this[propertyName] = newValue;\n      }\n    }\n\n    connectedCallback() {\n      if (super.connectedCallback) { super.connectedCallback(); }\n      safeAttributes.connected(this);\n    }\n\n    static get observedAttributes() {\n      return attributesForClass(this);\n    }\n\n    /**\n     * Set/unset the attribute with the indicated name.\n     *\n     * This method exists primarily to handle the case where an element wants to\n     * set a default property value that should be reflected as an attribute. An\n     * important limitation of custom element consturctors is that they cannot\n     * set attributes. A call to `reflectAttribute` during the constructor will\n     * be deferred until the element is connected to the document.\n     *\n     * @param {string} attribute - The name of the *attribute* (not property) to set.\n     * @param {object} value - The value to set. If null, the attribute will be removed.\n     */\n    reflectAttribute(attribute, value) {\n      return safeAttributes.setAttribute(this, attribute, value);\n    }\n\n    /**\n     * Set/unset the class with the indicated name.\n     *\n     * This method exists primarily to handle the case where an element wants to\n     * set a default property value that should be reflected as as class. An\n     * important limitation of custom element consturctors is that they cannot\n     * set attributes, including the `class` attribute. A call to\n     * `reflectClass` during the constructor will be deferred until the element\n     * is connected to the document.\n     *\n     * @param {string} className - The name of the class to set.\n     * @param {object} value - True to set the class, false to remove it.\n     */\n    reflectClass(className, value) {\n      return safeAttributes.toggleClass(this, className, value);\n    }\n\n  }\n\n  return AttributeMarshalling;\n};\n\n\n// Convert hyphenated foo-bar attribute name to camel case fooBar property name.\nfunction attributeToPropertyName(attributeName) {\n  let propertyName = attributeToPropertyNames[attributeName];\n  if (!propertyName) {\n    // Convert and memoize.\n    const hypenRegEx = /-([a-z])/g;\n    propertyName = attributeName.replace(hypenRegEx,\n        match => match[1].toUpperCase());\n    attributeToPropertyNames[attributeName] = propertyName;\n  }\n  return propertyName;\n}\n\nfunction attributesForClass(classFn) {\n\n  // We treat the element base classes as if they have no attributes, since we\n  // don't want to receive attributeChangedCallback for them.\n  if (classFn === HTMLElement || classFn === Object) {\n    return [];\n  }\n\n  // Get attributes for parent class.\n  const baseClass = Object.getPrototypeOf(classFn.prototype).constructor;\n  const baseAttributes = attributesForClass(baseClass);\n\n  // Get attributes for this class.\n  const propertyNames = Object.getOwnPropertyNames(classFn.prototype);\n  const setterNames = propertyNames.filter(propertyName =>\n    typeof Object.getOwnPropertyDescriptor(\n        classFn.prototype, propertyName).set === 'function');\n  const attributes = setterNames.map(setterName =>\n      propertyNameToAttribute(setterName));\n\n  // Merge.\n  const diff = attributes.filter(attribute =>\n      baseAttributes.indexOf(attribute) < 0);\n  return baseAttributes.concat(diff);\n}\n\n// Convert a camel case fooBar property name to a hyphenated foo-bar attribute.\nfunction propertyNameToAttribute(propertyName) {\n  let attribute = propertyNamesToAttributes[propertyName];\n  if (!attribute) {\n    // Convert and memoize.\n    const uppercaseRegEx = /([A-Z])/g;\n    attribute = propertyName.replace(uppercaseRegEx, '-$1').toLowerCase();\n  }\n  return attribute;\n}\n","/* Exported function extends a base class with Composable. */\nexport default (base) => {\n\n  /**\n   * Mixin to make a class more easily composable with other mixins.\n   *\n   * This mixin contributes a `compose` method that applies a set of mixin\n   * functions and returns the resulting new class. This sugar can make the\n   * application of many mixins at once easier to read.\n   */\n  class Composable extends base {\n\n    /**\n     * Apply a set of mixin functions or mixin objects to the present class and\n     * return the new class.\n     *\n     * Instead of writing:\n     *\n     *     let MyClass = Mixin1(Mixin2(Mixin3(Mixin4(Mixin5(BaseClass)))));\n     *\n     * You can write:\n     *\n     *     let MyClass = ComposableMixin(BaseClass).compose(\n     *       Mixin1,\n     *       Mixin2,\n     *       Mixin3,\n     *       Mixin4,\n     *       Mixin5\n     *     );\n     *\n     * This function can also take mixin objects. A mixin object is just a\n     * shorthand for a mixin function that creates a new subclass with the given\n     * members. The mixin object's members are *not* copied directly onto the\n     * prototype of the base class, as with traditional mixins.\n     *\n     * In addition to providing syntactic sugar, this mixin can be used to\n     * define a class in ES5, which lacks ES6's `class` keyword.\n     *\n     * @param {...mixins} mixins - A set of mixin functions or objects to apply.\n     */\n    static compose(...mixins) {\n      // We create a new subclass for each mixin in turn. The result becomes\n      // the base class extended by any subsequent mixins. It turns out that\n      // we can use Array.reduce() to concisely express this, using the current\n      // object as the seed for reduce().\n      return mixins.reduce(composeClass, this);\n    }\n\n  }\n\n  return Composable;\n};\n\n\n// Properties defined by Object that we don't want to mixin.\nconst NON_MIXABLE_OBJECT_PROPERTIES = [\n  'constructor'\n];\n\n/*\n * Apply the mixin to the given base class to return a new class.\n * The mixin can either be a function that returns the modified class, or a\n * plain object whose members will be copied to the new class' prototype.\n */\nfunction composeClass(base, mixin) {\n  if (typeof mixin === 'function') {\n    // Mixin function\n    return mixin(base);\n  } else {\n    // Mixin object\n    class Subclass extends base {}\n    copyOwnProperties(mixin, Subclass.prototype, NON_MIXABLE_OBJECT_PROPERTIES);\n    return Subclass;\n  }\n}\n\n\n/*\n * Copy the given properties/methods to the target.\n * Return the updated target.\n */\nfunction copyOwnProperties(source, target, ignorePropertyNames = []) {\n  Object.getOwnPropertyNames(source).forEach(name => {\n    if (ignorePropertyNames.indexOf(name) < 0) {\n      const descriptor = Object.getOwnPropertyDescriptor(source, name);\n      Object.defineProperty(target, name, descriptor);\n    }\n  });\n  return target;\n}\n","import createSymbol from './createSymbol';\nimport toggleClass from './toggleClass';\nimport symbols from './symbols';\n\n\n// Symbols for private data members on an element.\nconst itemsSymbol = createSymbol('items');\nconst itemInitializedSymbol = createSymbol('itemInitialized');\n\n\n/* Exported function extends a base class with ContentItems. */\nexport default (base) => {\n\n  /**\n   * Mixin which maps content semantics (elements) to list item semantics.\n   *\n   * Items differ from element contents in several ways:\n   *\n   * * They are often referenced via index.\n   * * They may have a selection state.\n   * * It's common to do work to initialize the appearance or state of a new\n   *   item.\n   * * Auxiliary invisible child elements are filtered out and not counted as\n   *   items. Auxiliary elements include link, script, style, and template\n   *   elements. This filtering ensures that those auxiliary elements can be\n   *   used in markup inside of a list without being treated as list items.\n   *\n   * This mixin expects a component to provide a `content` property returning a\n   * raw set of elements. You can provide that yourself, or use\n   * [DistributedChildrenContentMixin](DistributedChildrenContentMixin.md).\n   *\n   * The most commonly referenced property defined by this mixin is the `items`\n   * property. To avoid having to do work each time that property is requested,\n   * this mixin supports an optimized mode. If you invoke the `contentChanged`\n   * method when the set of items changes, the mixin concludes that you'll take\n   * care of notifying it of future changes, and turns on the optimization. With\n   * that on, the mixin saves a reference to the computed set of items, and will\n   * return that immediately on subsequent calls to the `items` property. If you\n   * use this mixin in conjunction with\n   * [DistributedChildrenContentMixin](DistributedChildrenContentMixin.md), the\n   * `contentChanged` method will be invoked for you when the element's children\n   * change, turning on the optimization automatically.\n   */\n  class ContentItems extends base {\n\n    contentChanged() {\n      if (super.contentChanged) { super.contentChanged(); }\n\n      // Since we got the contentChanged call, we'll assume we'll be notified if\n      // the set of items changes later. We turn on memoization of the items\n      // property by setting our internal property to null (instead of\n      // undefined).\n      this[itemsSymbol] = null;\n\n      this[symbols.itemsChanged]();\n    }\n\n    /**\n     * This method is invoked whenever a new item is added to the list.\n     *\n     * The default implementation of this method does nothing. You can override\n     * this to perform per-item initialization.\n     *\n     * @param {HTMLElement} item - The item that was added.\n     */\n    [symbols.itemAdded](item) {\n      if (super[symbols.itemAdded]) { super[symbols.itemAdded](item); }\n    }\n\n    /**\n     * The selection state for a single item has changed.\n     *\n     * Invoke this method to signal that the selected state of the indicated item\n     * has changed. By default, this applies a `selected` CSS class if the item\n     * is selected, and removed it if not selected.\n     *\n     * @param {HTMLElement} item - The item whose selection state has changed.\n     * @param {boolean} selected - True if the item is selected, false if not.\n     */\n    [symbols.itemSelected](item, selected) {\n      if (super[symbols.itemSelected]) { super[symbols.itemSelected](item, selected); }\n      toggleClass(item, 'selected', selected);\n    }\n\n    /**\n     * The current set of items in the list. See the top-level documentation for\n     * mixin for a description of how items differ from plain content.\n     *\n     * @type {HTMLElement[]}\n     */\n    get items() {\n      let items;\n      if (this[itemsSymbol] == null) {\n        items = filterAuxiliaryElements(this.content);\n        // Note: test for *equality* with null; don't treat undefined as a match.\n        if (this[itemsSymbol] === null) {\n          // Memoize the set of items.\n          this[itemsSymbol] = items;\n        }\n      } else {\n        // Return the memoized items.\n        items = this[itemsSymbol];\n      }\n      return items;\n    }\n\n    /**\n     * This method is invoked when the underlying contents change. It is also\n     * invoked on component initialization – since the items have \"changed\" from\n     * being nothing.\n     */\n    [symbols.itemsChanged]() {\n      if (super[symbols.itemsChanged]) { super[symbols.itemsChanged](); }\n\n      // Perform per-item initialization.\n      Array.prototype.forEach.call(this.items, item => {\n        if (!item[itemInitializedSymbol]) {\n          this[symbols.itemAdded](item);\n          item[itemInitializedSymbol] = true;\n        }\n      });\n\n      this.dispatchEvent(new CustomEvent('items-changed'));\n    }\n\n    /**\n     * Fires when the items in the list change.\n     *\n     * @memberof ContentItems\n     * @event items-changed\n     */\n  }\n\n  return ContentItems;\n};\n\n\n// Return the given elements, filtering out auxiliary elements that aren't\n// typically visible. Items which are not elements are returned as is.\nfunction filterAuxiliaryElements(items) {\n  const auxiliaryTags = [\n    'link',\n    'script',\n    'style',\n    'template'\n  ];\n  return [].filter.call(items, function(item) {\n    return !item.localName || auxiliaryTags.indexOf(item.localName) < 0;\n  });\n}\n","import symbols from './symbols';\n\n\n/* Exported function extends a base class with DirectionSelection. */\nexport default (base) => {\n\n  /**\n   * Mixin which maps direction semantics (goLeft, goRight, etc.) to selection\n   * semantics (selectPrevious, selectNext, etc.).\n   *\n   * This mixin can be used in conjunction with\n   * [KeyboardDirectionMixin](KeyboardDirectionMixin.md) (which maps keyboard\n   * events to directions) and a mixin that handles selection like\n   * [SingleSelectionMixin](SingleSelectionMixin.md).\n   */\n  class DirectionSelection extends base {\n\n    [symbols.goDown]() {\n      if (super[symbols.goDown]) { super[symbols.goDown](); }\n      return this.selectNext();\n    }\n\n    [symbols.goEnd]() {\n      if (super[symbols.goEnd]) { super[symbols.goEnd](); }\n      return this.selectLast();\n    }\n\n    [symbols.goLeft]() {\n      if (super[symbols.goLeft]) { super[symbols.goLeft](); }\n      return this.selectPrevious();\n    }\n\n    [symbols.goRight]() {\n      if (super[symbols.goRight]) { super[symbols.goRight](); }\n      return this.selectNext();\n    }\n\n    [symbols.goStart]() {\n      if (super[symbols.goStart]) { super[symbols.goStart](); }\n      return this.selectFirst();\n    }\n\n    [symbols.goUp]() {\n      if (super[symbols.goUp]) { super[symbols.goUp](); }\n      return this.selectPrevious();\n    }\n\n    // Default implementation. This will typically be handled by other mixins.\n    get selectedFraction() {\n      return super.selectedFraction;\n    }\n    set selectedFraction(value) {\n      if ('selectedFraction' in base.prototype) { super.selectedFraction = value; }\n    }\n\n    // Default implementation. This will typically be handled by other mixins.\n    selectFirst() {\n      if (super.selectFirst) { return super.selectFirst(); }\n    }\n\n    // Default implementation. This will typically be handled by other mixins.\n    selectLast() {\n      if (super.selectLast) { return super.selectLast(); }\n    }\n\n    // Default implementation. This will typically be handled by other mixins.\n    selectNext() {\n      if (super.selectNext) { return super.selectNext(); }\n    }\n\n    // Default implementation. This will typically be handled by other mixins.\n    selectPrevious() {\n      if (super.selectPrevious) { return super.selectPrevious(); }\n    }\n\n    // Map drag travel fraction to selection fraction.\n    get travelFraction() {\n      return super.travelFraction;\n    }\n    set travelFraction(value) {\n      if ('travelFraction' in base.prototype) { super.travelFraction = value; }\n      this.selectedFraction = value;\n    }\n\n  }\n\n  return DirectionSelection;\n};\n","import microtask from './microtask';\n\n\n/* Exported function extends a base class with DistributedChildrenContent. */\nexport default (base) => {\n\n  /**\n   * Mixin which defines a component's content as its children, expanding any\n   * nodes distributed to the component's slots.\n   *\n   * This also provides notification of changes to a component's content. It\n   * will invoke a `contentChanged` method when the component is first\n   * instantiated, and whenever its distributed children change. This is an\n   * easy way to satisfy the Gold Standard checklist item for monitoring\n   * [Content Changes](https://github.com/webcomponents/gold-standard/wiki/Content-Changes).\n   *\n   * Example:\n   *\n   * ```\n   * let base = DistributedChildrenContentMixin(DistributedChildrenMixin(HTMLElement));\n   * class CountingElement extends base {\n   *\n   *   constructor() {\n   *     super();\n   *     let root = this.attachShadow({ mode: 'open' });\n   *     root.innerHTML = `<slot></slot>`;\n   *   }\n   *\n   *   contentChanged() {\n   *     // Count the component's children, both initially and when changed.\n   *     this.count = this.distributedChildren.length;\n   *   }\n   *\n   * }\n   * ```\n   *\n   * Note that content change detection depends upon the element having at least\n   * one `slot` element in its shadow subtree.\n   *\n   * This mixin is intended for use with the\n   * [DistributedChildrenMixin](DistributedChildrenMixin.md). See that mixin for\n   * a discussion of how that works. This DistributedChildrenContentMixin\n   * provides an easy way of defining the \"content\" of a component as the\n   * component's distributed children. That in turn lets mixins like\n   * [ContentItemsMixin](ContentItemsMixin.md) manipulate the children as list\n   * items.\n   */\n  class DistributedChildrenContent extends base {\n\n    constructor() {\n      super();\n\n      if (this.shadowRoot) {\n        // Listen to changes on all slots.\n        const slots = this.shadowRoot.querySelectorAll('slot');\n        slots.forEach(slot => slot.addEventListener('slotchange', event => {\n          this.contentChanged();\n        }));\n      }\n\n      // Make an initial call to contentChanged() so that the component can do\n      // initialization that it normally does when content changes.\n      //\n      // This will invoke contentChanged() handlers in other mixins. In order\n      // that those mixins have a chance to complete their own initialization,\n      // we add the contentChanged() call to the microtask queue.\n      microtask(() => this.contentChanged());\n    }\n\n    /**\n     * Invoked when the contents of the component (including distributed\n     * children) have changed.\n     *\n     * This method is also invoked when a component is first instantiated; the\n     * contents have essentially \"changed\" from being nothing. This allows the\n     * component to perform initial processing of its children.\n     */\n    contentChanged() {\n      if (super.contentChanged) { super.contentChanged(); }\n      const event = new CustomEvent('content-changed');\n      this.dispatchEvent(event);\n    }\n\n    /**\n     * The content of this component, defined to be the flattened array of\n     * children distributed to the component.\n     *\n     * @type {HTMLElement[]}\n     */\n    get content() {\n      const distributedChildren = this.distributedChildren;\n      if (typeof distributedChildren === 'undefined') {\n        console.warn(`DistributedChildrenContentMixin expects the component to define a \"distributedChildren\" property.`);\n      }\n      return distributedChildren;\n    }\n    set content(value) {\n      if ('content' in base.prototype) { super.content = value; }\n      // TODO: Set the children to the given value (which should be an array of\n      // elements)?\n    }\n\n    /**\n     * This event is raised when the component's contents (including distributed\n     * children) have changed.\n     *\n     * @memberof DistributedChildrenContent\n     * @event content-changed\n     */\n  }\n\n  return DistributedChildrenContent;\n};\n","/* Exported function extends a base class with DistributedChildren. */\nexport default (base) => {\n\n  /**\n   * Mixin which defines helpers for accessing a component's distributed\n   * children as a flattened array or string.\n   *\n   * The standard DOM API provides several ways of accessing child content:\n   * `children`, `childNodes`, and `textContent`. None of these functions are\n   * Shadow DOM aware. This mixin defines variations of those functions that\n   * *are* Shadow DOM aware.\n   *\n   * Example: you create a component `<count-children>` that displays a number\n   * equal to the number of children placed inside that component. If someone\n   * instantiates your component like:\n   *\n   *     <count-children>\n   *       <div></div>\n   *       <div></div>\n   *       <div></div>\n   *     </count-children>\n   *\n   * Then the component should show \"3\", because there are three children. To\n   * calculate the number of children, the component can just calculate\n   * `this.children.length`. However, suppose someone instantiates your\n   * component inside one of their own components, and puts a `<slot>` element\n   * inside your component:\n   *\n   *     <count-children>\n   *       <slot></slot>\n   *     </count-children>\n   *\n   * If your component only looks at `this.children`, it will always see exactly\n   * one child — the `<slot>` element. But the user looking at the page will\n   * *see* any nodes distributed to that slot. To match what the user sees, your\n   * component should expand any `<slot>` elements it contains.\n   *\n   * That is the problem this mixin solves. After applying this mixin, your\n   * component code has access to `this.distributedChildren`, whose `length`\n   * will return the total number of all children distributed to your component\n   * in the composed tree.\n   *\n   * Note: The latest Custom Elements API design calls for a new function,\n   * `getAssignedNodes` that takes an optional `deep` parameter, that will solve\n   * this problem at the API level.\n   */\n  class DistributedChildren extends base {\n\n    /**\n     * An in-order collection of distributed children, expanding any slot\n     * elements. Like the standard children property, this skips text nodes.\n     *\n     * @type {HTMLElement[]}\n     */\n    get distributedChildren() {\n      return expandContentElements(this.children, false);\n    }\n\n    /**\n     * An in-order collection of distributed child nodes, expanding any slot\n     * elements. Like the standard childNodes property, this includes text\n     * nodes.\n     *\n     * @type {Node[]}\n     */\n    get distributedChildNodes() {\n      return expandContentElements(this.childNodes, true);\n    }\n\n    /**\n     * The concatenated text content of all distributed child nodes, expanding\n     * any slot elements.\n     *\n     * @type {string}\n     */\n    get distributedTextContent() {\n      const strings = this.distributedChildNodes.map(function(child) {\n        return child.textContent;\n      });\n      return strings.join('');\n    }\n\n  }\n\n  return DistributedChildren;\n};\n\n\n/*\n * Given a array of nodes, return a new array with any content elements expanded\n * to the nodes distributed to that content element. This rule is applied\n * recursively.\n *\n * If includeTextNodes is true, text nodes will be included, as in the\n * standard childNodes property; by default, this skips text nodes, like the\n * standard children property.\n */\nfunction expandContentElements(nodes, includeTextNodes) {\n  const expanded = Array.prototype.map.call(nodes, node => {\n    // We want to see if the node is an instanceof HTMLSlotELement, but\n    // that class won't exist if the browser that doesn't support native\n    // Shadow DOM and if the Shadow DOM polyfill hasn't been loaded. Instead,\n    // we do a simplistic check to see if the tag name is \"slot\".\n    const isSlot = typeof HTMLSlotElement !== 'undefined' ?\n      node instanceof HTMLSlotElement :\n      node.localName === 'slot';\n    if (isSlot) {\n      // Use the nodes assigned to this node instead.\n      const assignedNodes = node.assignedNodes({ flatten: true });\n      return assignedNodes ?\n        expandContentElements(assignedNodes, includeTextNodes) :\n        [];\n    } else if (node instanceof HTMLElement) {\n      // Plain element; use as is.\n      return [node];\n    } else if (node instanceof Text && includeTextNodes) {\n      // Text node.\n      return [node];\n    } else {\n      // Comment, processing instruction, etc.; skip.\n      return [];\n    }\n  });\n  const flattened = [].concat(...expanded);\n  return flattened;\n}\n","import createSymbol from './createSymbol';\nimport safeAttributes from './safeAttributes';\nimport symbols from './symbols';\n\n\n// Symbols for private data members on an element.\nconst genericSymbol = createSymbol('generic');\n\n\n/* Exported function extends a base class with Generic. */\nexport default (base) => {\n\n  /**\n   * Mixin which allows a component to support a \"generic\" style: a minimalist\n   * style that can easily be removed to reset its visual appearance to a\n   * baseline state.\n   *\n   * By default, a component should provide a minimal visual presentation that\n   * allows the component to function. However, the more styling the component\n   * provides by default, the harder it becomes to get the component to fit in\n   * in other settings. Each CSS rule has to be overridden. Worse, new CSS rules\n   * added to the default style won't be overridden by default, making it hard\n   * to know whether a new version of a component will still look okay.\n   *\n   * As a compromise, the mixin defines a `generic` attribute. This attribute is\n   * normally set by default, and styles can be written that apply only when the\n   * generic attribute is set. This allows the construction of CSS rules that\n   * will only apply to generic components like:\n   *\n   *     :host([generic=\"\"]) {\n   *       ... generic appearance defined here ...\n   *     }\n   *\n   * This makes it easy to remove all default styling — set the `GenericMixin`\n   * attribute to false, and all default styling will be removed.\n   */\n  class Generic extends base {\n\n    constructor() {\n      super();\n      // Set defaults.\n      if (typeof this.generic === 'undefined') {\n        this.generic = this[symbols.defaults].generic;\n      }\n    }\n\n    // This mixin doesn't actually respond to attribute changes, but relies\n    // on separately-defined behavior (e.g., in AttributeMarshallingMixin) for that.\n    // Still, we need define a baseline attributeChangedCallback that does\n    // nothing, in case this mixin gets used on its own.\n    attributeChangedCallback(name, oldValue, newValue) {\n      if (super.attributeChangedCallback) { super.attributeChangedCallback(name, oldValue, newValue); }\n    }\n\n    connectedCallback() {\n      if (super.connectedCallback) { super.connectedCallback(); }\n      safeAttributes.connected(this);\n    }\n\n    get [symbols.defaults]() {\n      const defaults = super[symbols.defaults] || {};\n      defaults.generic = true;\n      return defaults;\n    }\n\n    /**\n     * True if the component would like to receive generic styling.\n     *\n     * This property is true by default — set it to false to turn off all\n     * generic styles. This makes it easier to apply custom styling; you won't\n     * have to explicitly override styling you don't want.\n     *\n     * @type Boolean\n     * @default true\n     */\n    get generic() {\n      return this[genericSymbol];\n    }\n    set generic(value) {\n      const parsed = typeof value === 'string' ?\n        String(value) !== 'false' :\n        value;\n      this[genericSymbol] = parsed;\n\n      if ('generic' in base.prototype) { super.generic = value; }\n\n      // We roll our own attribute setting so that an explicitly false value\n      // shows up as GenericMixin=\"false\".\n      if (parsed === false) {\n        // Explicitly use false string.\n        safeAttributes.setAttribute(this, 'generic', 'false');\n      } else if (parsed == null) {\n        // Explicitly remove attribute. (Always safe to do this.)\n        this.removeAttribute('generic');\n      } else {\n        // Use the empty string to get attribute to appear with no value.\n        safeAttributes.setAttribute(this, 'generic', '');\n      }\n    }\n\n  }\n\n  return Generic;\n};\n\n\n","import createSymbol from './createSymbol';\nimport symbols from './symbols';\n\n\n// Symbols for private data members on an element.\nconst navigationAxisSymbol = createSymbol('navigationAxis');\n\n\n/* Exported function extends a base class with KeyboardDirection. */\nexport default (base) => {\n\n  /**\n   * Mixin which maps direction keys (Left, Right, etc.) to direction semantics\n   * (go left, go right, etc.).\n   *\n   * This mixin expects the component to invoke a `keydown` method when a key is\n   * pressed. You can use [KeyboardMixin](KeyboardMixin.md) for that\n   * purpose, or wire up your own keyboard handling and call `keydown` yourself.\n   *\n   * This mixin calls methods such as `goLeft` and `goRight`. You can define\n   * what that means by implementing those methods yourself. If you want to use\n   * direction keys to navigate a selection, use this mixin with\n   * [DirectionSelectionMixin](DirectionSelectionMixin.md).\n   */\n  class KeyboardDirection extends base {\n\n    constructor() {\n      super();\n      // Set defaults.\n      if (typeof this.navigationAxis === 'undefined') {\n        this.navigationAxis = this[symbols.defaults].navigationAxis;\n      }\n    }\n\n    get [symbols.defaults]() {\n      const defaults = super[symbols.defaults] || {};\n      defaults.navigationAxis = 'both';\n      return defaults;\n    }\n\n    /**\n     * Invoked when the user wants to go/navigate down.\n     * The default implementation of this method does nothing.\n     */\n    [symbols.goDown]() {\n      if (super[symbols.goDown]) { return super[symbols.goDown](); }\n    }\n\n    /**\n     * Invoked when the user wants to go/navigate to the end (e.g., of a list).\n     * The default implementation of this method does nothing.\n     */\n    [symbols.goEnd]() {\n      if (super[symbols.goEnd]) { return super[symbols.goEnd](); }\n    }\n\n    /**\n     * Invoked when the user wants to go/navigate left.\n     * The default implementation of this method does nothing.\n     */\n    [symbols.goLeft]() {\n      if (super[symbols.goLeft]) { return super[symbols.goLeft](); }\n    }\n\n    /**\n     * Invoked when the user wants to go/navigate right.\n     * The default implementation of this method does nothing.\n     */\n    [symbols.goRight]() {\n      if (super[symbols.goRight]) { return super[symbols.goRight](); }\n    }\n\n    /**\n     * Invoked when the user wants to go/navigate to the start (e.g., of a\n     * list). The default implementation of this method does nothing.\n     */\n    [symbols.goStart]() {\n      if (super[symbols.goStart]) { return super[symbols.goStart](); }\n    }\n\n    /**\n     * Invoked when the user wants to go/navigate up.\n     * The default implementation of this method does nothing.\n     */\n    [symbols.goUp]() {\n      if (super[symbols.goUp]) { return super[symbols.goUp](); }\n    }\n\n    /**\n     * Indicates the direction of permitted navigation with the keyboard.\n     *\n     * Accepted values are \"horizontal\", \"vertical\", or \"both\" (the default).\n     * If this property is \"horizontal\", the Up Arrow and Down Arrow keys will\n     * be ignored. Conversely, if this is \"vertical\", the Left Arrow and Right\n     * Arrow keys will be ignored.\n     *\n     * @type {string}\n     */\n    get navigationAxis() {\n      return this[navigationAxisSymbol];\n    }\n    set navigationAxis(value) {\n      this[navigationAxisSymbol] = value;\n      if ('navigationAxis' in base.prototype) { super.navigationAxis = value; }\n    }\n\n    [symbols.keydown](event) {\n      let handled;\n\n      const axis = this.navigationAxis;\n      const horizontal = (axis === 'horizontal' || axis === 'both');\n      const vertical = (axis === 'vertical' || axis === 'both');\n\n      // Ignore Left/Right keys when metaKey or altKey modifier is also pressed,\n      // as the user may be trying to navigate back or forward in the browser.\n      switch (event.keyCode) {\n        case 35: // End\n          handled = this[symbols.goEnd]();\n          break;\n        case 36: // Home\n          handled = this[symbols.goStart]();\n          break;\n        case 37: // Left\n          if (horizontal && !event.metaKey && !event.altKey) {\n            handled = this[symbols.goLeft]();\n          }\n          break;\n        case 38: // Up\n          if (vertical) {\n            handled = event.altKey ? this[symbols.goStart]() : this[symbols.goUp]();\n          }\n          break;\n        case 39: // Right\n          if (horizontal && !event.metaKey && !event.altKey) {\n            handled = this[symbols.goRight]();\n          }\n          break;\n        case 40: // Down\n          if (vertical) {\n            handled = event.altKey ? this[symbols.goEnd]() : this[symbols.goDown]();\n          }\n          break;\n      }\n      // Prefer mixin result if it's defined, otherwise use base result.\n      return handled || (super[symbols.keydown] && super[symbols.keydown](event));\n    }\n\n  }\n\n  return KeyboardDirection;\n};\n","import symbols from './symbols';\n\n\n/* Exported function extends a base class with Keyboard. */\nexport default (base) => {\n\n  /**\n   * Mixin which manages the keydown handling for a component.\n   *\n   * This mixin handles several keyboard-related features.\n   *\n   * First, it wires up a single keydown event handler that can be shared by\n   * multiple mixins on a component. The event handler will invoke a `keydown`\n   * method with the event object, and any mixin along the prototype chain that\n   * wants to handle that method can do so.\n   *\n   * If a mixin wants to indicate that keyboard event has been handled, and that\n   * other mixins should *not* handle it, the mixin's `keydown` handler should\n   * return a value of true. The convention that seems to work well is that a\n   * mixin should see if it wants to handle the event and, if not, then ask the\n   * superclass to see if it wants to handle the event. This has the effect of\n   * giving the mixin that was applied last the first chance at handling a\n   * keyboard event.\n   *\n   * Example:\n   *\n   *     [symbols.keydown](event) {\n   *       let handled;\n   *       switch (event.keyCode) {\n   *         // Handle the keys you want, setting handled = true if appropriate.\n   *       }\n   *       // Prefer mixin result if it's defined, otherwise use base result.\n   *       return handled || (super[symbols.keydown] && super[symbols.keydown](event));\n   *     }\n   *\n   * A second feature provided by this mixin is that it implicitly makes the\n   * component a tab stop if it isn't already, by setting `tabIndex` to 0. This\n   * has the effect of adding the component to the tab order in document order.\n   */\n  class Keyboard extends base {\n\n    constructor() {\n      super();\n      this.addEventListener('keydown', event => {\n        const handled = this[symbols.keydown](event);\n        if (handled) {\n          event.preventDefault();\n          event.stopPropagation();\n        }\n      });\n    }\n\n    connectedCallback() {\n      if (super.connectedCallback) { super.connectedCallback(); }\n      if (this.getAttribute('tabindex') == null && this[symbols.defaults].tabindex !== null) {\n        this.setAttribute('tabindex', this[symbols.defaults].tabindex);\n      }\n    }\n\n    get [symbols.defaults]() {\n      const defaults = super[symbols.defaults] || {};\n      // The default tab index is 0 (document order).\n      defaults.tabindex = 0;\n      return defaults;\n    }\n\n    /**\n     * Handle the indicated keyboard event.\n     *\n     * The default implementation of this method does nothing. This will\n     * typically be handled by other mixins.\n     *\n     * @param {KeyboardEvent} event - the keyboard event\n     * @return {boolean} true if the event was handled\n     */\n    [symbols.keydown](event) {\n      if (super[symbols.keydown]) { return super[symbols.keydown](event); }\n    }\n\n  }\n\n  return Keyboard;\n};\n","/* Exported function extends a base class with ShadowElementReferences. */\nexport default (base) => {\n\n  /**\n   * Mixin to create references to elements in a component's Shadow DOM subtree.\n   *\n   * This adds a member on the component called `this.$` that can be used to\n   * reference shadow elements with IDs. E.g., if component's shadow contains an\n   * element `<button id=\"foo\">`, then this mixin will create a member\n   * `this.$.foo` that points to that button.\n   *\n   * Such references simplify a component's access to its own elements. In\n   * exchange, this mixin trades off a one-time cost of querying all elements in\n   * the shadow tree instead of paying an ongoing cost to query for an element\n   * each time the component wants to inspect or manipulate it.\n   *\n   * This mixin expects the component to define a Shadow DOM subtree. You can\n   * create that tree yourself, or make use of\n   * [ShadowTemplateMixin](ShadowTemplateMixin.md).\n   *\n   * This mixin is inspired by Polymer's [automatic\n   * node finding](https://www.polymer-project.org/1.0/docs/devguide/local-dom.html#node-finding)\n   * feature.\n   */\n  class ShadowElementReferences extends base {\n\n    constructor() {\n      super();\n      if (this.shadowRoot) {\n        // Look for elements in the shadow subtree that have id attributes.\n        // An alternatively implementation of this mixin would be to just define\n        // a this.$ getter that lazily does this search the first time someone\n        // tries to access this.$. That might introduce some complexity – if the\n        // the tree changed after it was first populated, the result of\n        // searching for a node might be somewhat unpredictable.\n        this.$ = {};\n        const nodesWithIds = this.shadowRoot.querySelectorAll('[id]');\n        [].forEach.call(nodesWithIds, node => {\n          const id = node.getAttribute('id');\n          this.$[id] = node;\n        });\n      }\n    }\n\n    /**\n     * The collection of references to the elements with IDs in a component's\n     * Shadow DOM subtree.\n     *\n     * @type {object}\n     * @member $\n     */\n  }\n\n  return ShadowElementReferences;\n};\n","import symbols from '../src/symbols';\n\n\n/* Exported function extends a base class with ShadowTemplate. */\nexport default (base) => {\n\n  /**\n   * Mixin for stamping a template into a Shadow DOM subtree upon component\n   * instantiation.\n   *\n   * To use this mixin, define a `template` property as a string or HTML\n   * `<template>` element:\n   *\n   *     class MyElement extends ShadowTemplateMixin(HTMLElement) {\n   *       get [symbols.template]() {\n   *         return `Hello, <em>world</em>.`;\n   *       }\n   *     }\n   *\n   * When your component class is instantiated, a shadow root will be created on\n   * the instance, and the contents of the template will be cloned into the\n   * shadow root. If your component does not define a `template` property, this\n   * mixin has no effect.\n   *\n   * For the time being, this extension retains support for Shadow DOM v0. That\n   * will eventually be deprecated as browsers (and the Shadow DOM polyfill)\n   * implement Shadow DOM v1.\n   */\n  class ShadowTemplate extends base {\n\n    /*\n     * If the component defines a template, a shadow root will be created on the\n     * component instance, and the template stamped into it.\n     */\n    constructor() {\n      super();\n      let template = this[symbols.template];\n      // TODO: Save the processed template with the component's class prototype\n      // so it doesn't need to be processed with every instantiation.\n      if (template) {\n\n        if (typeof template === 'string') {\n          // Upgrade plain string to real template.\n          template = createTemplateWithInnerHTML(template);\n        }\n\n        if (window.ShadowDOMPolyfill) {\n          shimTemplateStyles(template, this.localName);\n        }\n\n        const root = this.attachShadow({ mode: 'open' });\n        const clone = document.importNode(template.content, true);\n        root.appendChild(clone);\n      }\n    }\n\n  }\n\n  return ShadowTemplate;\n};\n\n\n// Convert a plain string of HTML into a real template element.\nfunction createTemplateWithInnerHTML(innerHTML) {\n  const template = document.createElement('template');\n  // REVIEW: Is there an easier way to do this?\n  // We'd like to just set innerHTML on the template content, but since it's\n  // a DocumentFragment, that doesn't work.\n  const div = document.createElement('div');\n  div.innerHTML = innerHTML;\n  while (div.childNodes.length > 0) {\n    template.content.appendChild(div.childNodes[0]);\n  }\n  return template;\n}\n\n// Invoke basic style shimming with ShadowCSS.\nfunction shimTemplateStyles(template, tag) {\n  window.WebComponents.ShadowCSS.shimStyling(template.content, tag);\n}\n","import createSymbol from './createSymbol';\nimport symbols from './symbols';\n\n\n// Symbols for private data members on an element.\nconst canSelectNextSymbol = createSymbol('canSelectNext');\nconst canSelectPreviousSymbol = createSymbol('canSelectPrevious');\nconst selectionRequiredSymbol = createSymbol('selectionRequired');\nconst selectionWrapsSymbol = createSymbol('selectionWraps');\n\n// We want to expose both selectedIndex and selectedItem as independent\n// properties but keep them in sync. This allows a component user to reference\n// the selection by whatever means is most natural for their situation.\n//\n// To efficiently keep these properties in sync, we track \"external\" and\n// \"internal\" references for each property:\n//\n// The external index or item is the one we report to the outside world when\n// asked for selection.  When handling a change to index or item, we update the\n// external reference as soon as possible, so that if anyone immediately asks\n// for the current selection, they will receive a stable answer.\n//\n// The internal index or item tracks whichever index or item last received the\n// full set of processing. Processing includes raising a change event for the\n// new value. Once we've begun that processing, we store the new value as the\n// internal value to indicate we've handled it.\n//\nconst externalSelectedIndexSymbol = createSymbol('externalSelectedIndex');\nconst externalSelectedItemSymbol = createSymbol('externalSelectedItem');\nconst internalSelectedIndexSymbol = createSymbol('internalSelectedIndex');\nconst internalSelectedItemSymbol = createSymbol('internalSelectedItem');\n\n\n/* Exported function extends a base class with SingleSelection. */\nexport default (base) => {\n\n  /**\n   * Mixin which manages single-selection semantics for items in a list.\n   *\n   * This mixin expects a component to provide an `items` Array or NodeList of\n   * all elements in the list. A standard way to do that with is the\n   * [ContentItemsMixin](ContentItemsMixin.md), which takes a component's\n   * content (typically its distributed children) as the set of list items; see\n   * that mixin for details.\n   *\n   * This mixin tracks a single selected item in the list, and provides means to\n   * get and set that state by item position (`selectedIndex`) or item identity\n   * (`selectedItem`). The selection can be moved in the list via the methods\n   * `selectFirst`, `selectLast`, `selectNext`, and `selectPrevious`.\n   *\n   * This mixin does not produce any user-visible effects to represent\n   * selection. Other mixins, such as\n   * [SelectionAriaActiveMixin](SelectionAriaActiveMixin.md),\n   * [SelectionHighlightMixin](SelectionHighlightMixin.md) and\n   * [SelectionInViewMixin](SelectionInViewMixin.md), modify the selected item\n   * in common ways to let the user know a given item is selected or not\n   * selected.\n   */\n  class SingleSelection extends base {\n\n    constructor() {\n      super();\n      // Set defaults.\n      if (typeof this.selectionRequired === 'undefined') {\n        this.selectionRequired = this[symbols.defaults].selectionRequired;\n      }\n      if (typeof this.selectionWraps === 'undefined') {\n        this.selectionWraps = this[symbols.defaults].selectionWraps;\n      }\n    }\n\n    /**\n     * True if the selection can be moved to the next item, false if not (the\n     * selected item is the last item in the list).\n     *\n     * @type {boolean}\n     */\n    get canSelectNext() {\n      return this[canSelectNextSymbol];\n    }\n    set canSelectNext(canSelectNext) {\n      const previousCanSelectNext = this[canSelectNextSymbol];\n      this[canSelectNextSymbol] = canSelectNext;\n      if ('canSelectNext' in base.prototype) { super.canSelectNext = canSelectNext; }\n      if (canSelectNext !== previousCanSelectNext) {\n        this.dispatchEvent(new CustomEvent('can-select-next-changed'));\n      }\n    }\n\n    /**\n     * True if the selection can be moved to the previous item, false if not\n     * (the selected item is the first one in the list).\n     *\n     * @type {boolean}\n     */\n    get canSelectPrevious() {\n      return this[canSelectPreviousSymbol];\n    }\n    set canSelectPrevious(canSelectPrevious) {\n      const previousCanSelectPrevious = this[canSelectPreviousSymbol];\n      this[canSelectPreviousSymbol] = canSelectPrevious;\n      if ('canSelectPrevious' in base.prototype) { super.canSelectPrevious = canSelectPrevious; }\n      if (canSelectPrevious !== previousCanSelectPrevious) {\n        this.dispatchEvent(new CustomEvent('can-select-previous-changed'));\n      }\n    }\n\n    get [symbols.defaults]() {\n      const defaults = super[symbols.defaults] || {};\n      defaults.selectionRequired = false;\n      defaults.selectionWraps = false;\n      return defaults;\n    }\n\n    /**\n     * Handle a new item being added to the list.\n     *\n     * The default implementation of this method simply sets the item's\n     * selection state to false.\n     *\n     * @param {HTMLElement} item - the item being added\n     */\n    [symbols.itemAdded](item) {\n      if (super[symbols.itemAdded]) { super[symbols.itemAdded](item); }\n      this[symbols.itemSelected](item, item === this.selectedItem);\n    }\n\n    [symbols.itemsChanged]() {\n      if (super[symbols.itemsChanged]) { super[symbols.itemsChanged](); }\n\n      // In case selected item changed position or was removed.\n      trackSelectedItem(this);\n\n      // In case the change in items affected which navigations are possible.\n      updatePossibleNavigations(this);\n    }\n\n    /**\n     * Apply the indicate selection state to the item.\n     *\n     * The default implementation of this method does nothing. User-visible\n     * effects will typically be handled by other mixins.\n     *\n     * @param {HTMLElement} item - the item being selected/deselected\n     * @param {boolean} selected - true if the item is selected, false if not\n     */\n    [symbols.itemSelected](item, selected) {\n      if (super[symbols.itemSelected]) { super[symbols.itemSelected](item, selected); }\n    }\n\n    /**\n     * The index of the item which is currently selected.\n     *\n     * A `selectedIndex` of -1 indicates there is no selection. Setting this\n     * property to -1 will remove any existing selection.\n     *\n     * @type {number}\n     */\n    get selectedIndex() {\n      return this[externalSelectedIndexSymbol] != null ?\n        this[externalSelectedIndexSymbol] :\n        -1;\n    }\n    set selectedIndex(index) {\n      // See notes at top about internal vs. external copies of this property.\n      const previousSelectedIndex = this[internalSelectedIndexSymbol];\n      let item;\n      if (index !== this[externalSelectedIndexSymbol]) {\n        // Store the new index and the corresponding item.\n        const items = this.items;\n        const hasItems = items && items.length > 0;\n        if (!(hasItems && index >= 0 && index < items.length)) {\n          index = -1; // No item at that index.\n        }\n        this[externalSelectedIndexSymbol] = index;\n        item = hasItems && index >= 0 ? items[index] : null;\n        this[externalSelectedItemSymbol] = item;\n      } else {\n        item = this[externalSelectedItemSymbol];\n      }\n\n      // Now let super do any work.\n      if ('selectedIndex' in base.prototype) { super.selectedIndex = index; }\n\n      if (index !== previousSelectedIndex) {\n        // The selected index changed.\n        this[internalSelectedIndexSymbol] = index;\n\n        const event = new CustomEvent('selected-index-changed', {\n          detail: {\n            selectedIndex: index,\n            value: index // for Polymer binding. TODO: Verify still necessary\n          }\n        });\n        this.dispatchEvent(event);\n      }\n\n      if (this[internalSelectedItemSymbol] !== item) {\n        // Update selectedItem property so it can have its own effects.\n        this.selectedItem = item;\n      }\n    }\n\n    /**\n     * The currently selected item, or null if there is no selection.\n     *\n     * Setting this property to null deselects any currently-selected item.\n     * Setting this property to an object that is not in the list has no effect.\n     *\n     * TODO: Even if selectionRequired, can still explicitly set selectedItem to null.\n     * TODO: If selectionRequired, leave selection alone?\n     *\n     * @type {object}\n     */\n    get selectedItem() {\n      return this[externalSelectedItemSymbol] || null;\n    }\n    set selectedItem(item) {\n      // See notes at top about internal vs. external copies of this property.\n      const previousSelectedItem = this[internalSelectedItemSymbol];\n      let index;\n      if (item !== this[externalSelectedItemSymbol]) {\n        // Store item and look up corresponding index.\n        const items = this.items;\n        const hasItems = items && items.length > 0;\n        index = hasItems ? Array.prototype.indexOf.call(items, item) : -1;\n        this[externalSelectedIndexSymbol] = index;\n        if (index < 0) {\n          item = null; // The indicated item isn't actually in `items`.\n        }\n        this[externalSelectedItemSymbol] = item;\n      } else {\n        index = this[externalSelectedIndexSymbol];\n      }\n\n      // Now let super do any work.\n      if ('selectedItem' in base.prototype) { super.selectedItem = item; }\n\n      if (item !== previousSelectedItem) {\n        // The selected item changed.\n        this[internalSelectedItemSymbol] = item;\n\n        if (previousSelectedItem) {\n          // Update selection state of old item.\n          this[symbols.itemSelected](previousSelectedItem, false);\n        }\n        if (item) {\n          // Update selection state to new item.\n          this[symbols.itemSelected](item, true);\n        }\n\n        updatePossibleNavigations(this);\n\n        const event = new CustomEvent('selected-item-changed', {\n          detail: {\n            selectedItem: item,\n            value: item // for Polymer binding\n          }\n        });\n        this.dispatchEvent(event);\n      }\n\n      if (this[internalSelectedIndexSymbol] !== index) {\n        // Update selectedIndex property so it can have its own effects.\n        this.selectedIndex = index;\n      }\n    }\n\n    /**\n     * Select the first item in the list.\n     */\n    selectFirst() {\n      if (super.selectFirst) { super.selectFirst(); }\n      return selectIndex(this, 0);\n    }\n\n    /**\n     * True if the list should always have a selection (if it has items).\n     *\n     * @type {boolean}\n     * @default false\n     */\n    get selectionRequired() {\n      return this[selectionRequiredSymbol];\n    }\n    set selectionRequired(selectionRequired) {\n      this[selectionRequiredSymbol] = selectionRequired;\n      if ('selectionRequired' in base.prototype) { super.selectionRequired = selectionRequired; }\n      trackSelectedItem(this);\n    }\n\n    /**\n     * True if selection navigations wrap from last to first, and vice versa.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    get selectionWraps() {\n      return this[selectionWrapsSymbol];\n    }\n    set selectionWraps(value) {\n      this[selectionWrapsSymbol] = String(value) === 'true';\n      if ('selectionWraps' in base.prototype) { super.selectionWraps = value; }\n      updatePossibleNavigations(this);\n    }\n\n    /**\n     * Select the last item in the list.\n     */\n    selectLast() {\n      if (super.selectLast) { super.selectLast(); }\n      return selectIndex(this, this.items.length - 1);\n    }\n\n    /**\n     * Select the next item in the list.\n     */\n    selectNext() {\n      if (super.selectNext) { super.selectNext(); }\n      return selectIndex(this, this.selectedIndex + 1);\n    }\n\n    /**\n     * Select the previous item in the list.\n     *\n     * If the list has no selection, the last item will be selected.\n     */\n    selectPrevious() {\n      if (super.selectPrevious) { super.selectPrevious(); }\n      const newIndex = this.selectedIndex < 0 ?\n        this.items.length - 1 :     // No selection yet; select last item.\n        this.selectedIndex - 1;\n      return selectIndex(this, newIndex);\n    }\n\n    /**\n     * Fires when the selectedItem property changes.\n     *\n     * @memberof SingleSelection\n     * @event selected-item-changed\n     * @param {HTMLElement} detail.selectedItem The new selected item.\n     * @param {HTMLElement} detail.previousItem The previously selected item.\n     */\n\n    /**\n     * Fires when the selectedIndex property changes.\n     *\n     * @memberof SingleSelection\n     * @event selected-index-changed\n     * @param {number} detail.selectedIndex The new selected index.\n     */\n\n  }\n\n  return SingleSelection;\n};\n\n\n// Ensure the given index is within bounds, and select it if it's not already\n// selected.\nfunction selectIndex(element, index) {\n  const count = element.items.length;\n\n  const boundedIndex = (element.selectionWraps) ?\n    // JavaScript mod doesn't handle negative numbers the way we want to wrap.\n    // See http://stackoverflow.com/a/18618250/76472\n    ((index % count) + count) % count :\n\n    // Keep index within bounds of array.\n    Math.max(Math.min(index, count - 1), 0);\n\n  const previousIndex = element.selectedIndex;\n  if (previousIndex !== boundedIndex) {\n    element.selectedIndex = boundedIndex;\n    return true;\n  } else {\n    return false;\n  }\n}\n\n// Following a change in the set of items, or in the value of the\n// `selectionRequired` property, reacquire the selected item. If it's moved,\n// update `selectedIndex`. If it's been removed, and a selection is required,\n// try to select another item.\nfunction trackSelectedItem(element) {\n\n  const items = element.items;\n  const itemCount = items ? items.length : 0;\n\n  const previousSelectedItem = element.selectedItem;\n  if (!previousSelectedItem) {\n    // No item was previously selected.\n    if (element.selectionRequired) {\n      // Select the first item by default.\n      element.selectedIndex = 0;\n    }\n  } else if (itemCount === 0) {\n    // We've lost the selection, and there's nothing left to select.\n    element.selectedItem = null;\n  } else {\n    // Try to find the previously-selected item in the current set of items.\n    const indexInCurrentItems = Array.prototype.indexOf.call(items, previousSelectedItem);\n    const previousSelectedIndex = element.selectedIndex;\n    if (indexInCurrentItems < 0) {\n      // Previously-selected item was removed from the items.\n      // Select the item at the same index (if it exists) or as close as possible.\n      const newSelectedIndex = Math.min(previousSelectedIndex, itemCount - 1);\n      // Select by item, since index may be the same, and we want to raise the\n      // selected-item-changed event.\n      element.selectedItem = items[newSelectedIndex];\n    } else if (indexInCurrentItems !== previousSelectedIndex) {\n      // Previously-selected item still there, but changed position.\n      element.selectedIndex = indexInCurrentItems;\n    }\n  }\n}\n\n// Following a change in selection, report whether it's now possible to\n// go next/previous from the given index.\nfunction updatePossibleNavigations(element) {\n  let canSelectNext;\n  let canSelectPrevious;\n  const items = element.items;\n  if (items == null || items.length === 0) {\n    // No items to select.\n    canSelectNext = false;\n    canSelectPrevious = false;\n  } if (element.selectionWraps) {\n    // Since there are items, can always go next/previous.\n    canSelectNext = true;\n    canSelectPrevious = true;\n  } else {\n    const index = element.selectedIndex;\n    if (index < 0 && items.length > 0) {\n      // Special case. If there are items but no selection, declare that it's\n      // always possible to go next/previous to create a selection.\n      canSelectNext = true;\n      canSelectPrevious = true;\n    } else {\n      // Normal case: we have an index in a list that has items.\n      canSelectPrevious = (index > 0);\n      canSelectNext = (index < items.length - 1);\n    }\n  }\n  if (element.canSelectNext !== canSelectNext) {\n    element.canSelectNext = canSelectNext;\n  }\n  if (element.canSelectPrevious !== canSelectPrevious) {\n    element.canSelectPrevious = canSelectPrevious;\n  }\n}\n","/**\n * Helper function to create a symbol that can be used for associating private\n * data with an element.\n *\n * Mixins and component classes often want to associate private data with an\n * element instance, but JavaScript does not have direct support for true\n * private properties. One approach is to use the\n * [Symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol)\n * data type to set and retrieve data on an element.\n *\n * Unfortunately, the Symbol type is not available in Internet Explorer 11. The\n * `createSymbol` helper function exists as a workaround for IE 11. Rather than\n * returning a true Symbol, it simply returns an underscore-prefixed string.\n *\n * Usage:\n *\n *     const fooSymbol = createSymbol('foo');\n *\n *     class MyElement extends HTMLElement {\n *       get foo() {\n *         return this[fooSymbol];\n *       }\n *       set foo(value) {\n *         this[fooSymbol] = value;\n *       }\n *     }\n *\n * In IE 11, this sample will \"hide\" data behind an instance property this._foo.\n * The use of the underscore is meant to reduce (not eliminate) the potential\n * for name conflicts, and discourage (not prevent) external access to this\n * data. In modern browsers, the above code will eliminate the potential of\n * naming conflicts, and better hide the data behind a real Symbol.\n *\n * @function createSymbol\n * @param {string} description - A string to identify the symbol when debugging\n */\nexport default function createSymbol(description) {\n  return typeof Symbol === 'function' ?\n    Symbol(description) :\n    `_${description}`;\n}\n","/*\n * Microtask helper for IE 11.\n *\n * Executing a function as a microtask is trivial in browsers that support\n * promises, whose then() clauses use microtask timing. IE 11 doesn't support\n * promises, but does support MutationObservers, which are also executed as\n * microtasks. So this helper uses an MutationObserver to achieve microtask\n * timing.\n *\n * See https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/\n *\n * Inspired by Polymer's async() function.\n */\n\n\n// The queue of pending callbacks to be executed as microtasks.\nconst callbacks = [];\n\n// Create an element that we will modify to force observable mutations.\nconst element = document.createTextNode('');\n\n// A monotonically-increasing value.\nlet counter = 0;\n\n\n/**\n * Add a callback to the microtask queue.\n *\n * This uses a MutationObserver so that it works on IE 11.\n *\n * NOTE: IE 11 may actually use timeout timing with MutationObservers. This\n * needs more investigation.\n *\n * @function microtask\n * @param {function} callback\n */\nexport default function microtask(callback) {\n  callbacks.push(callback);\n  // Force a mutation.\n  element.textContent = ++counter;\n}\n\n\n// Execute any pending callbacks.\nfunction executeCallbacks() {\n  while (callbacks.length > 0) {\n    const callback = callbacks.shift();\n    callback();\n  }\n}\n\n\n// Create the observer.\nconst observer = new MutationObserver(executeCallbacks);\nobserver.observe(element, {\n  characterData: true\n});\n","/**\n * Helper function for rendering an array of items as elements.\n *\n * This is not a mixin, but a function components can use if they need to\n * generate a set of elements for the items in an array.\n *\n * This function will reuse existing elements if possible. E.g., if it is called\n * to render an array of 4 items, and later called to render an array of 5\n * items, it can reuse the existing 4 items, creating just one new element.\n * Note, however, that this re-rendering is not automatic. If, after calling\n * this function, you manipulate the array you used, you must still call this\n * function again to re-render the array.\n *\n * The `renderItem` parameter takes a function of two arguments: an item to\n * to render, and an existing element (if one exists) which can be repurposed to\n * render that item. If the latter argument is null, the `renderItem()` function\n * should create a new element and return it. The function should do the same\n * if the supplied existing element is not suitable for rendering the given\n * item; the returned element will be used to replace the existing one. If the\n * existing element *is* suitable, the function can simply update it and return\n * it as is.\n *\n * Example: The following will render an array of strings in divs as children\n * of the `container` element:\n *\n *     let strings = ['a', 'b', 'c', ...];\n *     let container = this.querySelector(...);\n *     renderArrayAsElements(strings, container, (string, element) => {\n *       if (!element) {\n *         // No element exists yet, so create a new one.\n *         element = document.createElement('div');\n *       }\n *       // Set/update the text content of the element.\n *       element.textContent = string;\n *       return element;\n *     });\n *\n * @param {Array} items - the items to render\n * @param {HTMLElement} container - the parent that will hold the elements\n * @param {function} renderItem - returns a new element for an item, or\n *                                repurposes an existing element for an item\n */\nfunction renderArrayAsElements(items, container, renderItem) {\n  // Create a new set of elements for the current items.\n  items.forEach((item, index) => {\n    const oldElement = container.childNodes[index];\n    const newElement = renderItem(item, oldElement);\n    if (newElement) {\n      if (!oldElement) {\n        container.appendChild(newElement);\n      } else if (newElement !== oldElement) {\n        container.replaceChild(newElement, oldElement);\n      }\n    }\n  });\n\n  // If the array shrank, remove the extra elements which are no longer needed.\n  while (container.childNodes.length > items.length) {\n    container.removeChild(container.childNodes[items.length]);\n  }\n}\n\nexport default renderArrayAsElements;\n","import createSymbol from './createSymbol';\nimport toggleClass from './toggleClass';\n\n\n// Symbols for private data members on an element.\nconst safeToSetAttributesSymbol = createSymbol('safeToSetAttributes');\nconst pendingAttributesSymbol = createSymbol('pendingAttributes');\nconst pendingClassesSymbol = createSymbol('pendingClasses');\n\n\n/**\n * Helper functions for updating attributes, including the `class` attribute.\n */\nexport default {\n\n  /**\n   * Perform any pending updates to attributes and classes.\n   *\n   * This writes any `setAttribute` or `toggleClass` values that were performed\n   * before an element was attached to the document for the first time.\n   *\n   * This method should be called by mixins/components in their\n   * `connectedCallback`. If mulitple mixins/components invoke this during the\n   * same `connectedCallback`, only the first call will have any effect. The\n   * subsequent calls will be harmless.\n   *\n   * @param {HTMLElement} element - The element being added to the document.\n   */\n  connected(element) {\n    element[safeToSetAttributesSymbol] = true;\n\n    // Set any pending attributes.\n    if (element[pendingAttributesSymbol]) {\n      for (let attribute in element[pendingAttributesSymbol]) {\n        const value = element[pendingAttributesSymbol][attribute];\n        setAttributeToElement(element, attribute, value);\n      }\n      element[pendingAttributesSymbol] = null;\n    }\n\n    // Set any pending classes.\n    if (element[pendingClassesSymbol]) {\n      for (let className in element[pendingClassesSymbol]) {\n        const value = element[pendingClassesSymbol][className];\n        toggleClass(element, className, value);\n      }\n      element[pendingClassesSymbol] = null;\n    }\n  },\n\n  /**\n   * Set/unset the attribute with the indicated name.\n   *\n   * This method exists primarily to handle the case where an element wants to\n   * set a default property value that should be reflected as an attribute. An\n   * important limitation of custom element consturctors is that they cannot\n   * set attributes. A call to `setAttribute` during the constructor will\n   * be deferred until the element is connected to the document.\n   *\n   * @param {string} attribute - The name of the *attribute* (not property) to set.\n   * @param {object} value - The value to set. If null, the attribute will be removed.\n   */\n  setAttribute(element, attribute, value) {\n    if (element[safeToSetAttributesSymbol]) {\n      // Safe to set attributes immediately.\n      setAttributeToElement(element, attribute, value);\n    } else {\n      // Defer setting attributes until the first time we're connected.\n      if (!element[pendingAttributesSymbol]) {\n        element[pendingAttributesSymbol] = {};\n      }\n      element[pendingAttributesSymbol][attribute] = value;\n    }\n  },\n\n  /**\n   * Set/unset the class with the indicated name.\n   *\n   * This method exists primarily to handle the case where an element wants to\n   * set a default property value that should be reflected as as class. An\n   * important limitation of custom element consturctors is that they cannot\n   * set attributes, including the `class` attribute. A call to\n   * `toggleClass` during the constructor will be deferred until the element\n   * is connected to the document.\n   *\n   * @param {string} className - The name of the class to set.\n   * @param {object} value - True to set the class, false to remove it.\n   */\n  toggleClass(element, className, value) {\n    if (element[safeToSetAttributesSymbol]) {\n      // Safe to set class immediately.\n      toggleClass(element, className, value);\n    } else {\n      // Defer setting class until the first time we're connected.\n      if (!element[pendingClassesSymbol]) {\n        element[pendingClassesSymbol] = {};\n      }\n      element[pendingClassesSymbol][className] = value;\n    }\n  }\n\n};\n\n\n// Reflect the attribute to the given element.\n// If the value is null, remove the attribute.\nfunction setAttributeToElement(element, attributeName, value) {\n  if (value === null || typeof value === 'undefined') {\n    element.removeAttribute(attributeName);\n  } else {\n    const text = String(value);\n    // Avoid recursive attributeChangedCallback calls.\n    if (element.getAttribute(attributeName) !== text) {\n      element.setAttribute(attributeName, value);\n    }\n  }\n}\n","import createSymbol from './createSymbol';\n\n/**\n * A collection of Symbol objects for standard component properties and methods.\n *\n * These Symbol objects are used to allow mixins and a component to internally\n * communicate, without exposing these properties and methods in the component's\n * public API.\n *\n * To use these Symbol objects in your own component, include this module and\n * then create a property or method whose key is the desired Symbol.\n *\n *     import 'SingleSelectionMixin' from 'basic-component-mixins/src/SingleSelectionMixin';\n *     import 'symbols' from 'basic-component-mixins/src/symbols';\n *\n *     class MyElement extends SingleSelectionMixin(HTMLElement) {\n *       [symbols.itemSelected](item, selected) {\n *         // This will be invoked whenever an item is selected/deselected.\n *       }\n *     }\n *\n * @module symbols\n */\nconst symbols = {\n\n  /**\n   * Symbol for the `defaults` property.\n   *\n   * This property can be used to set or override defaults that will be applied\n   * to a new component instance. When implementing this property, take care to\n   * first acquire any defaults defined by the superclass. The standard idiom is\n   * as follows:\n   *\n   *     get [symbols.defaults]() {\n   *       const defaults = super[symbols.defaults] || {};\n   *       // Set or override default values here\n   *       defaults.customProperty = false;\n   *       return defaults;\n   *     }\n   *\n   * @var {object} defaults\n   */\n  defaults: createSymbol('defaults'),\n\n  /**\n   * Symbol for the `dragging` property.\n   *\n   * Components like carousels often define animated CSS transitions for\n   * sliding effects. Such a transition should usually *not* be applied while\n   * the user is dragging, because a CSS animation will introduce a lag that\n   * makes the swipe feel sluggish. Instead, as long as the user is dragging\n   * with their finger down, the transition should be suppressed. When the\n   * user releases their finger, the transition can be restored, allowing the\n   * animation to show the carousel sliding into its final position.\n   *\n   * @type {boolean} true if a drag is in progress, false if not.\n   */\n  dragging: createSymbol('dragging'),\n\n  /**\n   * Symbol for the `goDown` method.\n   *\n   * This method is invoked when the user wants to go/navigate down.\n   *\n   * @function goDown\n   */\n  goDown: createSymbol('goDown'),\n\n  /**\n   * Symbol for the `goEnd` method.\n   *\n   * This method is invoked when the user wants to go/navigate to the end (e.g.,\n   * of a list).\n   *\n   * @function goEnd\n   */\n  goEnd: createSymbol('goEnd'),\n\n  /**\n   * Symbol for the `goLeft` method.\n   *\n   * This method is invoked when the user wants to go/navigate left.\n   *\n   * @function goLeft\n   */\n  goLeft: createSymbol('goLeft'),\n\n  /**\n   * Symbol for the `goRight` method.\n   *\n   * This method is invoked when the user wants to go/navigate right.\n   *\n   * @function goRight\n   */\n  goRight: createSymbol('goRight'),\n\n  /**\n   * Symbol for the `goStart` method.\n   *\n   * This method is invoked when the user wants to go/navigate to the start\n   * (e.g., of a list).\n   *\n   * @function goStart\n   */\n  goStart: createSymbol('goStart'),\n\n  /**\n   * Symbol for the `goUp` method.\n   *\n   * This method is invoked when the user wants to go/navigate up.\n   *\n   * @function goUp\n   */\n  goUp: createSymbol('goUp'),\n\n  /**\n   * Symbol for the `itemAdded` method.\n   *\n   * This method is invoked when a new item is added to a list.\n   *\n   * @function itemAdded\n   * @param {HTMLElement} item - the item being selected/deselected\n   */\n  itemAdded: createSymbol('itemAdded'),\n\n\n  /**\n   * Symbol for the `itemsChanged` method.\n   *\n   * This method is invoked when the underlying contents change. It is also\n   * invoked on component initialization – since the items have \"changed\" from\n   * being nothing.\n   */\n  itemsChanged: createSymbol('itemsChanged'),\n\n  /**\n   * Symbol for the `itemSelected` method.\n   *\n   * This method is invoked when an item becomes selected or deselected.\n   *\n   * @function itemSelected\n   * @param {HTMLElement} item - the item being selected/deselected\n   * @param {boolean} selected - true if the item is selected, false if not\n   */\n  itemSelected: createSymbol('itemSelected'),\n\n  /**\n   * Symbol for the `keydown` method.\n   *\n   * This method is invoked when an element receives a `keydown` event.\n   *\n   * @function keydown\n   * @param {KeyboardEvent} event - the event being processed\n   */\n  keydown: createSymbol('keydown'),\n\n  /**\n   * Symbol for the `template` property.\n   *\n   * This property returns a component's template.\n   *\n   * @type {string|HTMLElement}\n   */\n  template: createSymbol('template')\n};\n\nexport default symbols;\n","/**\n * Helper function for standard classList.toggle() behavior on old browsers,\n * namely IE 11.\n *\n * The standard\n * [classlist](https://developer.mozilla.org/en-US/docs/Web/API/Element/classList)\n * object has a `toggle()` function that supports a second Boolean parameter\n * that can be used to succinctly turn a class on or off. This feature is often\n * useful in designing custom elements, which may want to externally reflect\n * component state in a CSS class that can be used for styling purposes.\n *\n * Unfortunately, IE 11 does not support the Boolean parameter to\n * `classList.toggle()`. This helper function behaves like the standard\n * `toggle()`, including support for the Boolean parameter, so that it can be\n * used even on IE 11.\n *\n * @function toggleClass\n * @param {HTMLElement} element - The element to modify\n * @param {string} className - The class to add/remove\n * @param {boolean} [force] - Force the class to be added (if true) or removed\n *                            (if false)\n */\nexport default function toggleClass(element, className, force) {\n  const classList = element.classList;\n  const addClass = (typeof force === 'undefined') ?\n    !classList.contains(className) :\n    force;\n  if (addClass) {\n    classList.add(className);\n  } else {\n    classList.remove(className);\n  }\n  return addClass;\n}\n","import AttributeMarshallingMixin from '../../basic-component-mixins/src/AttributeMarshallingMixin';\nimport ComposableMixin from '../../basic-component-mixins/src/ComposableMixin';\nimport DistributedChildrenMixin from '../../basic-component-mixins/src/DistributedChildrenMixin';\nimport ShadowElementReferencesMixin from '../../basic-component-mixins/src/ShadowElementReferencesMixin';\nimport ShadowTemplateMixin from '../../basic-component-mixins/src/ShadowTemplateMixin';\n\n\n/**\n * A sample general-purpose base class for defining custom elements that mixes\n * in some common features: template stamping into a shadow root, shadow element\n * references, marshalling attributes to properties, and retrieving the children\n * distributed to a component.\n *\n * This base class is not special in any way, and is defined only as a\n * convenient shorthand for applying the mixins listed above. You can use this\n * class as a base class for your own elements, or easily create your own base\n * class by applying the same set of mixins.\n *\n * The ElementBase base class does not register itself as a custom element with\n * the browser, and hence cannot be independently instantiated.\n *\n * @mixes AttributeMarshallingMixin\n * @mixes ComposableMixin\n * @mixes DistributedChildrenMixin\n * @mixes ShadowElementReferencesMixin\n * @mixes ShadowTemplateMixin\n */\nclass ElementBase extends ComposableMixin(HTMLElement).compose(\n  ShadowTemplateMixin,          // before node finding, so shadow root is populated\n  ShadowElementReferencesMixin, // before marshalling, so properties can use refs\n  AttributeMarshallingMixin,\n  DistributedChildrenMixin\n) {}\n\nexport default ElementBase;\n","import ElementBase from '../../basic-element-base/src/ElementBase';\nimport DistributedChildrenContentMixin from '../../basic-component-mixins/src/DistributedChildrenContentMixin';\nimport ContentItemsMixin from '../../basic-component-mixins/src/ContentItemsMixin';\nimport SingleSelectionMixin from '../../basic-component-mixins/src/SingleSelectionMixin';\nimport symbols from '../../basic-component-mixins/src/symbols';\n\nconst base = ElementBase.compose(\n  ContentItemsMixin,\n  DistributedChildrenContentMixin,\n  SingleSelectionMixin\n);\n\n\n/**\n * Shows exactly one child element at a time. This can be useful, for example,\n * if a given UI element has multiple modes that present substantially different\n * elements.\n *\n * [Live demo](http://basicwebcomponents.org/basic-web-components/packages/demos/modes-with-arrows-and-keyboard.html)\n *\n * The transition between child elements is instantenous. If you'd like the\n * transition to be accompanied by visible animated effects, see\n * [basic-animation-stage](../basic-animation-stage).\n *\n * This component doesn't provide any UI for changing which mode is shown.\n *\n * @extends ElementBase\n * @mixes ContentItemsMixin\n * @mixes DistributedChildrenContentMixin\n * @mixes SingleSelectionMixin\n */\nclass Modes extends base {\n\n  get [symbols.defaults]() {\n    const defaults = super[symbols.defaults] || {};\n    defaults.selectionRequired = true;\n    return defaults;\n  }\n\n  [symbols.itemAdded](item) {\n    if (super[symbols.itemAdded]) { super[symbols.itemAdded](item); }\n    // TODO: See node about aria-hidden below.\n    item.setAttribute('aria-hidden', 'false');\n  }\n\n  [symbols.itemSelected](item, selected) {\n    if (super[symbols.itemSelected]) { super[symbols.itemSelected](item, selected); }\n    item.style.display = selected ? '' : 'none';\n    // TODO: Should the modes which are not visible be exposed to ARIA?\n    // Sometimes this will be desirable, as when an inactive mode should be\n    // both physically invisible and invisible to ARIA. In other cases, it\n    // might be desirable to let the user navigate the modes with the keyboard,\n    // in which case ARIA should be able to see the inactive modes.\n    // item.setAttribute('aria-hidden', !selected);\n  }\n\n  get [symbols.template]() {\n    return `<slot></slot>`;\n  }\n\n}\n\n\ncustomElements.define('basic-modes', Modes);\nexport default Modes;\n","// import ClickSelectionMixin from '../../basic-component-mixins/src/ClickSelectionMixin';\nimport ContentItemsMixin from '../../basic-component-mixins/src/ContentItemsMixin';\nimport createSymbol from '../../basic-component-mixins/src/createSymbol';\nimport DirectionSelectionMixin from '../../basic-component-mixins/src/DirectionSelectionMixin';\nimport DistributedChildrenContentMixin from '../../basic-component-mixins/src/DistributedChildrenContentMixin';\nimport ElementBase from '../../basic-element-base/src/ElementBase';\nimport GenericMixin from '../../basic-component-mixins/src/GenericMixin';\nimport KeyboardDirectionMixin from '../../basic-component-mixins/src/KeyboardDirectionMixin';\nimport KeyboardMixin from '../../basic-component-mixins/src/KeyboardMixin';\nimport renderArrayAsElements from '../../basic-component-mixins/src/renderArrayAsElements';\nimport SingleSelectionMixin from '../../basic-component-mixins/src/SingleSelectionMixin';\nimport symbols from '../../basic-component-mixins/src/symbols';\nimport toggleClass from '../../basic-component-mixins/src/toggleClass';\n\n\n// Symbols for private data members on an element.\nconst panelsSymbol = createSymbol('panels');\nconst spreadTabsSymbol = createSymbol('spreadTabs');\nconst tabPositionSymbol = createSymbol('tabPosition');\n\n\n/**\n * A set of pages with a tab strip governing which page is shown.\n *\n * This stock combination applies the [TabStripMixin](../basic-tab-strip/) to a\n * [basic-modes](../basic-modes/) element. If you'd like to create something\n * more complex than this arrangement, you can use either of those elements on\n * its own.\n *\n * Since this component uses `TabStripMixin`, it obtains the names of the\n * individual tabs from a child's `aria-label` property. Example:\n *\n *     <basic-tabs>\n *       <div aria-label=\"One\">Page one</div>\n *       <div aria-label=\"Two\">Page two</div>\n *       <div aria-label=\"Three\">Page three</div>\n *     </basic-tabs>\n *\n * @extends ElementBase\n * @mixes ClickSelectionMixin\n * @mixes ContentItemsMixin\n * @mixes DirectionSelectionMixin\n * @mixes DistributedChildrenContentMixin\n * @mixes GenericMixin\n * @mixes KeyboardMixin\n * @mixes KeyboardDirectionMixin\n * @mixes SingleSelectionMixin\n */\nclass TabStrip extends ElementBase.compose(\n  // ClickSelectionMixin,\n  DirectionSelectionMixin,\n  GenericMixin,\n  KeyboardMixin,\n  KeyboardDirectionMixin,\n  ContentItemsMixin,\n  DistributedChildrenContentMixin,\n  SingleSelectionMixin\n) {\n\n  constructor() {\n    super();\n\n    // Handle clicks/Enter on tab buttons.\n    // TODO: Rationalize with ClickSelection?\n    this.addEventListener('click', event => {\n      const tab = event.path[0];\n      const index = Array.prototype.indexOf.call(this.items, tab);\n      if (index >= 0 && this.selectedIndex !== index) {\n        this.selectedIndex = index;\n        // Note: We don't call preventDefault here. The default behavior for\n        // mousedown includes setting keyboard focus if the element doesn't\n        // already have the focus, and we want to preserve that behavior.\n        event.stopPropagation();\n      }\n    });\n\n    // Set defaults.\n    if (typeof this.tabPosition === 'undefined') {\n      this.tabPosition = this[symbols.defaults].tabPosition;\n    }\n  }\n\n  get [symbols.defaults]() {\n    const defaults = super[symbols.defaults] || {};\n    defaults.tabindex = null;\n    defaults.tabPosition = 'top';\n    return defaults;\n  }\n\n  get items() {\n    return this.$.tabs.children;\n  }\n\n  [symbols.itemSelected](item, selected) {\n    if (super[symbols.itemSelected]) { super[symbols.itemSelected](item, selected); }\n    applySelectionToTab(item, selected);\n  }\n\n  [symbols.keydown](event) {\n    const handled = super[symbols.keydown] && super[symbols.keydown](event);\n    if (handled && this.selectedItem) {\n      // If the event resulted in a change of selection, move the focus to the\n      // newly-selected tab.\n      this.selectedItem.focus();\n    }\n    return handled;\n  }\n\n  get panels() {\n    return this[panelsSymbol];\n  }\n  set panels(panels) {\n    this[panelsSymbol] = panels;\n\n    // Create one tab for each panel.\n    const selectedIndex = this.selectedIndex;\n    const selectedPanel = panels[selectedIndex];\n    renderArrayAsElements(panels, this.$.tabs, (panel, tab) => {\n      if (!tab) {\n        tab = document.createElement('button');\n        tab.classList.add('tab');\n        tab.classList.add('style-scope');\n        tab.classList.add('basic-tab-strip');\n        tab.setAttribute('role', 'tab');\n        tab.setAttribute('tabindex', 0);\n      }\n      tab.id = panel.id + '_tab';\n      tab.textContent = panel.getAttribute('aria-label');\n\n      // Point tab and panel at each other.\n      tab.setAttribute('aria-controls', panel.id);\n      panel.setAttribute('aria-labelledby', tab.id);\n\n      applySelectionToTab(tab, panel === selectedPanel);\n\n      return tab;\n    });\n\n    this[symbols.itemsChanged]();\n  }\n\n  get spreadTabs() {\n    return this[spreadTabsSymbol];\n  }\n  set spreadTabs(value) {\n    this[spreadTabsSymbol] = value;\n    toggleClass(this, 'spread', value);\n  }\n\n  /**\n   * The position of the tab strip relative to the element's children. Valid\n   * values are \"top\", \"left\", \"right\", and \"bottom\".\n   *\n   * @default \"top\"\n   * @type {string}\n   */\n  get tabPosition() {\n    return this[tabPositionSymbol];\n  }\n  set tabPosition(position) {\n    this[tabPositionSymbol] = position;\n    this.reflectAttribute('tab-position', position);\n    this.navigationAxis = (position === 'top' || position === 'bottom') ?\n      'horizontal' :\n      'vertical';\n  }\n\n  get [symbols.template]() {\n    return `\n      <style>\n        :host {\n          display: -webkit-flex;\n          display: flex;\n        }\n\n        /*\n         * Avoid having tab container stretch across. User won't be able to see\n         * it, but since it handles the keyboard, in Mobile Safari a tap on the\n         * container background will cause the region to flash. Aligning the\n         * region collapses it down to hold its contents.\n         */\n        #tabs {\n          /* For IE bug (clicking tab produces gap between tab and page). */\n          display: -webkit-flex;\n          display: flex;\n          -webkit-flex-direction: row;\n          flex-direction: row;\n          -webkit-flex: 1;\n          flex: 1;\n          /*\n           * Try to obtain fast-tap behavior on all tabs.\n           * See https://webkit.org/blog/5610/more-responsive-tapping-on-ios/.\n           */\n          touch-action: manipulation;\n        }\n        :host(:not(.spread)) #tabs {\n          -webkit-align-self: flex-start;\n          align-self: flex-start;\n        }\n\n        .tab {\n          cursor: pointer;\n          display: inline-block;\n          font-family: inherit;\n          font-size: inherit;\n          position: relative;\n        }\n\n        :host([generic=\"\"]) .tab {\n          background: white;\n          border: 1px solid #ccc;\n          margin: 0;\n          padding: 0.5em 0.75em;\n          transition: border-color 0.25s;\n        }\n\n        :host([generic=\"\"]) .tab.selected {\n          border-color: #ccc;\n          opacity: 1;\n        }\n\n        :host([generic=\"\"]) .tab:hover {\n          background-color: #eee;\n        }\n\n        /* Left/right positions */\n        :host([tab-position=\"left\"]) #tabs,\n        :host([tab-position=\"right\"]) #tabs {\n          -webkit-flex-direction: column;\n          flex-direction: column;\n        }\n\n        /* Spread variant */\n        :host(.spread) #tabs {\n          -webkit-align-items: stretch;\n          align-items: stretch;\n        }\n        :host(.spread) .tab {\n          -webkit-flex: 1;\n          flex: 1;\n        }\n\n        /* Generic style, top/bottom positions */\n        :host([generic=\"\"][tab-position=\"top\"]) .tab:not(:last-child),\n        :host([generic=\"\"][tab-position=\"bottom\"]) .tab:not(:last-child) {\n          margin-right: 0.2em;\n        }\n\n        /* Generic style, top position */\n        :host([generic=\"\"][tab-position=\"top\"]) .tab {\n          border-radius: 0.25em 0.25em 0 0;\n          margin-bottom: -1px;\n        }\n        :host([generic=\"\"][tab-position=\"top\"]) .tab.selected {\n          border-bottom-color: transparent;\n        }\n\n        /* Generic style, bottom position */\n        :host([generic=\"\"][tab-position=\"bottom\"]) .tab {\n          border-radius: 0 0 0.25em 0.25em;\n          margin-top: -1px;\n        }\n        :host([generic=\"\"][tab-position=\"bottom\"]) .tab.selected {\n          border-top-color: transparent;\n        }\n\n        /* Generic style, left/right positions */\n        :host([generic=\"\"][tab-position=\"left\"]) .tab:not(:last-child),\n        :host([generic=\"\"][tab-position=\"right\"]) .tab:not(:last-child) {\n          margin-bottom: 0.2em;\n        }\n\n        /* Generic style, left position */\n        :host([generic=\"\"][tab-position=\"left\"]) .tab {\n          border-radius: 0.25em 0 0 0.25em;\n          margin-right: -1px;\n        }\n        :host([generic=\"\"][tab-position=\"left\"]) .tab.selected {\n          border-right-color: transparent;\n        }\n\n        /* Generic style, right position */\n        :host([generic=\"\"][tab-position=\"right\"]) .tab {\n          border-radius: 0 0.25em 0.25em 0;\n          margin-left: -1px;\n        }\n        :host([generic=\"\"][tab-position=\"right\"]) .tab.selected {\n          border-left-color: transparent;\n        }\n      </style>\n      <div id=\"tabs\" role=\"tablist\"></div>\n    `;\n  }\n}\n\n\nfunction applySelectionToTab(tab, selected) {\n  tab.setAttribute('aria-selected', selected);\n}\n\n\ncustomElements.define('basic-tab-strip', TabStrip);\nexport default TabStrip;\n","import TabStrip from './TabStrip'; // jshint ignore:line\nimport symbols from '../../basic-component-mixins/src/symbols';\n\n\n// Used to assign unique IDs to tabs for ARIA purposes.\nlet idCount = 0;\n\n\n/* Exported function extends a base class with TabStrip. */\nexport default (base) => {\n\n  /**\n   * A template mixin which adds strip of tabs for selecting one of the\n   * component's children.\n   *\n   * The component creates a tab to represent each of its light DOM children.\n   * The tab name is obtained by examining the children for an `aria-label`\n   * property.\n   *\n   * Use tabs when you want to provide a large set of options or elements than\n   * can comfortably fit inline, the options can be coherently grouped into pages,\n   * and you want to avoid making the user navigate to a separate page. Tabs work\n   * best if you only have a small handful of pages, say 2–7.\n   *\n   * The basic-tab-strip component does not define how a selected child is\n   * represented. If you're looking for the standard behavior of just showing only\n   * the selected child, you can use this component in combination with the\n   * separate [basic-modes](../basic-modes/) component. A typical arrangement:\n   *\n   *     <basic-tab-strip>\n   *       <basic-modes aria-label=\"Panels\">\n   *         <div aria-label=\"One\">Page one</div>\n   *         <div aria-label=\"Two\">Page two</div>\n   *         <div aria-label=\"Three\">Page three</div>\n   *       </basic-modes>\n   *     </basic-tab-strip>\n   *\n   * The above combination is so common it is provided as a single component,\n   * [basic-tabs](../basic-tabs/).\n   *\n   * The user can select a tab with the mouse or touch, as well as by through the\n   * keyboard. Each tab appears as a separate button in the tab order.\n   * Additionally, if the focus is currently on a tab, the user can quickly\n   * navigate between tabs with the left/right arrow keys (or, if the tabs are\n   * in vertical position, the up/down arrow keys).\n   *\n   * By default, the tabs are shown grouped to the left, where each tab is only\n   * as big as necessary. You can apply the `spread` CSS class to a\n   * basic-tab-strip element for a variant appearance in which the available width\n   * of the element is divided up equally among tabs.\n   *\n   * The GenericMixin default styling of the tab strip will present the classic\n   * skeumorphic look of rounded tabs attached to a surface. You can remove this\n   * styling by setting the `GenericMixin` property/attribute to false.\n   */\n  class TabStrip extends base {\n\n    constructor() {\n      super();\n      this.$.tabStrip.addEventListener('selected-item-changed', event => {\n        const selectedIndex = event.target.selectedIndex;\n        if (this.selectedIndex !== selectedIndex) {\n          this.selectedIndex = selectedIndex;\n        }\n      });\n    }\n\n    get [symbols.defaults]() {\n      const defaults = super[symbols.defaults] || {};\n      defaults.tabPosition = 'top';\n      return defaults;\n    }\n\n    get generic() {\n      return super.generic;\n    }\n    set generic(value) {\n      if ('generic' in base.prototype) { super.generic = value; }\n      this.$.tabStrip.generic = value;\n    }\n\n    [symbols.itemsChanged]() {\n      if (super[symbols.itemsChanged]) { super[symbols.itemsChanged](); }\n\n      const baseId = this.id ?\n        \"_\" + this.id + \"Panel\" :\n        \"_panel\";\n\n      // Confirm that items have at least a default role and ID for ARIA purposes.\n      this.items.forEach(item => {\n        // if (!item.getAttribute('role')) {\n          item.setAttribute('role', 'tabpanel');\n        // }\n        if (!item.id) {\n          item.id = baseId + idCount++;\n        }\n      });\n\n      // Point the tab strip at the panels.\n      this.$.tabStrip.panels = this.items;\n      this.$.tabStrip.selectedIndex = this.selectedIndex;\n    }\n\n    get selectedIndex() {\n      return super.selectedIndex;\n    }\n    set selectedIndex(value) {\n      if ('selectedIndex' in base.prototype) { super.selectedIndex = value; }\n      if (this.$.tabStrip.selectedIndex !== value) {\n        this.$.tabStrip.selectedIndex = value;\n      }\n    }\n\n    get spreadTabs() {\n      return this.$.tabStrip.spreadTabs;\n    }\n    set spreadTabs(value) {\n      this.$.tabStrip.spreadTabs = value;\n    }\n\n    get tabPosition() {\n      return this.$.tabStrip.tabPosition;\n    }\n    set tabPosition(position) {\n      this.$.tabStrip.tabPosition = position;\n      this.reflectAttribute('tab-position', position);\n\n      // Physically reorder the tabs and pages to reflect the desired arrangement.\n      // We could change the visual appearance by reversing the order of the flex\n      // box, but then the visual order wouldn't reflect the document order, which\n      // determines focus order. That would surprise a user trying to tab through\n      // the controls.\n      const firstElement = (position === 'top' || position === 'left') ?\n        this.$.tabStrip :\n        this.$.pages;\n      const lastElement = (position === 'top' || position === 'left') ?\n        this.$.pages :\n        this.$.tabStrip;\n      if (firstElement.nextSibling !== lastElement) {\n        this.shadowRoot.insertBefore(firstElement, lastElement);\n      }\n\n    }\n\n    get [symbols.template]() {\n      const baseTemplate = super[symbols.template] || '';\n      return `\n        <style>\n        :host {\n          display: -webkit-flex;\n          display: flex;\n          -webkit-flex-direction: column;\n          flex-direction: column;\n          position: relative;\n        }\n\n        #pages {\n          display: -webkit-flex;\n          display: flex;\n          -webkit-flex: 1;\n          flex: 1;\n          -webkit-flex-direction: column;\n          flex-direction: column;\n        }\n\n        #pages ::slotted(*) {\n          display: -webkit-flex;\n          display: flex;\n          -webkit-flex: 1;\n          flex: 1;\n        }\n\n        /* Left/right positions */\n        :host([tab-position=\"left\"]),\n        :host([tab-position=\"right\"]) {\n          -webkit-flex-direction: row;\n          flex-direction: row;\n        }\n\n        /* Generic style */\n        :host([generic=\"\"]) #pages {\n          background: white;\n          border: 1px solid #ccc;\n          box-sizing: border-box;\n        }\n        </style>\n\n        <basic-tab-strip id=\"tabStrip\" role=\"tablist\"></basic-tab-strip>\n        <div id=\"pages\">\n          ${baseTemplate}\n        </div>\n      `;\n    }\n\n  }\n\n  return TabStrip;\n};\n","/*\n * This file is transpiled to create an ES5-compatible distribution in which\n * the package's main feature(s) are available via the window.Basic global.\n * If you're already using ES6 yourself, ignore this file, and instead import\n * the source file(s) you want from the src folder.\n */\n\nimport Tabs from './src/Tabs';\n\nwindow.Basic = window.Basic || {};\nwindow.Basic.Tabs = Tabs;\n","import GenericMixin from '../../basic-component-mixins/src/GenericMixin';\nimport Modes from '../../basic-modes/src/Modes';\nimport TabStripMixin from '../../basic-tab-strip/src/TabStripMixin';\n\n\nconst base = Modes.compose(\n  GenericMixin,\n  TabStripMixin\n);\n\n\n/**\n * A set of pages with a tab strip governing which page is shown.\n *\n * This stock combination applies the [TabStripMixin](../basic-tab-strip/) to a\n * [basic-modes](../basic-modes/) element. If you'd like to create something\n * more complex than this arrangement, you can use either of those elements on\n * its own.\n *\n * Since this component uses `TabStripMixin`, it obtains the names of the\n * individual tabs from a child's `aria-label` property. Example:\n *\n *     <basic-tabs>\n *       <div aria-label=\"One\">Page one</div>\n *       <div aria-label=\"Two\">Page two</div>\n *       <div aria-label=\"Three\">Page three</div>\n *     </basic-tabs>\n *\n * @extends Modes\n * @mixes GenericMixin\n */\nclass Tabs extends base {}\n\ncustomElements.define('basic-tabs', Tabs);\nexport default Tabs;\n"]}