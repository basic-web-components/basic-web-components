{"version":3,"sources":["node_modules/browser-pack/_prelude.js","packages/basic-component-mixins/src/AttributeMarshallingMixin.js","packages/basic-component-mixins/src/ComposableMixin.js","packages/basic-component-mixins/src/DistributedChildrenMixin.js","packages/basic-component-mixins/src/ShadowElementReferencesMixin.js","packages/basic-component-mixins/src/ShadowTemplateMixin.js","packages/basic-component-mixins/src/createSymbol.js","packages/basic-component-mixins/src/safeAttributes.js","packages/basic-component-mixins/src/symbols.js","packages/basic-component-mixins/src/toggleClass.js","packages/basic-current-anchor/globals.js","packages/basic-current-anchor/src/CurrentAnchor.js","packages/basic-element-base/src/ElementBase.js","packages/basic-wrapped-standard-element/src/WrappedStandardElement.js"],"names":[],"mappings":"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","file":"basic-current-anchor.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import safeAttributes from './safeAttributes';\n\n\n// Memoized maps of attribute to property names and vice versa.\nconst attributeToPropertyNames = {};\nconst propertyNamesToAttributes = {};\n\n\n/* Exported function extends a base class with AttributeMarshalling. */\nexport default (base) => {\n\n  /**\n   * Mixin which marshalls attributes to properties and vice versa.\n   *\n   * If your component exposes a setter for a property, it's generally a good\n   * idea to let devs using your component be able to set that property in HTML\n   * via an element attribute. You can code that yourself by writing an\n   * `attributeChangedCallback`, or you can use this mixin to get a degree of\n   * automatic support.\n   *\n   * This mixin implements an `attributeChangedCallback` that will attempt to\n   * convert a change in an element attribute into a call to the corresponding\n   * property setter. Attributes typically follow hyphenated names (\"foo-bar\"),\n   * whereas properties typically use camelCase names (\"fooBar\"). This mixin\n   * respects that convention, automatically mapping the hyphenated attribute\n   * name to the corresponding camelCase property name.\n   *\n   * Example: You define a component using this mixin:\n   *\n   *     class MyElement extends AttributeMarshallingMixin(HTMLElement) {\n   *       get fooBar() { return this._fooBar; }\n   *       set fooBar(value) { this._fooBar = value; }\n   *     }\n   *     customElements.define('my-element', MyElement);\n   *\n   * If someone then instantiates your component in HTML:\n   *\n   *     <my-element foo-bar=\"Hello\"></my-element>\n   *\n   * Then, after the element has been upgraded, the `fooBar` setter will\n   * automatically be invoked with the initial value \"Hello\".\n   *\n   * For the time being, this mixin only supports string-valued properties.\n   * If you'd like to convert string attributes to other types (numbers,\n   * booleans), you need to implement `attributeChangedCallback` yourself.\n   */\n  class AttributeMarshalling extends base {\n\n    /*\n     * Handle a change to the attribute with the given name.\n     */\n    attributeChangedCallback(attributeName, oldValue, newValue) {\n      if (super.attributeChangedCallback) { super.attributeChangedCallback(); }\n      const propertyName = attributeToPropertyName(attributeName);\n      // If the attribute name corresponds to a property name, set the property.\n      // Ignore standard HTMLElement properties handled by the DOM.\n      if (propertyName in this && !(propertyName in HTMLElement.prototype)) {\n        this[propertyName] = newValue;\n      }\n    }\n\n    connectedCallback() {\n      if (super.connectedCallback) { super.connectedCallback(); }\n      safeAttributes.connected(this);\n    }\n\n    static get observedAttributes() {\n      return attributesForClass(this);\n    }\n\n    /**\n     * Set/unset the attribute with the indicated name.\n     *\n     * This method exists primarily to handle the case where an element wants to\n     * set a default property value that should be reflected as an attribute. An\n     * important limitation of custom element consturctors is that they cannot\n     * set attributes. A call to `reflectAttribute` during the constructor will\n     * be deferred until the element is connected to the document.\n     *\n     * @param {string} attribute - The name of the *attribute* (not property) to set.\n     * @param {object} value - The value to set. If null, the attribute will be removed.\n     */\n    reflectAttribute(attribute, value) {\n      return safeAttributes.setAttribute(this, attribute, value);\n    }\n\n    /**\n     * Set/unset the class with the indicated name.\n     *\n     * This method exists primarily to handle the case where an element wants to\n     * set a default property value that should be reflected as as class. An\n     * important limitation of custom element consturctors is that they cannot\n     * set attributes, including the `class` attribute. A call to\n     * `reflectClass` during the constructor will be deferred until the element\n     * is connected to the document.\n     *\n     * @param {string} className - The name of the class to set.\n     * @param {object} value - True to set the class, false to remove it.\n     */\n    reflectClass(className, value) {\n      return safeAttributes.toggleClass(this, className, value);\n    }\n\n  }\n\n  return AttributeMarshalling;\n};\n\n\n// Convert hyphenated foo-bar attribute name to camel case fooBar property name.\nfunction attributeToPropertyName(attributeName) {\n  let propertyName = attributeToPropertyNames[attributeName];\n  if (!propertyName) {\n    // Convert and memoize.\n    const hypenRegEx = /-([a-z])/g;\n    propertyName = attributeName.replace(hypenRegEx,\n        match => match[1].toUpperCase());\n    attributeToPropertyNames[attributeName] = propertyName;\n  }\n  return propertyName;\n}\n\nfunction attributesForClass(classFn) {\n\n  // We treat the element base classes as if they have no attributes, since we\n  // don't want to receive attributeChangedCallback for them.\n  if (classFn === HTMLElement || classFn === Object) {\n    return [];\n  }\n\n  // Get attributes for parent class.\n  const baseClass = Object.getPrototypeOf(classFn.prototype).constructor;\n  const baseAttributes = attributesForClass(baseClass);\n\n  // Get attributes for this class.\n  const propertyNames = Object.getOwnPropertyNames(classFn.prototype);\n  const setterNames = propertyNames.filter(propertyName =>\n    typeof Object.getOwnPropertyDescriptor(\n        classFn.prototype, propertyName).set === 'function');\n  const attributes = setterNames.map(setterName =>\n      propertyNameToAttribute(setterName));\n\n  // Merge.\n  const diff = attributes.filter(attribute =>\n      baseAttributes.indexOf(attribute) < 0);\n  return baseAttributes.concat(diff);\n}\n\n// Convert a camel case fooBar property name to a hyphenated foo-bar attribute.\nfunction propertyNameToAttribute(propertyName) {\n  let attribute = propertyNamesToAttributes[propertyName];\n  if (!attribute) {\n    // Convert and memoize.\n    const uppercaseRegEx = /([A-Z])/g;\n    attribute = propertyName.replace(uppercaseRegEx, '-$1').toLowerCase();\n  }\n  return attribute;\n}\n","/* Exported function extends a base class with Composable. */\nexport default (base) => {\n\n  /**\n   * Mixin to make a class more easily composable with other mixins.\n   *\n   * This mixin contributes a `compose` method that applies a set of mixin\n   * functions and returns the resulting new class. This sugar can make the\n   * application of many mixins at once easier to read.\n   */\n  class Composable extends base {\n\n    /**\n     * Apply a set of mixin functions or mixin objects to the present class and\n     * return the new class.\n     *\n     * Instead of writing:\n     *\n     *     let MyClass = Mixin1(Mixin2(Mixin3(Mixin4(Mixin5(BaseClass)))));\n     *\n     * You can write:\n     *\n     *     let MyClass = ComposableMixin(BaseClass).compose(\n     *       Mixin1,\n     *       Mixin2,\n     *       Mixin3,\n     *       Mixin4,\n     *       Mixin5\n     *     );\n     *\n     * This function can also take mixin objects. A mixin object is just a\n     * shorthand for a mixin function that creates a new subclass with the given\n     * members. The mixin object's members are *not* copied directly onto the\n     * prototype of the base class, as with traditional mixins.\n     *\n     * In addition to providing syntactic sugar, this mixin can be used to\n     * define a class in ES5, which lacks ES6's `class` keyword.\n     *\n     * @param {...mixins} mixins - A set of mixin functions or objects to apply.\n     */\n    static compose(...mixins) {\n      // We create a new subclass for each mixin in turn. The result becomes\n      // the base class extended by any subsequent mixins. It turns out that\n      // we can use Array.reduce() to concisely express this, using the current\n      // object as the seed for reduce().\n      return mixins.reduce(composeClass, this);\n    }\n\n  }\n\n  return Composable;\n};\n\n\n// Properties defined by Object that we don't want to mixin.\nconst NON_MIXABLE_OBJECT_PROPERTIES = [\n  'constructor'\n];\n\n/*\n * Apply the mixin to the given base class to return a new class.\n * The mixin can either be a function that returns the modified class, or a\n * plain object whose members will be copied to the new class' prototype.\n */\nfunction composeClass(base, mixin) {\n  if (typeof mixin === 'function') {\n    // Mixin function\n    return mixin(base);\n  } else {\n    // Mixin object\n    class Subclass extends base {}\n    copyOwnProperties(mixin, Subclass.prototype, NON_MIXABLE_OBJECT_PROPERTIES);\n    return Subclass;\n  }\n}\n\n\n/*\n * Copy the given properties/methods to the target.\n * Return the updated target.\n */\nfunction copyOwnProperties(source, target, ignorePropertyNames = []) {\n  Object.getOwnPropertyNames(source).forEach(name => {\n    if (ignorePropertyNames.indexOf(name) < 0) {\n      const descriptor = Object.getOwnPropertyDescriptor(source, name);\n      Object.defineProperty(target, name, descriptor);\n    }\n  });\n  return target;\n}\n","/* Exported function extends a base class with DistributedChildren. */\nexport default (base) => {\n\n  /**\n   * Mixin which defines helpers for accessing a component's distributed\n   * children as a flattened array or string.\n   *\n   * The standard DOM API provides several ways of accessing child content:\n   * `children`, `childNodes`, and `textContent`. None of these functions are\n   * Shadow DOM aware. This mixin defines variations of those functions that\n   * *are* Shadow DOM aware.\n   *\n   * Example: you create a component `<count-children>` that displays a number\n   * equal to the number of children placed inside that component. If someone\n   * instantiates your component like:\n   *\n   *     <count-children>\n   *       <div></div>\n   *       <div></div>\n   *       <div></div>\n   *     </count-children>\n   *\n   * Then the component should show \"3\", because there are three children. To\n   * calculate the number of children, the component can just calculate\n   * `this.children.length`. However, suppose someone instantiates your\n   * component inside one of their own components, and puts a `<slot>` element\n   * inside your component:\n   *\n   *     <count-children>\n   *       <slot></slot>\n   *     </count-children>\n   *\n   * If your component only looks at `this.children`, it will always see exactly\n   * one child — the `<slot>` element. But the user looking at the page will\n   * *see* any nodes distributed to that slot. To match what the user sees, your\n   * component should expand any `<slot>` elements it contains.\n   *\n   * That is the problem this mixin solves. After applying this mixin, your\n   * component code has access to `this.distributedChildren`, whose `length`\n   * will return the total number of all children distributed to your component\n   * in the composed tree.\n   *\n   * Note: The latest Custom Elements API design calls for a new function,\n   * `getAssignedNodes` that takes an optional `deep` parameter, that will solve\n   * this problem at the API level.\n   */\n  class DistributedChildren extends base {\n\n    /**\n     * An in-order collection of distributed children, expanding any slot\n     * elements. Like the standard children property, this skips text nodes.\n     *\n     * @type {HTMLElement[]}\n     */\n    get distributedChildren() {\n      return expandContentElements(this.children, false);\n    }\n\n    /**\n     * An in-order collection of distributed child nodes, expanding any slot\n     * elements. Like the standard childNodes property, this includes text\n     * nodes.\n     *\n     * @type {Node[]}\n     */\n    get distributedChildNodes() {\n      return expandContentElements(this.childNodes, true);\n    }\n\n    /**\n     * The concatenated text content of all distributed child nodes, expanding\n     * any slot elements.\n     *\n     * @type {string}\n     */\n    get distributedTextContent() {\n      const strings = this.distributedChildNodes.map(function(child) {\n        return child.textContent;\n      });\n      return strings.join('');\n    }\n\n  }\n\n  return DistributedChildren;\n};\n\n\n/*\n * Given a array of nodes, return a new array with any content elements expanded\n * to the nodes distributed to that content element. This rule is applied\n * recursively.\n *\n * If includeTextNodes is true, text nodes will be included, as in the\n * standard childNodes property; by default, this skips text nodes, like the\n * standard children property.\n */\nfunction expandContentElements(nodes, includeTextNodes) {\n  const expanded = Array.prototype.map.call(nodes, node => {\n    // We want to see if the node is an instanceof HTMLSlotELement, but\n    // that class won't exist if the browser that doesn't support native\n    // Shadow DOM and if the Shadow DOM polyfill hasn't been loaded. Instead,\n    // we do a simplistic check to see if the tag name is \"slot\".\n    const isSlot = typeof HTMLSlotElement !== 'undefined' ?\n      node instanceof HTMLSlotElement :\n      node.localName === 'slot';\n    if (isSlot) {\n      // Use the nodes assigned to this node instead.\n      const assignedNodes = node.assignedNodes({ flatten: true });\n      return assignedNodes ?\n        expandContentElements(assignedNodes, includeTextNodes) :\n        [];\n    } else if (node instanceof HTMLElement) {\n      // Plain element; use as is.\n      return [node];\n    } else if (node instanceof Text && includeTextNodes) {\n      // Text node.\n      return [node];\n    } else {\n      // Comment, processing instruction, etc.; skip.\n      return [];\n    }\n  });\n  const flattened = [].concat(...expanded);\n  return flattened;\n}\n","/* Exported function extends a base class with ShadowElementReferences. */\nexport default (base) => {\n\n  /**\n   * Mixin to create references to elements in a component's Shadow DOM subtree.\n   *\n   * This adds a member on the component called `this.$` that can be used to\n   * reference shadow elements with IDs. E.g., if component's shadow contains an\n   * element `<button id=\"foo\">`, then this mixin will create a member\n   * `this.$.foo` that points to that button.\n   *\n   * Such references simplify a component's access to its own elements. In\n   * exchange, this mixin trades off a one-time cost of querying all elements in\n   * the shadow tree instead of paying an ongoing cost to query for an element\n   * each time the component wants to inspect or manipulate it.\n   *\n   * This mixin expects the component to define a Shadow DOM subtree. You can\n   * create that tree yourself, or make use of\n   * [ShadowTemplateMixin](ShadowTemplateMixin.md).\n   *\n   * This mixin is inspired by Polymer's [automatic\n   * node finding](https://www.polymer-project.org/1.0/docs/devguide/local-dom.html#node-finding)\n   * feature.\n   */\n  class ShadowElementReferences extends base {\n\n    constructor() {\n      super();\n      if (this.shadowRoot) {\n        // Look for elements in the shadow subtree that have id attributes.\n        // An alternatively implementation of this mixin would be to just define\n        // a this.$ getter that lazily does this search the first time someone\n        // tries to access this.$. That might introduce some complexity – if the\n        // the tree changed after it was first populated, the result of\n        // searching for a node might be somewhat unpredictable.\n        this.$ = {};\n        const nodesWithIds = this.shadowRoot.querySelectorAll('[id]');\n        [].forEach.call(nodesWithIds, node => {\n          const id = node.getAttribute('id');\n          this.$[id] = node;\n        });\n      }\n    }\n\n    /**\n     * The collection of references to the elements with IDs in a component's\n     * Shadow DOM subtree.\n     *\n     * @type {object}\n     * @member $\n     */\n  }\n\n  return ShadowElementReferences;\n};\n","import symbols from '../src/symbols';\n\n\n/* Exported function extends a base class with ShadowTemplate. */\nexport default (base) => {\n\n  /**\n   * Mixin for stamping a template into a Shadow DOM subtree upon component\n   * instantiation.\n   *\n   * To use this mixin, define a `template` property as a string or HTML\n   * `<template>` element:\n   *\n   *     class MyElement extends ShadowTemplateMixin(HTMLElement) {\n   *       get [symbols.template]() {\n   *         return `Hello, <em>world</em>.`;\n   *       }\n   *     }\n   *\n   * When your component class is instantiated, a shadow root will be created on\n   * the instance, and the contents of the template will be cloned into the\n   * shadow root. If your component does not define a `template` property, this\n   * mixin has no effect.\n   *\n   * For the time being, this extension retains support for Shadow DOM v0. That\n   * will eventually be deprecated as browsers (and the Shadow DOM polyfill)\n   * implement Shadow DOM v1.\n   */\n  class ShadowTemplate extends base {\n\n    /*\n     * If the component defines a template, a shadow root will be created on the\n     * component instance, and the template stamped into it.\n     */\n    constructor() {\n      super();\n      let template = this[symbols.template];\n      // TODO: Save the processed template with the component's class prototype\n      // so it doesn't need to be processed with every instantiation.\n      if (template) {\n\n        if (typeof template === 'string') {\n          // Upgrade plain string to real template.\n          template = createTemplateWithInnerHTML(template);\n        }\n\n        if (window.ShadowDOMPolyfill) {\n          shimTemplateStyles(template, this.localName);\n        }\n\n        const root = this.attachShadow({ mode: 'open' });\n        const clone = document.importNode(template.content, true);\n        root.appendChild(clone);\n      }\n    }\n\n  }\n\n  return ShadowTemplate;\n};\n\n\n// Convert a plain string of HTML into a real template element.\nfunction createTemplateWithInnerHTML(innerHTML) {\n  const template = document.createElement('template');\n  // REVIEW: Is there an easier way to do this?\n  // We'd like to just set innerHTML on the template content, but since it's\n  // a DocumentFragment, that doesn't work.\n  const div = document.createElement('div');\n  div.innerHTML = innerHTML;\n  while (div.childNodes.length > 0) {\n    template.content.appendChild(div.childNodes[0]);\n  }\n  return template;\n}\n\n// Invoke basic style shimming with ShadowCSS.\nfunction shimTemplateStyles(template, tag) {\n  window.WebComponents.ShadowCSS.shimStyling(template.content, tag);\n}\n","/**\n * Helper function to create a symbol that can be used for associating private\n * data with an element.\n *\n * Mixins and component classes often want to associate private data with an\n * element instance, but JavaScript does not have direct support for true\n * private properties. One approach is to use the\n * [Symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol)\n * data type to set and retrieve data on an element.\n *\n * Unfortunately, the Symbol type is not available in Internet Explorer 11. The\n * `createSymbol` helper function exists as a workaround for IE 11. Rather than\n * returning a true Symbol, it simply returns an underscore-prefixed string.\n *\n * Usage:\n *\n *     const fooSymbol = createSymbol('foo');\n *\n *     class MyElement extends HTMLElement {\n *       get foo() {\n *         return this[fooSymbol];\n *       }\n *       set foo(value) {\n *         this[fooSymbol] = value;\n *       }\n *     }\n *\n * In IE 11, this sample will \"hide\" data behind an instance property this._foo.\n * The use of the underscore is meant to reduce (not eliminate) the potential\n * for name conflicts, and discourage (not prevent) external access to this\n * data. In modern browsers, the above code will eliminate the potential of\n * naming conflicts, and better hide the data behind a real Symbol.\n *\n * @function createSymbol\n * @param {string} description - A string to identify the symbol when debugging\n */\nexport default function createSymbol(description) {\n  return typeof Symbol === 'function' ?\n    Symbol(description) :\n    `_${description}`;\n}\n","import createSymbol from './createSymbol';\nimport toggleClass from './toggleClass';\n\n\n// Symbols for private data members on an element.\nconst safeToSetAttributesSymbol = createSymbol('safeToSetAttributes');\nconst pendingAttributesSymbol = createSymbol('pendingAttributes');\nconst pendingClassesSymbol = createSymbol('pendingClasses');\n\n\n/**\n * Helper functions for updating attributes, including the `class` attribute.\n */\nexport default {\n\n  /**\n   * Perform any pending updates to attributes and classes.\n   *\n   * This writes any `setAttribute` or `toggleClass` values that were performed\n   * before an element was attached to the document for the first time.\n   *\n   * This method should be called by mixins/components in their\n   * `connectedCallback`. If mulitple mixins/components invoke this during the\n   * same `connectedCallback`, only the first call will have any effect. The\n   * subsequent calls will be harmless.\n   *\n   * @param {HTMLElement} element - The element being added to the document.\n   */\n  connected(element) {\n    element[safeToSetAttributesSymbol] = true;\n\n    // Set any pending attributes.\n    if (element[pendingAttributesSymbol]) {\n      for (let attribute in element[pendingAttributesSymbol]) {\n        const value = element[pendingAttributesSymbol][attribute];\n        setAttributeToElement(element, attribute, value);\n      }\n      element[pendingAttributesSymbol] = null;\n    }\n\n    // Set any pending classes.\n    if (element[pendingClassesSymbol]) {\n      for (let className in element[pendingClassesSymbol]) {\n        const value = element[pendingClassesSymbol][className];\n        toggleClass(element, className, value);\n      }\n      element[pendingClassesSymbol] = null;\n    }\n  },\n\n  /**\n   * Set/unset the attribute with the indicated name.\n   *\n   * This method exists primarily to handle the case where an element wants to\n   * set a default property value that should be reflected as an attribute. An\n   * important limitation of custom element consturctors is that they cannot\n   * set attributes. A call to `setAttribute` during the constructor will\n   * be deferred until the element is connected to the document.\n   *\n   * @param {string} attribute - The name of the *attribute* (not property) to set.\n   * @param {object} value - The value to set. If null, the attribute will be removed.\n   */\n  setAttribute(element, attribute, value) {\n    if (element[safeToSetAttributesSymbol]) {\n      // Safe to set attributes immediately.\n      setAttributeToElement(element, attribute, value);\n    } else {\n      // Defer setting attributes until the first time we're connected.\n      if (!element[pendingAttributesSymbol]) {\n        element[pendingAttributesSymbol] = {};\n      }\n      element[pendingAttributesSymbol][attribute] = value;\n    }\n  },\n\n  /**\n   * Set/unset the class with the indicated name.\n   *\n   * This method exists primarily to handle the case where an element wants to\n   * set a default property value that should be reflected as as class. An\n   * important limitation of custom element consturctors is that they cannot\n   * set attributes, including the `class` attribute. A call to\n   * `toggleClass` during the constructor will be deferred until the element\n   * is connected to the document.\n   *\n   * @param {string} className - The name of the class to set.\n   * @param {object} value - True to set the class, false to remove it.\n   */\n  toggleClass(element, className, value) {\n    if (element[safeToSetAttributesSymbol]) {\n      // Safe to set class immediately.\n      toggleClass(element, className, value);\n    } else {\n      // Defer setting class until the first time we're connected.\n      if (!element[pendingClassesSymbol]) {\n        element[pendingClassesSymbol] = {};\n      }\n      element[pendingClassesSymbol][className] = value;\n    }\n  }\n\n};\n\n\n// Reflect the attribute to the given element.\n// If the value is null, remove the attribute.\nfunction setAttributeToElement(element, attributeName, value) {\n  if (value === null || typeof value === 'undefined') {\n    element.removeAttribute(attributeName);\n  } else {\n    const text = String(value);\n    // Avoid recursive attributeChangedCallback calls.\n    if (element.getAttribute(attributeName) !== text) {\n      element.setAttribute(attributeName, value);\n    }\n  }\n}\n","import createSymbol from './createSymbol';\n\n/**\n * A collection of Symbol objects for standard component properties and methods.\n *\n * These Symbol objects are used to allow mixins and a component to internally\n * communicate, without exposing these properties and methods in the component's\n * public API.\n *\n * To use these Symbol objects in your own component, include this module and\n * then create a property or method whose key is the desired Symbol.\n *\n *     import 'SingleSelectionMixin' from 'basic-component-mixins/src/SingleSelectionMixin';\n *     import 'symbols' from 'basic-component-mixins/src/symbols';\n *\n *     class MyElement extends SingleSelectionMixin(HTMLElement) {\n *       [symbols.itemSelected](item, selected) {\n *         // This will be invoked whenever an item is selected/deselected.\n *       }\n *     }\n *\n * @module symbols\n */\nconst symbols = {\n\n  /**\n   * Symbol for the `defaults` property.\n   *\n   * This property can be used to set or override defaults that will be applied\n   * to a new component instance. When implementing this property, take care to\n   * first acquire any defaults defined by the superclass. The standard idiom is\n   * as follows:\n   *\n   *     get [symbols.defaults]() {\n   *       const defaults = super[symbols.defaults] || {};\n   *       // Set or override default values here\n   *       defaults.customProperty = false;\n   *       return defaults;\n   *     }\n   *\n   * @var {object} defaults\n   */\n  defaults: createSymbol('defaults'),\n\n  /**\n   * Symbol for the `dragging` property.\n   *\n   * Components like carousels often define animated CSS transitions for\n   * sliding effects. Such a transition should usually *not* be applied while\n   * the user is dragging, because a CSS animation will introduce a lag that\n   * makes the swipe feel sluggish. Instead, as long as the user is dragging\n   * with their finger down, the transition should be suppressed. When the\n   * user releases their finger, the transition can be restored, allowing the\n   * animation to show the carousel sliding into its final position.\n   *\n   * @type {boolean} true if a drag is in progress, false if not.\n   */\n  dragging: createSymbol('dragging'),\n\n  /**\n   * Symbol for the `goDown` method.\n   *\n   * This method is invoked when the user wants to go/navigate down.\n   *\n   * @function goDown\n   */\n  goDown: createSymbol('goDown'),\n\n  /**\n   * Symbol for the `goEnd` method.\n   *\n   * This method is invoked when the user wants to go/navigate to the end (e.g.,\n   * of a list).\n   *\n   * @function goEnd\n   */\n  goEnd: createSymbol('goEnd'),\n\n  /**\n   * Symbol for the `goLeft` method.\n   *\n   * This method is invoked when the user wants to go/navigate left.\n   *\n   * @function goLeft\n   */\n  goLeft: createSymbol('goLeft'),\n\n  /**\n   * Symbol for the `goRight` method.\n   *\n   * This method is invoked when the user wants to go/navigate right.\n   *\n   * @function goRight\n   */\n  goRight: createSymbol('goRight'),\n\n  /**\n   * Symbol for the `goStart` method.\n   *\n   * This method is invoked when the user wants to go/navigate to the start\n   * (e.g., of a list).\n   *\n   * @function goStart\n   */\n  goStart: createSymbol('goStart'),\n\n  /**\n   * Symbol for the `goUp` method.\n   *\n   * This method is invoked when the user wants to go/navigate up.\n   *\n   * @function goUp\n   */\n  goUp: createSymbol('goUp'),\n\n  /**\n   * Symbol for the `itemAdded` method.\n   *\n   * This method is invoked when a new item is added to a list.\n   *\n   * @function itemAdded\n   * @param {HTMLElement} item - the item being selected/deselected\n   */\n  itemAdded: createSymbol('itemAdded'),\n\n\n  /**\n   * Symbol for the `itemsChanged` method.\n   *\n   * This method is invoked when the underlying contents change. It is also\n   * invoked on component initialization – since the items have \"changed\" from\n   * being nothing.\n   */\n  itemsChanged: createSymbol('itemsChanged'),\n\n  /**\n   * Symbol for the `itemSelected` method.\n   *\n   * This method is invoked when an item becomes selected or deselected.\n   *\n   * @function itemSelected\n   * @param {HTMLElement} item - the item being selected/deselected\n   * @param {boolean} selected - true if the item is selected, false if not\n   */\n  itemSelected: createSymbol('itemSelected'),\n\n  /**\n   * Symbol for the `keydown` method.\n   *\n   * This method is invoked when an element receives a `keydown` event.\n   *\n   * @function keydown\n   * @param {KeyboardEvent} event - the event being processed\n   */\n  keydown: createSymbol('keydown'),\n\n  /**\n   * Symbol for the `template` property.\n   *\n   * This property returns a component's template.\n   *\n   * @type {string|HTMLElement}\n   */\n  template: createSymbol('template')\n};\n\nexport default symbols;\n","/**\n * Helper function for standard classList.toggle() behavior on old browsers,\n * namely IE 11.\n *\n * The standard\n * [classlist](https://developer.mozilla.org/en-US/docs/Web/API/Element/classList)\n * object has a `toggle()` function that supports a second Boolean parameter\n * that can be used to succinctly turn a class on or off. This feature is often\n * useful in designing custom elements, which may want to externally reflect\n * component state in a CSS class that can be used for styling purposes.\n *\n * Unfortunately, IE 11 does not support the Boolean parameter to\n * `classList.toggle()`. This helper function behaves like the standard\n * `toggle()`, including support for the Boolean parameter, so that it can be\n * used even on IE 11.\n *\n * @function toggleClass\n * @param {HTMLElement} element - The element to modify\n * @param {string} className - The class to add/remove\n * @param {boolean} [force] - Force the class to be added (if true) or removed\n *                            (if false)\n */\nexport default function toggleClass(element, className, force) {\n  const classList = element.classList;\n  const addClass = (typeof force === 'undefined') ?\n    !classList.contains(className) :\n    force;\n  if (addClass) {\n    classList.add(className);\n  } else {\n    classList.remove(className);\n  }\n  return addClass;\n}\n","/*\n * This file is transpiled to create an ES5-compatible distribution in which\n * the package's main feature(s) are available via the window.Basic global.\n * If you're already using ES6 yourself, ignore this file, and instead import\n * the source file(s) you want from the src folder.\n */\n\nimport CurrentAnchor from './src/CurrentAnchor';\n\nwindow.Basic = window.Basic || {};\nwindow.Basic.CurrentAnchor = CurrentAnchor;\n","import createSymbol from '../../basic-component-mixins/src/createSymbol';\nimport safeAttributes from '../../basic-component-mixins/src/safeAttributes';\nimport symbols from '../../basic-component-mixins/src/symbols';\nimport WrappedStandardElement from '../../basic-wrapped-standard-element/src/WrappedStandardElement';\n\n\n// Symbols for private data members on an element.\nconst areaLinkSymbol = createSymbol('areaLink');\n\n\n/**\n * An anchor (link) that highlights itself when its destination matches the\n * current location.\n *\n * [Live demo](http://basicwebcomponents.org/basic-web-components/packages/basic-current-anchor/)\n *\n * Such a link commonly appears in toolbars, side bars, and other navigation\n * elements. In these situations, you generally want the user to understand what\n * page or area the user is already on.\n *\n * When the link is current — when it points to the current location — the\n * link will have the CSS `current` class applied to it, and its `current`\n * property will be true.\n *\n * Note: one limitation of this component is that, by default, the link does\n * *not* show the standard link color (usually blue) and text decoration\n * (underline). However, in navigation elements like toolbars, you often will\n * want to explicitly specific link colors anyway, e.g., to reflect your\n * application's visual style and brand.\n *\n * @extends WrappedStandardElement\n */\nclass CurrentAnchor extends WrappedStandardElement.wrap('a') {\n\n  constructor() {\n    super();\n\n    window.addEventListener('popstate', event => {\n      refresh(this);\n    });\n\n    // Stupid Edge/IE \"support\" popstate, but don't fire it on hashchange.\n    // So we have to listen for hashchange as well, with the result that a\n    // standards-compliant browser may end up refreshing the link twice.\n    window.addEventListener('hashchange', event => {\n      refresh(this);\n    });\n\n    // Set defaults.\n    if (typeof this.areaLink === 'undefined') {\n      this.areaLink = this[symbols.defaults].areaLink;\n    }\n  }\n\n  /**\n   * True if the link points to an area within a site, not just a single page.\n   *\n   * If true, the matching rule to determine whether the link is current changes:\n   * an area link is considered to be current if the link's destination forms a\n   * prefix of the current location (instead of matching the complete URL).\n   *\n   * @type {boolean}\n   */\n  get areaLink() {\n    return this[areaLinkSymbol];\n  }\n  set areaLink(value) {\n    // Cast boolean or string values to boolean.\n    this[areaLinkSymbol] = (String(value) === 'true');\n    refresh(this);\n  }\n\n  connectedCallback() {\n    if (super.connectedCallback) { super.connectedCallback(); }\n    safeAttributes.connected(this);\n    refresh(this);\n  }\n\n  /**\n   * True if the link's destination matches the current page location.\n   *\n   * If this is true, the element will have an `current` CSS class applied to it.\n   *\n   * @type {boolean}\n   */\n  get current() {\n    return this.classList.contains('current');\n  }\n  set current(value) {\n    safeAttributes.toggleClass(this, 'current', value);\n    this.dispatchEvent(new CustomEvent('current-changed'));\n  }\n\n  get [symbols.defaults]() {\n    const defaults = super[symbols.defaults] || {};\n    defaults.areaLink = false;\n    return defaults;\n  }\n\n  // Augment href implementation so that changing href checks the active status.\n  get href() {\n    return super.href;\n  }\n  set href(value) {\n    super.href = value;\n    refresh(this);\n  }\n\n  get [symbols.template]() {\n    // Reset styles so that color can be specified from the outside without\n    // having to define a CSS variable.\n    return `\n      <style>\n      :host {\n        display: inline-block;\n      }\n\n      #inner {\n        color: inherit;\n        display: inline-block;\n        text-decoration: inherit;\n      }\n      </style>\n      <a id=\"inner\"><slot></slot></a>`;\n  }\n\n}\n\n\n// Update the current status of the element based on the current location.\nfunction refresh(element) {\n  const url = window.location.href;\n  let match;\n  if (element.areaLink) {\n    // Match prefix\n    let prefix = element.href;\n    // If prefix doesn't end in slash, add a slash.\n    // We want to avoid matching in the middle of a folder name.\n    if (prefix.length < url.length && prefix.substr(-1) !== '/') {\n      prefix += '/';\n    }\n    match = (url.substr(0, prefix.length) === prefix);\n  } else {\n    // Match whole path\n    match = (url === element.href);\n  }\n  element.current = match;\n}\n\n\ncustomElements.define('basic-current-anchor', CurrentAnchor);\n","import AttributeMarshallingMixin from '../../basic-component-mixins/src/AttributeMarshallingMixin';\nimport ComposableMixin from '../../basic-component-mixins/src/ComposableMixin';\nimport DistributedChildrenMixin from '../../basic-component-mixins/src/DistributedChildrenMixin';\nimport ShadowElementReferencesMixin from '../../basic-component-mixins/src/ShadowElementReferencesMixin';\nimport ShadowTemplateMixin from '../../basic-component-mixins/src/ShadowTemplateMixin';\n\n\n/**\n * A sample general-purpose base class for defining custom elements that mixes\n * in some common features: template stamping into a shadow root, shadow element\n * references, marshalling attributes to properties, and retrieving the children\n * distributed to a component.\n *\n * This base class is not special in any way, and is defined only as a\n * convenient shorthand for applying the mixins listed above. You can use this\n * class as a base class for your own elements, or easily create your own base\n * class by applying the same set of mixins.\n *\n * The ElementBase base class does not register itself as a custom element with\n * the browser, and hence cannot be independently instantiated.\n *\n * @mixes AttributeMarshallingMixin\n * @mixes ComposableMixin\n * @mixes DistributedChildrenMixin\n * @mixes ShadowElementReferencesMixin\n * @mixes ShadowTemplateMixin\n */\nclass ElementBase extends ComposableMixin(HTMLElement).compose(\n  ShadowTemplateMixin,          // before node finding, so shadow root is populated\n  ShadowElementReferencesMixin, // before marshalling, so properties can use refs\n  AttributeMarshallingMixin,\n  DistributedChildrenMixin\n) {}\n\nexport default ElementBase;\n","import ElementBase from '../../basic-element-base/src/ElementBase';\nimport symbols from '../../basic-component-mixins/src/symbols';\n\n\n/*\n * A set of events which, if fired by the inner standard element, should be\n * re-raised by the custom element. (We only need to do that under native\n * Shadow DOM, not the polyfill.)\n *\n * These are events which are spec'ed to NOT get retargetted across a Shadow DOM\n * boundary, organized by which element(s) raise the events. To properly\n * simulate these, we will need to listen for the real events, then re-raise a\n * simulation of the original event. For more information, see\n * https://www.w3.org/TR/shadow-dom/#h-events-that-are-not-leaked-into-ancestor-trees.\n *\n * It appears that we do *not* need to re-raise the non-bubbling \"focus\" and\n * \"blur\" events. These appear to be automatically re-raised as expected -- but\n * it's not clear why that happens.\n *\n * The list below is reasonably complete. It omits elements that cannot be\n * wrapped (see class notes above). Also, we haven't actually tried wrapping\n * every element in this list; some of the more obscure ones might not actually\n * work as expected, but it was easier to include them for completeness than\n * to actually verify whether or not the element can be wrapped.\n */\nconst reraiseEvents = {\n  address: ['scroll'],\n  blockquote: ['scroll'],\n  caption: ['scroll'],\n  center: ['scroll'],\n  dd: ['scroll'],\n  dir: ['scroll'],\n  div: ['scroll'],\n  dl: ['scroll'],\n  dt: ['scroll'],\n  fieldset: ['scroll'],\n  form: ['reset', 'scroll'],\n  frame: ['load'],\n  h1: ['scroll'],\n  h2: ['scroll'],\n  h3: ['scroll'],\n  h4: ['scroll'],\n  h5: ['scroll'],\n  h6: ['scroll'],\n  iframe: ['load'],\n  img: ['abort', 'error', 'load'],\n  input: ['abort', 'change', 'error', 'select', 'load'],\n  keygen: ['reset', 'select'],\n  li: ['scroll'],\n  link: ['load'],\n  menu: ['scroll'],\n  object: ['error', 'scroll'],\n  ol: ['scroll'],\n  p: ['scroll'],\n  script: ['error', 'load'],\n  select: ['change', 'scroll'],\n  tbody: ['scroll'],\n  tfoot: ['scroll'],\n  thead: ['scroll'],\n  textarea: ['change', 'select', 'scroll']\n};\n\n\n// Keep track of which re-raised events should bubble.\nconst eventBubbles = {\n  abort: true,\n  change: true,\n  reset: true\n};\n\n\n// Elements which are display: block by default.\n// Source: https://developer.mozilla.org/en-US/docs/Web/HTML/Block-level_elements\nconst blockElements = [\n  'address',\n  'article',\n  'aside',\n  'blockquote',\n  'canvas',\n  'dd',\n  'div',\n  'dl',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'header',\n  'hgroup',\n  'hr',\n  'li',\n  'main',\n  'nav',\n  'noscript',\n  'ol',\n  'output',\n  'p',\n  'pre',\n  'section',\n  'table',\n  'tfoot',\n  'ul',\n  'video'\n];\n\n\n/**\n * Wraps a standard HTML element so that the standard behavior can then be\n * extended.\n *\n * [Live demo](http://basicwebcomponents.org/basic-web-components/packages/basic-wrapped-standard-element/)\n *\n * See also [basic-autosize-textarea](../basic-autosize-textarea) and\n * [basic-current-anchor](../basic-current-anchor). The former uses\n * WrappedStandardElement to wrap a standard `<textarea>` and `<a>`,\n * respectively.\n *\n * The Custom Elements spec does not currently (as of March 2016) allow you to\n * extend the behavior of a standard HTML element like `<a>` or `<button>`.\n * As a partial workaround, the WrappedStandardElement class can create a class\n * for you that wraps an instance of a standard HTML element. For example, the\n * code below creates a class that will wrap an instance of a standard `<a>`\n * element:\n *\n *     class WrappedA extends WrappedStandardElement.wrap('a') {\n *       customMethod() { ... }\n *     }\n *     customElements.define('wrapped-a', WrappedA);\n *\n * An instance of the resulting class will look to the user like an instance of\n * the standard element class it wraps. The resulting class will *not* be an\n * `instanceof` the standard class (here, HTMLAnchorElement). Another limitation\n * is that the resulting `<wrapped-a>` will not automatically pick up CSS styles\n * for standard `<a>` elements. However, the resulting class *can* be extended.\n * E.g., instances of the above class have a `customMethod()` available to them.\n *\n * Any properties defined by the original standard element will be exposed on\n * the resulting wrapper class, and calls to get or set those properties will be\n * delegated to the wrapped element instance. Continuing the above example:\n *\n *     let wrapped = document.createElement('wrapped-a');\n *     wrapped.href = 'http://example.com/';\n *     wrapped.textContent = 'Click here';\n *\n * Here, the created custom `<wrapped-a>` element will contain inside its\n * shadow tree an instance of a standard `<a>` element. The call to set the\n * wrapper's `href` property will ultimately set the `href` on the inner link.\n * Moreover, the text content of the `<wrapped-a>` element will appear inside\n * the inner link. The result of all this is that the user will see what *looks*\n * like a normal link, just as if you had written\n * `<a href=\"http://example.com/\">Click here</a>`. However, the actual element\n * will be an instance of your custom class, with whatever behavior you've\n * defined for it.\n *\n * Wrapped elements should raise the same events as the original standard\n * elements. E.g., if you wrap an `<img>` element, the wrapped result will raise\n * the standard `load` event as expected.\n *\n * Some elements, such as `<body>`, `<html>`, and `<style>` cannot be wrapped\n * and still achieve their standard behavior.\n *\n * @extends ElementBase\n */\nclass WrappedStandardElement extends ElementBase {\n\n  constructor() {\n    super();\n\n    // Listen for any events raised by the inner element which will not\n    // automatically be retargetted across the Shadow DOM boundary, and re-raise\n    // those events when they happen.\n    //\n    // Note: It's unclear why we need to do this in the Shadow DOM polyfill.\n    // In theory, events in the light DOM should bubble as normal. But this\n    // code appears to be required in the polyfill case as well.\n    const eventNames = reraiseEvents[this.extends] || [];\n    eventNames.forEach(eventName => {\n      this.inner.addEventListener(eventName, realEvent => {\n        const event = new Event(eventName, {\n          bubbles: eventBubbles[eventName] || false\n        });\n        this.dispatchEvent(event);\n      });\n    });\n  }\n\n  /**\n   * A description for the user of the element's purpose on the page. Setting\n   * this applies the label to the inner element, ensuring that screen readers\n   * and other assistive technologies will provide a meaningful description to\n   * the user.\n   *\n   * @type {string}\n   */\n  get ariaLabel() {\n    return this.inner.getAttribute('aria-label');\n  }\n  set ariaLabel(label) {\n    // Propagate the ARIA label to the inner textarea.\n    this.inner.setAttribute('aria-label', label);\n  }\n\n  /**\n   * Returns a reference to the inner standard HTML element.\n   *\n   * @type {HTMLElement}\n   */\n  get inner() {\n    return this.$.inner;\n  }\n\n  /**\n   * The template copied into the shadow tree of new instances of this element.\n   *\n   * The default value of this property is a template that includes an instance\n   * the standard element being wrapped, with a `<slot>` element inside that\n   * to pick up the element's light DOM content. For example, if you wrap an\n   * `<a>` element, then the default template will look like:\n   *\n   *     <template>\n   *       <style>\n   *       :host {\n   *         display: inline-block;\n   *       }\n   *       </style>\n   *       <a id=\"inner\">\n   *         <slot></slot>\n   *       </a>\n   *     </template>\n   *\n   * The `display` styling applied to the host will be `block` for elements that\n   * are block elements by default, and `inline-block` (not `inline`) for other\n   * elements.\n   *\n   * If you'd like the template to include other elements, then override this\n   * property and return a template of your own. The template should include an\n   * instance of the standard HTML element you are wrapping, and the ID of that\n   * element should be \"inner\".\n   *\n   * @type {(string|HTMLTemplateElement)}\n   */\n  get [symbols.template]() {\n    const display = blockElements.indexOf(this.extends) >= 0 ?\n      'block' :\n      'inline-block';\n    return `<style>:host { display: ${display}}</style><${this.extends} id=\"inner\"><slot></slot></${this.extends}`;\n  }\n\n  /**\n   * Creates a class that wraps a standard HTML element.\n   *\n   * Note that the resulting class is a subclass of WrappedStandardElement, not\n   * the standard class being wrapped. E.g., if you call\n   * `WrappedStandardElement.wrap('a')`, you will get a class whose shadow tree\n   * will include an anchor element, but the class will *not* inherit from\n   * HTMLAnchorElement.\n   *\n   * @param {string} extendsTag - the standard HTML element tag to extend\n   */\n  static wrap(extendsTag) {\n\n    // Create the new class.\n    class Wrapped extends WrappedStandardElement {}\n\n    // Indicate which tag it wraps.\n    Wrapped.prototype.extends = extendsTag;\n\n    // Create getter/setters that delegate to the wrapped element.\n    const element = document.createElement(extendsTag);\n    const extendsPrototype = element.constructor.prototype;\n    const names = Object.getOwnPropertyNames(extendsPrototype);\n    names.forEach(name => {\n        const descriptor = Object.getOwnPropertyDescriptor(extendsPrototype, name);\n        const delegate = createPropertyDelegate(name, descriptor);\n        Object.defineProperty(Wrapped.prototype, name, delegate);\n    });\n\n    return Wrapped;\n  }\n\n}\n\n\nfunction createPropertyDelegate(name, descriptor) {\n  const delegate = {\n    configurable: descriptor.configurable,\n    enumerable: descriptor.enumerable,\n  };\n  if (descriptor.get) {\n    delegate.get = function() {\n      return this.inner[name];\n    };\n  }\n  if (descriptor.set) {\n    delegate.set = function(value) {\n      this.inner[name] = value;\n    };\n  }\n  if (descriptor.writable) {\n    delegate.writable = descriptor.writable;\n  }\n  return delegate;\n}\n\n\nexport default WrappedStandardElement;\n"],"preExisting":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}