{"version":3,"sources":["node_modules/browser-pack/_prelude.js","packages/basic-animation-stage/src/AnimationStage.js","packages/basic-component-mixins/src/AttributeMarshallingMixin.js","packages/basic-component-mixins/src/ComposableMixin.js","packages/basic-component-mixins/src/ContentItemsMixin.js","packages/basic-component-mixins/src/DistributedChildrenContentMixin.js","packages/basic-component-mixins/src/DistributedChildrenMixin.js","packages/basic-component-mixins/src/FractionalSelectionMixin.js","packages/basic-component-mixins/src/PlayControlsMixin.js","packages/basic-component-mixins/src/SelectionAnimationMixin.js","packages/basic-component-mixins/src/SelectionAriaActiveMixin.js","packages/basic-component-mixins/src/ShadowElementReferencesMixin.js","packages/basic-component-mixins/src/ShadowTemplateMixin.js","packages/basic-component-mixins/src/SingleSelectionMixin.js","packages/basic-component-mixins/src/TimerSelectionMixin.js","packages/basic-component-mixins/src/createSymbol.js","packages/basic-component-mixins/src/microtask.js","packages/basic-component-mixins/src/safeAttributes.js","packages/basic-component-mixins/src/symbols.js","packages/basic-component-mixins/src/toggleClass.js","packages/basic-element-base/src/ElementBase.js","packages/basic-slideshow-with-controls/globals.js","packages/basic-slideshow-with-controls/src/SlideshowWithControls.js","packages/basic-slideshow/src/Slideshow.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","_ElementBase","_ContentItemsMixin","_DistributedChildrenContentMixin","_FractionalSelectionMixin","_SelectionAnimationMixin","_SelectionAriaActiveMixin","_SingleSelectionMixin","_symbols","base","_ElementBase2","default","compose","_ContentItemsMixin2","_DistributedChildrenContentMixin2","_FractionalSelectionMixin2","_SelectionAnimationMixin2","_SelectionAriaActiveMixin2","_SingleSelectionMixin2","AnimationStage","_symbols2","defaults","_get","prototype","__proto__","Object","getPrototypeOf","this","selectionRequired","template","customElements","define","attributeToPropertyName","attributeName","propertyName","attributeToPropertyNames","hypenRegEx","replace","match","toUpperCase","attributesForClass","classFn","HTMLElement","baseClass","constructor","baseAttributes","propertyNames","getOwnPropertyNames","setterNames","filter","getOwnPropertyDescriptor","set","attributes","map","setterName","propertyNameToAttribute","diff","attribute","indexOf","concat","propertyNamesToAttributes","uppercaseRegEx","toLowerCase","_safeAttributes","AttributeMarshalling","_base","_classCallCheck","_possibleConstructorReturn","apply","arguments","_inherits","_createClass","key","value","oldValue","newValue","_safeAttributes2","connected","setAttribute","className","toggleClass","get","composeClass","mixin","Subclass","_base2","copyOwnProperties","NON_MIXABLE_OBJECT_PROPERTIES","source","target","ignorePropertyNames","undefined","forEach","name","descriptor","defineProperty","Composable","_len","mixins","Array","_key","reduce","filterAuxiliaryElements","items","auxiliaryTags","item","localName","_createSymbol","_toggleClass","itemsSymbol","_createSymbol2","itemInitializedSymbol","ContentItems","itemsChanged","itemAdded","itemSelected","selected","_toggleClass2","_this2","dispatchEvent","CustomEvent","content","_microtask","DistributedChildrenContent","_this","shadowRoot","slots","querySelectorAll","slot","addEventListener","event","contentChanged","_microtask2","distributedChildren","console","warn","_set","expandContentElements","nodes","includeTextNodes","_ref","expanded","node","isSlot","HTMLSlotElement","assignedNodes","flatten","Text","flattened","_toConsumableArray","DistributedChildren","children","childNodes","strings","distributedChildNodes","child","textContent","join","FractionalSelection","selectedFraction","selectedFractionSymbol","helpers","dampedSelection","selection","itemCount","bound","damped","damping","x","y","elementSelection","element","selectedIndex","selectionParts","index","Math","ceil","floor","fraction","wrappedSelection","wrappedSelectionParts","wrap","PlayControls","$","previousButton","selectPrevious","playButton","playing","nextButton","selectNext","keydown","handled","keyCode","baseTemplate","SelectionAnimation","selectionAnimationDuration","selectionAnimationEffect","selectionAnimationKeyframes","dragging","_resetAnimations","renderSelection","draggingSymbol","previousValue","resetAnimationsOnNextRenderSymbol","selectionAnimationDurationSymbol","selectionAnimationEffectSymbol","standardEffectKeyframes","selectionAnimationKeyframesSymbol","animateSelection","fromSelection","toSelection","keyframes","playingAnimationSymbol","timings","effectTimingsForSelectionAnimation","selectionWraps","selectionIndex","totalSteps","stepsToIndex","forward","nextUpIndex","isItemIndexInBounds","lastAnimationDetails","timing","showItem","animation","animate","animationSymbol","endDelay","onfinish","selectionAnimationFinished","lastAnimationSymbol","getAnimationForItemIndex","duration","fill","pause","previousSelection","previousSelectionSymbol","renderSelectionInstantly","animationFractions","animationFractionsForSelection","animationFraction","setAnimationFraction","animations","cancel","details","itemIndex","currentTime","flag","style","visibility","allowWrap","steps","wrapSteps","abs","toIndex","direction","totalDuration","stepDuration","positionInSequence","delay","crossfade","opacity","reveal","transform","zIndex","revealWithFade","showAdjacent","slide","slideWithGap","idCount","SelectionAriaActive","getAttribute","role","id","baseId","itemId","removeAttribute","ShadowElementReferences","nodesWithIds","createTemplateWithInnerHTML","innerHTML","document","createElement","div","appendChild","shimTemplateStyles","tag","window","WebComponents","ShadowCSS","shimStyling","ShadowTemplate","ShadowDOMPolyfill","root","attachShadow","mode","clone","importNode","selectIndex","count","boundedIndex","max","min","previousIndex","trackSelectedItem","previousSelectedItem","selectedItem","indexInCurrentItems","previousSelectedIndex","newSelectedIndex","updatePossibleNavigations","canSelectNext","canSelectPrevious","canSelectNextSymbol","canSelectPreviousSymbol","selectionRequiredSymbol","selectionWrapsSymbol","externalSelectedIndexSymbol","externalSelectedItemSymbol","internalSelectedIndexSymbol","internalSelectedItemSymbol","SingleSelection","newIndex","previousCanSelectNext","previousCanSelectPrevious","hasItems","detail","String","clearTimer","timerTimeoutSymbol","clearTimeout","restartTimer","startTimer","setTimeout","selectNextWithWrap","selectionTimerDuration","selectFirst","playingSymbol","selectionTimerDurationSymbol","TimerSelection","previousPlaying","parsed","play","parseInt","createSymbol","description","Symbol","microtask","callback","callbacks","push","counter","executeCallbacks","shift","createTextNode","observer","MutationObserver","observe","characterData","setAttributeToElement","text","safeToSetAttributesSymbol","pendingAttributesSymbol","pendingClassesSymbol","_value","_toggleClass3","symbols","goDown","goEnd","goLeft","goRight","goStart","goUp","force","classList","addClass","contains","add","remove","_AttributeMarshallingMixin","_ComposableMixin","_DistributedChildrenMixin","_ShadowElementReferencesMixin","_ShadowTemplateMixin","ElementBase","_ComposableMixin2","_ShadowTemplateMixin2","_ShadowElementReferencesMixin2","_AttributeMarshallingMixin2","_DistributedChildrenMixin2","_SlideshowWithControls","Basic","SlideshowWithControls","_SlideshowWithControls2","_Slideshow","_PlayControlsMixin2","_PlayControlsMixin3","_Slideshow2","_AnimationStage","_TimerSelectionMixin","_AnimationStage2","_TimerSelectionMixin2","Slideshow"],"mappings":"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","file":"basic-slideshow-with-controls.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import ElementBase from '../../basic-element-base/src/ElementBase';\nimport ContentItemsMixin from '../../basic-component-mixins/src/ContentItemsMixin';\nimport DistributedChildrenContentMixin from '../../basic-component-mixins/src/DistributedChildrenContentMixin';\nimport FractionalSelectionMixin from '../../basic-component-mixins/src/FractionalSelectionMixin';\nimport SelectionAnimationMixin from '../../basic-component-mixins/src/SelectionAnimationMixin';\nimport SelectionAriaActiveMixin from '../../basic-component-mixins/src/SelectionAriaActiveMixin';\nimport SingleSelectionMixin from '../../basic-component-mixins/src/SingleSelectionMixin';\nimport symbols from '../../basic-component-mixins/src/symbols';\n\n\nconst base = ElementBase.compose(\n  ContentItemsMixin,\n  DistributedChildrenContentMixin,\n  FractionalSelectionMixin,\n  SelectionAnimationMixin,\n  SelectionAriaActiveMixin,\n  SingleSelectionMixin\n);\n\n/**\n * Presents a single item as selected, providing animated transitions when the\n * selection changes. The same animation can be shown at an arbitrary point,\n * generally used to reflect a user-controlled touch or trackpad drag operation\n * in progress.\n *\n * [Live demo](http://basicwebcomponents.org/basic-web-components/packages/basic-animation-stage/)\n *\n * This component is intended to be used as a programmatic rendering surface for\n * components which want to show transitional effects.\n *\n * The component uses [SelectionAnimationMixin](../basic-component-mixins/docs/SelectionAnimationMixin.md)\n * mixin, which in turn uses the Web Animations API. For use on browsers which\n * do not support that API natively, you will need to load the\n * [Web Animations polyfill](https://github.com/web-animations/web-animations-js).\n *\n * For a simpler component that exhibits only a sliding effect, but does not\n * require the Web Animations API, see [basic-sliding-viewport](../basic-sliding-viewport).\n *\n * @extends ElementBase\n * @mixes ContentItemsMixin\n * @mixes DistributedChildrenContentMixin\n * @mixes SelectionAnimationMixin\n * @mixes SelectionAriaActiveMixin\n * @mixes SingleSelectionMixin\n */\nclass AnimationStage extends base {\n\n  get [symbols.defaults]() {\n    const defaults = super[symbols.defaults] || {};\n    defaults.selectionRequired = true;\n    return defaults;\n  }\n\n  get [symbols.template]() {\n    return `\n      <style>\n      :host {\n        overflow: hidden;\n        position: relative;\n      }\n\n      #container ::slotted(*) {\n        height: 100%;\n        object-fit: contain;\n        position: absolute;\n        width: 100%;\n        will-change: transform;\n      }\n      </style>\n\n      <div id=\"container\" role=\"none\">\n        <slot></slot>\n      </div>\n    `;\n  }\n\n}\n\n\ncustomElements.define('basic-animation-stage', AnimationStage);\nexport default AnimationStage;\n","import safeAttributes from './safeAttributes';\n\n\n// Memoized maps of attribute to property names and vice versa.\nconst attributeToPropertyNames = {};\nconst propertyNamesToAttributes = {};\n\n\n/* Exported function extends a base class with AttributeMarshalling. */\nexport default (base) => {\n\n  /**\n   * Mixin which marshalls attributes to properties and vice versa.\n   *\n   * If your component exposes a setter for a property, it's generally a good\n   * idea to let devs using your component be able to set that property in HTML\n   * via an element attribute. You can code that yourself by writing an\n   * `attributeChangedCallback`, or you can use this mixin to get a degree of\n   * automatic support.\n   *\n   * This mixin implements an `attributeChangedCallback` that will attempt to\n   * convert a change in an element attribute into a call to the corresponding\n   * property setter. Attributes typically follow hyphenated names (\"foo-bar\"),\n   * whereas properties typically use camelCase names (\"fooBar\"). This mixin\n   * respects that convention, automatically mapping the hyphenated attribute\n   * name to the corresponding camelCase property name.\n   *\n   * Example: You define a component using this mixin:\n   *\n   *     class MyElement extends AttributeMarshallingMixin(HTMLElement) {\n   *       get fooBar() { return this._fooBar; }\n   *       set fooBar(value) { this._fooBar = value; }\n   *     }\n   *     customElements.define('my-element', MyElement);\n   *\n   * If someone then instantiates your component in HTML:\n   *\n   *     <my-element foo-bar=\"Hello\"></my-element>\n   *\n   * Then, after the element has been upgraded, the `fooBar` setter will\n   * automatically be invoked with the initial value \"Hello\".\n   *\n   * For the time being, this mixin only supports string-valued properties.\n   * If you'd like to convert string attributes to other types (numbers,\n   * booleans), you need to implement `attributeChangedCallback` yourself.\n   */\n  class AttributeMarshalling extends base {\n\n    /*\n     * Handle a change to the attribute with the given name.\n     */\n    attributeChangedCallback(attributeName, oldValue, newValue) {\n      if (super.attributeChangedCallback) { super.attributeChangedCallback(); }\n      const propertyName = attributeToPropertyName(attributeName);\n      // If the attribute name corresponds to a property name, set the property.\n      // Ignore standard HTMLElement properties handled by the DOM.\n      if (propertyName in this && !(propertyName in HTMLElement.prototype)) {\n        this[propertyName] = newValue;\n      }\n    }\n\n    connectedCallback() {\n      if (super.connectedCallback) { super.connectedCallback(); }\n      safeAttributes.connected(this);\n    }\n\n    static get observedAttributes() {\n      return attributesForClass(this);\n    }\n\n    /**\n     * Set/unset the attribute with the indicated name.\n     *\n     * This method exists primarily to handle the case where an element wants to\n     * set a default property value that should be reflected as an attribute. An\n     * important limitation of custom element consturctors is that they cannot\n     * set attributes. A call to `reflectAttribute` during the constructor will\n     * be deferred until the element is connected to the document.\n     *\n     * @param {string} attribute - The name of the *attribute* (not property) to set.\n     * @param {object} value - The value to set. If null, the attribute will be removed.\n     */\n    reflectAttribute(attribute, value) {\n      return safeAttributes.setAttribute(this, attribute, value);\n    }\n\n    /**\n     * Set/unset the class with the indicated name.\n     *\n     * This method exists primarily to handle the case where an element wants to\n     * set a default property value that should be reflected as as class. An\n     * important limitation of custom element consturctors is that they cannot\n     * set attributes, including the `class` attribute. A call to\n     * `reflectClass` during the constructor will be deferred until the element\n     * is connected to the document.\n     *\n     * @param {string} className - The name of the class to set.\n     * @param {object} value - True to set the class, false to remove it.\n     */\n    reflectClass(className, value) {\n      return safeAttributes.toggleClass(this, className, value);\n    }\n\n  }\n\n  return AttributeMarshalling;\n};\n\n\n// Convert hyphenated foo-bar attribute name to camel case fooBar property name.\nfunction attributeToPropertyName(attributeName) {\n  let propertyName = attributeToPropertyNames[attributeName];\n  if (!propertyName) {\n    // Convert and memoize.\n    const hypenRegEx = /-([a-z])/g;\n    propertyName = attributeName.replace(hypenRegEx,\n        match => match[1].toUpperCase());\n    attributeToPropertyNames[attributeName] = propertyName;\n  }\n  return propertyName;\n}\n\nfunction attributesForClass(classFn) {\n\n  // We treat the element base classes as if they have no attributes, since we\n  // don't want to receive attributeChangedCallback for them.\n  if (classFn === HTMLElement || classFn === Object) {\n    return [];\n  }\n\n  // Get attributes for parent class.\n  const baseClass = Object.getPrototypeOf(classFn.prototype).constructor;\n  const baseAttributes = attributesForClass(baseClass);\n\n  // Get attributes for this class.\n  const propertyNames = Object.getOwnPropertyNames(classFn.prototype);\n  const setterNames = propertyNames.filter(propertyName =>\n    typeof Object.getOwnPropertyDescriptor(\n        classFn.prototype, propertyName).set === 'function');\n  const attributes = setterNames.map(setterName =>\n      propertyNameToAttribute(setterName));\n\n  // Merge.\n  const diff = attributes.filter(attribute =>\n      baseAttributes.indexOf(attribute) < 0);\n  return baseAttributes.concat(diff);\n}\n\n// Convert a camel case fooBar property name to a hyphenated foo-bar attribute.\nfunction propertyNameToAttribute(propertyName) {\n  let attribute = propertyNamesToAttributes[propertyName];\n  if (!attribute) {\n    // Convert and memoize.\n    const uppercaseRegEx = /([A-Z])/g;\n    attribute = propertyName.replace(uppercaseRegEx, '-$1').toLowerCase();\n  }\n  return attribute;\n}\n","/* Exported function extends a base class with Composable. */\nexport default (base) => {\n\n  /**\n   * Mixin to make a class more easily composable with other mixins.\n   *\n   * This mixin contributes a `compose` method that applies a set of mixin\n   * functions and returns the resulting new class. This sugar can make the\n   * application of many mixins at once easier to read.\n   */\n  class Composable extends base {\n\n    /**\n     * Apply a set of mixin functions or mixin objects to the present class and\n     * return the new class.\n     *\n     * Instead of writing:\n     *\n     *     let MyClass = Mixin1(Mixin2(Mixin3(Mixin4(Mixin5(BaseClass)))));\n     *\n     * You can write:\n     *\n     *     let MyClass = ComposableMixin(BaseClass).compose(\n     *       Mixin1,\n     *       Mixin2,\n     *       Mixin3,\n     *       Mixin4,\n     *       Mixin5\n     *     );\n     *\n     * This function can also take mixin objects. A mixin object is just a\n     * shorthand for a mixin function that creates a new subclass with the given\n     * members. The mixin object's members are *not* copied directly onto the\n     * prototype of the base class, as with traditional mixins.\n     *\n     * In addition to providing syntactic sugar, this mixin can be used to\n     * define a class in ES5, which lacks ES6's `class` keyword.\n     *\n     * @param {...mixins} mixins - A set of mixin functions or objects to apply.\n     */\n    static compose(...mixins) {\n      // We create a new subclass for each mixin in turn. The result becomes\n      // the base class extended by any subsequent mixins. It turns out that\n      // we can use Array.reduce() to concisely express this, using the current\n      // object as the seed for reduce().\n      return mixins.reduce(composeClass, this);\n    }\n\n  }\n\n  return Composable;\n};\n\n\n// Properties defined by Object that we don't want to mixin.\nconst NON_MIXABLE_OBJECT_PROPERTIES = [\n  'constructor'\n];\n\n/*\n * Apply the mixin to the given base class to return a new class.\n * The mixin can either be a function that returns the modified class, or a\n * plain object whose members will be copied to the new class' prototype.\n */\nfunction composeClass(base, mixin) {\n  if (typeof mixin === 'function') {\n    // Mixin function\n    return mixin(base);\n  } else {\n    // Mixin object\n    class Subclass extends base {}\n    copyOwnProperties(mixin, Subclass.prototype, NON_MIXABLE_OBJECT_PROPERTIES);\n    return Subclass;\n  }\n}\n\n\n/*\n * Copy the given properties/methods to the target.\n * Return the updated target.\n */\nfunction copyOwnProperties(source, target, ignorePropertyNames = []) {\n  Object.getOwnPropertyNames(source).forEach(name => {\n    if (ignorePropertyNames.indexOf(name) < 0) {\n      const descriptor = Object.getOwnPropertyDescriptor(source, name);\n      Object.defineProperty(target, name, descriptor);\n    }\n  });\n  return target;\n}\n","import createSymbol from './createSymbol';\nimport toggleClass from './toggleClass';\nimport symbols from './symbols';\n\n\n// Symbols for private data members on an element.\nconst itemsSymbol = createSymbol('items');\nconst itemInitializedSymbol = createSymbol('itemInitialized');\n\n\n/* Exported function extends a base class with ContentItems. */\nexport default (base) => {\n\n  /**\n   * Mixin which maps content semantics (elements) to list item semantics.\n   *\n   * Items differ from element contents in several ways:\n   *\n   * * They are often referenced via index.\n   * * They may have a selection state.\n   * * It's common to do work to initialize the appearance or state of a new\n   *   item.\n   * * Auxiliary invisible child elements are filtered out and not counted as\n   *   items. Auxiliary elements include link, script, style, and template\n   *   elements. This filtering ensures that those auxiliary elements can be\n   *   used in markup inside of a list without being treated as list items.\n   *\n   * This mixin expects a component to provide a `content` property returning a\n   * raw set of elements. You can provide that yourself, or use\n   * [DistributedChildrenContentMixin](DistributedChildrenContentMixin.md).\n   *\n   * The most commonly referenced property defined by this mixin is the `items`\n   * property. To avoid having to do work each time that property is requested,\n   * this mixin supports an optimized mode. If you invoke the `contentChanged`\n   * method when the set of items changes, the mixin concludes that you'll take\n   * care of notifying it of future changes, and turns on the optimization. With\n   * that on, the mixin saves a reference to the computed set of items, and will\n   * return that immediately on subsequent calls to the `items` property. If you\n   * use this mixin in conjunction with\n   * [DistributedChildrenContentMixin](DistributedChildrenContentMixin.md), the\n   * `contentChanged` method will be invoked for you when the element's children\n   * change, turning on the optimization automatically.\n   */\n  class ContentItems extends base {\n\n    contentChanged() {\n      if (super.contentChanged) { super.contentChanged(); }\n\n      // Since we got the contentChanged call, we'll assume we'll be notified if\n      // the set of items changes later. We turn on memoization of the items\n      // property by setting our internal property to null (instead of\n      // undefined).\n      this[itemsSymbol] = null;\n\n      this[symbols.itemsChanged]();\n    }\n\n    /**\n     * This method is invoked whenever a new item is added to the list.\n     *\n     * The default implementation of this method does nothing. You can override\n     * this to perform per-item initialization.\n     *\n     * @param {HTMLElement} item - The item that was added.\n     */\n    [symbols.itemAdded](item) {\n      if (super[symbols.itemAdded]) { super[symbols.itemAdded](item); }\n    }\n\n    /**\n     * The selection state for a single item has changed.\n     *\n     * Invoke this method to signal that the selected state of the indicated item\n     * has changed. By default, this applies a `selected` CSS class if the item\n     * is selected, and removed it if not selected.\n     *\n     * @param {HTMLElement} item - The item whose selection state has changed.\n     * @param {boolean} selected - True if the item is selected, false if not.\n     */\n    [symbols.itemSelected](item, selected) {\n      if (super[symbols.itemSelected]) { super[symbols.itemSelected](item, selected); }\n      toggleClass(item, 'selected', selected);\n    }\n\n    /**\n     * The current set of items in the list. See the top-level documentation for\n     * mixin for a description of how items differ from plain content.\n     *\n     * @type {HTMLElement[]}\n     */\n    get items() {\n      let items;\n      if (this[itemsSymbol] == null) {\n        items = filterAuxiliaryElements(this.content);\n        // Note: test for *equality* with null; don't treat undefined as a match.\n        if (this[itemsSymbol] === null) {\n          // Memoize the set of items.\n          this[itemsSymbol] = items;\n        }\n      } else {\n        // Return the memoized items.\n        items = this[itemsSymbol];\n      }\n      return items;\n    }\n\n    /**\n     * This method is invoked when the underlying contents change. It is also\n     * invoked on component initialization – since the items have \"changed\" from\n     * being nothing.\n     */\n    [symbols.itemsChanged]() {\n      if (super[symbols.itemsChanged]) { super[symbols.itemsChanged](); }\n\n      // Perform per-item initialization.\n      Array.prototype.forEach.call(this.items, item => {\n        if (!item[itemInitializedSymbol]) {\n          this[symbols.itemAdded](item);\n          item[itemInitializedSymbol] = true;\n        }\n      });\n\n      this.dispatchEvent(new CustomEvent('items-changed'));\n    }\n\n    /**\n     * Fires when the items in the list change.\n     *\n     * @memberof ContentItems\n     * @event items-changed\n     */\n  }\n\n  return ContentItems;\n};\n\n\n// Return the given elements, filtering out auxiliary elements that aren't\n// typically visible. Items which are not elements are returned as is.\nfunction filterAuxiliaryElements(items) {\n  const auxiliaryTags = [\n    'link',\n    'script',\n    'style',\n    'template'\n  ];\n  return [].filter.call(items, function(item) {\n    return !item.localName || auxiliaryTags.indexOf(item.localName) < 0;\n  });\n}\n","import microtask from './microtask';\n\n\n/* Exported function extends a base class with DistributedChildrenContent. */\nexport default (base) => {\n\n  /**\n   * Mixin which defines a component's content as its children, expanding any\n   * nodes distributed to the component's slots.\n   *\n   * This also provides notification of changes to a component's content. It\n   * will invoke a `contentChanged` method when the component is first\n   * instantiated, and whenever its distributed children change. This is an\n   * easy way to satisfy the Gold Standard checklist item for monitoring\n   * [Content Changes](https://github.com/webcomponents/gold-standard/wiki/Content-Changes).\n   *\n   * Example:\n   *\n   * ```\n   * let base = DistributedChildrenContentMixin(DistributedChildrenMixin(HTMLElement));\n   * class CountingElement extends base {\n   *\n   *   constructor() {\n   *     super();\n   *     let root = this.attachShadow({ mode: 'open' });\n   *     root.innerHTML = `<slot></slot>`;\n   *   }\n   *\n   *   contentChanged() {\n   *     // Count the component's children, both initially and when changed.\n   *     this.count = this.distributedChildren.length;\n   *   }\n   *\n   * }\n   * ```\n   *\n   * Note that content change detection depends upon the element having at least\n   * one `slot` element in its shadow subtree.\n   *\n   * This mixin is intended for use with the\n   * [DistributedChildrenMixin](DistributedChildrenMixin.md). See that mixin for\n   * a discussion of how that works. This DistributedChildrenContentMixin\n   * provides an easy way of defining the \"content\" of a component as the\n   * component's distributed children. That in turn lets mixins like\n   * [ContentItemsMixin](ContentItemsMixin.md) manipulate the children as list\n   * items.\n   */\n  class DistributedChildrenContent extends base {\n\n    constructor() {\n      super();\n\n      if (this.shadowRoot) {\n        // Listen to changes on all slots.\n        const slots = this.shadowRoot.querySelectorAll('slot');\n        slots.forEach(slot => slot.addEventListener('slotchange', event => {\n          this.contentChanged();\n        }));\n      }\n\n      // Make an initial call to contentChanged() so that the component can do\n      // initialization that it normally does when content changes.\n      //\n      // This will invoke contentChanged() handlers in other mixins. In order\n      // that those mixins have a chance to complete their own initialization,\n      // we add the contentChanged() call to the microtask queue.\n      microtask(() => this.contentChanged());\n    }\n\n    /**\n     * Invoked when the contents of the component (including distributed\n     * children) have changed.\n     *\n     * This method is also invoked when a component is first instantiated; the\n     * contents have essentially \"changed\" from being nothing. This allows the\n     * component to perform initial processing of its children.\n     */\n    contentChanged() {\n      if (super.contentChanged) { super.contentChanged(); }\n      const event = new CustomEvent('content-changed');\n      this.dispatchEvent(event);\n    }\n\n    /**\n     * The content of this component, defined to be the flattened array of\n     * children distributed to the component.\n     *\n     * @type {HTMLElement[]}\n     */\n    get content() {\n      const distributedChildren = this.distributedChildren;\n      if (typeof distributedChildren === 'undefined') {\n        console.warn(`DistributedChildrenContentMixin expects the component to define a \"distributedChildren\" property.`);\n      }\n      return distributedChildren;\n    }\n    set content(value) {\n      if ('content' in base.prototype) { super.content = value; }\n      // TODO: Set the children to the given value (which should be an array of\n      // elements)?\n    }\n\n    /**\n     * This event is raised when the component's contents (including distributed\n     * children) have changed.\n     *\n     * @memberof DistributedChildrenContent\n     * @event content-changed\n     */\n  }\n\n  return DistributedChildrenContent;\n};\n","/* Exported function extends a base class with DistributedChildren. */\nexport default (base) => {\n\n  /**\n   * Mixin which defines helpers for accessing a component's distributed\n   * children as a flattened array or string.\n   *\n   * The standard DOM API provides several ways of accessing child content:\n   * `children`, `childNodes`, and `textContent`. None of these functions are\n   * Shadow DOM aware. This mixin defines variations of those functions that\n   * *are* Shadow DOM aware.\n   *\n   * Example: you create a component `<count-children>` that displays a number\n   * equal to the number of children placed inside that component. If someone\n   * instantiates your component like:\n   *\n   *     <count-children>\n   *       <div></div>\n   *       <div></div>\n   *       <div></div>\n   *     </count-children>\n   *\n   * Then the component should show \"3\", because there are three children. To\n   * calculate the number of children, the component can just calculate\n   * `this.children.length`. However, suppose someone instantiates your\n   * component inside one of their own components, and puts a `<slot>` element\n   * inside your component:\n   *\n   *     <count-children>\n   *       <slot></slot>\n   *     </count-children>\n   *\n   * If your component only looks at `this.children`, it will always see exactly\n   * one child — the `<slot>` element. But the user looking at the page will\n   * *see* any nodes distributed to that slot. To match what the user sees, your\n   * component should expand any `<slot>` elements it contains.\n   *\n   * That is the problem this mixin solves. After applying this mixin, your\n   * component code has access to `this.distributedChildren`, whose `length`\n   * will return the total number of all children distributed to your component\n   * in the composed tree.\n   *\n   * Note: The latest Custom Elements API design calls for a new function,\n   * `getAssignedNodes` that takes an optional `deep` parameter, that will solve\n   * this problem at the API level.\n   */\n  class DistributedChildren extends base {\n\n    /**\n     * An in-order collection of distributed children, expanding any slot\n     * elements. Like the standard children property, this skips text nodes.\n     *\n     * @type {HTMLElement[]}\n     */\n    get distributedChildren() {\n      return expandContentElements(this.children, false);\n    }\n\n    /**\n     * An in-order collection of distributed child nodes, expanding any slot\n     * elements. Like the standard childNodes property, this includes text\n     * nodes.\n     *\n     * @type {Node[]}\n     */\n    get distributedChildNodes() {\n      return expandContentElements(this.childNodes, true);\n    }\n\n    /**\n     * The concatenated text content of all distributed child nodes, expanding\n     * any slot elements.\n     *\n     * @type {string}\n     */\n    get distributedTextContent() {\n      const strings = this.distributedChildNodes.map(function(child) {\n        return child.textContent;\n      });\n      return strings.join('');\n    }\n\n  }\n\n  return DistributedChildren;\n};\n\n\n/*\n * Given a array of nodes, return a new array with any content elements expanded\n * to the nodes distributed to that content element. This rule is applied\n * recursively.\n *\n * If includeTextNodes is true, text nodes will be included, as in the\n * standard childNodes property; by default, this skips text nodes, like the\n * standard children property.\n */\nfunction expandContentElements(nodes, includeTextNodes) {\n  const expanded = Array.prototype.map.call(nodes, node => {\n    // We want to see if the node is an instanceof HTMLSlotELement, but\n    // that class won't exist if the browser that doesn't support native\n    // Shadow DOM and if the Shadow DOM polyfill hasn't been loaded. Instead,\n    // we do a simplistic check to see if the tag name is \"slot\".\n    const isSlot = typeof HTMLSlotElement !== 'undefined' ?\n      node instanceof HTMLSlotElement :\n      node.localName === 'slot';\n    if (isSlot) {\n      // Use the nodes assigned to this node instead.\n      const assignedNodes = node.assignedNodes({ flatten: true });\n      return assignedNodes ?\n        expandContentElements(assignedNodes, includeTextNodes) :\n        [];\n    } else if (node instanceof HTMLElement) {\n      // Plain element; use as is.\n      return [node];\n    } else if (node instanceof Text && includeTextNodes) {\n      // Text node.\n      return [node];\n    } else {\n      // Comment, processing instruction, etc.; skip.\n      return [];\n    }\n  });\n  const flattened = [].concat(...expanded);\n  return flattened;\n}\n","import createSymbol from './createSymbol';\n\n\n// Symbols for private data members on an element.\nconst selectedFractionSymbol = createSymbol('selectedFraction');\n\n\n/* Exported function extends a base class with FractionalSelection. */\nexport default function mixin(base) {\n\n  /**\n   * Adds support for fractional selection: treating a selection as a real\n   * number that combines an integer portion (an index into a list), and a\n   * fraction (indicating how far of the way we are to the next or previous\n   * item).\n   *\n   * This is useful in components that support incremental operations during\n   * dragging and swiping. Example: a carousel component has several items, and the\n   * currently selected item is item 3. The user begins swiping to the left,\n   * moving towards selecting item 4. Halfway through this operation, the\n   * fractional selection value is 3.5.\n   *\n   * This value permits communication between mixins like\n   * [SwipeDirectionMixin](./SwipeDirectionMixin.md) and\n   * [TrackpadDirectionMixin](./TrackpadDirectionMixin.md), which generate\n   * fractional selection values, and mixins like\n   * [SelectionAnimationMixin](./SelectionAnimationMixin.md), which can render\n   * selection at a fractional value.\n   */\n  class FractionalSelection extends base {\n\n    connectedCallback() {\n      if (super.connectedCallback) { super.connectedCallback(); }\n      this.selectedFraction = 0;\n    }\n\n    /**\n     * A fractional value indicating how far the user has currently advanced to\n     * the next/previous item. E.g., a `selectedFraction` of 3.5 indicates the\n     * user is halfway between items 3 and 4.\n     *\n     * @type {number}\n     */\n    get selectedFraction() {\n      return this[selectedFractionSymbol];\n    }\n    set selectedFraction(value) {\n      this[selectedFractionSymbol] = value;\n      if ('selectedFraction' in base.prototype) { super.selectedFraction = value; }\n      const event = new CustomEvent('selected-fraction-changed');\n      this.dispatchEvent(event);\n    }\n\n  }\n\n  return FractionalSelection;\n}\n\n\nmixin.helpers = {\n\n  /*\n   * Dampen a selection that goes past the beginning or end of a list. This is\n   * generally used to produce a visual effect of tension as the user tries to\n   * go further in a direction that has no more items.\n   *\n   * Example: suppose `itemCount` is 5, indicating a list of 5 items. The index of\n   * the last item is 4. If the `selection` parameter is 4.5, the user is trying\n   * to go past this last item. When a damping function is applied, the resulting\n   * value will be less than 4.5 (the actual value will be 4.25). When this\n   * selection state is rendered, the user will see that, each unit distance the\n   * drag travels has less and less visible effect. This is perceived as tension.\n   *\n   * @param {number} selection - A real number indicating a selection position\n   * @param {number} itemCount - An integer for the number of items in the list\n   * @returns {number} A real number representing the damped selection value.\n   */\n  dampedSelection(selection, itemCount) {\n    const bound = itemCount - 1;\n    let damped;\n    if (selection < 0) {\n      // Trying to go past beginning of list. Apply tension from the left edge.\n      damped = -mixin.helpers.damping(-selection);\n    } else if (selection >= bound) {\n      // Trying to go past end of list. Apply tension from the right edge.\n      damped = bound + mixin.helpers.damping(selection - bound);\n    } else {\n      // No damping required.\n      damped = selection;\n    }\n    return damped;\n  },\n\n  /*\n   * Calculate damping as a function of the distance past the minimum/maximum\n   * values.\n   *\n   * We want to asymptotically approach an absolute minimum of 1 unit\n   * below/above the actual minimum/maximum. This requires calculating a\n   * hyperbolic function.\n   *\n   * See http://www.wolframalpha.com/input/?i=y+%3D+-1%2F%28x%2B1%29+%2B+1\n   * for the one we use. The only portion of that function we care about is when\n   * x is zero or greater. An important consideration is that the curve be\n   * tangent to the diagonal line x=y at (0, 0). This ensures smooth continuity\n   * with the normal drag behavior, in which the visible sliding is linear with\n   * the distance the touchpoint has been dragged.\n   */\n  damping(x) {\n    const y = (-1 / (x + 1)) + 1;\n    return y;\n  },\n\n  /*\n   * Return the current fractional selection value for the given element.\n   *\n   * This simply adds the element's `selectedIndex` and `selectedFraction`\n   * properties.\n   *\n   * @param {HTMLElement} element - An element that supports selection\n   */\n  elementSelection(element) {\n    const selectedIndex = element.selectedIndex;\n    if (selectedIndex < 0) {\n      // No selection\n      return;\n    }\n    const selectedFraction = element.selectedFraction || 0;\n    return selectedIndex + selectedFraction;\n  },\n\n  /*\n   * Breaks a fractional selection into its integer and fractional parts.\n   *\n   * Example: if passed 3.5, this returns { index: 3, fraction: 5 }.\n   *\n   * @param {number} selection – A real number representing a selection point\n   * @returns {object} - An object with an `index` property holding the\n   * selection's integer component, and a `fraction` property holding the\n   * selection's fractional component.\n   */\n  selectionParts(selection) {\n    // Stupid IE doesn't have Math.trunc.\n    // const index = Math.trunc(selection);\n    const index = selection < 0 ? Math.ceil(selection) : Math.floor(selection);\n    const fraction = selection - index;\n    return { index, fraction };\n  },\n\n  /*\n   * Returns a fractional selection point after accounting for wrapping, ensuring\n   * that the integer portion of the selection stays between 0 and `itemCount`-1.\n   * That is, the integer portion will always be a valid index into the list.\n   *\n   * Example of wrapping past the end of the list: if `selection` is 5.5 and\n   * `itemCount` is 5, this returns 0.5. Example of wrapping past the beginning of\n   * the list: if `selection` is 0.5 and `itemCount` is 5, this returns 4.5.\n   *\n   * @param {number} selection - A real number representing a selection point\n   * @param {number} itemCount - The number of items in the list\n   * @returns {number} - The result of wrapping the selection point\n   */\n  wrappedSelection(selection, itemCount) {\n    // Handles possibility of negative mod.\n    // See http://stackoverflow.com/a/18618250/76472\n    return ((selection % itemCount) + itemCount) % itemCount;\n  },\n\n  /*\n   * Return the parts of a selection, first wrapping if necessary.\n   *\n   * @param {number} selection – A real number representing a selection point\n   * @param {number} itemCount - The number of items in the list\n   * @param {boolean} wrap – True if the selection should wrap to stay within the\n   * list\n   * @returns {object} – The parts of the selection, using the same format as\n   * `selectionParts`.\n   */\n  wrappedSelectionParts(selection, itemCount, wrap) {\n    if (wrap) {\n      selection = mixin.helpers.wrappedSelection(selection, itemCount);\n    }\n    return mixin.helpers.selectionParts(selection);\n  }\n\n};\n","import safeAttributes from '../../basic-component-mixins/src/safeAttributes';\nimport symbols from '../../basic-component-mixins/src/symbols';\n\n\n/* Exported function extends a base class with PlayControls. */\nexport default (base) => {\n\n  /**\n   * Template mixin which adds buttons for managing playback of a slideshow,\n   * audio playlist, etc.\n   *\n   * Typical usage:\n   *\n   *     class SlideshowWithControls extends PlayControlsMixin(Slideshow) {}\n   *     customElements.define('slideshow-with-controls', SlideshowWithControls);\n   *\n   */\n  class PlayControls extends base {\n\n    constructor() {\n      super();\n      this.$.previousButton.addEventListener('click', event => {\n        this.selectPrevious();\n      });\n      this.$.playButton.addEventListener('click', event => {\n        this.playing = !this.playing;\n      });\n      this.$.nextButton.addEventListener('click', event => {\n        this.selectNext();\n      });\n    }\n\n    connectedCallback() {\n      if (super.connectedCallback) { super.connectedCallback(); }\n      safeAttributes.connected(this);\n    }\n\n    [symbols.keydown](event) {\n      let handled;\n\n      switch (event.keyCode) {\n        case 32: /* Space */\n          this.playing = !this.playing;\n          handled = true;\n          break;\n      }\n\n      // Prefer mixin result if it's defined, otherwise use base result.\n      return handled || (super[symbols.keydown] && super[symbols.keydown](event));\n    }\n\n    get playing() {\n      return super.playing;\n    }\n    set playing(value) {\n      if ('playing' in base.prototype) { super.playing = value; }\n      safeAttributes.toggleClass(this, 'playing', value);\n    }\n\n    get [symbols.template]() {\n      const baseTemplate = super[symbols.template] || '';\n      return `\n        <style>\n        :host {\n          display: -webkit-flex;\n          display: flex;\n          position: relative;\n        }\n\n        #buttons {\n          bottom: 0;\n          box-sizing: border-box;\n          padding: 0.5em;\n          position: absolute;\n          text-align: center;\n          width: 100%;\n          z-index: 1;\n        }\n\n        button {\n          background: transparent;\n          border: none;\n          fill: rgba(255, 255, 255, 0.5);\n          padding: 0;\n          transition: fill 0.5s;\n          vertical-align: middle;\n        }\n        :host(:hover) button {\n          fill: rgba(255, 255, 255, 0.7);\n        }\n        button:hover {\n          fill: rgba(255, 255, 255, 0.85);\n        }\n        button:active {\n          fill: white;\n        }\n\n        .icon {\n          height: 30px;\n          width: 30px;\n        }\n        #playButton .icon {\n          height: 40px;\n          width: 40px;\n        }\n\n        :host(.playing) .pausedControl {\n          display: none;\n        }\n        :host(:not(.playing)) .playingControl {\n          display: none;\n        }\n\n        #container {\n          display: -webkit-flex;\n          display: flex;\n          -webkit-flex: 1;\n          flex: 1;\n        }\n\n        #container ::slotted(*) {\n          -webkit-flex: 1;\n          flex: 1;\n        }\n        </style>\n\n        <div id=\"buttons\">\n          <button id=\"previousButton\">\n            <svg class=\"icon\" viewBox=\"0 0 24 24\" preserveAspectRatio=\"xMidYMid meet\">\n              <g id=\"skip-previous\">\n                <path d=\"M6 6h2v12H6zm3.5 6l8.5 6V6z\"/>\n              </g>\n            </svg>\n          </button>\n          <button id=\"playButton\">\n            <svg class=\"icon playingControl\" viewBox=\"0 0 24 24\" preserveAspectRatio=\"xMidYMid meet\">\n              <g id=\"pause-circle-outline\">\n                <path d=\"M9 16h2V8H9v8zm3-14C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm1-4h2V8h-2v8z\"></path>\n              </g>\n            </svg>\n            <svg class=\"icon pausedControl\" viewBox=\"0 0 24 24\" preserveAspectRatio=\"xMidYMid meet\">\n              <g id=\"play-circle-outline\">\n                <path d=\"M10 16.5l6-4.5-6-4.5v9zM12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z\"></path>\n              </g>\n            </svg>\n          </button>\n          <button id=\"nextButton\">\n            <svg class=\"icon\" viewBox=\"0 0 24 24\" preserveAspectRatio=\"xMidYMid meet\">\n              <g id=\"skip-next\">\n                <path d=\"M6 18l8.5-6L6 6v12zM16 6v12h2V6h-2z\"/>\n              </g>\n            </svg>\n          </button>\n        </div>\n\n        <div id=\"container\" role=\"none\">\n          ${baseTemplate}\n        </div>\n      `;\n    }\n\n  }\n\n  return PlayControls;\n};\n","import createSymbol from './createSymbol';\nimport FractionalSelectionMixin from './FractionalSelectionMixin';\nimport symbols from './symbols';\n\n\n// Symbols for private data members on an element.\nconst animationSymbol = createSymbol('animation');\nconst draggingSymbol = createSymbol('dragging');\nconst lastAnimationSymbol = createSymbol('lastAnimation');\nconst playingAnimationSymbol = createSymbol('animatingSelection');\nconst previousSelectionSymbol = createSymbol('previousSelection');\nconst selectionAnimationDurationSymbol = createSymbol('selectionAnimationDuration');\nconst selectionAnimationEffectSymbol = createSymbol('selectionAnimationEffect');\nconst selectionAnimationKeyframesSymbol = createSymbol('selectionAnimationKeyframes');\nconst resetAnimationsOnNextRenderSymbol = createSymbol('resetAnimationsOnNextRender');\n\n\n/* Exported function extends a base class with SelectionAnimation. */\nexport default function mixin(base) {\n\n  /**\n   * Mixin which uses animation to show transitions between selection states.\n   *\n   * This mixin can be used by components that want to provide visible\n   * animations when changing the selection. For example, a carousel component\n   * may want to define a sliding animation effect shown when moving between\n   * items.\n   *\n   * The animation is defined by a `selectionAnimationKeyframes` property; see\n   * that property for details on how to define these keyframes. This animation\n   * will be used in two ways. First, when moving strictly between items, the\n   * animation will play smoothly to show the selection changing. Second, the\n   * animation can be used to render the selection at a fixed point in the\n   * transition between states. E.g., if the user pauses halfway through\n   * dragging an element using [SwipeDirectionMixin](SwipeDirectionMixin.md)\n   * or [TrackpadDirectionMixin](TrackpadDirectionMixin.md)s, then the selection\n   * animation will be shown at the point exactly halfway through.\n   *\n   * This mixin expects a component to provide an `items` array of all elements\n   * in the list, which can be provided via\n   * [ContentItemsMixin](ContentItemsMixin.md). This mixin also expects\n   * `selectedIndex` and `selectedItem` properties, which can be provided via\n   * [SingleSelectionMixin](SingleSelectionMixin.md).\n   *\n   * This mixin supports a `selectionWraps` property. When true, the user can\n   * navigate forward from the last item in the list and wrap around to the\n   * first item, or navigate backward from the first item and wrap around to the\n   * last item.\n   *\n   * This mixin uses the Web Animations API. For use on browsers which\n   * do not support that API natively, you will need to load the\n   * [Web Animations polyfill](https://github.com/web-animations/web-animations-js).\n   */\n  class SelectionAnimation extends base {\n\n    constructor() {\n      super();\n\n      // Set defaults.\n      if (typeof this.selectionAnimationDuration === 'undefined') {\n        this.selectionAnimationDuration = this[symbols.defaults].selectionAnimationDuration;\n      }\n      if (typeof this.selectionAnimationEffect === 'undefined' && this.selectionAnimationKeyframes == null) {\n        this.selectionAnimationEffect = this[symbols.defaults].selectionAnimationEffect;\n      }\n\n      this[symbols.dragging] = false;\n    }\n\n    get [symbols.defaults]() {\n      const defaults = super[symbols.defaults] || {};\n      defaults.selectionAnimationDuration = 250;\n      defaults.selectionAnimationEffect = 'slide';\n      return defaults;\n    }\n\n    /*\n     * Provide backing for the dragging property.\n     * Also, when a drag begins, reset the animations.\n     */\n    get [symbols.dragging]() {\n      return this[draggingSymbol];\n    }\n    set [symbols.dragging](value) {\n      const previousValue = this[symbols.dragging];\n      this[draggingSymbol] = value;\n      if (symbols.dragging in base.prototype) { super[symbols.dragging] = value; }\n      if (value && !previousValue) {\n        // Have begun a drag.\n        this[resetAnimationsOnNextRenderSymbol] = true;\n      }\n    }\n\n    [symbols.itemAdded](item) {\n      // We mark new items in the list as explicitly visible to ARIA. Otherwise,\n      // when an item isn't visible on the screen, ARIA will assume the item is\n      // of no interest to the user, and leave it out of the accessibility tree.\n      // If the list contains 10 items, but only 3 are visible, a screen reader\n      // might then announce the list only has 3 items. To ensure that screen\n      // readers and other assistive technologies announce the correct total\n      // number of items, we explicitly mark all items as not hidden. This will\n      // expose them all in the accessibility tree, even the items which are\n      // currently not rendered.\n      //\n      // TODO: Generally speaking, this entire mixin assumes that the user can\n      // navigate through all items in a list. But an app could style an item as\n      // display:none or visibility:hidden because the user is not allowed to\n      // interact with that item at the moment. Support for this scenario should\n      // be added. This would entail changing all locations where a mixin\n      // function is counting items, iterating over the (visible) items, and\n      // showing or hiding items. Among other things, the code below to make\n      // items visible to ARIA would need to discriminate between items which\n      // are invisible because of animation state, or invisible because the user\n      // shouldn't interact with them.\n      item.setAttribute('aria-hidden', false);\n    }\n\n    [symbols.itemsChanged]() {\n      if (super[symbols.itemsChanged]) { super[symbols.itemsChanged](); }\n\n      resetAnimations(this);\n\n      // TODO: Also reset our notion of the last rendered selection? This comes\n      // up when a DOM removal causes the selected item to change position.\n      // this[previousSelectionSymbol] = null;\n\n      renderSelection(this);\n    }\n\n    resetAnimations() {\n      resetAnimations(this);\n    }\n\n    /**\n     * A fractional value indicating how far the user has currently advanced to\n     * the next/previous item. E.g., a `selectedFraction` of 3.5 indicates the\n     * user is halfway between items 3 and 4.\n     *\n     * For more details, see [FractionalSelectionMixin](FractionalSelectionMixin.md)\n     * mixin.\n     *\n     * @type {number}\n     */\n    get selectedFraction() {\n      return super.selectedFraction || 0;\n    }\n    set selectedFraction(value) {\n      if ('selectedFraction' in base.prototype) { super.selectedFraction = value; }\n      renderSelection(this, this.selectedIndex, value);\n    }\n\n    get selectedIndex() {\n      return super.selectedIndex;\n    }\n    set selectedIndex(index) {\n      if ('selectedIndex' in base.prototype) { super.selectedIndex = index; }\n      renderSelection(this, index, 0);\n    }\n\n    /**\n     * The duration of a selection animation in milliseconds.\n     *\n     * This measures the amount of time required for a selection animation to\n     * complete. This number remains constant, even if the number of items being\n     * animated increases.\n     *\n     * The default value is 250 milliseconds (a quarter a second).\n     *\n     * @type {number}\n     * @default 250\n     */\n    get selectionAnimationDuration() {\n      return this[selectionAnimationDurationSymbol];\n    }\n    set selectionAnimationDuration(value) {\n      this[selectionAnimationDurationSymbol] = value;\n      if ('selectionAnimationDuration' in base.prototype) { super.selectionAnimationDuration = value; }\n    }\n\n    /**\n     * The name of a standard selection animation effect.\n     *\n     * This is a shorthand for setting the `selectionAnimationKeyframes`\n     * property to standard keyframes. Supported string values:\n     *\n     * * \"crossfade\"\n     * * \"reveal\"\n     * * \"revealWithFade\"\n     * * \"showAdjacent\"\n     * * \"slide\"\n     * * \"slideWithGap\"\n     *\n     * @type {string}\n     * @default \"slide\"\n     */\n    get selectionAnimationEffect() {\n      return this[selectionAnimationEffectSymbol];\n    }\n    set selectionAnimationEffect(value) {\n      this[selectionAnimationEffectSymbol] = value;\n      if ('selectionAnimationEffect' in base.prototype) { super.selectionAnimationEffect = value; }\n      this.selectionAnimationKeyframes = mixin.standardEffectKeyframes[value];\n    }\n\n    /**\n     * The keyframes that define an animation that plays for an item when moving\n     * forward in the sequence.\n     *\n     * This is an array of CSS rules that will be applied. These are used as\n     * [keyframes](http://w3c.github.io/web-animations/#keyframes-section)\n     * to animate the item with the\n     * [Web Animations API](https://developer.mozilla.org/en-US/docs/Web/API/animation).\n     *\n     * The animation represents the state of the next item as it moves from\n     * completely unselected (offstage, usually right), to selected (center\n     * stage), to completely unselected (offstage, usually left). The center time\n     * of the animation should correspond to the item's quiscent selected state,\n     * typically in the center of the stage and at the item's largest size.\n     *\n     * The default forward animation is a smooth slide at full size from right to\n     * left.\n     *\n     * When moving the selection backward, this animation is played in reverse.\n     *\n     * @type {cssRules[]}\n     */\n    get selectionAnimationKeyframes() {\n      // Standard animation slides left/right, keeps adjacent items out of view.\n      return this[selectionAnimationKeyframesSymbol];\n    }\n    set selectionAnimationKeyframes(value) {\n      this[selectionAnimationKeyframesSymbol] = value;\n      if ('selectionAnimationKeyframes' in base.prototype) { super.selectionAnimationKeyframes = value; }\n      resetAnimations(this);\n      renderSelection(this);\n    }\n\n    get selectionWraps() {\n      return super.selectionWraps;\n    }\n    set selectionWraps(value) {\n      if ('selectionWraps' in base.prototype) { super.selectionWraps = value; }\n      resetAnimations(this);\n      renderSelection(this);\n    }\n  }\n\n  return SelectionAnimation;\n}\n\n\n// We expose helpers on the mixin function that we want to be able to unit test.\n// Since these are on the function, not on the class emitted by the function,\n// they don't end up getting exposed on actual element instances.\nmixin.helpers = {\n\n  /*\n   * Calculate the animation fractions for an element's items at the given\n   * selection point. This is used when rendering the element's selection state\n   * instantaneously.\n   *\n   * This function considers the selectedIndex parameter, which can be a whole\n   * or fractional number, and determines which items will be visible at that\n   * index. This function then calculates a corresponding animation fraction: a\n   * number between 0 and 1 indicating how far through the selection animation\n   * an item should be shown, or null if the item should not be visible at that\n   * selection index. These fractions are returned as an array, where the\n   * animation fraction at position N corresponds to how item N should be shown.\n   */\n  animationFractionsForSelection(element, selection) {\n\n    const items = element.items;\n    if (!items) {\n      return;\n    }\n\n    const itemCount = items.length;\n    const selectionWraps = element.selectionWraps;\n\n    return items.map((item, itemIndex) => {\n      // How many steps from the selection point to this item?\n      const steps = stepsToIndex(itemCount, selectionWraps, selection, itemIndex);\n      // To convert steps to animation fraction:\n      // steps      animation fraction\n      //  1         0     (stage right)\n      //  0         0.5   (center stage)\n      // -1         1     (stage left)\n      const animationFraction = (1 - steps) / 2;\n      return (animationFraction >= 0 && animationFraction <= 1) ?\n        animationFraction :\n        null; // Outside animation range\n    });\n  },\n\n  /*\n   * Calculate the animation timings that should be used to smoothly animate the\n   * element's items from one selection state to another.\n   *\n   * This returns an array of timings, where the timing at position N should be\n   * used to animate item N. If an item's timing is null, then that item should\n   * not take place in the animation, and should be hidden instead.\n   */\n  effectTimingsForSelectionAnimation(element, fromSelection, toSelection) {\n\n    const items = element.items;\n    if (!items) {\n      return;\n    }\n    const itemCount = items.length;\n    const selectionWraps = element.selectionWraps;\n    const toIndex = FractionalSelectionMixin.helpers.wrappedSelectionParts(toSelection, itemCount, selectionWraps).index;\n    const totalSteps = stepsToIndex(itemCount, selectionWraps, fromSelection, toSelection);\n    const direction = totalSteps >= 0 ? 'normal': 'reverse';\n    const fill = 'both';\n    const totalDuration = element.selectionAnimationDuration;\n    const stepDuration = totalSteps !== 0 ?\n      totalDuration * 2 / Math.ceil(Math.abs(totalSteps)) :\n      0;  // No steps required, animation will be instantenous.\n\n    const timings = items.map((item, itemIndex) => {\n      const steps = stepsToIndex(itemCount, selectionWraps, itemIndex, toSelection);\n      // If we include this item in the staggered sequence of animations we're\n      // creating, where would the item appear in the sequence?\n      let positionInSequence = totalSteps - steps;\n      if (totalSteps < 0) {\n        positionInSequence = -positionInSequence;\n      }\n      // So, is this item really included in the sequence?\n      if (Math.ceil(positionInSequence) >= 0 && positionInSequence <= Math.abs(totalSteps)) {\n        // Note that delay for first item will be negative. That will cause\n        // the animation to start halfway through, which is what we want.\n        const delay = stepDuration * (positionInSequence - 1)/2;\n        const endDelay = itemIndex === toIndex ?\n          -stepDuration/2 :   // Stop halfway through.\n          0;              // Play animation until end.\n        return { duration: stepDuration, direction, fill, delay, endDelay };\n      } else {\n        return null;\n      }\n    });\n\n    return timings;\n  }\n\n};\n\n\n// Keyframes for standard selection animation effects.\nmixin.standardEffectKeyframes = {\n\n  // Simple crossfade\n  crossfade: [\n    { opacity: 0 },\n    { opacity: 1 },\n    { opacity: 0 }\n  ],\n\n  // Reveal, as if sliding the top card off a deck of cards\n  reveal: [\n    { transform: 'translateX(0%)', zIndex: 0 },\n    { transform: 'translateX(0%)', zIndex: 1 },\n    { transform: 'translateX(-100%)', zIndex: 2 }\n  ],\n\n  // Google Photos-style reveal-with-fade animation\n  revealWithFade: [\n    { transform: 'translateX(0%) scale(0.75)', opacity: 0, zIndex: 0 },\n    { transform: 'translateX(0%) scale(1.0)', opacity: 1, zIndex: 1 },\n    { transform: 'translateX(-100%) scale(1.0)', opacity: 1, zIndex: 2 }\n  ],\n\n  // Carousel variant with a bit of off-stage elements showing\n  showAdjacent: [\n    { transform: 'translateX(78%) scale(0.7)', zIndex: 0 },\n    { transform: 'translateX(0%) scale(0.82)', zIndex: 1 },\n    { transform: 'translateX(-78%) scale(0.7)', zIndex: 0 }\n  ],\n\n  // Simple slide\n  slide: [\n    { transform: 'translateX(100%)' },\n    { transform: 'translateX(-100%)' }\n  ],\n\n  // Slide, with a gap between\n  slideWithGap: [\n    { transform: 'translateX(110%)' },\n    { transform: 'translateX(-110%)' }\n  ]\n\n};\n\n\n/*\n * Smoothly animate the selection between the indicated \"from\" and \"to\"\n * indices. The former can be a fraction, e.g., when the user releases a finger\n * to complete a touch drag, and the selection will snap to the closest whole\n * index.\n */\nfunction animateSelection(element, fromSelection, toSelection) {\n\n  resetAnimations(element);\n\n  // Calculate the animation timings.\n  const items = element.items;\n  const keyframes = element.selectionAnimationKeyframes;\n  element[playingAnimationSymbol] = true;\n  const timings = mixin.helpers.effectTimingsForSelectionAnimation(element, fromSelection, toSelection);\n\n  // Figure out which item will be the one *after* the one we're selecting.\n  const itemCount = items.length;\n  const selectionWraps = element.selectionWraps;\n  const selectionIndex = FractionalSelectionMixin.helpers.selectionParts(toSelection, itemCount, selectionWraps).index;\n  const totalSteps = stepsToIndex(itemCount, selectionWraps, fromSelection, toSelection);\n  const forward = totalSteps >= 0;\n  let nextUpIndex = selectionIndex + (forward ? 1 : - 1);\n  if (selectionWraps) {\n    nextUpIndex = FractionalSelectionMixin.helpers.wrappedSelection(nextUpIndex, itemCount);\n  } else if (!isItemIndexInBounds(element, nextUpIndex)) {\n    nextUpIndex = null; // At start/end of list; don't have a next item to show.\n  }\n\n  // Play the animations using those timings.\n  let lastAnimationDetails;\n  timings.forEach((timing, index) => {\n    const item = items[index];\n    if (timing) {\n      showItem(item, true);\n      const animation = item.animate(keyframes, timing);\n      element[animationSymbol][index] = animation;\n      if (index === nextUpIndex) {\n        // This item will be animated, so will already be in the desired state\n        // after the animation completes.\n        nextUpIndex = null;\n      }\n      if (timing.endDelay !== 0) {\n        // This is the animation for the item that will be left selected.\n        // We want to clean up when this animation completes.\n        lastAnimationDetails = { animation, index, timing, forward };\n      }\n    } else {\n      // This item doesn't participate in the animation.\n      showItem(item, false);\n    }\n  });\n\n  if (lastAnimationDetails != null) {\n    // Arrange for clean-up work to be performed.\n    lastAnimationDetails.nextUpIndex = nextUpIndex;\n    lastAnimationDetails.animation.onfinish = event => selectionAnimationFinished(element, lastAnimationDetails);\n    element[lastAnimationSymbol] = lastAnimationDetails.animation;\n  } else {\n    // Shouldn't happen -- we should always have at least one animation.\n    element[playingAnimationSymbol] = false;\n  }\n}\n\n\nfunction getAnimationForItemIndex(element, index) {\n  if (element[animationSymbol] == null) {\n    // Not ready yet;\n    return null;\n  }\n  let animation = element[animationSymbol][index];\n  if (!animation) {\n    const item = element.items[index];\n    animation = item.animate(element.selectionAnimationKeyframes, {\n      duration: element.selectionAnimationDuration,\n      fill: 'both'\n    });\n    animation.pause();\n    element[animationSymbol][index] = animation;\n  }\n  return animation;\n}\n\nfunction isItemIndexInBounds(element, index) {\n  return index >= 0 && element.items && index < element.items.length;\n}\n\n/*\n * Render the selection state of the element.\n *\n * This can be used to re-render a previous selection state (if the\n * selectedIndex param is omitted), render the selection instantly at a given\n * whole or fractional selection index, or animate to a given selection index.\n *\n * There are several distinct scenarios we need to cover:\n *\n * 1. Initial positioning, or repositioning after changing a property like\n *    selectionAnimationKeyframes that affects rendering.\n * 2. Animate on selectedIndex change. This should override any animation/swipe\n *    already in progress.\n * 3. Instantly render the current position of a drag operation in progress.\n * 4. Complete a drag operation. If the drag wasn't far enough to affect\n *    selection, we'll just be restoring the selectedFraction to 0.\n *\n * If the list does not wrap, any selection position outside the list's bounds\n * will be damped to produce a visual effect of tension.\n */\nfunction renderSelection(element, selectedIndex=element.selectedIndex, selectedFraction=element.selectedFraction) {\n  const itemCount = element.items ? element.items.length : 0;\n  if (itemCount === 0) {\n    // Nothing to render.\n    return;\n  }\n  if (selectedIndex < 0) {\n    // TODO: Handle no selection.\n    return;\n  }\n  let selection = selectedIndex + selectedFraction;\n  if (element.selectionWraps) {\n    // Apply wrapping to ensure consistent representation of selection.\n    selection = FractionalSelectionMixin.helpers.wrappedSelection(selection, itemCount);\n  } else {\n    // Apply damping if necessary.\n    selection = FractionalSelectionMixin.helpers.dampedSelection(selection, itemCount);\n  }\n  const previousSelection = element[previousSelectionSymbol];\n  // TODO: If an item changes position in the DOM, we end up animating from\n  // its old index to its new index, but we really don't want to animate at all.\n  if (!element[symbols.dragging] && previousSelection != null &&\n      previousSelection !== selection) {\n    // Animate selection from previous state to new state.\n    animateSelection(element, previousSelection, selection);\n  } else if (selectedFraction === 0 && element[playingAnimationSymbol]) {\n    // Already in process of animating to fraction 0. During that process,\n    // ignore subsequent attempts to renderSelection to fraction 0.\n    return;\n  } else {\n    // Render current selection state instantly.\n    renderSelectionInstantly(element, selection);\n  }\n  element[previousSelectionSymbol] = selection;\n}\n\n/*\n * Instantly render (don't animate) the element's items at the given whole or\n * fractional selection index.\n */\nfunction renderSelectionInstantly(element, toSelection) {\n  if (element[resetAnimationsOnNextRenderSymbol]) {\n    resetAnimations(element);\n    element[resetAnimationsOnNextRenderSymbol] = false;\n  }\n  const animationFractions = mixin.helpers.animationFractionsForSelection(element, toSelection);\n  animationFractions.map((animationFraction, index) => {\n    const item = element.items[index];\n    if (animationFraction != null) {\n      showItem(item, true);\n      setAnimationFraction(element, index, animationFraction);\n    } else {\n      showItem(item, false);\n    }\n  });\n}\n\n/*\n * We maintain an array containing an animation per item. This is used for two\n * reasons:\n *\n * * During a drag operation, we want to be able to reuse animations between\n *   drag updates.\n * * When a selection animation completes, we need to be able to leave the\n *   visibile items in a paused state. Later, we'll want to be able to clean up\n *   those animations.\n *\n * Note that this array is sparse: it will only hold up from 0–3 animations at\n * any given point.\n */\nfunction resetAnimations(element) {\n  const animations = element[animationSymbol];\n  if (animations) {\n    // Cancel existing animations to remove the effects they're applying.\n    animations.forEach((animation, index) => {\n      if (animation) {\n        animation.cancel();\n        animations[index] = null;\n      }\n    });\n  }\n  const itemCount = element.items ? element.items.length : 0;\n  if (!animations || animations.length !== itemCount) {\n    // Haven't animated before with this number of items; (re)create array.\n    element[animationSymbol] = new Array(itemCount);\n  }\n}\n\n/*\n * The last animation in our selection animation has completed. Clean up.\n */\nfunction selectionAnimationFinished(element, details) {\n\n  // When the last animation completes, show the next item in the direction\n  // we're going. Waiting to that until this point is a bit of a hack to avoid\n  // having a next item that's higher in the natural z-order obscure other items\n  // during animation.\n  const nextUpIndex = details.nextUpIndex;\n  if (nextUpIndex != null) {\n    if (element[animationSymbol][nextUpIndex]) {\n      // Cancel existing selection animation so we can construct a new one.\n      element[animationSymbol][nextUpIndex].cancel();\n      element[animationSymbol][nextUpIndex] = null;\n    }\n    const animationFraction = details.forward ? 0 : 1;\n    setAnimationFraction(element, nextUpIndex, animationFraction);\n    showItem(element.items[nextUpIndex], true);\n  }\n\n  element[lastAnimationSymbol].onfinish = null;\n  element[playingAnimationSymbol] = false;\n}\n\n/*\n * Pause the indicated animation and have it show the animation at the given\n * fraction (between 0 and 1) of the way through the animation.\n */\nfunction setAnimationFraction(element, itemIndex, fraction) {\n  const animation = getAnimationForItemIndex(element, itemIndex);\n  if (animation) {\n    const duration = element.selectionAnimationDuration;\n    if (duration) {\n      animation.currentTime = fraction * duration;\n    }\n  }\n}\n\nfunction showItem(item, flag) {\n  item.style.visibility = flag ? 'visible' : 'hidden';\n}\n\n/*\n * Figure out how many steps it will take to go from fromSelection to\n * toSelection. To go from item 3 to item 4 is one step.\n *\n * If wrapping is allowed, then going from the last item to the first will take\n * one step (forward), and going from the first item to the last will take one\n * step (backward).\n */\nfunction stepsToIndex(length, allowWrap, fromSelection, toSelection) {\n  let steps = toSelection - fromSelection;\n  // Wrapping only kicks in when list has more than 1 item.\n  if (allowWrap && length > 1) {\n    const wrapSteps = length - Math.abs(steps);\n    if (wrapSteps <= 1) {\n      // Special case\n      steps = steps < 0 ?\n        wrapSteps :   // Wrap forward from last item to first.\n        -wrapSteps;   // Wrap backward from first item to last.\n    }\n  }\n  return steps;\n}\n","import symbols from './symbols';\n\n\n// Used to assign unique IDs to item elements without IDs.\nlet idCount = 0;\n\n\n/* Exported function extends a base class with SelectionAriaActive. */\nexport default (base) => {\n\n  /**\n   * Mixin which treats the selected item in a list as the active item in ARIA\n   * accessibility terms.\n   *\n   * Handling ARIA selection state properly is actually quite complex:\n   *\n   * * The items in the list need to be indicated as possible items via an ARIA\n   *   `role` attribute value such as \"option\".\n   * * The selected item need to be marked as selected by setting the item's\n   *   `aria-selected` attribute to true *and* the other items need be marked as\n   *   *not* selected by setting `aria-selected` to false.\n   * * The outermost element with the keyboard focus needs to have attributes\n   *   set on it so that the selection is knowable at the list level via the\n   *   `aria-activedescendant` attribute.\n   * * Use of `aria-activedescendant` in turn requires that all items in the\n   *   list have ID attributes assigned to them.\n   *\n   * This mixin tries to address all of the above requirements. To that end,\n   * this mixin will assign generated IDs to any item that doesn't already have\n   * an ID.\n   *\n   * ARIA relies on elements to provide `role` attributes. This mixin will apply\n   * a default role of \"listbox\" on the outer list if it doesn't already have an\n   * explicit role. Similarly, this mixin will apply a default role of \"option\"\n   * to any list item that does not already have a role specified.\n   *\n   * This mixin expects a set of members that manage the state of the selection:\n   * `[symbols.itemSelected]`, `itemAdded`, and `selectedIndex`. You can\n   * supply these yourself, or do so via\n   * [SingleSelectionMixin](SingleSelectionMixin.md).\n   */\n  class SelectionAriaActive extends base {\n\n    connectedCallback() {\n      if (super.connectedCallback) { super.connectedCallback(); }\n      // Set default ARIA role.\n      if (this.getAttribute('role') == null && this[symbols.defaults].role) {\n        this.setAttribute('role', this[symbols.defaults].role);\n      }\n    }\n\n    get [symbols.defaults]() {\n      const defaults = super[symbols.defaults] || {};\n      defaults.role = 'listbox';\n      return defaults;\n    }\n\n    [symbols.itemAdded](item) {\n      if (super[symbols.itemAdded]) { super[symbols.itemAdded](item); }\n\n      if (!item.getAttribute('role')) {\n        // Assign a default ARIA role.\n        item.setAttribute('role', 'option');\n      }\n\n      // Ensure each item has an ID so we can set aria-activedescendant on the\n      // overall list whenever the selection changes.\n      //\n      // The ID will take the form of a base ID plus a unique integer. The base\n      // ID will be incorporate the component's own ID. E.g., if a component has\n      // ID \"foo\", then its items will have IDs that look like \"_fooOption1\". If\n      // the compnent has no ID itself, its items will get IDs that look like\n      // \"_option1\". Item IDs are prefixed with an underscore to differentiate\n      // them from manually-assigned IDs, and to minimize the potential for ID\n      // conflicts.\n      if (!item.id) {\n        const baseId = this.id ?\n            \"_\" + this.id + \"Option\" :\n            \"_option\";\n        item.id = baseId + idCount++;\n      }\n    }\n\n    [symbols.itemSelected](item, selected) {\n      if (super[symbols.itemSelected]) { super[symbols.itemSelected](item, selected); }\n      item.setAttribute('aria-selected', selected);\n      const itemId = item.id;\n      if (itemId && selected) {\n        this.setAttribute('aria-activedescendant', itemId);\n      }\n    }\n\n    get selectedItem() {\n      return super.selectedItem;\n    }\n    set selectedItem(item) {\n      if ('selectedItem' in base.prototype) { super.selectedItem = item; }\n      if (item == null) {\n        // Selection was removed.\n        this.removeAttribute('aria-activedescendant');\n      }\n    }\n\n  }\n\n  return SelectionAriaActive;\n};\n","/* Exported function extends a base class with ShadowElementReferences. */\nexport default (base) => {\n\n  /**\n   * Mixin to create references to elements in a component's Shadow DOM subtree.\n   *\n   * This adds a member on the component called `this.$` that can be used to\n   * reference shadow elements with IDs. E.g., if component's shadow contains an\n   * element `<button id=\"foo\">`, then this mixin will create a member\n   * `this.$.foo` that points to that button.\n   *\n   * Such references simplify a component's access to its own elements. In\n   * exchange, this mixin trades off a one-time cost of querying all elements in\n   * the shadow tree instead of paying an ongoing cost to query for an element\n   * each time the component wants to inspect or manipulate it.\n   *\n   * This mixin expects the component to define a Shadow DOM subtree. You can\n   * create that tree yourself, or make use of\n   * [ShadowTemplateMixin](ShadowTemplateMixin.md).\n   *\n   * This mixin is inspired by Polymer's [automatic\n   * node finding](https://www.polymer-project.org/1.0/docs/devguide/local-dom.html#node-finding)\n   * feature.\n   */\n  class ShadowElementReferences extends base {\n\n    constructor() {\n      super();\n      if (this.shadowRoot) {\n        // Look for elements in the shadow subtree that have id attributes.\n        // An alternatively implementation of this mixin would be to just define\n        // a this.$ getter that lazily does this search the first time someone\n        // tries to access this.$. That might introduce some complexity – if the\n        // the tree changed after it was first populated, the result of\n        // searching for a node might be somewhat unpredictable.\n        this.$ = {};\n        const nodesWithIds = this.shadowRoot.querySelectorAll('[id]');\n        [].forEach.call(nodesWithIds, node => {\n          const id = node.getAttribute('id');\n          this.$[id] = node;\n        });\n      }\n    }\n\n    /**\n     * The collection of references to the elements with IDs in a component's\n     * Shadow DOM subtree.\n     *\n     * @type {object}\n     * @member $\n     */\n  }\n\n  return ShadowElementReferences;\n};\n","import symbols from '../src/symbols';\n\n\n/* Exported function extends a base class with ShadowTemplate. */\nexport default (base) => {\n\n  /**\n   * Mixin for stamping a template into a Shadow DOM subtree upon component\n   * instantiation.\n   *\n   * To use this mixin, define a `template` property as a string or HTML\n   * `<template>` element:\n   *\n   *     class MyElement extends ShadowTemplateMixin(HTMLElement) {\n   *       get [symbols.template]() {\n   *         return `Hello, <em>world</em>.`;\n   *       }\n   *     }\n   *\n   * When your component class is instantiated, a shadow root will be created on\n   * the instance, and the contents of the template will be cloned into the\n   * shadow root. If your component does not define a `template` property, this\n   * mixin has no effect.\n   *\n   * For the time being, this extension retains support for Shadow DOM v0. That\n   * will eventually be deprecated as browsers (and the Shadow DOM polyfill)\n   * implement Shadow DOM v1.\n   */\n  class ShadowTemplate extends base {\n\n    /*\n     * If the component defines a template, a shadow root will be created on the\n     * component instance, and the template stamped into it.\n     */\n    constructor() {\n      super();\n      let template = this[symbols.template];\n      // TODO: Save the processed template with the component's class prototype\n      // so it doesn't need to be processed with every instantiation.\n      if (template) {\n\n        if (typeof template === 'string') {\n          // Upgrade plain string to real template.\n          template = createTemplateWithInnerHTML(template);\n        }\n\n        if (window.ShadowDOMPolyfill) {\n          shimTemplateStyles(template, this.localName);\n        }\n\n        const root = this.attachShadow({ mode: 'open' });\n        const clone = document.importNode(template.content, true);\n        root.appendChild(clone);\n      }\n    }\n\n  }\n\n  return ShadowTemplate;\n};\n\n\n// Convert a plain string of HTML into a real template element.\nfunction createTemplateWithInnerHTML(innerHTML) {\n  const template = document.createElement('template');\n  // REVIEW: Is there an easier way to do this?\n  // We'd like to just set innerHTML on the template content, but since it's\n  // a DocumentFragment, that doesn't work.\n  const div = document.createElement('div');\n  div.innerHTML = innerHTML;\n  while (div.childNodes.length > 0) {\n    template.content.appendChild(div.childNodes[0]);\n  }\n  return template;\n}\n\n// Invoke basic style shimming with ShadowCSS.\nfunction shimTemplateStyles(template, tag) {\n  window.WebComponents.ShadowCSS.shimStyling(template.content, tag);\n}\n","import createSymbol from './createSymbol';\nimport symbols from './symbols';\n\n\n// Symbols for private data members on an element.\nconst canSelectNextSymbol = createSymbol('canSelectNext');\nconst canSelectPreviousSymbol = createSymbol('canSelectPrevious');\nconst selectionRequiredSymbol = createSymbol('selectionRequired');\nconst selectionWrapsSymbol = createSymbol('selectionWraps');\n\n// We want to expose both selectedIndex and selectedItem as independent\n// properties but keep them in sync. This allows a component user to reference\n// the selection by whatever means is most natural for their situation.\n//\n// To efficiently keep these properties in sync, we track \"external\" and\n// \"internal\" references for each property:\n//\n// The external index or item is the one we report to the outside world when\n// asked for selection.  When handling a change to index or item, we update the\n// external reference as soon as possible, so that if anyone immediately asks\n// for the current selection, they will receive a stable answer.\n//\n// The internal index or item tracks whichever index or item last received the\n// full set of processing. Processing includes raising a change event for the\n// new value. Once we've begun that processing, we store the new value as the\n// internal value to indicate we've handled it.\n//\nconst externalSelectedIndexSymbol = createSymbol('externalSelectedIndex');\nconst externalSelectedItemSymbol = createSymbol('externalSelectedItem');\nconst internalSelectedIndexSymbol = createSymbol('internalSelectedIndex');\nconst internalSelectedItemSymbol = createSymbol('internalSelectedItem');\n\n\n/* Exported function extends a base class with SingleSelection. */\nexport default (base) => {\n\n  /**\n   * Mixin which manages single-selection semantics for items in a list.\n   *\n   * This mixin expects a component to provide an `items` Array or NodeList of\n   * all elements in the list. A standard way to do that with is the\n   * [ContentItemsMixin](ContentItemsMixin.md), which takes a component's\n   * content (typically its distributed children) as the set of list items; see\n   * that mixin for details.\n   *\n   * This mixin tracks a single selected item in the list, and provides means to\n   * get and set that state by item position (`selectedIndex`) or item identity\n   * (`selectedItem`). The selection can be moved in the list via the methods\n   * `selectFirst`, `selectLast`, `selectNext`, and `selectPrevious`.\n   *\n   * This mixin does not produce any user-visible effects to represent\n   * selection. Other mixins, such as\n   * [SelectionAriaActiveMixin](SelectionAriaActiveMixin.md),\n   * [SelectionHighlightMixin](SelectionHighlightMixin.md) and\n   * [SelectionInViewMixin](SelectionInViewMixin.md), modify the selected item\n   * in common ways to let the user know a given item is selected or not\n   * selected.\n   */\n  class SingleSelection extends base {\n\n    constructor() {\n      super();\n      // Set defaults.\n      if (typeof this.selectionRequired === 'undefined') {\n        this.selectionRequired = this[symbols.defaults].selectionRequired;\n      }\n      if (typeof this.selectionWraps === 'undefined') {\n        this.selectionWraps = this[symbols.defaults].selectionWraps;\n      }\n    }\n\n    /**\n     * True if the selection can be moved to the next item, false if not (the\n     * selected item is the last item in the list).\n     *\n     * @type {boolean}\n     */\n    get canSelectNext() {\n      return this[canSelectNextSymbol];\n    }\n    set canSelectNext(canSelectNext) {\n      const previousCanSelectNext = this[canSelectNextSymbol];\n      this[canSelectNextSymbol] = canSelectNext;\n      if ('canSelectNext' in base.prototype) { super.canSelectNext = canSelectNext; }\n      if (canSelectNext !== previousCanSelectNext) {\n        this.dispatchEvent(new CustomEvent('can-select-next-changed'));\n      }\n    }\n\n    /**\n     * True if the selection can be moved to the previous item, false if not\n     * (the selected item is the first one in the list).\n     *\n     * @type {boolean}\n     */\n    get canSelectPrevious() {\n      return this[canSelectPreviousSymbol];\n    }\n    set canSelectPrevious(canSelectPrevious) {\n      const previousCanSelectPrevious = this[canSelectPreviousSymbol];\n      this[canSelectPreviousSymbol] = canSelectPrevious;\n      if ('canSelectPrevious' in base.prototype) { super.canSelectPrevious = canSelectPrevious; }\n      if (canSelectPrevious !== previousCanSelectPrevious) {\n        this.dispatchEvent(new CustomEvent('can-select-previous-changed'));\n      }\n    }\n\n    get [symbols.defaults]() {\n      const defaults = super[symbols.defaults] || {};\n      defaults.selectionRequired = false;\n      defaults.selectionWraps = false;\n      return defaults;\n    }\n\n    /**\n     * Handle a new item being added to the list.\n     *\n     * The default implementation of this method simply sets the item's\n     * selection state to false.\n     *\n     * @param {HTMLElement} item - the item being added\n     */\n    [symbols.itemAdded](item) {\n      if (super[symbols.itemAdded]) { super[symbols.itemAdded](item); }\n      this[symbols.itemSelected](item, item === this.selectedItem);\n    }\n\n    [symbols.itemsChanged]() {\n      if (super[symbols.itemsChanged]) { super[symbols.itemsChanged](); }\n\n      // In case selected item changed position or was removed.\n      trackSelectedItem(this);\n\n      // In case the change in items affected which navigations are possible.\n      updatePossibleNavigations(this);\n    }\n\n    /**\n     * Apply the indicate selection state to the item.\n     *\n     * The default implementation of this method does nothing. User-visible\n     * effects will typically be handled by other mixins.\n     *\n     * @param {HTMLElement} item - the item being selected/deselected\n     * @param {boolean} selected - true if the item is selected, false if not\n     */\n    [symbols.itemSelected](item, selected) {\n      if (super[symbols.itemSelected]) { super[symbols.itemSelected](item, selected); }\n    }\n\n    /**\n     * The index of the item which is currently selected.\n     *\n     * A `selectedIndex` of -1 indicates there is no selection. Setting this\n     * property to -1 will remove any existing selection.\n     *\n     * @type {number}\n     */\n    get selectedIndex() {\n      return this[externalSelectedIndexSymbol] != null ?\n        this[externalSelectedIndexSymbol] :\n        -1;\n    }\n    set selectedIndex(index) {\n      // See notes at top about internal vs. external copies of this property.\n      const previousSelectedIndex = this[internalSelectedIndexSymbol];\n      let item;\n      if (index !== this[externalSelectedIndexSymbol]) {\n        // Store the new index and the corresponding item.\n        const items = this.items;\n        const hasItems = items && items.length > 0;\n        if (!(hasItems && index >= 0 && index < items.length)) {\n          index = -1; // No item at that index.\n        }\n        this[externalSelectedIndexSymbol] = index;\n        item = hasItems && index >= 0 ? items[index] : null;\n        this[externalSelectedItemSymbol] = item;\n      } else {\n        item = this[externalSelectedItemSymbol];\n      }\n\n      // Now let super do any work.\n      if ('selectedIndex' in base.prototype) { super.selectedIndex = index; }\n\n      if (index !== previousSelectedIndex) {\n        // The selected index changed.\n        this[internalSelectedIndexSymbol] = index;\n\n        const event = new CustomEvent('selected-index-changed', {\n          detail: {\n            selectedIndex: index,\n            value: index // for Polymer binding. TODO: Verify still necessary\n          }\n        });\n        this.dispatchEvent(event);\n      }\n\n      if (this[internalSelectedItemSymbol] !== item) {\n        // Update selectedItem property so it can have its own effects.\n        this.selectedItem = item;\n      }\n    }\n\n    /**\n     * The currently selected item, or null if there is no selection.\n     *\n     * Setting this property to null deselects any currently-selected item.\n     * Setting this property to an object that is not in the list has no effect.\n     *\n     * TODO: Even if selectionRequired, can still explicitly set selectedItem to null.\n     * TODO: If selectionRequired, leave selection alone?\n     *\n     * @type {object}\n     */\n    get selectedItem() {\n      return this[externalSelectedItemSymbol] || null;\n    }\n    set selectedItem(item) {\n      // See notes at top about internal vs. external copies of this property.\n      const previousSelectedItem = this[internalSelectedItemSymbol];\n      let index;\n      if (item !== this[externalSelectedItemSymbol]) {\n        // Store item and look up corresponding index.\n        const items = this.items;\n        const hasItems = items && items.length > 0;\n        index = hasItems ? Array.prototype.indexOf.call(items, item) : -1;\n        this[externalSelectedIndexSymbol] = index;\n        if (index < 0) {\n          item = null; // The indicated item isn't actually in `items`.\n        }\n        this[externalSelectedItemSymbol] = item;\n      } else {\n        index = this[externalSelectedIndexSymbol];\n      }\n\n      // Now let super do any work.\n      if ('selectedItem' in base.prototype) { super.selectedItem = item; }\n\n      if (item !== previousSelectedItem) {\n        // The selected item changed.\n        this[internalSelectedItemSymbol] = item;\n\n        if (previousSelectedItem) {\n          // Update selection state of old item.\n          this[symbols.itemSelected](previousSelectedItem, false);\n        }\n        if (item) {\n          // Update selection state to new item.\n          this[symbols.itemSelected](item, true);\n        }\n\n        updatePossibleNavigations(this);\n\n        const event = new CustomEvent('selected-item-changed', {\n          detail: {\n            selectedItem: item,\n            value: item // for Polymer binding\n          }\n        });\n        this.dispatchEvent(event);\n      }\n\n      if (this[internalSelectedIndexSymbol] !== index) {\n        // Update selectedIndex property so it can have its own effects.\n        this.selectedIndex = index;\n      }\n    }\n\n    /**\n     * Select the first item in the list.\n     */\n    selectFirst() {\n      if (super.selectFirst) { super.selectFirst(); }\n      return selectIndex(this, 0);\n    }\n\n    /**\n     * True if the list should always have a selection (if it has items).\n     *\n     * @type {boolean}\n     * @default false\n     */\n    get selectionRequired() {\n      return this[selectionRequiredSymbol];\n    }\n    set selectionRequired(selectionRequired) {\n      this[selectionRequiredSymbol] = selectionRequired;\n      if ('selectionRequired' in base.prototype) { super.selectionRequired = selectionRequired; }\n      trackSelectedItem(this);\n    }\n\n    /**\n     * True if selection navigations wrap from last to first, and vice versa.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    get selectionWraps() {\n      return this[selectionWrapsSymbol];\n    }\n    set selectionWraps(value) {\n      this[selectionWrapsSymbol] = String(value) === 'true';\n      if ('selectionWraps' in base.prototype) { super.selectionWraps = value; }\n      updatePossibleNavigations(this);\n    }\n\n    /**\n     * Select the last item in the list.\n     */\n    selectLast() {\n      if (super.selectLast) { super.selectLast(); }\n      return selectIndex(this, this.items.length - 1);\n    }\n\n    /**\n     * Select the next item in the list.\n     */\n    selectNext() {\n      if (super.selectNext) { super.selectNext(); }\n      return selectIndex(this, this.selectedIndex + 1);\n    }\n\n    /**\n     * Select the previous item in the list.\n     *\n     * If the list has no selection, the last item will be selected.\n     */\n    selectPrevious() {\n      if (super.selectPrevious) { super.selectPrevious(); }\n      const newIndex = this.selectedIndex < 0 ?\n        this.items.length - 1 :     // No selection yet; select last item.\n        this.selectedIndex - 1;\n      return selectIndex(this, newIndex);\n    }\n\n    /**\n     * Fires when the selectedItem property changes.\n     *\n     * @memberof SingleSelection\n     * @event selected-item-changed\n     * @param {HTMLElement} detail.selectedItem The new selected item.\n     * @param {HTMLElement} detail.previousItem The previously selected item.\n     */\n\n    /**\n     * Fires when the selectedIndex property changes.\n     *\n     * @memberof SingleSelection\n     * @event selected-index-changed\n     * @param {number} detail.selectedIndex The new selected index.\n     */\n\n  }\n\n  return SingleSelection;\n};\n\n\n// Ensure the given index is within bounds, and select it if it's not already\n// selected.\nfunction selectIndex(element, index) {\n  const count = element.items.length;\n\n  const boundedIndex = (element.selectionWraps) ?\n    // JavaScript mod doesn't handle negative numbers the way we want to wrap.\n    // See http://stackoverflow.com/a/18618250/76472\n    ((index % count) + count) % count :\n\n    // Keep index within bounds of array.\n    Math.max(Math.min(index, count - 1), 0);\n\n  const previousIndex = element.selectedIndex;\n  if (previousIndex !== boundedIndex) {\n    element.selectedIndex = boundedIndex;\n    return true;\n  } else {\n    return false;\n  }\n}\n\n// Following a change in the set of items, or in the value of the\n// `selectionRequired` property, reacquire the selected item. If it's moved,\n// update `selectedIndex`. If it's been removed, and a selection is required,\n// try to select another item.\nfunction trackSelectedItem(element) {\n\n  const items = element.items;\n  const itemCount = items ? items.length : 0;\n\n  const previousSelectedItem = element.selectedItem;\n  if (!previousSelectedItem) {\n    // No item was previously selected.\n    if (element.selectionRequired) {\n      // Select the first item by default.\n      element.selectedIndex = 0;\n    }\n  } else if (itemCount === 0) {\n    // We've lost the selection, and there's nothing left to select.\n    element.selectedItem = null;\n  } else {\n    // Try to find the previously-selected item in the current set of items.\n    const indexInCurrentItems = Array.prototype.indexOf.call(items, previousSelectedItem);\n    const previousSelectedIndex = element.selectedIndex;\n    if (indexInCurrentItems < 0) {\n      // Previously-selected item was removed from the items.\n      // Select the item at the same index (if it exists) or as close as possible.\n      const newSelectedIndex = Math.min(previousSelectedIndex, itemCount - 1);\n      // Select by item, since index may be the same, and we want to raise the\n      // selected-item-changed event.\n      element.selectedItem = items[newSelectedIndex];\n    } else if (indexInCurrentItems !== previousSelectedIndex) {\n      // Previously-selected item still there, but changed position.\n      element.selectedIndex = indexInCurrentItems;\n    }\n  }\n}\n\n// Following a change in selection, report whether it's now possible to\n// go next/previous from the given index.\nfunction updatePossibleNavigations(element) {\n  let canSelectNext;\n  let canSelectPrevious;\n  const items = element.items;\n  if (items == null || items.length === 0) {\n    // No items to select.\n    canSelectNext = false;\n    canSelectPrevious = false;\n  } if (element.selectionWraps) {\n    // Since there are items, can always go next/previous.\n    canSelectNext = true;\n    canSelectPrevious = true;\n  } else {\n    const index = element.selectedIndex;\n    if (index < 0 && items.length > 0) {\n      // Special case. If there are items but no selection, declare that it's\n      // always possible to go next/previous to create a selection.\n      canSelectNext = true;\n      canSelectPrevious = true;\n    } else {\n      // Normal case: we have an index in a list that has items.\n      canSelectPrevious = (index > 0);\n      canSelectNext = (index < items.length - 1);\n    }\n  }\n  if (element.canSelectNext !== canSelectNext) {\n    element.canSelectNext = canSelectNext;\n  }\n  if (element.canSelectPrevious !== canSelectPrevious) {\n    element.canSelectPrevious = canSelectPrevious;\n  }\n}\n","import createSymbol from './createSymbol';\nimport symbols from './symbols';\n\n\nconst playingSymbol = createSymbol('playing');\nconst selectionTimerDurationSymbol = createSymbol('selectionTimerDuration');\nconst timerTimeoutSymbol = createSymbol('timerTimeout');\n\n\n/* Exported function extends a base class with TimerSelection. */\nexport default (base) => {\n\n  /**\n   * Mixin which provides for automatic timed changes in selection.\n   *\n   * This mixin is useful for creating slideshow-like elements such as\n   * [basic-slideshow](../../basic-slideshow) and\n   * [basic-slideshow-with-controls](../../basic-slideshow-with-controls).\n   *\n   * Typical usage:\n   *\n   *     class CarouselWithTimer extends TimerSelectionMixin(Carousel) {}\n   *     customElements.define('carousel-with-arrows', CarouselWithTimer);\n   *\n   * This mixin expects the component to define an `items` property, as well as\n   * `selectFirst` and `selectNext` methods. You can implement those yourself,\n   * or use [ContentItemsMixin](ContentItemsMixin.md) and\n   * [SingleSelectionMixin](SingleSelectionMixin.md).\n   */\n  class TimerSelection extends base {\n\n    constructor() {\n      super();\n      // Set defaults.\n      if (typeof this.playing === 'undefined') {\n        this.playing = this[symbols.defaults].playing;\n      }\n      if (typeof this.selectionTimerDuration === 'undefined') {\n        this.selectionTimerDuration = this[symbols.defaults].selectionTimerDuration;\n      }\n    }\n\n    contentChanged() {\n      if (super.contentChanged) { super.contentChanged(); }\n      restartTimer(this);\n    }\n\n    get [symbols.defaults]() {\n      const defaults = super[symbols.defaults] || {};\n      defaults.playing = false;\n      defaults.selectionTimerDuration = 1000;\n      return defaults;\n    }\n\n    /**\n     * Begin automatic progression of the selection.\n     */\n    play() {\n      if (super.play) { super.play(); }\n      startTimer(this);\n      this[playingSymbol] = true;\n    }\n\n    /**\n     * Pause automatic progression of the selection.\n     */\n    pause() {\n      if (super.pause) { super.pause(); }\n      clearTimer(this);\n      this[playingSymbol] = false;\n    }\n\n    /**\n     * True if the selection is being automatically advanced.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    get playing() {\n      return this[playingSymbol];\n    }\n    set playing(playing) {\n      const previousPlaying = this[playingSymbol];\n      const parsed = String(playing) === 'true'; // Cast to boolean\n      if ('playing' in base.prototype) { super.playing = playing; }\n      if (parsed !== previousPlaying) {\n        if (playing) {\n          this.play();\n        } else {\n          this.pause();\n        }\n      }\n    }\n\n    /*\n     * When the selected item changes (because of something this mixin did, or\n     * was changed by an outside agent like the user), we wait before advancing\n     * to the next item. By triggering the next item this way, we implicitly get\n     * a desirable behavior: if the user changes the selection (e.g., in a\n     * carousel), we let them see that selection state for a while before\n     * advancing the selection ourselves.\n     */\n    get selectedItem() {\n      return super.selectedItem;\n    }\n    set selectedItem(item) {\n      if ('selectedItem' in base.prototype) { super.selectedItem = item; }\n      restartTimer(this);\n    }\n\n    /**\n     * The time in milliseconds that will elapse after the selection changes\n     * before the selection will be advanced to the next item in the list.\n     *\n     * @type {number} - Time in milliseconds\n     * @default 1000 (1 second)\n     */\n    get selectionTimerDuration() {\n      return this[selectionTimerDurationSymbol];\n    }\n    set selectionTimerDuration(value) {\n      this[selectionTimerDurationSymbol] = parseInt(value);\n      if ('selectionTimerDuration' in base.prototype) { super.selectionTimerDuration = value; }\n    }\n\n  }\n\n  return TimerSelection;\n};\n\n\nfunction clearTimer(element) {\n  if (element[timerTimeoutSymbol]) {\n    clearTimeout(element[timerTimeoutSymbol]);\n    element[timerTimeoutSymbol] = null;\n  }\n}\n\nfunction restartTimer(element) {\n  clearTimer(element);\n  if (element.playing && element.items && element.items.length > 0) {\n    startTimer(element);\n  }\n}\n\nfunction startTimer(element) {\n  // If play() is called more than once, cancel any existing timer.\n  clearTimer(element);\n  element[timerTimeoutSymbol] = setTimeout(() => {\n    selectNextWithWrap(element);\n  }, element.selectionTimerDuration);\n}\n\n// Select the next item, wrapping to first item if necessary.\nfunction selectNextWithWrap(element) {\n  const items = element.items;\n  if (items && items.length > 0) {\n    if (element.selectedIndex == null || element.selectedIndex === items.length - 1) {\n      element.selectFirst();\n    } else {\n      element.selectNext();\n    }\n  }\n}\n","/**\n * Helper function to create a symbol that can be used for associating private\n * data with an element.\n *\n * Mixins and component classes often want to associate private data with an\n * element instance, but JavaScript does not have direct support for true\n * private properties. One approach is to use the\n * [Symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol)\n * data type to set and retrieve data on an element.\n *\n * Unfortunately, the Symbol type is not available in Internet Explorer 11. The\n * `createSymbol` helper function exists as a workaround for IE 11. Rather than\n * returning a true Symbol, it simply returns an underscore-prefixed string.\n *\n * Usage:\n *\n *     const fooSymbol = createSymbol('foo');\n *\n *     class MyElement extends HTMLElement {\n *       get foo() {\n *         return this[fooSymbol];\n *       }\n *       set foo(value) {\n *         this[fooSymbol] = value;\n *       }\n *     }\n *\n * In IE 11, this sample will \"hide\" data behind an instance property this._foo.\n * The use of the underscore is meant to reduce (not eliminate) the potential\n * for name conflicts, and discourage (not prevent) external access to this\n * data. In modern browsers, the above code will eliminate the potential of\n * naming conflicts, and better hide the data behind a real Symbol.\n *\n * @function createSymbol\n * @param {string} description - A string to identify the symbol when debugging\n */\nexport default function createSymbol(description) {\n  return typeof Symbol === 'function' ?\n    Symbol(description) :\n    `_${description}`;\n}\n","/*\n * Microtask helper for IE 11.\n *\n * Executing a function as a microtask is trivial in browsers that support\n * promises, whose then() clauses use microtask timing. IE 11 doesn't support\n * promises, but does support MutationObservers, which are also executed as\n * microtasks. So this helper uses an MutationObserver to achieve microtask\n * timing.\n *\n * See https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/\n *\n * Inspired by Polymer's async() function.\n */\n\n\n// The queue of pending callbacks to be executed as microtasks.\nconst callbacks = [];\n\n// Create an element that we will modify to force observable mutations.\nconst element = document.createTextNode('');\n\n// A monotonically-increasing value.\nlet counter = 0;\n\n\n/**\n * Add a callback to the microtask queue.\n *\n * This uses a MutationObserver so that it works on IE 11.\n *\n * NOTE: IE 11 may actually use timeout timing with MutationObservers. This\n * needs more investigation.\n *\n * @function microtask\n * @param {function} callback\n */\nexport default function microtask(callback) {\n  callbacks.push(callback);\n  // Force a mutation.\n  element.textContent = ++counter;\n}\n\n\n// Execute any pending callbacks.\nfunction executeCallbacks() {\n  while (callbacks.length > 0) {\n    const callback = callbacks.shift();\n    callback();\n  }\n}\n\n\n// Create the observer.\nconst observer = new MutationObserver(executeCallbacks);\nobserver.observe(element, {\n  characterData: true\n});\n","import createSymbol from './createSymbol';\nimport toggleClass from './toggleClass';\n\n\n// Symbols for private data members on an element.\nconst safeToSetAttributesSymbol = createSymbol('safeToSetAttributes');\nconst pendingAttributesSymbol = createSymbol('pendingAttributes');\nconst pendingClassesSymbol = createSymbol('pendingClasses');\n\n\n/**\n * Helper functions for updating attributes, including the `class` attribute.\n */\nexport default {\n\n  /**\n   * Perform any pending updates to attributes and classes.\n   *\n   * This writes any `setAttribute` or `toggleClass` values that were performed\n   * before an element was attached to the document for the first time.\n   *\n   * This method should be called by mixins/components in their\n   * `connectedCallback`. If mulitple mixins/components invoke this during the\n   * same `connectedCallback`, only the first call will have any effect. The\n   * subsequent calls will be harmless.\n   *\n   * @param {HTMLElement} element - The element being added to the document.\n   */\n  connected(element) {\n    element[safeToSetAttributesSymbol] = true;\n\n    // Set any pending attributes.\n    if (element[pendingAttributesSymbol]) {\n      for (let attribute in element[pendingAttributesSymbol]) {\n        const value = element[pendingAttributesSymbol][attribute];\n        setAttributeToElement(element, attribute, value);\n      }\n      element[pendingAttributesSymbol] = null;\n    }\n\n    // Set any pending classes.\n    if (element[pendingClassesSymbol]) {\n      for (let className in element[pendingClassesSymbol]) {\n        const value = element[pendingClassesSymbol][className];\n        toggleClass(element, className, value);\n      }\n      element[pendingClassesSymbol] = null;\n    }\n  },\n\n  /**\n   * Set/unset the attribute with the indicated name.\n   *\n   * This method exists primarily to handle the case where an element wants to\n   * set a default property value that should be reflected as an attribute. An\n   * important limitation of custom element consturctors is that they cannot\n   * set attributes. A call to `setAttribute` during the constructor will\n   * be deferred until the element is connected to the document.\n   *\n   * @param {string} attribute - The name of the *attribute* (not property) to set.\n   * @param {object} value - The value to set. If null, the attribute will be removed.\n   */\n  setAttribute(element, attribute, value) {\n    if (element[safeToSetAttributesSymbol]) {\n      // Safe to set attributes immediately.\n      setAttributeToElement(element, attribute, value);\n    } else {\n      // Defer setting attributes until the first time we're connected.\n      if (!element[pendingAttributesSymbol]) {\n        element[pendingAttributesSymbol] = {};\n      }\n      element[pendingAttributesSymbol][attribute] = value;\n    }\n  },\n\n  /**\n   * Set/unset the class with the indicated name.\n   *\n   * This method exists primarily to handle the case where an element wants to\n   * set a default property value that should be reflected as as class. An\n   * important limitation of custom element consturctors is that they cannot\n   * set attributes, including the `class` attribute. A call to\n   * `toggleClass` during the constructor will be deferred until the element\n   * is connected to the document.\n   *\n   * @param {string} className - The name of the class to set.\n   * @param {object} value - True to set the class, false to remove it.\n   */\n  toggleClass(element, className, value) {\n    if (element[safeToSetAttributesSymbol]) {\n      // Safe to set class immediately.\n      toggleClass(element, className, value);\n    } else {\n      // Defer setting class until the first time we're connected.\n      if (!element[pendingClassesSymbol]) {\n        element[pendingClassesSymbol] = {};\n      }\n      element[pendingClassesSymbol][className] = value;\n    }\n  }\n\n};\n\n\n// Reflect the attribute to the given element.\n// If the value is null, remove the attribute.\nfunction setAttributeToElement(element, attributeName, value) {\n  if (value === null || typeof value === 'undefined') {\n    element.removeAttribute(attributeName);\n  } else {\n    const text = String(value);\n    // Avoid recursive attributeChangedCallback calls.\n    if (element.getAttribute(attributeName) !== text) {\n      element.setAttribute(attributeName, value);\n    }\n  }\n}\n","import createSymbol from './createSymbol';\n\n/**\n * A collection of Symbol objects for standard component properties and methods.\n *\n * These Symbol objects are used to allow mixins and a component to internally\n * communicate, without exposing these properties and methods in the component's\n * public API.\n *\n * To use these Symbol objects in your own component, include this module and\n * then create a property or method whose key is the desired Symbol.\n *\n *     import 'SingleSelectionMixin' from 'basic-component-mixins/src/SingleSelectionMixin';\n *     import 'symbols' from 'basic-component-mixins/src/symbols';\n *\n *     class MyElement extends SingleSelectionMixin(HTMLElement) {\n *       [symbols.itemSelected](item, selected) {\n *         // This will be invoked whenever an item is selected/deselected.\n *       }\n *     }\n *\n * @module symbols\n */\nconst symbols = {\n\n  /**\n   * Symbol for the `defaults` property.\n   *\n   * This property can be used to set or override defaults that will be applied\n   * to a new component instance. When implementing this property, take care to\n   * first acquire any defaults defined by the superclass. The standard idiom is\n   * as follows:\n   *\n   *     get [symbols.defaults]() {\n   *       const defaults = super[symbols.defaults] || {};\n   *       // Set or override default values here\n   *       defaults.customProperty = false;\n   *       return defaults;\n   *     }\n   *\n   * @var {object} defaults\n   */\n  defaults: createSymbol('defaults'),\n\n  /**\n   * Symbol for the `dragging` property.\n   *\n   * Components like carousels often define animated CSS transitions for\n   * sliding effects. Such a transition should usually *not* be applied while\n   * the user is dragging, because a CSS animation will introduce a lag that\n   * makes the swipe feel sluggish. Instead, as long as the user is dragging\n   * with their finger down, the transition should be suppressed. When the\n   * user releases their finger, the transition can be restored, allowing the\n   * animation to show the carousel sliding into its final position.\n   *\n   * @type {boolean} true if a drag is in progress, false if not.\n   */\n  dragging: createSymbol('dragging'),\n\n  /**\n   * Symbol for the `goDown` method.\n   *\n   * This method is invoked when the user wants to go/navigate down.\n   *\n   * @function goDown\n   */\n  goDown: createSymbol('goDown'),\n\n  /**\n   * Symbol for the `goEnd` method.\n   *\n   * This method is invoked when the user wants to go/navigate to the end (e.g.,\n   * of a list).\n   *\n   * @function goEnd\n   */\n  goEnd: createSymbol('goEnd'),\n\n  /**\n   * Symbol for the `goLeft` method.\n   *\n   * This method is invoked when the user wants to go/navigate left.\n   *\n   * @function goLeft\n   */\n  goLeft: createSymbol('goLeft'),\n\n  /**\n   * Symbol for the `goRight` method.\n   *\n   * This method is invoked when the user wants to go/navigate right.\n   *\n   * @function goRight\n   */\n  goRight: createSymbol('goRight'),\n\n  /**\n   * Symbol for the `goStart` method.\n   *\n   * This method is invoked when the user wants to go/navigate to the start\n   * (e.g., of a list).\n   *\n   * @function goStart\n   */\n  goStart: createSymbol('goStart'),\n\n  /**\n   * Symbol for the `goUp` method.\n   *\n   * This method is invoked when the user wants to go/navigate up.\n   *\n   * @function goUp\n   */\n  goUp: createSymbol('goUp'),\n\n  /**\n   * Symbol for the `itemAdded` method.\n   *\n   * This method is invoked when a new item is added to a list.\n   *\n   * @function itemAdded\n   * @param {HTMLElement} item - the item being selected/deselected\n   */\n  itemAdded: createSymbol('itemAdded'),\n\n\n  /**\n   * Symbol for the `itemsChanged` method.\n   *\n   * This method is invoked when the underlying contents change. It is also\n   * invoked on component initialization – since the items have \"changed\" from\n   * being nothing.\n   */\n  itemsChanged: createSymbol('itemsChanged'),\n\n  /**\n   * Symbol for the `itemSelected` method.\n   *\n   * This method is invoked when an item becomes selected or deselected.\n   *\n   * @function itemSelected\n   * @param {HTMLElement} item - the item being selected/deselected\n   * @param {boolean} selected - true if the item is selected, false if not\n   */\n  itemSelected: createSymbol('itemSelected'),\n\n  /**\n   * Symbol for the `keydown` method.\n   *\n   * This method is invoked when an element receives a `keydown` event.\n   *\n   * @function keydown\n   * @param {KeyboardEvent} event - the event being processed\n   */\n  keydown: createSymbol('keydown'),\n\n  /**\n   * Symbol for the `template` property.\n   *\n   * This property returns a component's template.\n   *\n   * @type {string|HTMLElement}\n   */\n  template: createSymbol('template')\n};\n\nexport default symbols;\n","/**\n * Helper function for standard classList.toggle() behavior on old browsers,\n * namely IE 11.\n *\n * The standard\n * [classlist](https://developer.mozilla.org/en-US/docs/Web/API/Element/classList)\n * object has a `toggle()` function that supports a second Boolean parameter\n * that can be used to succinctly turn a class on or off. This feature is often\n * useful in designing custom elements, which may want to externally reflect\n * component state in a CSS class that can be used for styling purposes.\n *\n * Unfortunately, IE 11 does not support the Boolean parameter to\n * `classList.toggle()`. This helper function behaves like the standard\n * `toggle()`, including support for the Boolean parameter, so that it can be\n * used even on IE 11.\n *\n * @function toggleClass\n * @param {HTMLElement} element - The element to modify\n * @param {string} className - The class to add/remove\n * @param {boolean} [force] - Force the class to be added (if true) or removed\n *                            (if false)\n */\nexport default function toggleClass(element, className, force) {\n  const classList = element.classList;\n  const addClass = (typeof force === 'undefined') ?\n    !classList.contains(className) :\n    force;\n  if (addClass) {\n    classList.add(className);\n  } else {\n    classList.remove(className);\n  }\n  return addClass;\n}\n","import AttributeMarshallingMixin from '../../basic-component-mixins/src/AttributeMarshallingMixin';\nimport ComposableMixin from '../../basic-component-mixins/src/ComposableMixin';\nimport DistributedChildrenMixin from '../../basic-component-mixins/src/DistributedChildrenMixin';\nimport ShadowElementReferencesMixin from '../../basic-component-mixins/src/ShadowElementReferencesMixin';\nimport ShadowTemplateMixin from '../../basic-component-mixins/src/ShadowTemplateMixin';\n\n\n/**\n * A sample general-purpose base class for defining custom elements that mixes\n * in some common features: template stamping into a shadow root, shadow element\n * references, marshalling attributes to properties, and retrieving the children\n * distributed to a component.\n *\n * This base class is not special in any way, and is defined only as a\n * convenient shorthand for applying the mixins listed above. You can use this\n * class as a base class for your own elements, or easily create your own base\n * class by applying the same set of mixins.\n *\n * The ElementBase base class does not register itself as a custom element with\n * the browser, and hence cannot be independently instantiated.\n *\n * @mixes AttributeMarshallingMixin\n * @mixes ComposableMixin\n * @mixes DistributedChildrenMixin\n * @mixes ShadowElementReferencesMixin\n * @mixes ShadowTemplateMixin\n */\nclass ElementBase extends ComposableMixin(HTMLElement).compose(\n  ShadowTemplateMixin,          // before node finding, so shadow root is populated\n  ShadowElementReferencesMixin, // before marshalling, so properties can use refs\n  AttributeMarshallingMixin,\n  DistributedChildrenMixin\n) {}\n\nexport default ElementBase;\n","/*\n * This file is transpiled to create an ES5-compatible distribution in which\n * the package's main feature(s) are available via the window.Basic global.\n * If you're already using ES6 yourself, ignore this file, and instead import\n * the source file(s) you want from the src folder.\n */\n\nimport SlideshowWithControls from './src/SlideshowWithControls';\n\nwindow.Basic = window.Basic || {};\nwindow.Basic.SlideshowWithControls = SlideshowWithControls;\n","import Slideshow from '../../basic-slideshow/src/Slideshow';\nimport PlayControlsMixin from '../../basic-component-mixins/src/PlayControlsMixin';\n\n/**\n * An extension of\n * [basic-slideshow](../basic-slideshow) that adds play controls\n * via [PlayControlsMixin](../basic-component-mixins/docs/PlayControlsMixin.md).\n *\n * [Live demo](http://basicwebcomponents.org/basic-web-components/packages/basic-slideshow-with-controls/)\n *\n * @extends Slideshow\n * @mixes PlayControlsMixin\n */\nclass SlideshowWithControls extends PlayControlsMixin(Slideshow) {}\ncustomElements.define('basic-slideshow-with-controls', SlideshowWithControls);\n\nexport default SlideshowWithControls;\n","import AnimationStage from '../../basic-animation-stage/src/AnimationStage';\nimport symbols from '../../basic-component-mixins/src/symbols';\nimport TimerSelectionMixin from '../../basic-component-mixins/src/TimerSelectionMixin';\n\n\nconst base = AnimationStage.compose(\n  TimerSelectionMixin\n);\n\n\n/**\n * Slideshow with animated transitions.\n *\n * [Live demo](http://basicwebcomponents.org/basic-web-components/packages/basic-slideshow/)\n *\n * By default the slideshow will immediately begin playing when it is connected\n * to the document, advance every 3000 ms (3 seconds), and use a simple\n * crossfade effect. For a variation with play controls, see\n * [basic-slideshow-with-controls](../basic-slideshow-with-controls).\n *\n * This component can be used on its own. To incorporate slideshow behavior into\n * a component of your own, apply the\n * [TimerSelectionMixin](../basic-component-mixins/docs/TimerSelectionMixin.md).\n *\n * @extends AnimationStage\n * @mixes TimerSelectionMixin\n */\nclass Slideshow extends base {\n\n  get [symbols.defaults]() {\n    const defaults = super[symbols.defaults] || {};\n    defaults.playing = true;\n    defaults.selectionAnimationDuration = 500;\n    defaults.selectionAnimationEffect = 'crossfade';\n    defaults.selectionRequired = true;\n    defaults.selectionTimerDuration = 3000;\n    defaults.selectionWraps = true;\n    return defaults;\n  }\n\n}\n\n\ncustomElements.define('basic-slideshow', Slideshow);\nexport default Slideshow;\n"]}