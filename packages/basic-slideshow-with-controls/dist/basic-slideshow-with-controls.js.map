{"version":3,"sources":["node_modules/browser-pack/_prelude.js","packages/basic-component-mixins/src/AttributeMarshallingMixin.js","packages/basic-component-mixins/src/ComposableMixin.js","packages/basic-component-mixins/src/ContentItemsMixin.js","packages/basic-component-mixins/src/DistributedChildrenContentMixin.js","packages/basic-component-mixins/src/DistributedChildrenMixin.js","packages/basic-component-mixins/src/FractionalSelectionMixin.js","packages/basic-component-mixins/src/PlayControlsMixin.js","packages/basic-component-mixins/src/SelectionAnimationMixin.js","packages/basic-component-mixins/src/SelectionAriaActiveMixin.js","packages/basic-component-mixins/src/ShadowElementReferencesMixin.js","packages/basic-component-mixins/src/ShadowTemplateMixin.js","packages/basic-component-mixins/src/SingleSelectionMixin.js","packages/basic-component-mixins/src/TimerSelectionMixin.js","packages/basic-component-mixins/src/createSymbol.js","packages/basic-component-mixins/src/microtask.js","packages/basic-component-mixins/src/safeAttributes.js","packages/basic-component-mixins/src/symbols.js","packages/basic-component-mixins/src/toggleClass.js","packages/basic-element-base/src/ElementBase.js","packages/basic-slideshow-with-controls/globals.js","packages/basic-slideshow-with-controls/src/SlideshowWithControls.js","packages/basic-slideshow/src/Slideshow.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","attributeToPropertyName","attributeName","propertyName","attributeToPropertyNames","hypenRegEx","replace","match","toUpperCase","attributesForClass","classFn","HTMLElement","Object","baseClass","getPrototypeOf","prototype","constructor","baseAttributes","propertyNames","getOwnPropertyNames","setterNames","filter","getOwnPropertyDescriptor","set","attributes","map","setterName","propertyNameToAttribute","diff","attribute","indexOf","concat","propertyNamesToAttributes","uppercaseRegEx","toLowerCase","_safeAttributes","base","AttributeMarshalling","_base","_classCallCheck","this","_possibleConstructorReturn","__proto__","apply","arguments","_inherits","_createClass","key","value","oldValue","newValue","_get","_safeAttributes2","default","connected","setAttribute","className","toggleClass","get","composeClass","mixin","Subclass","_base2","copyOwnProperties","NON_MIXABLE_OBJECT_PROPERTIES","source","target","ignorePropertyNames","undefined","forEach","name","descriptor","defineProperty","Composable","_len","mixins","Array","_key","reduce","filterAuxiliaryElements","items","auxiliaryTags","item","localName","_createSymbol","_toggleClass","_symbols","itemsSymbol","_createSymbol2","itemInitializedSymbol","ContentItems","_symbols2","itemsChanged","itemAdded","itemSelected","selected","_toggleClass2","_this2","dispatchEvent","CustomEvent","content","_microtask","DistributedChildrenContent","_this","shadowRoot","slots","querySelectorAll","slot","addEventListener","event","contentChanged","_microtask2","distributedChildren","console","warn","_set","expandContentElements","nodes","includeTextNodes","_ref","expanded","node","isSlot","HTMLSlotElement","assignedNodes","flatten","Text","flattened","_toConsumableArray","DistributedChildren","children","childNodes","strings","distributedChildNodes","child","textContent","join","FractionalSelection","selectedFraction","selectedFractionSymbol","helpers","dampedSelection","selection","itemCount","bound","damped","damping","x","y","elementSelection","element","selectedIndex","selectionParts","index","Math","ceil","floor","fraction","wrappedSelection","wrappedSelectionParts","wrap","PlayControls","$","previousButton","selectPrevious","playButton","playing","nextButton","selectNext","keydown","handled","keyCode","template","baseTemplate","SelectionAnimation","selectionAnimationDuration","defaults","selectionAnimationEffect","selectionAnimationKeyframes","dragging","_resetAnimations","renderSelection","draggingSymbol","previousValue","resetAnimationsOnNextRenderSymbol","selectionAnimationDurationSymbol","selectionAnimationEffectSymbol","standardEffectKeyframes","selectionAnimationKeyframesSymbol","animateSelection","fromSelection","toSelection","keyframes","playingAnimationSymbol","timings","effectTimingsForSelectionAnimation","selectionWraps","selectionIndex","_FractionalSelectionMixin2","totalSteps","stepsToIndex","forward","nextUpIndex","isItemIndexInBounds","lastAnimationDetails","timing","showItem","animation","animate","animationSymbol","endDelay","onfinish","selectionAnimationFinished","lastAnimationSymbol","getAnimationForItemIndex","duration","fill","pause","previousSelection","previousSelectionSymbol","renderSelectionInstantly","animationFractions","animationFractionsForSelection","animationFraction","setAnimationFraction","animations","cancel","details","itemIndex","currentTime","flag","style","visibility","allowWrap","steps","wrapSteps","abs","_FractionalSelectionMixin","toIndex","direction","totalDuration","stepDuration","positionInSequence","delay","crossfade","opacity","reveal","transform","zIndex","revealWithFade","showAdjacent","slide","slideWithGap","idCount","SelectionAriaActive","getAttribute","role","id","baseId","itemId","removeAttribute","ShadowElementReferences","nodesWithIds","createTemplateWithInnerHTML","innerHTML","document","createElement","div","appendChild","shimTemplateStyles","tag","window","WebComponents","ShadowCSS","shimStyling","ShadowTemplate","ShadowDOMPolyfill","root","attachShadow","mode","clone","importNode","selectIndex","count","boundedIndex","max","min","previousIndex","trackSelectedItem","previousSelectedItem","selectedItem","indexInCurrentItems","previousSelectedIndex","newSelectedIndex","selectionRequired","updatePossibleNavigations","canSelectNext","canSelectPrevious","canSelectNextSymbol","canSelectPreviousSymbol","selectionRequiredSymbol","selectionWrapsSymbol","externalSelectedIndexSymbol","externalSelectedItemSymbol","internalSelectedIndexSymbol","internalSelectedItemSymbol","SingleSelection","newIndex","previousCanSelectNext","previousCanSelectPrevious","hasItems","detail","String","clearTimer","timerTimeoutSymbol","clearTimeout","restartTimer","startTimer","setTimeout","selectNextWithWrap","selectionTimerDuration","selectFirst","playingSymbol","selectionTimerDurationSymbol","TimerSelection","previousPlaying","parsed","play","parseInt","createSymbol","description","Symbol","microtask","callback","callbacks","push","counter","executeCallbacks","shift","createTextNode","observer","MutationObserver","observe","characterData","setAttributeToElement","text","safeToSetAttributesSymbol","pendingAttributesSymbol","pendingClassesSymbol","_value","_toggleClass3","symbols","goDown","goEnd","goLeft","goRight","goStart","goUp","force","classList","addClass","contains","add","remove","_AttributeMarshallingMixin","_ComposableMixin","_DistributedChildrenMixin","_ShadowElementReferencesMixin","_ShadowTemplateMixin","ElementBase","_ComposableMixin2","compose","_ShadowTemplateMixin2","_ShadowElementReferencesMixin2","_AttributeMarshallingMixin2","_DistributedChildrenMixin2","_SlideshowWithControls","Basic","SlideshowWithControls","_SlideshowWithControls2","_Slideshow","_PlayControlsMixin2","_PlayControlsMixin3","_Slideshow2","customElements","define","_ElementBase","_ContentItemsMixin","_DistributedChildrenContentMixin","_SelectionAnimationMixin","_SelectionAriaActiveMixin","_SingleSelectionMixin","_TimerSelectionMixin","_ElementBase2","_ContentItemsMixin2","_DistributedChildrenContentMixin2","_SelectionAnimationMixin2","_SelectionAriaActiveMixin2","_SingleSelectionMixin2","_TimerSelectionMixin2","Slideshow"],"mappings":"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","file":"basic-slideshow-with-controls.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import safeAttributes from './safeAttributes';\n\n\n// Memoized maps of attribute to property names and vice versa.\nconst attributeToPropertyNames = {};\nconst propertyNamesToAttributes = {};\n\n\n/* Exported function extends a base class with AttributeMarshalling. */\nexport default (base) => {\n\n  /**\n   * Mixin which marshalls attributes to properties and vice versa.\n   *\n   * If your component exposes a setter for a property, it's generally a good\n   * idea to let devs using your component be able to set that property in HTML\n   * via an element attribute. You can code that yourself by writing an\n   * `attributeChangedCallback`, or you can use this mixin to get a degree of\n   * automatic support.\n   *\n   * This mixin implements an `attributeChangedCallback` that will attempt to\n   * convert a change in an element attribute into a call to the corresponding\n   * property setter. Attributes typically follow hyphenated names (\"foo-bar\"),\n   * whereas properties typically use camelCase names (\"fooBar\"). This mixin\n   * respects that convention, automatically mapping the hyphenated attribute\n   * name to the corresponding camelCase property name.\n   *\n   * Example: You define a component using this mixin:\n   *\n   *     class MyElement extends AttributeMarshallingMixin(HTMLElement) {\n   *       get fooBar() { return this._fooBar; }\n   *       set fooBar(value) { this._fooBar = value; }\n   *     }\n   *     customElements.define('my-element', MyElement);\n   *\n   * If someone then instantiates your component in HTML:\n   *\n   *     <my-element foo-bar=\"Hello\"></my-element>\n   *\n   * Then, after the element has been upgraded, the `fooBar` setter will\n   * automatically be invoked with the initial value \"Hello\".\n   *\n   * For the time being, this mixin only supports string-valued properties.\n   * If you'd like to convert string attributes to other types (numbers,\n   * booleans), you need to implement `attributeChangedCallback` yourself.\n   */\n  class AttributeMarshalling extends base {\n\n    /*\n     * Handle a change to the attribute with the given name.\n     */\n    attributeChangedCallback(attributeName, oldValue, newValue) {\n      if (super.attributeChangedCallback) { super.attributeChangedCallback(); }\n      const propertyName = attributeToPropertyName(attributeName);\n      // If the attribute name corresponds to a property name, set the property.\n      // Ignore standard HTMLElement properties handled by the DOM.\n      if (propertyName in this && !(propertyName in HTMLElement.prototype)) {\n        this[propertyName] = newValue;\n      }\n    }\n\n    connectedCallback() {\n      if (super.connectedCallback) { super.connectedCallback(); }\n      safeAttributes.connected(this);\n    }\n\n    static get observedAttributes() {\n      return attributesForClass(this);\n    }\n\n    /**\n     * Set/unset the attribute with the indicated name.\n     *\n     * This method exists primarily to handle the case where an element wants to\n     * set a default property value that should be reflected as an attribute. An\n     * important limitation of custom element consturctors is that they cannot\n     * set attributes. A call to `reflectAttribute` during the constructor will\n     * be deferred until the element is connected to the document.\n     *\n     * @param {string} attribute - The name of the *attribute* (not property) to set.\n     * @param {object} value - The value to set. If null, the attribute will be removed.\n     */\n    reflectAttribute(attribute, value) {\n      return safeAttributes.setAttribute(this, attribute, value);\n    }\n\n    /**\n     * Set/unset the class with the indicated name.\n     *\n     * This method exists primarily to handle the case where an element wants to\n     * set a default property value that should be reflected as as class. An\n     * important limitation of custom element consturctors is that they cannot\n     * set attributes, including the `class` attribute. A call to\n     * `reflectClass` during the constructor will be deferred until the element\n     * is connected to the document.\n     *\n     * @param {string} className - The name of the class to set.\n     * @param {object} value - True to set the class, false to remove it.\n     */\n    reflectClass(className, value) {\n      return safeAttributes.toggleClass(this, className, value);\n    }\n\n  }\n\n  return AttributeMarshalling;\n};\n\n\n// Convert hyphenated foo-bar attribute name to camel case fooBar property name.\nfunction attributeToPropertyName(attributeName) {\n  let propertyName = attributeToPropertyNames[attributeName];\n  if (!propertyName) {\n    // Convert and memoize.\n    const hypenRegEx = /-([a-z])/g;\n    propertyName = attributeName.replace(hypenRegEx,\n        match => match[1].toUpperCase());\n    attributeToPropertyNames[attributeName] = propertyName;\n  }\n  return propertyName;\n}\n\nfunction attributesForClass(classFn) {\n\n  // We treat the element base classes as if they have no attributes, since we\n  // don't want to receive attributeChangedCallback for them.\n  if (classFn === HTMLElement || classFn === Object) {\n    return [];\n  }\n\n  // Get attributes for parent class.\n  const baseClass = Object.getPrototypeOf(classFn.prototype).constructor;\n  const baseAttributes = attributesForClass(baseClass);\n\n  // Get attributes for this class.\n  const propertyNames = Object.getOwnPropertyNames(classFn.prototype);\n  const setterNames = propertyNames.filter(propertyName =>\n    typeof Object.getOwnPropertyDescriptor(\n        classFn.prototype, propertyName).set === 'function');\n  const attributes = setterNames.map(setterName =>\n      propertyNameToAttribute(setterName));\n\n  // Merge.\n  const diff = attributes.filter(attribute =>\n      baseAttributes.indexOf(attribute) < 0);\n  return baseAttributes.concat(diff);\n}\n\n// Convert a camel case fooBar property name to a hyphenated foo-bar attribute.\nfunction propertyNameToAttribute(propertyName) {\n  let attribute = propertyNamesToAttributes[propertyName];\n  if (!attribute) {\n    // Convert and memoize.\n    const uppercaseRegEx = /([A-Z])/g;\n    attribute = propertyName.replace(uppercaseRegEx, '-$1').toLowerCase();\n  }\n  return attribute;\n}\n","/* Exported function extends a base class with Composable. */\nexport default (base) => {\n\n  /**\n   * Mixin to make a class more easily composable with other mixins.\n   *\n   * This mixin contributes a `compose` method that applies a set of mixin\n   * functions and returns the resulting new class. This sugar can make the\n   * application of many mixins at once easier to read.\n   */\n  class Composable extends base {\n\n    /**\n     * Apply a set of mixin functions or mixin objects to the present class and\n     * return the new class.\n     *\n     * Instead of writing:\n     *\n     *     let MyClass = Mixin1(Mixin2(Mixin3(Mixin4(Mixin5(BaseClass)))));\n     *\n     * You can write:\n     *\n     *     let MyClass = ComposableMixin(BaseClass).compose(\n     *       Mixin1,\n     *       Mixin2,\n     *       Mixin3,\n     *       Mixin4,\n     *       Mixin5\n     *     );\n     *\n     * This function can also take mixin objects. A mixin object is just a\n     * shorthand for a mixin function that creates a new subclass with the given\n     * members. The mixin object's members are *not* copied directly onto the\n     * prototype of the base class, as with traditional mixins.\n     *\n     * In addition to providing syntactic sugar, this mixin can be used to\n     * define a class in ES5, which lacks ES6's `class` keyword.\n     *\n     * @param {...mixins} mixins - A set of mixin functions or objects to apply.\n     */\n    static compose(...mixins) {\n      // We create a new subclass for each mixin in turn. The result becomes\n      // the base class extended by any subsequent mixins. It turns out that\n      // we can use Array.reduce() to concisely express this, using the current\n      // object as the seed for reduce().\n      return mixins.reduce(composeClass, this);\n    }\n\n  }\n\n  return Composable;\n};\n\n\n// Properties defined by Object that we don't want to mixin.\nconst NON_MIXABLE_OBJECT_PROPERTIES = [\n  'constructor'\n];\n\n/*\n * Apply the mixin to the given base class to return a new class.\n * The mixin can either be a function that returns the modified class, or a\n * plain object whose members will be copied to the new class' prototype.\n */\nfunction composeClass(base, mixin) {\n  if (typeof mixin === 'function') {\n    // Mixin function\n    return mixin(base);\n  } else {\n    // Mixin object\n    class Subclass extends base {}\n    copyOwnProperties(mixin, Subclass.prototype, NON_MIXABLE_OBJECT_PROPERTIES);\n    return Subclass;\n  }\n}\n\n\n/*\n * Copy the given properties/methods to the target.\n * Return the updated target.\n */\nfunction copyOwnProperties(source, target, ignorePropertyNames = []) {\n  Object.getOwnPropertyNames(source).forEach(name => {\n    if (ignorePropertyNames.indexOf(name) < 0) {\n      const descriptor = Object.getOwnPropertyDescriptor(source, name);\n      Object.defineProperty(target, name, descriptor);\n    }\n  });\n  return target;\n}\n","import createSymbol from './createSymbol';\nimport toggleClass from './toggleClass';\nimport symbols from './symbols';\n\n\n// Symbols for private data members on an element.\nconst itemsSymbol = createSymbol('items');\nconst itemInitializedSymbol = createSymbol('itemInitialized');\n\n\n/* Exported function extends a base class with ContentItems. */\nexport default (base) => {\n\n  /**\n   * Mixin which maps content semantics (elements) to list item semantics.\n   *\n   * Items differ from element contents in several ways:\n   *\n   * * They are often referenced via index.\n   * * They may have a selection state.\n   * * It's common to do work to initialize the appearance or state of a new\n   *   item.\n   * * Auxiliary invisible child elements are filtered out and not counted as\n   *   items. Auxiliary elements include link, script, style, and template\n   *   elements. This filtering ensures that those auxiliary elements can be\n   *   used in markup inside of a list without being treated as list items.\n   *\n   * This mixin expects a component to provide a `content` property returning a\n   * raw set of elements. You can provide that yourself, or use\n   * [DistributedChildrenContentMixin](DistributedChildrenContentMixin.md).\n   *\n   * The most commonly referenced property defined by this mixin is the `items`\n   * property. To avoid having to do work each time that property is requested,\n   * this mixin supports an optimized mode. If you invoke the `contentChanged`\n   * method when the set of items changes, the mixin concludes that you'll take\n   * care of notifying it of future changes, and turns on the optimization. With\n   * that on, the mixin saves a reference to the computed set of items, and will\n   * return that immediately on subsequent calls to the `items` property. If you\n   * use this mixin in conjunction with\n   * [DistributedChildrenContentMixin](DistributedChildrenContentMixin.md), the\n   * `contentChanged` method will be invoked for you when the element's children\n   * change, turning on the optimization automatically.\n   */\n  class ContentItems extends base {\n\n    contentChanged() {\n      if (super.contentChanged) { super.contentChanged(); }\n\n      // Since we got the contentChanged call, we'll assume we'll be notified if\n      // the set of items changes later. We turn on memoization of the items\n      // property by setting our internal property to null (instead of\n      // undefined).\n      this[itemsSymbol] = null;\n\n      this[symbols.itemsChanged]();\n    }\n\n    /**\n     * This method is invoked whenever a new item is added to the list.\n     *\n     * The default implementation of this method does nothing. You can override\n     * this to perform per-item initialization.\n     *\n     * @param {HTMLElement} item - The item that was added.\n     */\n    [symbols.itemAdded](item) {\n      if (super[symbols.itemAdded]) { super[symbols.itemAdded](item); }\n    }\n\n    /**\n     * The selection state for a single item has changed.\n     *\n     * Invoke this method to signal that the selected state of the indicated item\n     * has changed. By default, this applies a `selected` CSS class if the item\n     * is selected, and removed it if not selected.\n     *\n     * @param {HTMLElement} item - The item whose selection state has changed.\n     * @param {boolean} selected - True if the item is selected, false if not.\n     */\n    [symbols.itemSelected](item, selected) {\n      if (super[symbols.itemSelected]) { super[symbols.itemSelected](item, selected); }\n      toggleClass(item, 'selected', selected);\n    }\n\n    /**\n     * The current set of items in the list. See the top-level documentation for\n     * mixin for a description of how items differ from plain content.\n     *\n     * @type {HTMLElement[]}\n     */\n    get items() {\n      let items;\n      if (this[itemsSymbol] == null) {\n        items = filterAuxiliaryElements(this.content);\n        // Note: test for *equality* with null; don't treat undefined as a match.\n        if (this[itemsSymbol] === null) {\n          // Memoize the set of items.\n          this[itemsSymbol] = items;\n        }\n      } else {\n        // Return the memoized items.\n        items = this[itemsSymbol];\n      }\n      return items;\n    }\n\n    /**\n     * This method is invoked when the underlying contents change. It is also\n     * invoked on component initialization – since the items have \"changed\" from\n     * being nothing.\n     */\n    [symbols.itemsChanged]() {\n      if (super[symbols.itemsChanged]) { super[symbols.itemsChanged](); }\n\n      // Perform per-item initialization.\n      Array.prototype.forEach.call(this.items, item => {\n        if (!item[itemInitializedSymbol]) {\n          this[symbols.itemAdded](item);\n          item[itemInitializedSymbol] = true;\n        }\n      });\n\n      this.dispatchEvent(new CustomEvent('items-changed'));\n    }\n\n    /**\n     * Fires when the items in the list change.\n     *\n     * @memberof ContentItems\n     * @event items-changed\n     */\n  }\n\n  return ContentItems;\n};\n\n\n// Return the given elements, filtering out auxiliary elements that aren't\n// typically visible. Items which are not elements are returned as is.\nfunction filterAuxiliaryElements(items) {\n  const auxiliaryTags = [\n    'link',\n    'script',\n    'style',\n    'template'\n  ];\n  return [].filter.call(items, function(item) {\n    return !item.localName || auxiliaryTags.indexOf(item.localName) < 0;\n  });\n}\n","import microtask from './microtask';\n\n\n/* Exported function extends a base class with DistributedChildrenContent. */\nexport default (base) => {\n\n  /**\n   * Mixin which defines a component's content as its children, expanding any\n   * nodes distributed to the component's slots.\n   *\n   * This also provides notification of changes to a component's content. It\n   * will invoke a `contentChanged` method when the component is first\n   * instantiated, and whenever its distributed children change. This is an\n   * easy way to satisfy the Gold Standard checklist item for monitoring\n   * [Content Changes](https://github.com/webcomponents/gold-standard/wiki/Content-Changes).\n   *\n   * Example:\n   *\n   * ```\n   * let base = DistributedChildrenContentMixin(DistributedChildrenMixin(HTMLElement));\n   * class CountingElement extends base {\n   *\n   *   constructor() {\n   *     super();\n   *     let root = this.attachShadow({ mode: 'open' });\n   *     root.innerHTML = `<slot></slot>`;\n   *   }\n   *\n   *   contentChanged() {\n   *     // Count the component's children, both initially and when changed.\n   *     this.count = this.distributedChildren.length;\n   *   }\n   *\n   * }\n   * ```\n   *\n   * Note that content change detection depends upon the element having at least\n   * one `slot` element in its shadow subtree.\n   *\n   * This mixin is intended for use with the\n   * [DistributedChildrenMixin](DistributedChildrenMixin.md). See that mixin for\n   * a discussion of how that works. This DistributedChildrenContentMixin\n   * provides an easy way of defining the \"content\" of a component as the\n   * component's distributed children. That in turn lets mixins like\n   * [ContentItemsMixin](ContentItemsMixin.md) manipulate the children as list\n   * items.\n   */\n  class DistributedChildrenContent extends base {\n\n    constructor() {\n      super();\n\n      if (this.shadowRoot) {\n        // Listen to changes on all slots.\n        const slots = this.shadowRoot.querySelectorAll('slot');\n        slots.forEach(slot => slot.addEventListener('slotchange', event => {\n          this.contentChanged();\n        }));\n      }\n\n      // Make an initial call to contentChanged() so that the component can do\n      // initialization that it normally does when content changes.\n      //\n      // This will invoke contentChanged() handlers in other mixins. In order\n      // that those mixins have a chance to complete their own initialization,\n      // we add the contentChanged() call to the microtask queue.\n      microtask(() => this.contentChanged());\n    }\n\n    /**\n     * Invoked when the contents of the component (including distributed\n     * children) have changed.\n     *\n     * This method is also invoked when a component is first instantiated; the\n     * contents have essentially \"changed\" from being nothing. This allows the\n     * component to perform initial processing of its children.\n     */\n    contentChanged() {\n      if (super.contentChanged) { super.contentChanged(); }\n      const event = new CustomEvent('content-changed');\n      this.dispatchEvent(event);\n    }\n\n    /**\n     * The content of this component, defined to be the flattened array of\n     * children distributed to the component.\n     *\n     * @type {HTMLElement[]}\n     */\n    get content() {\n      const distributedChildren = this.distributedChildren;\n      if (typeof distributedChildren === 'undefined') {\n        console.warn(`DistributedChildrenContentMixin expects the component to define a \"distributedChildren\" property.`);\n      }\n      return distributedChildren;\n    }\n    set content(value) {\n      if ('content' in base.prototype) { super.content = value; }\n      // TODO: Set the children to the given value (which should be an array of\n      // elements)?\n    }\n\n    /**\n     * This event is raised when the component's contents (including distributed\n     * children) have changed.\n     *\n     * @memberof DistributedChildrenContent\n     * @event content-changed\n     */\n  }\n\n  return DistributedChildrenContent;\n};\n","/* Exported function extends a base class with DistributedChildren. */\nexport default (base) => {\n\n  /**\n   * Mixin which defines helpers for accessing a component's distributed\n   * children as a flattened array or string.\n   *\n   * The standard DOM API provides several ways of accessing child content:\n   * `children`, `childNodes`, and `textContent`. None of these functions are\n   * Shadow DOM aware. This mixin defines variations of those functions that\n   * *are* Shadow DOM aware.\n   *\n   * Example: you create a component `<count-children>` that displays a number\n   * equal to the number of children placed inside that component. If someone\n   * instantiates your component like:\n   *\n   *     <count-children>\n   *       <div></div>\n   *       <div></div>\n   *       <div></div>\n   *     </count-children>\n   *\n   * Then the component should show \"3\", because there are three children. To\n   * calculate the number of children, the component can just calculate\n   * `this.children.length`. However, suppose someone instantiates your\n   * component inside one of their own components, and puts a `<slot>` element\n   * inside your component:\n   *\n   *     <count-children>\n   *       <slot></slot>\n   *     </count-children>\n   *\n   * If your component only looks at `this.children`, it will always see exactly\n   * one child — the `<slot>` element. But the user looking at the page will\n   * *see* any nodes distributed to that slot. To match what the user sees, your\n   * component should expand any `<slot>` elements it contains.\n   *\n   * That is the problem this mixin solves. After applying this mixin, your\n   * component code has access to `this.distributedChildren`, whose `length`\n   * will return the total number of all children distributed to your component\n   * in the composed tree.\n   *\n   * Note: The latest Custom Elements API design calls for a new function,\n   * `getAssignedNodes` that takes an optional `deep` parameter, that will solve\n   * this problem at the API level.\n   */\n  class DistributedChildren extends base {\n\n    /**\n     * An in-order collection of distributed children, expanding any slot\n     * elements. Like the standard children property, this skips text nodes.\n     *\n     * @type {HTMLElement[]}\n     */\n    get distributedChildren() {\n      return expandContentElements(this.children, false);\n    }\n\n    /**\n     * An in-order collection of distributed child nodes, expanding any slot\n     * elements. Like the standard childNodes property, this includes text\n     * nodes.\n     *\n     * @type {Node[]}\n     */\n    get distributedChildNodes() {\n      return expandContentElements(this.childNodes, true);\n    }\n\n    /**\n     * The concatenated text content of all distributed child nodes, expanding\n     * any slot elements.\n     *\n     * @type {string}\n     */\n    get distributedTextContent() {\n      const strings = this.distributedChildNodes.map(function(child) {\n        return child.textContent;\n      });\n      return strings.join('');\n    }\n\n  }\n\n  return DistributedChildren;\n};\n\n\n/*\n * Given a array of nodes, return a new array with any content elements expanded\n * to the nodes distributed to that content element. This rule is applied\n * recursively.\n *\n * If includeTextNodes is true, text nodes will be included, as in the\n * standard childNodes property; by default, this skips text nodes, like the\n * standard children property.\n */\nfunction expandContentElements(nodes, includeTextNodes) {\n  const expanded = Array.prototype.map.call(nodes, node => {\n    // We want to see if the node is an instanceof HTMLSlotELement, but\n    // that class won't exist if the browser that doesn't support native\n    // Shadow DOM and if the Shadow DOM polyfill hasn't been loaded. Instead,\n    // we do a simplistic check to see if the tag name is \"slot\".\n    const isSlot = typeof HTMLSlotElement !== 'undefined' ?\n      node instanceof HTMLSlotElement :\n      node.localName === 'slot';\n    if (isSlot) {\n      // Use the nodes assigned to this node instead.\n      const assignedNodes = node.assignedNodes({ flatten: true });\n      return assignedNodes ?\n        expandContentElements(assignedNodes, includeTextNodes) :\n        [];\n    } else if (node instanceof HTMLElement) {\n      // Plain element; use as is.\n      return [node];\n    } else if (node instanceof Text && includeTextNodes) {\n      // Text node.\n      return [node];\n    } else {\n      // Comment, processing instruction, etc.; skip.\n      return [];\n    }\n  });\n  const flattened = [].concat(...expanded);\n  return flattened;\n}\n","import createSymbol from './createSymbol';\n\n\n// Symbols for private data members on an element.\nconst selectedFractionSymbol = createSymbol('selectedFraction');\n\n\n/* Exported function extends a base class with FractionalSelection. */\nexport default function mixin(base) {\n\n  /**\n   * Adds support for fractional selection: treating a selection as a real\n   * number that combines an integer portion (an index into a list), and a\n   * fraction (indicating how far of the way we are to the next or previous\n   * item).\n   *\n   * This is useful in components that support incremental operations during\n   * dragging and swiping. Example: a carousel component has several items, and the\n   * currently selected item is item 3. The user begins swiping to the left,\n   * moving towards selecting item 4. Halfway through this operation, the\n   * fractional selection value is 3.5.\n   *\n   * This value permits communication between mixins like\n   * [SwipeDirectionMixin](./SwipeDirectionMixin.md) and\n   * [TrackpadDirectionMixin](./TrackpadDirectionMixin.md), which generate\n   * fractional selection values, and mixins like\n   * [SelectionAnimationMixin](./SelectionAnimationMixin.md), which can render\n   * selection at a fractional value.\n   */\n  class FractionalSelection extends base {\n\n    connectedCallback() {\n      if (super.connectedCallback) { super.connectedCallback(); }\n      this.selectedFraction = 0;\n    }\n\n    /**\n     * A fractional value indicating how far the user has currently advanced to\n     * the next/previous item. E.g., a `selectedFraction` of 3.5 indicates the\n     * user is halfway between items 3 and 4.\n     *\n     * @type {number}\n     */\n    get selectedFraction() {\n      return this[selectedFractionSymbol];\n    }\n    set selectedFraction(value) {\n      this[selectedFractionSymbol] = value;\n      if ('selectedFraction' in base.prototype) { super.selectedFraction = value; }\n      const event = new CustomEvent('selected-fraction-changed');\n      this.dispatchEvent(event);\n    }\n\n  }\n\n  return FractionalSelection;\n}\n\n\nmixin.helpers = {\n\n  /*\n   * Dampen a selection that goes past the beginning or end of a list. This is\n   * generally used to produce a visual effect of tension as the user tries to\n   * go further in a direction that has no more items.\n   *\n   * Example: suppose `itemCount` is 5, indicating a list of 5 items. The index of\n   * the last item is 4. If the `selection` parameter is 4.5, the user is trying\n   * to go past this last item. When a damping function is applied, the resulting\n   * value will be less than 4.5 (the actual value will be 4.25). When this\n   * selection state is rendered, the user will see that, each unit distance the\n   * drag travels has less and less visible effect. This is perceived as tension.\n   *\n   * @param {number} selection - A real number indicating a selection position\n   * @param {number} itemCount - An integer for the number of items in the list\n   * @returns {number} A real number representing the damped selection value.\n   */\n  dampedSelection(selection, itemCount) {\n    const bound = itemCount - 1;\n    let damped;\n    if (selection < 0) {\n      // Trying to go past beginning of list. Apply tension from the left edge.\n      damped = -mixin.helpers.damping(-selection);\n    } else if (selection >= bound) {\n      // Trying to go past end of list. Apply tension from the right edge.\n      damped = bound + mixin.helpers.damping(selection - bound);\n    } else {\n      // No damping required.\n      damped = selection;\n    }\n    return damped;\n  },\n\n  /*\n   * Calculate damping as a function of the distance past the minimum/maximum\n   * values.\n   *\n   * We want to asymptotically approach an absolute minimum of 1 unit\n   * below/above the actual minimum/maximum. This requires calculating a\n   * hyperbolic function.\n   *\n   * See http://www.wolframalpha.com/input/?i=y+%3D+-1%2F%28x%2B1%29+%2B+1\n   * for the one we use. The only portion of that function we care about is when\n   * x is zero or greater. An important consideration is that the curve be\n   * tangent to the diagonal line x=y at (0, 0). This ensures smooth continuity\n   * with the normal drag behavior, in which the visible sliding is linear with\n   * the distance the touchpoint has been dragged.\n   */\n  damping(x) {\n    const y = (-1 / (x + 1)) + 1;\n    return y;\n  },\n\n  /*\n   * Return the current fractional selection value for the given element.\n   *\n   * This simply adds the element's `selectedIndex` and `selectedFraction`\n   * properties.\n   *\n   * @param {HTMLElement} element - An element that supports selection\n   */\n  elementSelection(element) {\n    const selectedIndex = element.selectedIndex;\n    if (selectedIndex < 0) {\n      // No selection\n      return;\n    }\n    const selectedFraction = element.selectedFraction || 0;\n    return selectedIndex + selectedFraction;\n  },\n\n  /*\n   * Breaks a fractional selection into its integer and fractional parts.\n   *\n   * Example: if passed 3.5, this returns { index: 3, fraction: 5 }.\n   *\n   * @param {number} selection – A real number representing a selection point\n   * @returns {object} - An object with an `index` property holding the\n   * selection's integer component, and a `fraction` property holding the\n   * selection's fractional component.\n   */\n  selectionParts(selection) {\n    // Stupid IE doesn't have Math.trunc.\n    // const index = Math.trunc(selection);\n    const index = selection < 0 ? Math.ceil(selection) : Math.floor(selection);\n    const fraction = selection - index;\n    return { index, fraction };\n  },\n\n  /*\n   * Returns a fractional selection point after accounting for wrapping, ensuring\n   * that the integer portion of the selection stays between 0 and `itemCount`-1.\n   * That is, the integer portion will always be a valid index into the list.\n   *\n   * Example of wrapping past the end of the list: if `selection` is 5.5 and\n   * `itemCount` is 5, this returns 0.5. Example of wrapping past the beginning of\n   * the list: if `selection` is 0.5 and `itemCount` is 5, this returns 4.5.\n   *\n   * @param {number} selection - A real number representing a selection point\n   * @param {number} itemCount - The number of items in the list\n   * @returns {number} - The result of wrapping the selection point\n   */\n  wrappedSelection(selection, itemCount) {\n    // Handles possibility of negative mod.\n    // See http://stackoverflow.com/a/18618250/76472\n    return ((selection % itemCount) + itemCount) % itemCount;\n  },\n\n  /*\n   * Return the parts of a selection, first wrapping if necessary.\n   *\n   * @param {number} selection – A real number representing a selection point\n   * @param {number} itemCount - The number of items in the list\n   * @param {boolean} wrap – True if the selection should wrap to stay within the\n   * list\n   * @returns {object} – The parts of the selection, using the same format as\n   * `selectionParts`.\n   */\n  wrappedSelectionParts(selection, itemCount, wrap) {\n    if (wrap) {\n      selection = mixin.helpers.wrappedSelection(selection, itemCount);\n    }\n    return mixin.helpers.selectionParts(selection);\n  }\n\n};\n","import safeAttributes from '../../basic-component-mixins/src/safeAttributes';\nimport symbols from '../../basic-component-mixins/src/symbols';\n\n\n/* Exported function extends a base class with PlayControls. */\nexport default (base) => {\n\n  /**\n   * Template mixin which adds buttons for managing playback of a slideshow,\n   * audio playlist, etc.\n   *\n   * Typical usage:\n   *\n   *     class SlideshowWithControls extends PlayControlsMixin(Slideshow) {}\n   *     customElements.define('slideshow-with-controls', SlideshowWithControls);\n   *\n   */\n  class PlayControls extends base {\n\n    constructor() {\n      super();\n      this.$.previousButton.addEventListener('click', event => {\n        this.selectPrevious();\n      });\n      this.$.playButton.addEventListener('click', event => {\n        this.playing = !this.playing;\n      });\n      this.$.nextButton.addEventListener('click', event => {\n        this.selectNext();\n      });\n    }\n\n    connectedCallback() {\n      if (super.connectedCallback) { super.connectedCallback(); }\n      safeAttributes.connected(this);\n    }\n\n    [symbols.keydown](event) {\n      let handled;\n\n      switch (event.keyCode) {\n        case 32: /* Space */\n          this.playing = !this.playing;\n          handled = true;\n          break;\n      }\n\n      // Prefer mixin result if it's defined, otherwise use base result.\n      return handled || (super[symbols.keydown] && super[symbols.keydown](event));\n    }\n\n    get playing() {\n      return super.playing;\n    }\n    set playing(value) {\n      if ('playing' in base.prototype) { super.playing = value; }\n      safeAttributes.toggleClass(this, 'playing', value);\n    }\n\n    get [symbols.template]() {\n      const baseTemplate = super[symbols.template] || '';\n      return `\n        <style>\n        :host {\n          display: -webkit-flex;\n          display: flex;\n          position: relative;\n        }\n\n        #buttons {\n          bottom: 0;\n          box-sizing: border-box;\n          padding: 0.5em;\n          position: absolute;\n          text-align: center;\n          width: 100%;\n          z-index: 1;\n        }\n\n        button {\n          background: transparent;\n          border: none;\n          fill: rgba(255, 255, 255, 0.5);\n          padding: 0;\n          transition: fill 0.5s;\n          vertical-align: middle;\n        }\n        :host(:hover) button {\n          fill: rgba(255, 255, 255, 0.7);\n        }\n        button:hover {\n          fill: rgba(255, 255, 255, 0.85);\n        }\n        button:active {\n          fill: white;\n        }\n\n        .icon {\n          height: 30px;\n          width: 30px;\n        }\n        #playButton .icon {\n          height: 40px;\n          width: 40px;\n        }\n\n        :host(.playing) .pausedControl {\n          display: none;\n        }\n        :host(:not(.playing)) .playingControl {\n          display: none;\n        }\n\n        #container {\n          display: -webkit-flex;\n          display: flex;\n          -webkit-flex: 1;\n          flex: 1;\n        }\n\n        #container ::slotted(*) {\n          -webkit-flex: 1;\n          flex: 1;\n        }\n        </style>\n\n        <div id=\"buttons\">\n          <button id=\"previousButton\">\n            <svg class=\"icon\" viewBox=\"0 0 24 24\" preserveAspectRatio=\"xMidYMid meet\">\n              <g id=\"skip-previous\">\n                <path d=\"M6 6h2v12H6zm3.5 6l8.5 6V6z\"/>\n              </g>\n            </svg>\n          </button>\n          <button id=\"playButton\">\n            <svg class=\"icon playingControl\" viewBox=\"0 0 24 24\" preserveAspectRatio=\"xMidYMid meet\">\n              <g id=\"pause-circle-outline\">\n                <path d=\"M9 16h2V8H9v8zm3-14C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm1-4h2V8h-2v8z\"></path>\n              </g>\n            </svg>\n            <svg class=\"icon pausedControl\" viewBox=\"0 0 24 24\" preserveAspectRatio=\"xMidYMid meet\">\n              <g id=\"play-circle-outline\">\n                <path d=\"M10 16.5l6-4.5-6-4.5v9zM12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z\"></path>\n              </g>\n            </svg>\n          </button>\n          <button id=\"nextButton\">\n            <svg class=\"icon\" viewBox=\"0 0 24 24\" preserveAspectRatio=\"xMidYMid meet\">\n              <g id=\"skip-next\">\n                <path d=\"M6 18l8.5-6L6 6v12zM16 6v12h2V6h-2z\"/>\n              </g>\n            </svg>\n          </button>\n        </div>\n\n        <div id=\"container\" role=\"none\">\n          ${baseTemplate}\n        </div>\n      `;\n    }\n\n  }\n\n  return PlayControls;\n};\n","import createSymbol from './createSymbol';\nimport FractionalSelectionMixin from './FractionalSelectionMixin';\nimport symbols from './symbols';\n\n\n// Symbols for private data members on an element.\nconst animationSymbol = createSymbol('animation');\nconst draggingSymbol = createSymbol('dragging');\nconst lastAnimationSymbol = createSymbol('lastAnimation');\nconst playingAnimationSymbol = createSymbol('animatingSelection');\nconst previousSelectionSymbol = createSymbol('previousSelection');\nconst selectionAnimationDurationSymbol = createSymbol('selectionAnimationDuration');\nconst selectionAnimationEffectSymbol = createSymbol('selectionAnimationEffect');\nconst selectionAnimationKeyframesSymbol = createSymbol('selectionAnimationKeyframes');\nconst resetAnimationsOnNextRenderSymbol = createSymbol('resetAnimationsOnNextRender');\n\n\n/* Exported function extends a base class with SelectionAnimation. */\nexport default function mixin(base) {\n\n  /**\n   * Mixin which uses animation to show transitions between selection states.\n   *\n   * This mixin can be used by components that want to provide visible\n   * animations when changing the selection. For example, a carousel component\n   * may want to define a sliding animation effect shown when moving between\n   * items.\n   *\n   * The animation is defined by a `selectionAnimationKeyframes` property; see\n   * that property for details on how to define these keyframes. This animation\n   * will be used in two ways. First, when moving strictly between items, the\n   * animation will play smoothly to show the selection changing. Second, the\n   * animation can be used to render the selection at a fixed point in the\n   * transition between states. E.g., if the user pauses halfway through\n   * dragging an element using [SwipeDirectionMixin](SwipeDirectionMixin.md)\n   * or [TrackpadDirectionMixin](TrackpadDirectionMixin.md)s, then the selection\n   * animation will be shown at the point exactly halfway through.\n   *\n   * This mixin expects a component to provide an `items` array of all elements\n   * in the list, which can be provided via\n   * [ContentItemsMixin](ContentItemsMixin.md). This mixin also expects\n   * `selectedIndex` and `selectedItem` properties, which can be provided via\n   * [SingleSelectionMixin](SingleSelectionMixin.md).\n   *\n   * This mixin supports a `selectionWraps` property. When true, the user can\n   * navigate forward from the last item in the list and wrap around to the\n   * first item, or navigate backward from the first item and wrap around to the\n   * last item.\n   *\n   * This mixin uses the Web Animations API. For use on browsers which\n   * do not support that API natively, you will need to load the\n   * [Web Animations polyfill](https://github.com/web-animations/web-animations-js).\n   */\n  class SelectionAnimation extends base {\n\n    constructor() {\n      super();\n\n      // Set defaults.\n      if (typeof this.selectionAnimationDuration === 'undefined') {\n        this.selectionAnimationDuration = this[symbols.defaults].selectionAnimationDuration;\n      }\n      if (typeof this.selectionAnimationEffect === 'undefined' && this.selectionAnimationKeyframes == null) {\n        this.selectionAnimationEffect = this[symbols.defaults].selectionAnimationEffect;\n      }\n\n      this[symbols.dragging] = false;\n    }\n\n    get [symbols.defaults]() {\n      const defaults = super[symbols.defaults] || {};\n      defaults.selectionAnimationDuration = 250;\n      defaults.selectionAnimationEffect = 'slide';\n      return defaults;\n    }\n\n    /*\n     * Provide backing for the dragging property.\n     * Also, when a drag begins, reset the animations.\n     */\n    get [symbols.dragging]() {\n      return this[draggingSymbol];\n    }\n    set [symbols.dragging](value) {\n      const previousValue = this[symbols.dragging];\n      this[draggingSymbol] = value;\n      if (symbols.dragging in base.prototype) { super[symbols.dragging] = value; }\n      if (value && !previousValue) {\n        // Have begun a drag.\n        this[resetAnimationsOnNextRenderSymbol] = true;\n      }\n    }\n\n    [symbols.itemAdded](item) {\n      // We mark new items in the list as explicitly visible to ARIA. Otherwise,\n      // when an item isn't visible on the screen, ARIA will assume the item is\n      // of no interest to the user, and leave it out of the accessibility tree.\n      // If the list contains 10 items, but only 3 are visible, a screen reader\n      // might then announce the list only has 3 items. To ensure that screen\n      // readers and other assistive technologies announce the correct total\n      // number of items, we explicitly mark all items as not hidden. This will\n      // expose them all in the accessibility tree, even the items which are\n      // currently not rendered.\n      //\n      // TODO: Generally speaking, this entire mixin assumes that the user can\n      // navigate through all items in a list. But an app could style an item as\n      // display:none or visibility:hidden because the user is not allowed to\n      // interact with that item at the moment. Support for this scenario should\n      // be added. This would entail changing all locations where a mixin\n      // function is counting items, iterating over the (visible) items, and\n      // showing or hiding items. Among other things, the code below to make\n      // items visible to ARIA would need to discriminate between items which\n      // are invisible because of animation state, or invisible because the user\n      // shouldn't interact with them.\n      item.setAttribute('aria-hidden', false);\n    }\n\n    [symbols.itemsChanged]() {\n      if (super[symbols.itemsChanged]) { super[symbols.itemsChanged](); }\n\n      resetAnimations(this);\n\n      // TODO: Also reset our notion of the last rendered selection? This comes\n      // up when a DOM removal causes the selected item to change position.\n      // this[previousSelectionSymbol] = null;\n\n      renderSelection(this);\n    }\n\n    resetAnimations() {\n      resetAnimations(this);\n    }\n\n    /**\n     * A fractional value indicating how far the user has currently advanced to\n     * the next/previous item. E.g., a `selectedFraction` of 3.5 indicates the\n     * user is halfway between items 3 and 4.\n     *\n     * For more details, see [FractionalSelectionMixin](FractionalSelectionMixin.md)\n     * mixin.\n     *\n     * @type {number}\n     */\n    get selectedFraction() {\n      return super.selectedFraction || 0;\n    }\n    set selectedFraction(value) {\n      if ('selectedFraction' in base.prototype) { super.selectedFraction = value; }\n      renderSelection(this, this.selectedIndex, value);\n    }\n\n    get selectedIndex() {\n      return super.selectedIndex;\n    }\n    set selectedIndex(index) {\n      if ('selectedIndex' in base.prototype) { super.selectedIndex = index; }\n      renderSelection(this, index, 0);\n    }\n\n    /**\n     * The duration of a selection animation in milliseconds.\n     *\n     * This measures the amount of time required for a selection animation to\n     * complete. This number remains constant, even if the number of items being\n     * animated increases.\n     *\n     * The default value is 250 milliseconds (a quarter a second).\n     *\n     * @type {number}\n     * @default 250\n     */\n    get selectionAnimationDuration() {\n      return this[selectionAnimationDurationSymbol];\n    }\n    set selectionAnimationDuration(value) {\n      this[selectionAnimationDurationSymbol] = value;\n      if ('selectionAnimationDuration' in base.prototype) { super.selectionAnimationDuration = value; }\n    }\n\n    /**\n     * The name of a standard selection animation effect.\n     *\n     * This is a shorthand for setting the `selectionAnimationKeyframes`\n     * property to standard keyframes. Supported string values:\n     *\n     * * \"crossfade\"\n     * * \"reveal\"\n     * * \"revealWithFade\"\n     * * \"showAdjacent\"\n     * * \"slide\"\n     * * \"slideWithGap\"\n     *\n     * @type {string}\n     * @default \"slide\"\n     */\n    get selectionAnimationEffect() {\n      return this[selectionAnimationEffectSymbol];\n    }\n    set selectionAnimationEffect(value) {\n      this[selectionAnimationEffectSymbol] = value;\n      if ('selectionAnimationEffect' in base.prototype) { super.selectionAnimationEffect = value; }\n      this.selectionAnimationKeyframes = mixin.standardEffectKeyframes[value];\n    }\n\n    /**\n     * The keyframes that define an animation that plays for an item when moving\n     * forward in the sequence.\n     *\n     * This is an array of CSS rules that will be applied. These are used as\n     * [keyframes](http://w3c.github.io/web-animations/#keyframes-section)\n     * to animate the item with the\n     * [Web Animations API](https://developer.mozilla.org/en-US/docs/Web/API/animation).\n     *\n     * The animation represents the state of the next item as it moves from\n     * completely unselected (offstage, usually right), to selected (center\n     * stage), to completely unselected (offstage, usually left). The center time\n     * of the animation should correspond to the item's quiscent selected state,\n     * typically in the center of the stage and at the item's largest size.\n     *\n     * The default forward animation is a smooth slide at full size from right to\n     * left.\n     *\n     * When moving the selection backward, this animation is played in reverse.\n     *\n     * @type {cssRules[]}\n     */\n    get selectionAnimationKeyframes() {\n      // Standard animation slides left/right, keeps adjacent items out of view.\n      return this[selectionAnimationKeyframesSymbol];\n    }\n    set selectionAnimationKeyframes(value) {\n      this[selectionAnimationKeyframesSymbol] = value;\n      if ('selectionAnimationKeyframes' in base.prototype) { super.selectionAnimationKeyframes = value; }\n      resetAnimations(this);\n      renderSelection(this);\n    }\n\n    get selectionWraps() {\n      return super.selectionWraps;\n    }\n    set selectionWraps(value) {\n      if ('selectionWraps' in base.prototype) { super.selectionWraps = value; }\n      resetAnimations(this);\n      renderSelection(this);\n    }\n  }\n\n  return SelectionAnimation;\n}\n\n\n// We expose helpers on the mixin function that we want to be able to unit test.\n// Since these are on the function, not on the class emitted by the function,\n// they don't end up getting exposed on actual element instances.\nmixin.helpers = {\n\n  /*\n   * Calculate the animation fractions for an element's items at the given\n   * selection point. This is used when rendering the element's selection state\n   * instantaneously.\n   *\n   * This function considers the selectedIndex parameter, which can be a whole\n   * or fractional number, and determines which items will be visible at that\n   * index. This function then calculates a corresponding animation fraction: a\n   * number between 0 and 1 indicating how far through the selection animation\n   * an item should be shown, or null if the item should not be visible at that\n   * selection index. These fractions are returned as an array, where the\n   * animation fraction at position N corresponds to how item N should be shown.\n   */\n  animationFractionsForSelection(element, selection) {\n\n    const items = element.items;\n    if (!items) {\n      return;\n    }\n\n    const itemCount = items.length;\n    const selectionWraps = element.selectionWraps;\n\n    return items.map((item, itemIndex) => {\n      // How many steps from the selection point to this item?\n      const steps = stepsToIndex(itemCount, selectionWraps, selection, itemIndex);\n      // To convert steps to animation fraction:\n      // steps      animation fraction\n      //  1         0     (stage right)\n      //  0         0.5   (center stage)\n      // -1         1     (stage left)\n      const animationFraction = (1 - steps) / 2;\n      return (animationFraction >= 0 && animationFraction <= 1) ?\n        animationFraction :\n        null; // Outside animation range\n    });\n  },\n\n  /*\n   * Calculate the animation timings that should be used to smoothly animate the\n   * element's items from one selection state to another.\n   *\n   * This returns an array of timings, where the timing at position N should be\n   * used to animate item N. If an item's timing is null, then that item should\n   * not take place in the animation, and should be hidden instead.\n   */\n  effectTimingsForSelectionAnimation(element, fromSelection, toSelection) {\n\n    const items = element.items;\n    if (!items) {\n      return;\n    }\n    const itemCount = items.length;\n    const selectionWraps = element.selectionWraps;\n    const toIndex = FractionalSelectionMixin.helpers.wrappedSelectionParts(toSelection, itemCount, selectionWraps).index;\n    const totalSteps = stepsToIndex(itemCount, selectionWraps, fromSelection, toSelection);\n    const direction = totalSteps >= 0 ? 'normal': 'reverse';\n    const fill = 'both';\n    const totalDuration = element.selectionAnimationDuration;\n    const stepDuration = totalSteps !== 0 ?\n      totalDuration * 2 / Math.ceil(Math.abs(totalSteps)) :\n      0;  // No steps required, animation will be instantenous.\n\n    const timings = items.map((item, itemIndex) => {\n      const steps = stepsToIndex(itemCount, selectionWraps, itemIndex, toSelection);\n      // If we include this item in the staggered sequence of animations we're\n      // creating, where would the item appear in the sequence?\n      let positionInSequence = totalSteps - steps;\n      if (totalSteps < 0) {\n        positionInSequence = -positionInSequence;\n      }\n      // So, is this item really included in the sequence?\n      if (Math.ceil(positionInSequence) >= 0 && positionInSequence <= Math.abs(totalSteps)) {\n        // Note that delay for first item will be negative. That will cause\n        // the animation to start halfway through, which is what we want.\n        const delay = stepDuration * (positionInSequence - 1)/2;\n        const endDelay = itemIndex === toIndex ?\n          -stepDuration/2 :   // Stop halfway through.\n          0;              // Play animation until end.\n        return { duration: stepDuration, direction, fill, delay, endDelay };\n      } else {\n        return null;\n      }\n    });\n\n    return timings;\n  }\n\n};\n\n\n// Keyframes for standard selection animation effects.\nmixin.standardEffectKeyframes = {\n\n  // Simple crossfade\n  crossfade: [\n    { opacity: 0 },\n    { opacity: 1 },\n    { opacity: 0 }\n  ],\n\n  // Reveal, as if sliding the top card off a deck of cards\n  reveal: [\n    { transform: 'translateX(0%)', zIndex: 0 },\n    { transform: 'translateX(0%)', zIndex: 1 },\n    { transform: 'translateX(-100%)', zIndex: 2 }\n  ],\n\n  // Google Photos-style reveal-with-fade animation\n  revealWithFade: [\n    { transform: 'translateX(0%) scale(0.75)', opacity: 0, zIndex: 0 },\n    { transform: 'translateX(0%) scale(1.0)', opacity: 1, zIndex: 1 },\n    { transform: 'translateX(-100%) scale(1.0)', opacity: 1, zIndex: 2 }\n  ],\n\n  // Carousel variant with a bit of off-stage elements showing\n  showAdjacent: [\n    { transform: 'translateX(78%) scale(0.7)', zIndex: 0 },\n    { transform: 'translateX(0%) scale(0.82)', zIndex: 1 },\n    { transform: 'translateX(-78%) scale(0.7)', zIndex: 0 }\n  ],\n\n  // Simple slide\n  slide: [\n    { transform: 'translateX(100%)' },\n    { transform: 'translateX(-100%)' }\n  ],\n\n  // Slide, with a gap between\n  slideWithGap: [\n    { transform: 'translateX(110%)' },\n    { transform: 'translateX(-110%)' }\n  ]\n\n};\n\n\n/*\n * Smoothly animate the selection between the indicated \"from\" and \"to\"\n * indices. The former can be a fraction, e.g., when the user releases a finger\n * to complete a touch drag, and the selection will snap to the closest whole\n * index.\n */\nfunction animateSelection(element, fromSelection, toSelection) {\n\n  resetAnimations(element);\n\n  // Calculate the animation timings.\n  const items = element.items;\n  const keyframes = element.selectionAnimationKeyframes;\n  element[playingAnimationSymbol] = true;\n  const timings = mixin.helpers.effectTimingsForSelectionAnimation(element, fromSelection, toSelection);\n\n  // Figure out which item will be the one *after* the one we're selecting.\n  const itemCount = items.length;\n  const selectionWraps = element.selectionWraps;\n  const selectionIndex = FractionalSelectionMixin.helpers.selectionParts(toSelection, itemCount, selectionWraps).index;\n  const totalSteps = stepsToIndex(itemCount, selectionWraps, fromSelection, toSelection);\n  const forward = totalSteps >= 0;\n  let nextUpIndex = selectionIndex + (forward ? 1 : - 1);\n  if (selectionWraps) {\n    nextUpIndex = FractionalSelectionMixin.helpers.wrappedSelection(nextUpIndex, itemCount);\n  } else if (!isItemIndexInBounds(element, nextUpIndex)) {\n    nextUpIndex = null; // At start/end of list; don't have a next item to show.\n  }\n\n  // Play the animations using those timings.\n  let lastAnimationDetails;\n  timings.forEach((timing, index) => {\n    const item = items[index];\n    if (timing) {\n      showItem(item, true);\n      const animation = item.animate(keyframes, timing);\n      element[animationSymbol][index] = animation;\n      if (index === nextUpIndex) {\n        // This item will be animated, so will already be in the desired state\n        // after the animation completes.\n        nextUpIndex = null;\n      }\n      if (timing.endDelay !== 0) {\n        // This is the animation for the item that will be left selected.\n        // We want to clean up when this animation completes.\n        lastAnimationDetails = { animation, index, timing, forward };\n      }\n    } else {\n      // This item doesn't participate in the animation.\n      showItem(item, false);\n    }\n  });\n\n  if (lastAnimationDetails != null) {\n    // Arrange for clean-up work to be performed.\n    lastAnimationDetails.nextUpIndex = nextUpIndex;\n    lastAnimationDetails.animation.onfinish = event => selectionAnimationFinished(element, lastAnimationDetails);\n    element[lastAnimationSymbol] = lastAnimationDetails.animation;\n  } else {\n    // Shouldn't happen -- we should always have at least one animation.\n    element[playingAnimationSymbol] = false;\n  }\n}\n\n\nfunction getAnimationForItemIndex(element, index) {\n  if (element[animationSymbol] == null) {\n    // Not ready yet;\n    return null;\n  }\n  let animation = element[animationSymbol][index];\n  if (!animation) {\n    const item = element.items[index];\n    animation = item.animate(element.selectionAnimationKeyframes, {\n      duration: element.selectionAnimationDuration,\n      fill: 'both'\n    });\n    animation.pause();\n    element[animationSymbol][index] = animation;\n  }\n  return animation;\n}\n\nfunction isItemIndexInBounds(element, index) {\n  return index >= 0 && element.items && index < element.items.length;\n}\n\n/*\n * Render the selection state of the element.\n *\n * This can be used to re-render a previous selection state (if the\n * selectedIndex param is omitted), render the selection instantly at a given\n * whole or fractional selection index, or animate to a given selection index.\n *\n * There are several distinct scenarios we need to cover:\n *\n * 1. Initial positioning, or repositioning after changing a property like\n *    selectionAnimationKeyframes that affects rendering.\n * 2. Animate on selectedIndex change. This should override any animation/swipe\n *    already in progress.\n * 3. Instantly render the current position of a drag operation in progress.\n * 4. Complete a drag operation. If the drag wasn't far enough to affect\n *    selection, we'll just be restoring the selectedFraction to 0.\n *\n * If the list does not wrap, any selection position outside the list's bounds\n * will be damped to produce a visual effect of tension.\n */\nfunction renderSelection(element, selectedIndex=element.selectedIndex, selectedFraction=element.selectedFraction) {\n  const itemCount = element.items ? element.items.length : 0;\n  if (itemCount === 0) {\n    // Nothing to render.\n    return;\n  }\n  if (selectedIndex < 0) {\n    // TODO: Handle no selection.\n    return;\n  }\n  let selection = selectedIndex + selectedFraction;\n  if (element.selectionWraps) {\n    // Apply wrapping to ensure consistent representation of selection.\n    selection = FractionalSelectionMixin.helpers.wrappedSelection(selection, itemCount);\n  } else {\n    // Apply damping if necessary.\n    selection = FractionalSelectionMixin.helpers.dampedSelection(selection, itemCount);\n  }\n  const previousSelection = element[previousSelectionSymbol];\n  // TODO: If an item changes position in the DOM, we end up animating from\n  // its old index to its new index, but we really don't want to animate at all.\n  if (!element[symbols.dragging] && previousSelection != null &&\n      previousSelection !== selection) {\n    // Animate selection from previous state to new state.\n    animateSelection(element, previousSelection, selection);\n  } else if (selectedFraction === 0 && element[playingAnimationSymbol]) {\n    // Already in process of animating to fraction 0. During that process,\n    // ignore subsequent attempts to renderSelection to fraction 0.\n    return;\n  } else {\n    // Render current selection state instantly.\n    renderSelectionInstantly(element, selection);\n  }\n  element[previousSelectionSymbol] = selection;\n}\n\n/*\n * Instantly render (don't animate) the element's items at the given whole or\n * fractional selection index.\n */\nfunction renderSelectionInstantly(element, toSelection) {\n  if (element[resetAnimationsOnNextRenderSymbol]) {\n    resetAnimations(element);\n    element[resetAnimationsOnNextRenderSymbol] = false;\n  }\n  const animationFractions = mixin.helpers.animationFractionsForSelection(element, toSelection);\n  animationFractions.map((animationFraction, index) => {\n    const item = element.items[index];\n    if (animationFraction != null) {\n      showItem(item, true);\n      setAnimationFraction(element, index, animationFraction);\n    } else {\n      showItem(item, false);\n    }\n  });\n}\n\n/*\n * We maintain an array containing an animation per item. This is used for two\n * reasons:\n *\n * * During a drag operation, we want to be able to reuse animations between\n *   drag updates.\n * * When a selection animation completes, we need to be able to leave the\n *   visibile items in a paused state. Later, we'll want to be able to clean up\n *   those animations.\n *\n * Note that this array is sparse: it will only hold up from 0–3 animations at\n * any given point.\n */\nfunction resetAnimations(element) {\n  const animations = element[animationSymbol];\n  if (animations) {\n    // Cancel existing animations to remove the effects they're applying.\n    animations.forEach((animation, index) => {\n      if (animation) {\n        animation.cancel();\n        animations[index] = null;\n      }\n    });\n  }\n  const itemCount = element.items ? element.items.length : 0;\n  if (!animations || animations.length !== itemCount) {\n    // Haven't animated before with this number of items; (re)create array.\n    element[animationSymbol] = new Array(itemCount);\n  }\n}\n\n/*\n * The last animation in our selection animation has completed. Clean up.\n */\nfunction selectionAnimationFinished(element, details) {\n\n  // When the last animation completes, show the next item in the direction\n  // we're going. Waiting to that until this point is a bit of a hack to avoid\n  // having a next item that's higher in the natural z-order obscure other items\n  // during animation.\n  const nextUpIndex = details.nextUpIndex;\n  if (nextUpIndex != null) {\n    if (element[animationSymbol][nextUpIndex]) {\n      // Cancel existing selection animation so we can construct a new one.\n      element[animationSymbol][nextUpIndex].cancel();\n      element[animationSymbol][nextUpIndex] = null;\n    }\n    const animationFraction = details.forward ? 0 : 1;\n    setAnimationFraction(element, nextUpIndex, animationFraction);\n    showItem(element.items[nextUpIndex], true);\n  }\n\n  element[lastAnimationSymbol].onfinish = null;\n  element[playingAnimationSymbol] = false;\n}\n\n/*\n * Pause the indicated animation and have it show the animation at the given\n * fraction (between 0 and 1) of the way through the animation.\n */\nfunction setAnimationFraction(element, itemIndex, fraction) {\n  const animation = getAnimationForItemIndex(element, itemIndex);\n  if (animation) {\n    const duration = element.selectionAnimationDuration;\n    if (duration) {\n      animation.currentTime = fraction * duration;\n    }\n  }\n}\n\nfunction showItem(item, flag) {\n  item.style.visibility = flag ? 'visible' : 'hidden';\n}\n\n/*\n * Figure out how many steps it will take to go from fromSelection to\n * toSelection. To go from item 3 to item 4 is one step.\n *\n * If wrapping is allowed, then going from the last item to the first will take\n * one step (forward), and going from the first item to the last will take one\n * step (backward).\n */\nfunction stepsToIndex(length, allowWrap, fromSelection, toSelection) {\n  let steps = toSelection - fromSelection;\n  // Wrapping only kicks in when list has more than 1 item.\n  if (allowWrap && length > 1) {\n    const wrapSteps = length - Math.abs(steps);\n    if (wrapSteps <= 1) {\n      // Special case\n      steps = steps < 0 ?\n        wrapSteps :   // Wrap forward from last item to first.\n        -wrapSteps;   // Wrap backward from first item to last.\n    }\n  }\n  return steps;\n}\n","import symbols from './symbols';\n\n\n// Used to assign unique IDs to item elements without IDs.\nlet idCount = 0;\n\n\n/* Exported function extends a base class with SelectionAriaActive. */\nexport default (base) => {\n\n  /**\n   * Mixin which treats the selected item in a list as the active item in ARIA\n   * accessibility terms.\n   *\n   * Handling ARIA selection state properly is actually quite complex:\n   *\n   * * The items in the list need to be indicated as possible items via an ARIA\n   *   `role` attribute value such as \"option\".\n   * * The selected item need to be marked as selected by setting the item's\n   *   `aria-selected` attribute to true *and* the other items need be marked as\n   *   *not* selected by setting `aria-selected` to false.\n   * * The outermost element with the keyboard focus needs to have attributes\n   *   set on it so that the selection is knowable at the list level via the\n   *   `aria-activedescendant` attribute.\n   * * Use of `aria-activedescendant` in turn requires that all items in the\n   *   list have ID attributes assigned to them.\n   *\n   * This mixin tries to address all of the above requirements. To that end,\n   * this mixin will assign generated IDs to any item that doesn't already have\n   * an ID.\n   *\n   * ARIA relies on elements to provide `role` attributes. This mixin will apply\n   * a default role of \"listbox\" on the outer list if it doesn't already have an\n   * explicit role. Similarly, this mixin will apply a default role of \"option\"\n   * to any list item that does not already have a role specified.\n   *\n   * This mixin expects a set of members that manage the state of the selection:\n   * `[symbols.itemSelected]`, `itemAdded`, and `selectedIndex`. You can\n   * supply these yourself, or do so via\n   * [SingleSelectionMixin](SingleSelectionMixin.md).\n   */\n  class SelectionAriaActive extends base {\n\n    connectedCallback() {\n      if (super.connectedCallback) { super.connectedCallback(); }\n      // Set default ARIA role.\n      if (this.getAttribute('role') == null && this[symbols.defaults].role) {\n        this.setAttribute('role', this[symbols.defaults].role);\n      }\n    }\n\n    get [symbols.defaults]() {\n      const defaults = super[symbols.defaults] || {};\n      defaults.role = 'listbox';\n      return defaults;\n    }\n\n    [symbols.itemAdded](item) {\n      if (super[symbols.itemAdded]) { super[symbols.itemAdded](item); }\n\n      if (!item.getAttribute('role')) {\n        // Assign a default ARIA role.\n        item.setAttribute('role', 'option');\n      }\n\n      // Ensure each item has an ID so we can set aria-activedescendant on the\n      // overall list whenever the selection changes.\n      //\n      // The ID will take the form of a base ID plus a unique integer. The base\n      // ID will be incorporate the component's own ID. E.g., if a component has\n      // ID \"foo\", then its items will have IDs that look like \"_fooOption1\". If\n      // the compnent has no ID itself, its items will get IDs that look like\n      // \"_option1\". Item IDs are prefixed with an underscore to differentiate\n      // them from manually-assigned IDs, and to minimize the potential for ID\n      // conflicts.\n      if (!item.id) {\n        const baseId = this.id ?\n            \"_\" + this.id + \"Option\" :\n            \"_option\";\n        item.id = baseId + idCount++;\n      }\n    }\n\n    [symbols.itemSelected](item, selected) {\n      if (super[symbols.itemSelected]) { super[symbols.itemSelected](item, selected); }\n      item.setAttribute('aria-selected', selected);\n      const itemId = item.id;\n      if (itemId && selected) {\n        this.setAttribute('aria-activedescendant', itemId);\n      }\n    }\n\n    get selectedItem() {\n      return super.selectedItem;\n    }\n    set selectedItem(item) {\n      if ('selectedItem' in base.prototype) { super.selectedItem = item; }\n      if (item == null) {\n        // Selection was removed.\n        this.removeAttribute('aria-activedescendant');\n      }\n    }\n\n  }\n\n  return SelectionAriaActive;\n};\n","/* Exported function extends a base class with ShadowElementReferences. */\nexport default (base) => {\n\n  /**\n   * Mixin to create references to elements in a component's Shadow DOM subtree.\n   *\n   * This adds a member on the component called `this.$` that can be used to\n   * reference shadow elements with IDs. E.g., if component's shadow contains an\n   * element `<button id=\"foo\">`, then this mixin will create a member\n   * `this.$.foo` that points to that button.\n   *\n   * Such references simplify a component's access to its own elements. In\n   * exchange, this mixin trades off a one-time cost of querying all elements in\n   * the shadow tree instead of paying an ongoing cost to query for an element\n   * each time the component wants to inspect or manipulate it.\n   *\n   * This mixin expects the component to define a Shadow DOM subtree. You can\n   * create that tree yourself, or make use of\n   * [ShadowTemplateMixin](ShadowTemplateMixin.md).\n   *\n   * This mixin is inspired by Polymer's [automatic\n   * node finding](https://www.polymer-project.org/1.0/docs/devguide/local-dom.html#node-finding)\n   * feature.\n   */\n  class ShadowElementReferences extends base {\n\n    constructor() {\n      super();\n      if (this.shadowRoot) {\n        // Look for elements in the shadow subtree that have id attributes.\n        // An alternatively implementation of this mixin would be to just define\n        // a this.$ getter that lazily does this search the first time someone\n        // tries to access this.$. That might introduce some complexity – if the\n        // the tree changed after it was first populated, the result of\n        // searching for a node might be somewhat unpredictable.\n        this.$ = {};\n        const nodesWithIds = this.shadowRoot.querySelectorAll('[id]');\n        [].forEach.call(nodesWithIds, node => {\n          const id = node.getAttribute('id');\n          this.$[id] = node;\n        });\n      }\n    }\n\n    /**\n     * The collection of references to the elements with IDs in a component's\n     * Shadow DOM subtree.\n     *\n     * @type {object}\n     * @member $\n     */\n  }\n\n  return ShadowElementReferences;\n};\n","import symbols from '../src/symbols';\n\n\n/* Exported function extends a base class with ShadowTemplate. */\nexport default (base) => {\n\n  /**\n   * Mixin for stamping a template into a Shadow DOM subtree upon component\n   * instantiation.\n   *\n   * To use this mixin, define a `template` property as a string or HTML\n   * `<template>` element:\n   *\n   *     class MyElement extends ShadowTemplateMixin(HTMLElement) {\n   *       get [symbols.template]() {\n   *         return `Hello, <em>world</em>.`;\n   *       }\n   *     }\n   *\n   * When your component class is instantiated, a shadow root will be created on\n   * the instance, and the contents of the template will be cloned into the\n   * shadow root. If your component does not define a `template` property, this\n   * mixin has no effect.\n   *\n   * For the time being, this extension retains support for Shadow DOM v0. That\n   * will eventually be deprecated as browsers (and the Shadow DOM polyfill)\n   * implement Shadow DOM v1.\n   */\n  class ShadowTemplate extends base {\n\n    /*\n     * If the component defines a template, a shadow root will be created on the\n     * component instance, and the template stamped into it.\n     */\n    constructor() {\n      super();\n      let template = this[symbols.template];\n      // TODO: Save the processed template with the component's class prototype\n      // so it doesn't need to be processed with every instantiation.\n      if (template) {\n\n        if (typeof template === 'string') {\n          // Upgrade plain string to real template.\n          template = createTemplateWithInnerHTML(template);\n        }\n\n        if (window.ShadowDOMPolyfill) {\n          shimTemplateStyles(template, this.localName);\n        }\n\n        const root = this.attachShadow({ mode: 'open' });\n        const clone = document.importNode(template.content, true);\n        root.appendChild(clone);\n      }\n    }\n\n  }\n\n  return ShadowTemplate;\n};\n\n\n// Convert a plain string of HTML into a real template element.\nfunction createTemplateWithInnerHTML(innerHTML) {\n  const template = document.createElement('template');\n  // REVIEW: Is there an easier way to do this?\n  // We'd like to just set innerHTML on the template content, but since it's\n  // a DocumentFragment, that doesn't work.\n  const div = document.createElement('div');\n  div.innerHTML = innerHTML;\n  while (div.childNodes.length > 0) {\n    template.content.appendChild(div.childNodes[0]);\n  }\n  return template;\n}\n\n// Invoke basic style shimming with ShadowCSS.\nfunction shimTemplateStyles(template, tag) {\n  window.WebComponents.ShadowCSS.shimStyling(template.content, tag);\n}\n","import createSymbol from './createSymbol';\nimport symbols from './symbols';\n\n\n// Symbols for private data members on an element.\nconst canSelectNextSymbol = createSymbol('canSelectNext');\nconst canSelectPreviousSymbol = createSymbol('canSelectPrevious');\nconst selectionRequiredSymbol = createSymbol('selectionRequired');\nconst selectionWrapsSymbol = createSymbol('selectionWraps');\n\n// We want to expose both selectedIndex and selectedItem as independent\n// properties but keep them in sync. This allows a component user to reference\n// the selection by whatever means is most natural for their situation.\n//\n// To efficiently keep these properties in sync, we track \"external\" and\n// \"internal\" references for each property:\n//\n// The external index or item is the one we report to the outside world when\n// asked for selection.  When handling a change to index or item, we update the\n// external reference as soon as possible, so that if anyone immediately asks\n// for the current selection, they will receive a stable answer.\n//\n// The internal index or item tracks whichever index or item last received the\n// full set of processing. Processing includes raising a change event for the\n// new value. Once we've begun that processing, we store the new value as the\n// internal value to indicate we've handled it.\n//\nconst externalSelectedIndexSymbol = createSymbol('externalSelectedIndex');\nconst externalSelectedItemSymbol = createSymbol('externalSelectedItem');\nconst internalSelectedIndexSymbol = createSymbol('internalSelectedIndex');\nconst internalSelectedItemSymbol = createSymbol('internalSelectedItem');\n\n\n/* Exported function extends a base class with SingleSelection. */\nexport default (base) => {\n\n  /**\n   * Mixin which manages single-selection semantics for items in a list.\n   *\n   * This mixin expects a component to provide an `items` Array or NodeList of\n   * all elements in the list. A standard way to do that with is the\n   * [ContentItemsMixin](ContentItemsMixin.md), which takes a component's\n   * content (typically its distributed children) as the set of list items; see\n   * that mixin for details.\n   *\n   * This mixin tracks a single selected item in the list, and provides means to\n   * get and set that state by item position (`selectedIndex`) or item identity\n   * (`selectedItem`). The selection can be moved in the list via the methods\n   * `selectFirst`, `selectLast`, `selectNext`, and `selectPrevious`.\n   *\n   * This mixin does not produce any user-visible effects to represent\n   * selection. Other mixins, such as\n   * [SelectionAriaActiveMixin](SelectionAriaActiveMixin.md),\n   * [SelectionHighlightMixin](SelectionHighlightMixin.md) and\n   * [SelectionInViewMixin](SelectionInViewMixin.md), modify the selected item\n   * in common ways to let the user know a given item is selected or not\n   * selected.\n   */\n  class SingleSelection extends base {\n\n    constructor() {\n      super();\n      // Set defaults.\n      if (typeof this.selectionRequired === 'undefined') {\n        this.selectionRequired = this[symbols.defaults].selectionRequired;\n      }\n      if (typeof this.selectionWraps === 'undefined') {\n        this.selectionWraps = this[symbols.defaults].selectionWraps;\n      }\n    }\n\n    /**\n     * True if the selection can be moved to the next item, false if not (the\n     * selected item is the last item in the list).\n     *\n     * @type {boolean}\n     */\n    get canSelectNext() {\n      return this[canSelectNextSymbol];\n    }\n    set canSelectNext(canSelectNext) {\n      const previousCanSelectNext = this[canSelectNextSymbol];\n      this[canSelectNextSymbol] = canSelectNext;\n      if ('canSelectNext' in base.prototype) { super.canSelectNext = canSelectNext; }\n      if (canSelectNext !== previousCanSelectNext) {\n        this.dispatchEvent(new CustomEvent('can-select-next-changed'));\n      }\n    }\n\n    /**\n     * True if the selection can be moved to the previous item, false if not\n     * (the selected item is the first one in the list).\n     *\n     * @type {boolean}\n     */\n    get canSelectPrevious() {\n      return this[canSelectPreviousSymbol];\n    }\n    set canSelectPrevious(canSelectPrevious) {\n      const previousCanSelectPrevious = this[canSelectPreviousSymbol];\n      this[canSelectPreviousSymbol] = canSelectPrevious;\n      if ('canSelectPrevious' in base.prototype) { super.canSelectPrevious = canSelectPrevious; }\n      if (canSelectPrevious !== previousCanSelectPrevious) {\n        this.dispatchEvent(new CustomEvent('can-select-previous-changed'));\n      }\n    }\n\n    get [symbols.defaults]() {\n      const defaults = super[symbols.defaults] || {};\n      defaults.selectionRequired = false;\n      defaults.selectionWraps = false;\n      return defaults;\n    }\n\n    /**\n     * Handle a new item being added to the list.\n     *\n     * The default implementation of this method simply sets the item's\n     * selection state to false.\n     *\n     * @param {HTMLElement} item - the item being added\n     */\n    [symbols.itemAdded](item) {\n      if (super[symbols.itemAdded]) { super[symbols.itemAdded](item); }\n      this[symbols.itemSelected](item, item === this.selectedItem);\n    }\n\n    [symbols.itemsChanged]() {\n      if (super[symbols.itemsChanged]) { super[symbols.itemsChanged](); }\n\n      // In case selected item changed position or was removed.\n      trackSelectedItem(this);\n\n      // In case the change in items affected which navigations are possible.\n      updatePossibleNavigations(this);\n    }\n\n    /**\n     * Apply the indicate selection state to the item.\n     *\n     * The default implementation of this method does nothing. User-visible\n     * effects will typically be handled by other mixins.\n     *\n     * @param {HTMLElement} item - the item being selected/deselected\n     * @param {boolean} selected - true if the item is selected, false if not\n     */\n    [symbols.itemSelected](item, selected) {\n      if (super[symbols.itemSelected]) { super[symbols.itemSelected](item, selected); }\n    }\n\n    /**\n     * The index of the item which is currently selected.\n     *\n     * A `selectedIndex` of -1 indicates there is no selection. Setting this\n     * property to -1 will remove any existing selection.\n     *\n     * @type {number}\n     */\n    get selectedIndex() {\n      return this[externalSelectedIndexSymbol] != null ?\n        this[externalSelectedIndexSymbol] :\n        -1;\n    }\n    set selectedIndex(index) {\n      // See notes at top about internal vs. external copies of this property.\n      const previousSelectedIndex = this[internalSelectedIndexSymbol];\n      let item;\n      if (index !== this[externalSelectedIndexSymbol]) {\n        // Store the new index and the corresponding item.\n        const items = this.items;\n        const hasItems = items && items.length > 0;\n        if (!(hasItems && index >= 0 && index < items.length)) {\n          index = -1; // No item at that index.\n        }\n        this[externalSelectedIndexSymbol] = index;\n        item = hasItems && index >= 0 ? items[index] : null;\n        this[externalSelectedItemSymbol] = item;\n      } else {\n        item = this[externalSelectedItemSymbol];\n      }\n\n      // Now let super do any work.\n      if ('selectedIndex' in base.prototype) { super.selectedIndex = index; }\n\n      if (index !== previousSelectedIndex) {\n        // The selected index changed.\n        this[internalSelectedIndexSymbol] = index;\n\n        const event = new CustomEvent('selected-index-changed', {\n          detail: {\n            selectedIndex: index,\n            value: index // for Polymer binding. TODO: Verify still necessary\n          }\n        });\n        this.dispatchEvent(event);\n      }\n\n      if (this[internalSelectedItemSymbol] !== item) {\n        // Update selectedItem property so it can have its own effects.\n        this.selectedItem = item;\n      }\n    }\n\n    /**\n     * The currently selected item, or null if there is no selection.\n     *\n     * Setting this property to null deselects any currently-selected item.\n     * Setting this property to an object that is not in the list has no effect.\n     *\n     * TODO: Even if selectionRequired, can still explicitly set selectedItem to null.\n     * TODO: If selectionRequired, leave selection alone?\n     *\n     * @type {object}\n     */\n    get selectedItem() {\n      return this[externalSelectedItemSymbol] || null;\n    }\n    set selectedItem(item) {\n      // See notes at top about internal vs. external copies of this property.\n      const previousSelectedItem = this[internalSelectedItemSymbol];\n      let index;\n      if (item !== this[externalSelectedItemSymbol]) {\n        // Store item and look up corresponding index.\n        const items = this.items;\n        const hasItems = items && items.length > 0;\n        index = hasItems ? Array.prototype.indexOf.call(items, item) : -1;\n        this[externalSelectedIndexSymbol] = index;\n        if (index < 0) {\n          item = null; // The indicated item isn't actually in `items`.\n        }\n        this[externalSelectedItemSymbol] = item;\n      } else {\n        index = this[externalSelectedIndexSymbol];\n      }\n\n      // Now let super do any work.\n      if ('selectedItem' in base.prototype) { super.selectedItem = item; }\n\n      if (item !== previousSelectedItem) {\n        // The selected item changed.\n        this[internalSelectedItemSymbol] = item;\n\n        if (previousSelectedItem) {\n          // Update selection state of old item.\n          this[symbols.itemSelected](previousSelectedItem, false);\n        }\n        if (item) {\n          // Update selection state to new item.\n          this[symbols.itemSelected](item, true);\n        }\n\n        updatePossibleNavigations(this);\n\n        const event = new CustomEvent('selected-item-changed', {\n          detail: {\n            selectedItem: item,\n            value: item // for Polymer binding\n          }\n        });\n        this.dispatchEvent(event);\n      }\n\n      if (this[internalSelectedIndexSymbol] !== index) {\n        // Update selectedIndex property so it can have its own effects.\n        this.selectedIndex = index;\n      }\n    }\n\n    /**\n     * Select the first item in the list.\n     */\n    selectFirst() {\n      if (super.selectFirst) { super.selectFirst(); }\n      return selectIndex(this, 0);\n    }\n\n    /**\n     * True if the list should always have a selection (if it has items).\n     *\n     * @type {boolean}\n     * @default false\n     */\n    get selectionRequired() {\n      return this[selectionRequiredSymbol];\n    }\n    set selectionRequired(selectionRequired) {\n      this[selectionRequiredSymbol] = selectionRequired;\n      if ('selectionRequired' in base.prototype) { super.selectionRequired = selectionRequired; }\n      trackSelectedItem(this);\n    }\n\n    /**\n     * True if selection navigations wrap from last to first, and vice versa.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    get selectionWraps() {\n      return this[selectionWrapsSymbol];\n    }\n    set selectionWraps(value) {\n      this[selectionWrapsSymbol] = String(value) === 'true';\n      if ('selectionWraps' in base.prototype) { super.selectionWraps = value; }\n      updatePossibleNavigations(this);\n    }\n\n    /**\n     * Select the last item in the list.\n     */\n    selectLast() {\n      if (super.selectLast) { super.selectLast(); }\n      return selectIndex(this, this.items.length - 1);\n    }\n\n    /**\n     * Select the next item in the list.\n     */\n    selectNext() {\n      if (super.selectNext) { super.selectNext(); }\n      return selectIndex(this, this.selectedIndex + 1);\n    }\n\n    /**\n     * Select the previous item in the list.\n     *\n     * If the list has no selection, the last item will be selected.\n     */\n    selectPrevious() {\n      if (super.selectPrevious) { super.selectPrevious(); }\n      const newIndex = this.selectedIndex < 0 ?\n        this.items.length - 1 :     // No selection yet; select last item.\n        this.selectedIndex - 1;\n      return selectIndex(this, newIndex);\n    }\n\n    /**\n     * Fires when the selectedItem property changes.\n     *\n     * @memberof SingleSelection\n     * @event selected-item-changed\n     * @param {HTMLElement} detail.selectedItem The new selected item.\n     * @param {HTMLElement} detail.previousItem The previously selected item.\n     */\n\n    /**\n     * Fires when the selectedIndex property changes.\n     *\n     * @memberof SingleSelection\n     * @event selected-index-changed\n     * @param {number} detail.selectedIndex The new selected index.\n     */\n\n  }\n\n  return SingleSelection;\n};\n\n\n// Ensure the given index is within bounds, and select it if it's not already\n// selected.\nfunction selectIndex(element, index) {\n  const count = element.items.length;\n\n  const boundedIndex = (element.selectionWraps) ?\n    // JavaScript mod doesn't handle negative numbers the way we want to wrap.\n    // See http://stackoverflow.com/a/18618250/76472\n    ((index % count) + count) % count :\n\n    // Keep index within bounds of array.\n    Math.max(Math.min(index, count - 1), 0);\n\n  const previousIndex = element.selectedIndex;\n  if (previousIndex !== boundedIndex) {\n    element.selectedIndex = boundedIndex;\n    return true;\n  } else {\n    return false;\n  }\n}\n\n// Following a change in the set of items, or in the value of the\n// `selectionRequired` property, reacquire the selected item. If it's moved,\n// update `selectedIndex`. If it's been removed, and a selection is required,\n// try to select another item.\nfunction trackSelectedItem(element) {\n\n  const items = element.items;\n  const itemCount = items ? items.length : 0;\n\n  const previousSelectedItem = element.selectedItem;\n  if (!previousSelectedItem) {\n    // No item was previously selected.\n    if (element.selectionRequired) {\n      // Select the first item by default.\n      element.selectedIndex = 0;\n    }\n  } else if (itemCount === 0) {\n    // We've lost the selection, and there's nothing left to select.\n    element.selectedItem = null;\n  } else {\n    // Try to find the previously-selected item in the current set of items.\n    const indexInCurrentItems = Array.prototype.indexOf.call(items, previousSelectedItem);\n    const previousSelectedIndex = element.selectedIndex;\n    if (indexInCurrentItems < 0) {\n      // Previously-selected item was removed from the items.\n      // Select the item at the same index (if it exists) or as close as possible.\n      const newSelectedIndex = Math.min(previousSelectedIndex, itemCount - 1);\n      // Select by item, since index may be the same, and we want to raise the\n      // selected-item-changed event.\n      element.selectedItem = items[newSelectedIndex];\n    } else if (indexInCurrentItems !== previousSelectedIndex) {\n      // Previously-selected item still there, but changed position.\n      element.selectedIndex = indexInCurrentItems;\n    }\n  }\n}\n\n// Following a change in selection, report whether it's now possible to\n// go next/previous from the given index.\nfunction updatePossibleNavigations(element) {\n  let canSelectNext;\n  let canSelectPrevious;\n  const items = element.items;\n  if (items == null || items.length === 0) {\n    // No items to select.\n    canSelectNext = false;\n    canSelectPrevious = false;\n  } if (element.selectionWraps) {\n    // Since there are items, can always go next/previous.\n    canSelectNext = true;\n    canSelectPrevious = true;\n  } else {\n    const index = element.selectedIndex;\n    if (index < 0 && items.length > 0) {\n      // Special case. If there are items but no selection, declare that it's\n      // always possible to go next/previous to create a selection.\n      canSelectNext = true;\n      canSelectPrevious = true;\n    } else {\n      // Normal case: we have an index in a list that has items.\n      canSelectPrevious = (index > 0);\n      canSelectNext = (index < items.length - 1);\n    }\n  }\n  if (element.canSelectNext !== canSelectNext) {\n    element.canSelectNext = canSelectNext;\n  }\n  if (element.canSelectPrevious !== canSelectPrevious) {\n    element.canSelectPrevious = canSelectPrevious;\n  }\n}\n","import createSymbol from './createSymbol';\nimport symbols from './symbols';\n\n\nconst playingSymbol = createSymbol('playing');\nconst selectionTimerDurationSymbol = createSymbol('selectionTimerDuration');\nconst timerTimeoutSymbol = createSymbol('timerTimeout');\n\n\n/* Exported function extends a base class with TimerSelection. */\nexport default (base) => {\n\n  /**\n   * Mixin which provides for automatic timed changes in selection.\n   *\n   * This mixin is useful for creating slideshow-like elements such as\n   * [basic-slideshow](../../basic-slideshow) and\n   * [basic-slideshow-with-controls](../../basic-slideshow-with-controls).\n   *\n   * Typical usage:\n   *\n   *     class CarouselWithTimer extends TimerSelectionMixin(Carousel) {}\n   *     customElements.define('carousel-with-arrows', CarouselWithTimer);\n   *\n   * This mixin expects the component to define an `items` property, as well as\n   * `selectFirst` and `selectNext` methods. You can implement those yourself,\n   * or use [ContentItemsMixin](ContentItemsMixin.md) and\n   * [SingleSelectionMixin](SingleSelectionMixin.md).\n   */\n  class TimerSelection extends base {\n\n    constructor() {\n      super();\n      // Set defaults.\n      if (typeof this.playing === 'undefined') {\n        this.playing = this[symbols.defaults].playing;\n      }\n      if (typeof this.selectionTimerDuration === 'undefined') {\n        this.selectionTimerDuration = this[symbols.defaults].selectionTimerDuration;\n      }\n    }\n\n    contentChanged() {\n      if (super.contentChanged) { super.contentChanged(); }\n      restartTimer(this);\n    }\n\n    get [symbols.defaults]() {\n      const defaults = super[symbols.defaults] || {};\n      defaults.playing = false;\n      defaults.selectionTimerDuration = 1000;\n      return defaults;\n    }\n\n    /**\n     * Begin automatic progression of the selection.\n     */\n    play() {\n      if (super.play) { super.play(); }\n      startTimer(this);\n      this[playingSymbol] = true;\n    }\n\n    /**\n     * Pause automatic progression of the selection.\n     */\n    pause() {\n      if (super.pause) { super.pause(); }\n      clearTimer(this);\n      this[playingSymbol] = false;\n    }\n\n    /**\n     * True if the selection is being automatically advanced.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    get playing() {\n      return this[playingSymbol];\n    }\n    set playing(playing) {\n      const previousPlaying = this[playingSymbol];\n      const parsed = String(playing) === 'true'; // Cast to boolean\n      if ('playing' in base.prototype) { super.playing = playing; }\n      if (parsed !== previousPlaying) {\n        if (playing) {\n          this.play();\n        } else {\n          this.pause();\n        }\n      }\n    }\n\n    /*\n     * When the selected item changes (because of something this mixin did, or\n     * was changed by an outside agent like the user), we wait before advancing\n     * to the next item. By triggering the next item this way, we implicitly get\n     * a desirable behavior: if the user changes the selection (e.g., in a\n     * carousel), we let them see that selection state for a while before\n     * advancing the selection ourselves.\n     */\n    get selectedItem() {\n      return super.selectedItem;\n    }\n    set selectedItem(item) {\n      if ('selectedItem' in base.prototype) { super.selectedItem = item; }\n      restartTimer(this);\n    }\n\n    /**\n     * The time in milliseconds that will elapse after the selection changes\n     * before the selection will be advanced to the next item in the list.\n     *\n     * @type {number} - Time in milliseconds\n     * @default 1000 (1 second)\n     */\n    get selectionTimerDuration() {\n      return this[selectionTimerDurationSymbol];\n    }\n    set selectionTimerDuration(value) {\n      this[selectionTimerDurationSymbol] = parseInt(value);\n      if ('selectionTimerDuration' in base.prototype) { super.selectionTimerDuration = value; }\n    }\n\n  }\n\n  return TimerSelection;\n};\n\n\nfunction clearTimer(element) {\n  if (element[timerTimeoutSymbol]) {\n    clearTimeout(element[timerTimeoutSymbol]);\n    element[timerTimeoutSymbol] = null;\n  }\n}\n\nfunction restartTimer(element) {\n  clearTimer(element);\n  if (element.playing && element.items && element.items.length > 0) {\n    startTimer(element);\n  }\n}\n\nfunction startTimer(element) {\n  // If play() is called more than once, cancel any existing timer.\n  clearTimer(element);\n  element[timerTimeoutSymbol] = setTimeout(() => {\n    selectNextWithWrap(element);\n  }, element.selectionTimerDuration);\n}\n\n// Select the next item, wrapping to first item if necessary.\nfunction selectNextWithWrap(element) {\n  const items = element.items;\n  if (items && items.length > 0) {\n    if (element.selectedIndex == null || element.selectedIndex === items.length - 1) {\n      element.selectFirst();\n    } else {\n      element.selectNext();\n    }\n  }\n}\n","/**\n * Helper function to create a symbol that can be used for associating private\n * data with an element.\n *\n * Mixins and component classes often want to associate private data with an\n * element instance, but JavaScript does not have direct support for true\n * private properties. One approach is to use the\n * [Symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol)\n * data type to set and retrieve data on an element.\n *\n * Unfortunately, the Symbol type is not available in Internet Explorer 11. The\n * `createSymbol` helper function exists as a workaround for IE 11. Rather than\n * returning a true Symbol, it simply returns an underscore-prefixed string.\n *\n * Usage:\n *\n *     const fooSymbol = createSymbol('foo');\n *\n *     class MyElement extends HTMLElement {\n *       get foo() {\n *         return this[fooSymbol];\n *       }\n *       set foo(value) {\n *         this[fooSymbol] = value;\n *       }\n *     }\n *\n * In IE 11, this sample will \"hide\" data behind an instance property this._foo.\n * The use of the underscore is meant to reduce (not eliminate) the potential\n * for name conflicts, and discourage (not prevent) external access to this\n * data. In modern browsers, the above code will eliminate the potential of\n * naming conflicts, and better hide the data behind a real Symbol.\n *\n * @function createSymbol\n * @param {string} description - A string to identify the symbol when debugging\n */\nexport default function createSymbol(description) {\n  return typeof Symbol === 'function' ?\n    Symbol(description) :\n    `_${description}`;\n}\n","/*\n * Microtask helper for IE 11.\n *\n * Executing a function as a microtask is trivial in browsers that support\n * promises, whose then() clauses use microtask timing. IE 11 doesn't support\n * promises, but does support MutationObservers, which are also executed as\n * microtasks. So this helper uses an MutationObserver to achieve microtask\n * timing.\n *\n * See https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/\n *\n * Inspired by Polymer's async() function.\n */\n\n\n// The queue of pending callbacks to be executed as microtasks.\nconst callbacks = [];\n\n// Create an element that we will modify to force observable mutations.\nconst element = document.createTextNode('');\n\n// A monotonically-increasing value.\nlet counter = 0;\n\n\n/**\n * Add a callback to the microtask queue.\n *\n * This uses a MutationObserver so that it works on IE 11.\n *\n * NOTE: IE 11 may actually use timeout timing with MutationObservers. This\n * needs more investigation.\n *\n * @function microtask\n * @param {function} callback\n */\nexport default function microtask(callback) {\n  callbacks.push(callback);\n  // Force a mutation.\n  element.textContent = ++counter;\n}\n\n\n// Execute any pending callbacks.\nfunction executeCallbacks() {\n  while (callbacks.length > 0) {\n    const callback = callbacks.shift();\n    callback();\n  }\n}\n\n\n// Create the observer.\nconst observer = new MutationObserver(executeCallbacks);\nobserver.observe(element, {\n  characterData: true\n});\n","import createSymbol from './createSymbol';\nimport toggleClass from './toggleClass';\n\n\n// Symbols for private data members on an element.\nconst safeToSetAttributesSymbol = createSymbol('safeToSetAttributes');\nconst pendingAttributesSymbol = createSymbol('pendingAttributes');\nconst pendingClassesSymbol = createSymbol('pendingClasses');\n\n\n/**\n * Helper functions for updating attributes, including the `class` attribute.\n */\nexport default {\n\n  /**\n   * Perform any pending updates to attributes and classes.\n   *\n   * This writes any `setAttribute` or `toggleClass` values that were performed\n   * before an element was attached to the document for the first time.\n   *\n   * This method should be called by mixins/components in their\n   * `connectedCallback`. If mulitple mixins/components invoke this during the\n   * same `connectedCallback`, only the first call will have any effect. The\n   * subsequent calls will be harmless.\n   *\n   * @param {HTMLElement} element - The element being added to the document.\n   */\n  connected(element) {\n    element[safeToSetAttributesSymbol] = true;\n\n    // Set any pending attributes.\n    if (element[pendingAttributesSymbol]) {\n      for (let attribute in element[pendingAttributesSymbol]) {\n        const value = element[pendingAttributesSymbol][attribute];\n        setAttributeToElement(element, attribute, value);\n      }\n      element[pendingAttributesSymbol] = null;\n    }\n\n    // Set any pending classes.\n    if (element[pendingClassesSymbol]) {\n      for (let className in element[pendingClassesSymbol]) {\n        const value = element[pendingClassesSymbol][className];\n        toggleClass(element, className, value);\n      }\n      element[pendingClassesSymbol] = null;\n    }\n  },\n\n  /**\n   * Set/unset the attribute with the indicated name.\n   *\n   * This method exists primarily to handle the case where an element wants to\n   * set a default property value that should be reflected as an attribute. An\n   * important limitation of custom element consturctors is that they cannot\n   * set attributes. A call to `setAttribute` during the constructor will\n   * be deferred until the element is connected to the document.\n   *\n   * @param {string} attribute - The name of the *attribute* (not property) to set.\n   * @param {object} value - The value to set. If null, the attribute will be removed.\n   */\n  setAttribute(element, attribute, value) {\n    if (element[safeToSetAttributesSymbol]) {\n      // Safe to set attributes immediately.\n      setAttributeToElement(element, attribute, value);\n    } else {\n      // Defer setting attributes until the first time we're connected.\n      if (!element[pendingAttributesSymbol]) {\n        element[pendingAttributesSymbol] = {};\n      }\n      element[pendingAttributesSymbol][attribute] = value;\n    }\n  },\n\n  /**\n   * Set/unset the class with the indicated name.\n   *\n   * This method exists primarily to handle the case where an element wants to\n   * set a default property value that should be reflected as as class. An\n   * important limitation of custom element consturctors is that they cannot\n   * set attributes, including the `class` attribute. A call to\n   * `toggleClass` during the constructor will be deferred until the element\n   * is connected to the document.\n   *\n   * @param {string} className - The name of the class to set.\n   * @param {object} value - True to set the class, false to remove it.\n   */\n  toggleClass(element, className, value) {\n    if (element[safeToSetAttributesSymbol]) {\n      // Safe to set class immediately.\n      toggleClass(element, className, value);\n    } else {\n      // Defer setting class until the first time we're connected.\n      if (!element[pendingClassesSymbol]) {\n        element[pendingClassesSymbol] = {};\n      }\n      element[pendingClassesSymbol][className] = value;\n    }\n  }\n\n};\n\n\n// Reflect the attribute to the given element.\n// If the value is null, remove the attribute.\nfunction setAttributeToElement(element, attributeName, value) {\n  if (value === null || typeof value === 'undefined') {\n    element.removeAttribute(attributeName);\n  } else {\n    const text = String(value);\n    // Avoid recursive attributeChangedCallback calls.\n    if (element.getAttribute(attributeName) !== text) {\n      element.setAttribute(attributeName, value);\n    }\n  }\n}\n","import createSymbol from './createSymbol';\n\n/**\n * A collection of Symbol objects for standard component properties and methods.\n *\n * These Symbol objects are used to allow mixins and a component to internally\n * communicate, without exposing these properties and methods in the component's\n * public API.\n *\n * To use these Symbol objects in your own component, include this module and\n * then create a property or method whose key is the desired Symbol.\n *\n *     import 'SingleSelectionMixin' from 'basic-component-mixins/src/SingleSelectionMixin';\n *     import 'symbols' from 'basic-component-mixins/src/symbols';\n *\n *     class MyElement extends SingleSelectionMixin(HTMLElement) {\n *       [symbols.itemSelected](item, selected) {\n *         // This will be invoked whenever an item is selected/deselected.\n *       }\n *     }\n *\n * @module symbols\n */\nconst symbols = {\n\n  /**\n   * Symbol for the `defaults` property.\n   *\n   * This property can be used to set or override defaults that will be applied\n   * to a new component instance. When implementing this property, take care to\n   * first acquire any defaults defined by the superclass. The standard idiom is\n   * as follows:\n   *\n   *     get [symbols.defaults]() {\n   *       const defaults = super[symbols.defaults] || {};\n   *       // Set or override default values here\n   *       defaults.customProperty = false;\n   *       return defaults;\n   *     }\n   *\n   * @var {object} defaults\n   */\n  defaults: createSymbol('defaults'),\n\n  /**\n   * Symbol for the `dragging` property.\n   *\n   * Components like carousels often define animated CSS transitions for\n   * sliding effects. Such a transition should usually *not* be applied while\n   * the user is dragging, because a CSS animation will introduce a lag that\n   * makes the swipe feel sluggish. Instead, as long as the user is dragging\n   * with their finger down, the transition should be suppressed. When the\n   * user releases their finger, the transition can be restored, allowing the\n   * animation to show the carousel sliding into its final position.\n   *\n   * @type {boolean} true if a drag is in progress, false if not.\n   */\n  dragging: createSymbol('dragging'),\n\n  /**\n   * Symbol for the `goDown` method.\n   *\n   * This method is invoked when the user wants to go/navigate down.\n   *\n   * @function goDown\n   */\n  goDown: createSymbol('goDown'),\n\n  /**\n   * Symbol for the `goEnd` method.\n   *\n   * This method is invoked when the user wants to go/navigate to the end (e.g.,\n   * of a list).\n   *\n   * @function goEnd\n   */\n  goEnd: createSymbol('goEnd'),\n\n  /**\n   * Symbol for the `goLeft` method.\n   *\n   * This method is invoked when the user wants to go/navigate left.\n   *\n   * @function goLeft\n   */\n  goLeft: createSymbol('goLeft'),\n\n  /**\n   * Symbol for the `goRight` method.\n   *\n   * This method is invoked when the user wants to go/navigate right.\n   *\n   * @function goRight\n   */\n  goRight: createSymbol('goRight'),\n\n  /**\n   * Symbol for the `goStart` method.\n   *\n   * This method is invoked when the user wants to go/navigate to the start\n   * (e.g., of a list).\n   *\n   * @function goStart\n   */\n  goStart: createSymbol('goStart'),\n\n  /**\n   * Symbol for the `goUp` method.\n   *\n   * This method is invoked when the user wants to go/navigate up.\n   *\n   * @function goUp\n   */\n  goUp: createSymbol('goUp'),\n\n  /**\n   * Symbol for the `itemAdded` method.\n   *\n   * This method is invoked when a new item is added to a list.\n   *\n   * @function itemAdded\n   * @param {HTMLElement} item - the item being selected/deselected\n   */\n  itemAdded: createSymbol('itemAdded'),\n\n\n  /**\n   * Symbol for the `itemsChanged` method.\n   *\n   * This method is invoked when the underlying contents change. It is also\n   * invoked on component initialization – since the items have \"changed\" from\n   * being nothing.\n   */\n  itemsChanged: createSymbol('itemsChanged'),\n\n  /**\n   * Symbol for the `itemSelected` method.\n   *\n   * This method is invoked when an item becomes selected or deselected.\n   *\n   * @function itemSelected\n   * @param {HTMLElement} item - the item being selected/deselected\n   * @param {boolean} selected - true if the item is selected, false if not\n   */\n  itemSelected: createSymbol('itemSelected'),\n\n  /**\n   * Symbol for the `keydown` method.\n   *\n   * This method is invoked when an element receives a `keydown` event.\n   *\n   * @function keydown\n   * @param {KeyboardEvent} event - the event being processed\n   */\n  keydown: createSymbol('keydown'),\n\n  /**\n   * Symbol for the `template` property.\n   *\n   * This property returns a component's template.\n   *\n   * @type {string|HTMLElement}\n   */\n  template: createSymbol('template')\n};\n\nexport default symbols;\n","/**\n * Helper function for standard classList.toggle() behavior on old browsers,\n * namely IE 11.\n *\n * The standard\n * [classlist](https://developer.mozilla.org/en-US/docs/Web/API/Element/classList)\n * object has a `toggle()` function that supports a second Boolean parameter\n * that can be used to succinctly turn a class on or off. This feature is often\n * useful in designing custom elements, which may want to externally reflect\n * component state in a CSS class that can be used for styling purposes.\n *\n * Unfortunately, IE 11 does not support the Boolean parameter to\n * `classList.toggle()`. This helper function behaves like the standard\n * `toggle()`, including support for the Boolean parameter, so that it can be\n * used even on IE 11.\n *\n * @function toggleClass\n * @param {HTMLElement} element - The element to modify\n * @param {string} className - The class to add/remove\n * @param {boolean} [force] - Force the class to be added (if true) or removed\n *                            (if false)\n */\nexport default function toggleClass(element, className, force) {\n  const classList = element.classList;\n  const addClass = (typeof force === 'undefined') ?\n    !classList.contains(className) :\n    force;\n  if (addClass) {\n    classList.add(className);\n  } else {\n    classList.remove(className);\n  }\n  return addClass;\n}\n","import AttributeMarshallingMixin from '../../basic-component-mixins/src/AttributeMarshallingMixin';\nimport ComposableMixin from '../../basic-component-mixins/src/ComposableMixin';\nimport DistributedChildrenMixin from '../../basic-component-mixins/src/DistributedChildrenMixin';\nimport ShadowElementReferencesMixin from '../../basic-component-mixins/src/ShadowElementReferencesMixin';\nimport ShadowTemplateMixin from '../../basic-component-mixins/src/ShadowTemplateMixin';\n\n\n/**\n * A sample general-purpose base class for defining custom elements that mixes\n * in some common features: template stamping into a shadow root, shadow element\n * references, marshalling attributes to properties, and retrieving the children\n * distributed to a component.\n *\n * This base class is not special in any way, and is defined only as a\n * convenient shorthand for applying the mixins listed above. You can use this\n * class as a base class for your own elements, or easily create your own base\n * class by applying the same set of mixins.\n *\n * The ElementBase base class does not register itself as a custom element with\n * the browser, and hence cannot be independently instantiated.\n *\n * @mixes AttributeMarshallingMixin\n * @mixes ComposableMixin\n * @mixes DistributedChildrenMixin\n * @mixes ShadowElementReferencesMixin\n * @mixes ShadowTemplateMixin\n */\nclass ElementBase extends ComposableMixin(HTMLElement).compose(\n  ShadowTemplateMixin,          // before node finding, so shadow root is populated\n  ShadowElementReferencesMixin, // before marshalling, so properties can use refs\n  AttributeMarshallingMixin,\n  DistributedChildrenMixin\n) {}\n\nexport default ElementBase;\n","/*\n * This file is transpiled to create an ES5-compatible distribution in which\n * the package's main feature(s) are available via the window.Basic global.\n * If you're already using ES6 yourself, ignore this file, and instead import\n * the source file(s) you want from the src folder.\n */\n\nimport SlideshowWithControls from './src/SlideshowWithControls';\n\nwindow.Basic = window.Basic || {};\nwindow.Basic.SlideshowWithControls = SlideshowWithControls;\n","import Slideshow from '../../basic-slideshow/src/Slideshow';\nimport PlayControlsMixin from '../../basic-component-mixins/src/PlayControlsMixin';\n\n/**\n * An extension of\n * [basic-slideshow](../basic-slideshow) that adds play controls\n * via [PlayControlsMixin](../basic-component-mixins/docs/PlayControlsMixin.md).\n *\n * [Live demo](http://basicwebcomponents.org/basic-web-components/packages/basic-slideshow-with-controls/)\n *\n * @extends Slideshow\n * @mixes PlayControlsMixin\n */\nclass SlideshowWithControls extends PlayControlsMixin(Slideshow) {}\ncustomElements.define('basic-slideshow-with-controls', SlideshowWithControls);\n\nexport default SlideshowWithControls;\n","import ElementBase from '../../basic-element-base/src/ElementBase';\nimport ContentItemsMixin from '../../basic-component-mixins/src/ContentItemsMixin';\nimport DistributedChildrenContentMixin from '../../basic-component-mixins/src/DistributedChildrenContentMixin';\nimport FractionalSelectionMixin from '../../basic-component-mixins/src/FractionalSelectionMixin';\nimport SelectionAnimationMixin from '../../basic-component-mixins/src/SelectionAnimationMixin';\nimport SelectionAriaActiveMixin from '../../basic-component-mixins/src/SelectionAriaActiveMixin';\nimport SingleSelectionMixin from '../../basic-component-mixins/src/SingleSelectionMixin';\nimport symbols from '../../basic-component-mixins/src/symbols';\nimport TimerSelectionMixin from '../../basic-component-mixins/src/TimerSelectionMixin';\n\n\nconst base = ElementBase.compose(\n  ContentItemsMixin,\n  DistributedChildrenContentMixin,\n  FractionalSelectionMixin,\n  SelectionAnimationMixin,\n  SelectionAriaActiveMixin,\n  SingleSelectionMixin,\n  TimerSelectionMixin\n);\n\n\n/**\n * Slideshow with animated transitions.\n *\n * [Live demo](http://basicwebcomponents.org/basic-web-components/packages/basic-slideshow/)\n *\n * By default the slideshow will immediately begin playing when it is connected\n * to the document, advance every 3000 ms (3 seconds), and use a simple\n * crossfade effect. For a variation with play controls, see\n * [basic-slideshow-with-controls](../basic-slideshow-with-controls).\n *\n * This component can be used on its own. To incorporate slideshow behavior into\n * a component of your own, apply the\n * [TimerSelectionMixin](../basic-component-mixins/docs/TimerSelectionMixin.md).\n *\n * @extends ElementBase\n * @mixes ContentItemsMixin\n * @mixes DistributedChildrenContentMixin\n * @mixes FractionalSelectionMixin\n * @mixes SelectionAnimationMixin\n * @mixes SelectionAriaActiveMixin\n * @mixes SingleSelectionMixin\n * @mixes TimerSelectionMixin\n */\nclass Slideshow extends base {\n\n  get [symbols.defaults]() {\n    const defaults = super[symbols.defaults] || {};\n    defaults.playing = true;\n    defaults.selectionAnimationDuration = 500;\n    defaults.selectionAnimationEffect = 'crossfade';\n    defaults.selectionRequired = true;\n    defaults.selectionTimerDuration = 3000;\n    defaults.selectionWraps = true;\n    return defaults;\n  }\n\n  get [symbols.template]() {\n    return `\n      <style>\n      :host {\n        display: -webkit-flex;\n        display: flex;\n        overflow: hidden;\n        position: relative;\n      }\n\n      #container ::slotted(*) {\n        height: 100%;\n        object-fit: contain;\n        position: absolute;\n        width: 100%;\n        will-change: transform;\n      }\n      </style>\n\n      <div id=\"container\" role=\"none\">\n        <slot></slot>\n      </div>\n    `;\n  }\n\n}\n\n\ncustomElements.define('basic-slideshow', Slideshow);\nexport default Slideshow;\n"]}