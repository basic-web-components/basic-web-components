{"version":3,"sources":["node_modules/browser-pack/_prelude.js","packages/basic-animation-stage/src/AnimationStage.js","packages/basic-carousel/src/Carousel.js","packages/basic-component-mixins/src/ArrowSelectionMixin.js","packages/basic-component-mixins/src/AttributeMarshallingMixin.js","packages/basic-component-mixins/src/ComposableMixin.js","packages/basic-component-mixins/src/ContentItemsMixin.js","packages/basic-component-mixins/src/DirectionSelectionMixin.js","packages/basic-component-mixins/src/DistributedChildrenContentMixin.js","packages/basic-component-mixins/src/DistributedChildrenMixin.js","packages/basic-component-mixins/src/FractionalSelectionMixin.js","packages/basic-component-mixins/src/KeyboardDirectionMixin.js","packages/basic-component-mixins/src/KeyboardMixin.js","packages/basic-component-mixins/src/PageDotsMixin.js","packages/basic-component-mixins/src/SelectionAnimationMixin.js","packages/basic-component-mixins/src/SelectionAriaActiveMixin.js","packages/basic-component-mixins/src/ShadowElementReferencesMixin.js","packages/basic-component-mixins/src/ShadowTemplateMixin.js","packages/basic-component-mixins/src/SingleSelectionMixin.js","packages/basic-component-mixins/src/SwipeDirectionMixin.js","packages/basic-component-mixins/src/TrackpadDirectionMixin.js","packages/basic-component-mixins/src/createSymbol.js","packages/basic-component-mixins/src/microtask.js","packages/basic-component-mixins/src/renderArrayAsElements.js","packages/basic-component-mixins/src/safeAttributes.js","packages/basic-component-mixins/src/symbols.js","packages/basic-component-mixins/src/toggleClass.js","packages/basic-element-base/src/ElementBase.js","packages/demos/src/AnimationStageWithDots.js","packages/demos/src/CarouselWithArrows.js","packages/demos/src/CarouselWithArrowsAndDots.js","packages/demos/src/CarouselWithDots.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","_ElementBase","_ContentItemsMixin","_DistributedChildrenContentMixin","_FractionalSelectionMixin","_SelectionAnimationMixin","_SelectionAriaActiveMixin","_SingleSelectionMixin","_symbols","base","_ElementBase2","default","compose","_ContentItemsMixin2","_DistributedChildrenContentMixin2","_FractionalSelectionMixin2","_SelectionAnimationMixin2","_SelectionAriaActiveMixin2","_SingleSelectionMixin2","AnimationStage","_symbols2","defaults","_get","prototype","__proto__","Object","getPrototypeOf","this","selectionRequired","template","customElements","define","_AnimationStage","_DirectionSelectionMixin","_KeyboardDirectionMixin","_KeyboardMixin","_SwipeDirectionMixin","_TrackpadDirectionMixin","_AnimationStage2","_DirectionSelectionMixin2","_KeyboardMixin2","_KeyboardDirectionMixin2","_SwipeDirectionMixin2","_TrackpadDirectionMixin2","Carousel","navigationAxis","selectionAnimationEffect","assumeButtonFocus","element","button","addEventListener","event","focus","preventDefault","deviceSupportsTouch","window","DocumentTouch","document","listenForMouse","mousedownListenerSymbol","mouseTimeoutSymbol","clearTimeout","lastMouseXSymbol","pageX","lastMouseYSymbol","pageY","mousemoveListenerSymbol","setTimeout","mouseDetected","showArrows","removeEventListener","classList","add","_createSymbol","_createSymbol2","ArrowSelection","_base","_classCallCheck","_this","_possibleConstructorReturn","$","buttonLeft","selectPrevious","stopPropagation","buttonRight","selectNext","_inherits","_createClass","key","value","contains","get","set","canSelectNext","_set","disabled","canSelectPrevious","baseTemplate","attributeToPropertyName","attributeName","propertyName","attributeToPropertyNames","hypenRegEx","replace","match","toUpperCase","attributesForClass","classFn","HTMLElement","baseClass","constructor","baseAttributes","propertyNames","getOwnPropertyNames","setterNames","filter","getOwnPropertyDescriptor","attributes","map","setterName","propertyNameToAttribute","diff","attribute","indexOf","concat","propertyNamesToAttributes","uppercaseRegEx","toLowerCase","_safeAttributes","AttributeMarshalling","apply","arguments","oldValue","newValue","_safeAttributes2","connected","setAttribute","className","toggleClass","composeClass","mixin","Subclass","_base2","copyOwnProperties","NON_MIXABLE_OBJECT_PROPERTIES","source","target","ignorePropertyNames","undefined","forEach","name","descriptor","defineProperty","Composable","_len","mixins","Array","_key","reduce","filterAuxiliaryElements","items","auxiliaryTags","item","localName","_toggleClass","itemsSymbol","itemInitializedSymbol","ContentItems","itemsChanged","itemAdded","itemSelected","selected","_toggleClass2","_this2","dispatchEvent","CustomEvent","content","DirectionSelection","goDown","goEnd","selectLast","goLeft","goRight","goStart","selectFirst","goUp","selectedFraction","_microtask","DistributedChildrenContent","shadowRoot","slots","querySelectorAll","slot","contentChanged","_microtask2","distributedChildren","console","warn","expandContentElements","nodes","includeTextNodes","_ref","expanded","node","isSlot","HTMLSlotElement","assignedNodes","flatten","Text","flattened","_toConsumableArray","DistributedChildren","children","childNodes","strings","distributedChildNodes","child","textContent","join","FractionalSelection","selectedFractionSymbol","helpers","dampedSelection","selection","itemCount","bound","damped","damping","x","y","elementSelection","selectedIndex","selectionParts","index","Math","ceil","floor","fraction","wrappedSelection","wrappedSelectionParts","wrap","navigationAxisSymbol","KeyboardDirection","keydown","handled","axis","horizontal","vertical","keyCode","metaKey","altKey","Keyboard","getAttribute","tabindex","keepIndexWithinBounds","renderTransition","dots","dotCount","opacityMinimum","opacityMaximum","opacityRange","fractionalIndex","leftIndex","rightIndex","selectionWraps","awayIndex","towardIndex","truncatedSelectedFraction","progress","opacityProgressThroughRange","abs","dot","dotOpacity","style","opacity","refreshDots","_renderArrayAsElements","PageDots","dotIndex","_renderArrayAsElements2","createElement","slice","SelectionAnimation","selectionAnimationDuration","selectionAnimationKeyframes","dragging","_resetAnimations","renderSelection","draggingSymbol","previousValue","resetAnimationsOnNextRenderSymbol","selectionAnimationDurationSymbol","selectionAnimationEffectSymbol","standardEffectKeyframes","selectionAnimationKeyframesSymbol","animateSelection","fromSelection","toSelection","keyframes","playingAnimationSymbol","timings","effectTimingsForSelectionAnimation","selectionIndex","totalSteps","stepsToIndex","forward","nextUpIndex","isItemIndexInBounds","lastAnimationDetails","timing","showItem","animation","animate","animationSymbol","endDelay","onfinish","selectionAnimationFinished","lastAnimationSymbol","getAnimationForItemIndex","duration","fill","pause","previousSelection","previousSelectionSymbol","renderSelectionInstantly","animationFractions","animationFractionsForSelection","animationFraction","setAnimationFraction","animations","cancel","details","itemIndex","currentTime","flag","visibility","allowWrap","steps","wrapSteps","toIndex","direction","totalDuration","stepDuration","positionInSequence","delay","crossfade","reveal","transform","zIndex","revealWithFade","showAdjacent","slide","slideWithGap","idCount","SelectionAriaActive","role","id","baseId","itemId","removeAttribute","ShadowElementReferences","nodesWithIds","createTemplateWithInnerHTML","innerHTML","div","appendChild","shimTemplateStyles","tag","WebComponents","ShadowCSS","shimStyling","ShadowTemplate","ShadowDOMPolyfill","root","attachShadow","mode","clone","importNode","selectIndex","count","boundedIndex","max","min","previousIndex","trackSelectedItem","previousSelectedItem","selectedItem","indexInCurrentItems","previousSelectedIndex","newSelectedIndex","updatePossibleNavigations","canSelectNextSymbol","canSelectPreviousSymbol","selectionRequiredSymbol","selectionWrapsSymbol","externalSelectedIndexSymbol","externalSelectedItemSymbol","internalSelectedIndexSymbol","internalSelectedItemSymbol","SingleSelection","newIndex","previousCanSelectNext","previousCanSelectPrevious","hasItems","detail","String","isEventForPenOrPrimaryTouch","pointerType","isPrimary","touchEnd","clientX","clientY","deltaXSymbol","trackTo","travelFraction","deltaYSymbol","touchMove","previousXSymbol","previousYSymbol","touchStart","startXSymbol","width","offsetWidth","dragDistance","multiTouchSymbol","travelFractionSymbol","SwipeDirection","PointerEvent","touches","changedTouches","getComputedStyle","touchAction","postNavigate","wheelDistanceSymbol","postNavigateDelayCompleteSymbol","absorbDecelerationSymbol","POST_NAVIGATE_TIME","resetWheelTracking","lastDeltaXSymbol","lastWheelTimeoutSymbol","sign","wheel","wheelTimedOut","WHEEL_TIME","deltaX","deltaY","acceleration","TrackpadDirection","createSymbol","description","Symbol","microtask","callback","callbacks","push","counter","executeCallbacks","shift","createTextNode","observer","MutationObserver","observe","characterData","renderArrayAsElements","container","renderItem","oldElement","newElement","replaceChild","removeChild","setAttributeToElement","text","safeToSetAttributesSymbol","pendingAttributesSymbol","pendingClassesSymbol","_value","_toggleClass3","symbols","force","addClass","remove","_AttributeMarshallingMixin","_ComposableMixin","_DistributedChildrenMixin","_ShadowElementReferencesMixin","_ShadowTemplateMixin","ElementBase","_ComposableMixin2","_ShadowTemplateMixin2","_ShadowElementReferencesMixin2","_AttributeMarshallingMixin2","_DistributedChildrenMixin2","_PageDotsMixin2","AnimationStageWithDots","_PageDotsMixin3","_ArrowSelectionMixin2","_Carousel","CarouselWithArrows","_ArrowSelectionMixin3","_Carousel2","_ArrowSelectionMixin","_PageDotsMixin","CarouselWithDots"],"mappings":"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","file":"demos.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import ElementBase from '../../basic-element-base/src/ElementBase';\nimport ContentItemsMixin from '../../basic-component-mixins/src/ContentItemsMixin';\nimport DistributedChildrenContentMixin from '../../basic-component-mixins/src/DistributedChildrenContentMixin';\nimport FractionalSelectionMixin from '../../basic-component-mixins/src/FractionalSelectionMixin';\nimport SelectionAnimationMixin from '../../basic-component-mixins/src/SelectionAnimationMixin';\nimport SelectionAriaActiveMixin from '../../basic-component-mixins/src/SelectionAriaActiveMixin';\nimport SingleSelectionMixin from '../../basic-component-mixins/src/SingleSelectionMixin';\nimport symbols from '../../basic-component-mixins/src/symbols';\n\n\nconst base = ElementBase.compose(\n  ContentItemsMixin,\n  DistributedChildrenContentMixin,\n  FractionalSelectionMixin,\n  SelectionAnimationMixin,\n  SelectionAriaActiveMixin,\n  SingleSelectionMixin\n);\n\n/**\n * Presents a single item as selected, providing animated transitions when the\n * selection changes. The same animation can be shown at an arbitrary point,\n * generally used to reflect a user-controlled touch or trackpad drag operation\n * in progress.\n *\n * [Live demo](http://basicwebcomponents.org/basic-web-components/packages/basic-animation-stage/)\n *\n * This component is intended to be used as a programmatic rendering surface for\n * components which want to show transitional effects.\n *\n * The component uses [SelectionAnimationMixin](../basic-component-mixins/docs/SelectionAnimationMixin.md)\n * mixin, which in turn uses the Web Animations API. For use on browsers which\n * do not support that API natively, you will need to load the\n * [Web Animations polyfill](https://github.com/web-animations/web-animations-js).\n *\n * For a simpler component that exhibits only a sliding effect, but does not\n * require the Web Animations API, see [basic-sliding-viewport](../basic-sliding-viewport).\n *\n * @extends ElementBase\n * @mixes ContentItemsMixin\n * @mixes DistributedChildrenContentMixin\n * @mixes SelectionAnimationMixin\n * @mixes SelectionAriaActiveMixin\n * @mixes SingleSelectionMixin\n */\nclass AnimationStage extends base {\n\n  get [symbols.defaults]() {\n    const defaults = super[symbols.defaults] || {};\n    defaults.selectionRequired = true;\n    return defaults;\n  }\n\n  get [symbols.template]() {\n    return `\n      <style>\n      :host {\n        overflow: hidden;\n        position: relative;\n      }\n\n      #container ::slotted(*) {\n        height: 100%;\n        object-fit: contain;\n        position: absolute;\n        width: 100%;\n        will-change: transform;\n      }\n      </style>\n\n      <div id=\"container\" role=\"none\">\n        <slot></slot>\n      </div>\n    `;\n  }\n\n}\n\n\ncustomElements.define('basic-animation-stage', AnimationStage);\nexport default AnimationStage;\n","import AnimationStage from '../../basic-animation-stage/src/AnimationStage';\nimport DirectionSelectionMixin from '../../basic-component-mixins/src/DirectionSelectionMixin';\nimport KeyboardDirectionMixin from '../../basic-component-mixins/src/KeyboardDirectionMixin';\nimport KeyboardMixin from '../../basic-component-mixins/src/KeyboardMixin';\nimport SwipeDirectionMixin from '../../basic-component-mixins/src/SwipeDirectionMixin';\nimport symbols from '../../basic-component-mixins/src/symbols';\nimport TrackpadDirectionMixin from '../../basic-component-mixins/src/TrackpadDirectionMixin';\n\n\nconst base = AnimationStage.compose(\n  DirectionSelectionMixin,\n  KeyboardMixin,\n  KeyboardDirectionMixin,\n  SwipeDirectionMixin,\n  TrackpadDirectionMixin\n);\n\n\n/**\n * Lets the user navigate laterally through a sequence of child elements.\n *\n * basic-carousel is an implementation of the carousel user interface pattern,\n * commonly used for navigating between images, pages, and other elements. This\n * pattern presents the user with a linear sequence of elements, only one of\n * which is shown at a time. The user can navigate to the next/previous element\n * with a variety of input methods.\n *\n * [Live demo](http://basicwebcomponents.org/basic-web-components/packages/basic-carousel/)\n *\n * The above demo is a plain carousel. It's often combined, however, with\n * mixins like\n * [ArrowSelectionMixin](../basic-component-mixins/docs/ArrowSelectionMixin.md),\n * [PageDotsMixin](../basic-component-mixins/docs/PageDotsMixin.md),\n * [TimerSelectionMixin](../basic-component-mixins/docs/TimerSelectionMixin.md).\n * For example, you can view a\n * [demo with arrows and page dots](http://basicwebcomponents.org/basic-web-components/packages/demos/carousel-with-arrows-and-dots.html).\n * See the specific mixins for other carousel demos.\n *\n * basic-carousel uses its children as the elements the user will navigate\n * through. In a typical use, a basic-carousel can be used to navigate between a\n * sequence of images:\n *\n *     <basic-carousel>\n *       <img src=\"image1.jpg\">\n *       <img src=\"image2.jpg\">\n *       <img src=\"image3.jpg\">\n *     </basic-carousel>\n *\n * The child elements can be of any type — they are not restricted to images.\n *\n * This component attempts to meet the [Gold Standard for web components]\n * (https://github.com/webcomponents/gold-standard/wiki) so that it is generally\n * as flexible and robust as standard HTML elements. For example, it meets the\n * \"Content Changes\" criteria: the carousel will adapt to new child elements\n * added or removed at runtime.\n *\n * Currently, this component does not meet the Gold Standard criteria \"Size to\n * Content\". As a result, for the time being, **you must manually set a size on\n * this component**. Two approaches are to: 1) stretch the component across\n * whatever surface it is contained within, or 2) set it to be larger than the\n * largest child element you want to display. The former approach is more\n * common, and can be achieved with CSS styling such as:\n *\n *     html {\n *       height: 100%;\n *     }\n *\n *     body {\n *       display: -webkit-flex;\n *       display: flex;\n *       height: 100%;\n *       margin: 0;\n *     }\n *\n *     basic-carousel {\n *       -webkit-flex: 1;\n *       flex: 1;\n *     }\n *\n * The standard basic-carousel component supports navigation via the following\n * input methods:\n *\n * * Keyboard. When the carousel has focus, the user can press Left, Right,\n *   Home, or End. These navigate to the expected element.\n * * Touch. On mobile and other touch-enabled devices, the user can drag left or\n *   right.\n * * Trackpad. The user can swipe left or right on a trackpad to navigate.\n *\n * Because carousels are used in a wide variety of circumstances, by default\n * basic-carousel provides a minimal appearance and no separately interactive\n * elements such as arrow buttons on the side or dots along the bottom. Those\n * elements can be added by wrapping a Carousel in optional mixins:\n *\n * * [ArrowSelectionMixin](../basic-component-mixins/docs/ArrowSelectionMixin.md).\n *   Adds prominent left and right arrow buttons on the side of the carousel.\n * * [PageDotsMixin](../basic-component-mixins/docs/PageDotsMixin.md).\n *   Adds a series of small dots below the carousel to indicate the user's\n *   current position in the sequence.\n * * [TimerSelectionMixin](../basic-component-mixins/docs/TimerSelectionMixin.md).\n *   Advances to the next item on a timer.\n * * [TabStripMixin](../basic-tab-strip).\n *   Adds a strip of traditional tab buttons.\n *\n * See those components for more details, but in general you can construct a\n * common carousel with both arrow buttons and dots like so:\n *\n *     class MyCarousel extends\n *         ArrowSelectionMixin(PageDotsMixin(Carousel)) {}\n *     customElements.define('my-carousel', MyCarousel);\n *\n * For universal access, basic-carousel automatically adds a variety of\n * [ARIA](http://www.w3.org/WAI/intro/aria) properties to itself and to child\n * elements. This helps users navigate the sequence of elements in the carousel\n * using assistive technologies.\n *\n * @extends AnimationStage\n * @mixes DirectionSelectionMixin\n * @mixes GenericMixin\n * @mixes KeyboardMixin\n * @mixes KeyboardDirectionMixin\n * @mixes SwipeDirectionMixin\n * @mixes TrackpadDirectionMixin\n */\nclass Carousel extends base {\n\n  get [symbols.defaults]() {\n    const defaults = super[symbols.defaults] || {};\n    defaults.navigationAxis = 'horizontal';\n    defaults.selectionAnimationEffect = 'slideWithGap';\n    // defaults.selectionRequired = true;\n    return defaults;\n  }\n\n}\n\n\ncustomElements.define('basic-carousel', Carousel);\nexport default Carousel;\n","import createSymbol from '../../basic-component-mixins/src/createSymbol';\nimport symbols from '../../basic-component-mixins/src/symbols';\n\n\n// Symbols for private data members on an element.\nconst mousedownListenerSymbol = createSymbol('mousedownListener');\nconst mousemoveListenerSymbol = createSymbol('mousemoveListener');\nconst lastMouseXSymbol = createSymbol('lastMouseX');\nconst lastMouseYSymbol = createSymbol('lastMouseY');\nconst mouseTimeoutSymbol = createSymbol('mouseTimeout');\n\n\n/* Exported function extends a base class with ArrowSelection. */\nexport default (base) => {\n\n  /**\n   * Template mixin which adds prominent left and right arrow buttons to a\n   * wrapped child such as a carousel.\n   *\n   * You can see a\n   * [live demo](http://basicwebcomponents.org/basic-web-components/packages/demos/carousel-with-arrows.html)\n   * of this mixin applied to a carousel.\n   *\n   * Clicking the left/right buttons selects the previous/next item.\n   *\n   * Typical usage:\n   *\n   *     class CarouselWithArrows extends ArrowSelectionMixin(Carousel) {}\n   *     customElements.define('carousel-with-arrows', CarouselWithArrows);\n   *\n   * By default, the arrow buttons are shown on devices with a mouse or mouse-like\n   * pointing device. They are not shown on a touch-capable device unless mouse\n   * movement is detected. To cause the buttons to always appear, apply the\n   * 'showArrows' CSS class.\n   */\n  class ArrowSelection extends base {\n\n    constructor() {\n      super();\n\n      this.$.buttonLeft.addEventListener('click', event => {\n        this.selectPrevious();\n        event.stopPropagation();\n      });\n      this.$.buttonRight.addEventListener('click', event => {\n        this.selectNext();\n        event.stopPropagation();\n      });\n      assumeButtonFocus(this, this.$.buttonLeft);\n      assumeButtonFocus(this, this.$.buttonRight);\n    }\n\n    get canSelectNext() {\n      return super.canSelectNext;\n    }\n    set canSelectNext(canSelectNext) {\n      if ('canSelectNext' in base.prototype) { super.canSelectNext = canSelectNext; }\n      this.$.buttonRight.disabled = !canSelectNext;\n    }\n\n    get canSelectPrevious() {\n      return super.canSelectPrevious;\n    }\n    set canSelectPrevious(canSelectPrevious) {\n      if ('canSelectPrevious' in base.prototype) { super.canSelectPrevious = canSelectPrevious; }\n      this.$.buttonLeft.disabled = !canSelectPrevious;\n    }\n\n    connectedCallback() {\n      if (super.connectedCallback) { super.connectedCallback(); }\n\n      if (!this.classList.contains('showArrows')) {\n        // Determine whether we should show arrow buttons or not.\n        if (deviceSupportsTouch()) {\n          // A touch device might also support a mouse, but we can't know whether\n          // there's actually a mouse until we hear from it.\n          listenForMouse(this);\n        } else {\n          // The device doesn't support touch, so assume it has a mouse.\n          showArrows(this);\n        }\n      }\n    }\n\n    get [symbols.defaults]() {\n      const defaults = super[symbols.defaults] || {};\n      defaults.navigationAxis = 'horizontal';\n      return defaults;\n    }\n\n    /*\n     * The template uses the chevron-left and chevron-right SVG icons from\n     * https://github.com/PolymerElements/iron-icons/blob/master/iron-icons.html.\n     */\n    get [symbols.template]() {\n      const baseTemplate = super[symbols.template] || '';\n      return `\n        <style>\n        :host {\n          -webkit-align-items: stretch;\n          align-items: stretch;\n          display: -webkit-flex;\n          display: flex;\n          -webkit-flex: 1;\n          flex: 1;\n          -webkit-justify-content: center;\n          justify-content: center;\n        }\n\n        #arrowNavigationContainer {\n          display: -webkit-flex;\n          display: flex;\n          -webkit-flex: 1;\n          flex: 1;\n          position: relative;\n        }\n\n        .navigationButton {\n          background: transparent;\n          border: 1px solid transparent;\n          box-sizing: border-box;\n          color: rgba(0, 0, 0, 0.7);\n          fill: currentColor;\n          margin: 0;\n          opacity: 1;\n          outline: none; /* REVIEW: Accessibility should be provided by other elements. */\n          padding: 0;\n          transition: opacity 1s;\n          z-index: 1;\n        }\n\n        .navigationButton:hover:not(:disabled) {\n          background: rgba(0, 0, 0, 0.5);\n          color: rgba(0, 0, 0, 0.8);\n          cursor: pointer;\n        }\n        .navigationButton:active:not(:disabled) {\n          background: rgba(0, 0, 0, 0.7);\n          color: rgba(0, 0, 0, 0.9);\n        }\n        .navigationButton:disabled {\n          color: rgba(0, 0, 0, 0.2);\n        }\n\n        :host(:not(.showArrows)) .navigationButton {\n          opacity: 0;\n          visibility: hidden;\n        }\n\n        .navigationButton .icon {\n          height: 48px;\n          width: 48px;\n        }\n\n        /* Overlay variant */\n        :host(.overlayArrows) {\n          position: relative;\n        }\n        :host(.overlayArrows) .navigationButton {\n          bottom: 0;\n          color: rgba(255, 255, 255, 0.7);\n          position: absolute;\n          top: 0;\n        }\n        :host(.overlayArrows) #buttonLeft {\n          left: 0;\n        }\n        :host(.overlayArrows) #buttonRight {\n          right: 0;\n        }\n        :host(.overlayArrows) .navigationButton:hover:not(:disabled) {\n          background: rgba(255, 255, 255, 0.2);\n          color: rgba(255, 255, 255, 0.8);\n        }\n        :host(.overlayArrows) .navigationButton:active:not(:disabled) {\n          background: rgba(255, 255, 255, 0.4);\n          color: rgba(255, 255, 255, 0.9);\n        }\n        :host(.overlayArrows) .navigationButton:disabled {\n          color: rgba(255, 255, 255, 0.3);\n        }\n        </style>\n\n        <!--\n        Accessibility note: since the navigation offered by the arrow buttons should\n        be redundant (that is, there should be other ways of navigating the list),\n        we mark the button as aria-hidden so that assistive devices ignore them.\n        -->\n        <button id=\"buttonLeft\" class=\"navigationButton\" disabled tabindex=\"-1\" aria-hidden=\"true\">\n          <svg class=\"icon\" viewBox=\"0 0 24 24\" preserveAspectRatio=\"xMidYMid meet\">\n            <g id=\"chevron-left\">\n              <path d=\"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z\"/>\n            </g>\n          </svg>\n        </button>\n        <div id=\"arrowNavigationContainer\" role=\"none\">\n          ${baseTemplate}\n        </div>\n        <button id=\"buttonRight\" class=\"navigationButton\" disabled tabindex=\"-1\" aria-hidden=\"true\">\n          <svg class=\"icon\" viewBox=\"0 0 24 24\" preserveAspectRatio=\"xMidYMid meet\">\n            <g id=\"chevron-right\">\n              <path d=\"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\"/>\n            </g>\n          </svg>\n        </button>\n      `;\n    }\n\n  }\n\n  return ArrowSelection;\n};\n\n\n/*\n * By default, a button will always take focus on mousedown. For this component,\n * we want to override that behavior, such that a mousedown on a button keeps\n * the focus on the outer component.\n */\nfunction assumeButtonFocus(element, button) {\n  button.addEventListener('mousedown', event => {\n    // Given the main element the focus if it doesn't already have it.\n    element.focus();\n    // Prevent the default focus-on-mousedown behavior.\n    event.preventDefault();\n  });\n}\n\nfunction deviceSupportsTouch() {\n  return 'ontouchstart' in window ||\n      (window.DocumentTouch && document instanceof window.DocumentTouch);\n}\n\n// We try to detect the presence of a mouse by listening for mousemove events\n// which are *not* the result of a mousedown. On a touch device, a tap on the\n// page will generate a fake mousemove, followed by a mousedown. We don't want\n// to respond to those fake mousemove events. To discriminate between fake and\n// real mousemove events, when we get a mousemove event, we wait for a bit to\n// see if the same location is reported as the location of a subsequent\n// mousedown.\nfunction listenForMouse(element) {\n\n  element[mousedownListenerSymbol] = event => {\n    if (element[mouseTimeoutSymbol]) {\n      clearTimeout(element[mouseTimeoutSymbol]);\n    }\n    element[lastMouseXSymbol] = event.pageX;\n    element[lastMouseYSymbol] = event.pageY;\n  };\n  window.addEventListener('mousedown', element[mousedownListenerSymbol]);\n\n  element[mousemoveListenerSymbol] = event => {\n    // Postpone checking the mousemove location to give the mousedown event a\n    // chance to fire. The 250 ms delay is just guesswork; a shorter delay\n    // doesn't seem to work.\n    element[mouseTimeoutSymbol] = setTimeout(() => {\n      if (element[lastMouseXSymbol] != null && event.pageX !== element[lastMouseXSymbol] ||\n          element[lastMouseYSymbol] != null && event.pageY !== element[lastMouseYSymbol]) {\n        // mousemove event was at a location other than the last mousedown,\n        // and hence most likely a real mousemove event.\n        mouseDetected(element);\n      } else {\n        element[lastMouseXSymbol] = event.pageX;\n        element[lastMouseYSymbol] = event.pageY;\n      }\n    }, 250);\n  };\n  window.addEventListener('mousemove', element[mousemoveListenerSymbol]);\n}\n\nfunction mouseDetected(element) {\n  showArrows(element);\n\n  // We can stop listening for mouse events now.\n  if (element[mouseTimeoutSymbol]) {\n    clearTimeout(element[mouseTimeoutSymbol]);\n  }\n  window.removeEventListener('mousedown', element[mousedownListenerSymbol]);\n  window.removeEventListener('mousemove', element[mousemoveListenerSymbol]);\n  element[mousedownListenerSymbol] = null;\n  element[mousemoveListenerSymbol] = null;\n}\n\nfunction showArrows(element) {\n  element.classList.add('showArrows');\n}\n","import safeAttributes from './safeAttributes';\n\n\n// Memoized maps of attribute to property names and vice versa.\nconst attributeToPropertyNames = {};\nconst propertyNamesToAttributes = {};\n\n\n/* Exported function extends a base class with AttributeMarshalling. */\nexport default (base) => {\n\n  /**\n   * Mixin which marshalls attributes to properties and vice versa.\n   *\n   * If your component exposes a setter for a property, it's generally a good\n   * idea to let devs using your component be able to set that property in HTML\n   * via an element attribute. You can code that yourself by writing an\n   * `attributeChangedCallback`, or you can use this mixin to get a degree of\n   * automatic support.\n   *\n   * This mixin implements an `attributeChangedCallback` that will attempt to\n   * convert a change in an element attribute into a call to the corresponding\n   * property setter. Attributes typically follow hyphenated names (\"foo-bar\"),\n   * whereas properties typically use camelCase names (\"fooBar\"). This mixin\n   * respects that convention, automatically mapping the hyphenated attribute\n   * name to the corresponding camelCase property name.\n   *\n   * Example: You define a component using this mixin:\n   *\n   *     class MyElement extends AttributeMarshallingMixin(HTMLElement) {\n   *       get fooBar() { return this._fooBar; }\n   *       set fooBar(value) { this._fooBar = value; }\n   *     }\n   *     customElements.define('my-element', MyElement);\n   *\n   * If someone then instantiates your component in HTML:\n   *\n   *     <my-element foo-bar=\"Hello\"></my-element>\n   *\n   * Then, after the element has been upgraded, the `fooBar` setter will\n   * automatically be invoked with the initial value \"Hello\".\n   *\n   * For the time being, this mixin only supports string-valued properties.\n   * If you'd like to convert string attributes to other types (numbers,\n   * booleans), you need to implement `attributeChangedCallback` yourself.\n   */\n  class AttributeMarshalling extends base {\n\n    /*\n     * Handle a change to the attribute with the given name.\n     */\n    attributeChangedCallback(attributeName, oldValue, newValue) {\n      if (super.attributeChangedCallback) { super.attributeChangedCallback(); }\n      const propertyName = attributeToPropertyName(attributeName);\n      // If the attribute name corresponds to a property name, set the property.\n      // Ignore standard HTMLElement properties handled by the DOM.\n      if (propertyName in this && !(propertyName in HTMLElement.prototype)) {\n        this[propertyName] = newValue;\n      }\n    }\n\n    connectedCallback() {\n      if (super.connectedCallback) { super.connectedCallback(); }\n      safeAttributes.connected(this);\n    }\n\n    static get observedAttributes() {\n      return attributesForClass(this);\n    }\n\n    /**\n     * Set/unset the attribute with the indicated name.\n     *\n     * This method exists primarily to handle the case where an element wants to\n     * set a default property value that should be reflected as an attribute. An\n     * important limitation of custom element consturctors is that they cannot\n     * set attributes. A call to `reflectAttribute` during the constructor will\n     * be deferred until the element is connected to the document.\n     *\n     * @param {string} attribute - The name of the *attribute* (not property) to set.\n     * @param {object} value - The value to set. If null, the attribute will be removed.\n     */\n    reflectAttribute(attribute, value) {\n      return safeAttributes.setAttribute(this, attribute, value);\n    }\n\n    /**\n     * Set/unset the class with the indicated name.\n     *\n     * This method exists primarily to handle the case where an element wants to\n     * set a default property value that should be reflected as as class. An\n     * important limitation of custom element consturctors is that they cannot\n     * set attributes, including the `class` attribute. A call to\n     * `reflectClass` during the constructor will be deferred until the element\n     * is connected to the document.\n     *\n     * @param {string} className - The name of the class to set.\n     * @param {object} value - True to set the class, false to remove it.\n     */\n    reflectClass(className, value) {\n      return safeAttributes.toggleClass(this, className, value);\n    }\n\n  }\n\n  return AttributeMarshalling;\n};\n\n\n// Convert hyphenated foo-bar attribute name to camel case fooBar property name.\nfunction attributeToPropertyName(attributeName) {\n  let propertyName = attributeToPropertyNames[attributeName];\n  if (!propertyName) {\n    // Convert and memoize.\n    const hypenRegEx = /-([a-z])/g;\n    propertyName = attributeName.replace(hypenRegEx,\n        match => match[1].toUpperCase());\n    attributeToPropertyNames[attributeName] = propertyName;\n  }\n  return propertyName;\n}\n\nfunction attributesForClass(classFn) {\n\n  // We treat the element base classes as if they have no attributes, since we\n  // don't want to receive attributeChangedCallback for them.\n  if (classFn === HTMLElement || classFn === Object) {\n    return [];\n  }\n\n  // Get attributes for parent class.\n  const baseClass = Object.getPrototypeOf(classFn.prototype).constructor;\n  const baseAttributes = attributesForClass(baseClass);\n\n  // Get attributes for this class.\n  const propertyNames = Object.getOwnPropertyNames(classFn.prototype);\n  const setterNames = propertyNames.filter(propertyName =>\n    typeof Object.getOwnPropertyDescriptor(\n        classFn.prototype, propertyName).set === 'function');\n  const attributes = setterNames.map(setterName =>\n      propertyNameToAttribute(setterName));\n\n  // Merge.\n  const diff = attributes.filter(attribute =>\n      baseAttributes.indexOf(attribute) < 0);\n  return baseAttributes.concat(diff);\n}\n\n// Convert a camel case fooBar property name to a hyphenated foo-bar attribute.\nfunction propertyNameToAttribute(propertyName) {\n  let attribute = propertyNamesToAttributes[propertyName];\n  if (!attribute) {\n    // Convert and memoize.\n    const uppercaseRegEx = /([A-Z])/g;\n    attribute = propertyName.replace(uppercaseRegEx, '-$1').toLowerCase();\n  }\n  return attribute;\n}\n","/* Exported function extends a base class with Composable. */\nexport default (base) => {\n\n  /**\n   * Mixin to make a class more easily composable with other mixins.\n   *\n   * This mixin contributes a `compose` method that applies a set of mixin\n   * functions and returns the resulting new class. This sugar can make the\n   * application of many mixins at once easier to read.\n   */\n  class Composable extends base {\n\n    /**\n     * Apply a set of mixin functions or mixin objects to the present class and\n     * return the new class.\n     *\n     * Instead of writing:\n     *\n     *     let MyClass = Mixin1(Mixin2(Mixin3(Mixin4(Mixin5(BaseClass)))));\n     *\n     * You can write:\n     *\n     *     let MyClass = ComposableMixin(BaseClass).compose(\n     *       Mixin1,\n     *       Mixin2,\n     *       Mixin3,\n     *       Mixin4,\n     *       Mixin5\n     *     );\n     *\n     * This function can also take mixin objects. A mixin object is just a\n     * shorthand for a mixin function that creates a new subclass with the given\n     * members. The mixin object's members are *not* copied directly onto the\n     * prototype of the base class, as with traditional mixins.\n     *\n     * In addition to providing syntactic sugar, this mixin can be used to\n     * define a class in ES5, which lacks ES6's `class` keyword.\n     *\n     * @param {...mixins} mixins - A set of mixin functions or objects to apply.\n     */\n    static compose(...mixins) {\n      // We create a new subclass for each mixin in turn. The result becomes\n      // the base class extended by any subsequent mixins. It turns out that\n      // we can use Array.reduce() to concisely express this, using the current\n      // object as the seed for reduce().\n      return mixins.reduce(composeClass, this);\n    }\n\n  }\n\n  return Composable;\n};\n\n\n// Properties defined by Object that we don't want to mixin.\nconst NON_MIXABLE_OBJECT_PROPERTIES = [\n  'constructor'\n];\n\n/*\n * Apply the mixin to the given base class to return a new class.\n * The mixin can either be a function that returns the modified class, or a\n * plain object whose members will be copied to the new class' prototype.\n */\nfunction composeClass(base, mixin) {\n  if (typeof mixin === 'function') {\n    // Mixin function\n    return mixin(base);\n  } else {\n    // Mixin object\n    class Subclass extends base {}\n    copyOwnProperties(mixin, Subclass.prototype, NON_MIXABLE_OBJECT_PROPERTIES);\n    return Subclass;\n  }\n}\n\n\n/*\n * Copy the given properties/methods to the target.\n * Return the updated target.\n */\nfunction copyOwnProperties(source, target, ignorePropertyNames = []) {\n  Object.getOwnPropertyNames(source).forEach(name => {\n    if (ignorePropertyNames.indexOf(name) < 0) {\n      const descriptor = Object.getOwnPropertyDescriptor(source, name);\n      Object.defineProperty(target, name, descriptor);\n    }\n  });\n  return target;\n}\n","import createSymbol from './createSymbol';\nimport toggleClass from './toggleClass';\nimport symbols from './symbols';\n\n\n// Symbols for private data members on an element.\nconst itemsSymbol = createSymbol('items');\nconst itemInitializedSymbol = createSymbol('itemInitialized');\n\n\n/* Exported function extends a base class with ContentItems. */\nexport default (base) => {\n\n  /**\n   * Mixin which maps content semantics (elements) to list item semantics.\n   *\n   * Items differ from element contents in several ways:\n   *\n   * * They are often referenced via index.\n   * * They may have a selection state.\n   * * It's common to do work to initialize the appearance or state of a new\n   *   item.\n   * * Auxiliary invisible child elements are filtered out and not counted as\n   *   items. Auxiliary elements include link, script, style, and template\n   *   elements. This filtering ensures that those auxiliary elements can be\n   *   used in markup inside of a list without being treated as list items.\n   *\n   * This mixin expects a component to provide a `content` property returning a\n   * raw set of elements. You can provide that yourself, or use\n   * [DistributedChildrenContentMixin](DistributedChildrenContentMixin.md).\n   *\n   * The most commonly referenced property defined by this mixin is the `items`\n   * property. To avoid having to do work each time that property is requested,\n   * this mixin supports an optimized mode. If you invoke the `contentChanged`\n   * method when the set of items changes, the mixin concludes that you'll take\n   * care of notifying it of future changes, and turns on the optimization. With\n   * that on, the mixin saves a reference to the computed set of items, and will\n   * return that immediately on subsequent calls to the `items` property. If you\n   * use this mixin in conjunction with\n   * [DistributedChildrenContentMixin](DistributedChildrenContentMixin.md), the\n   * `contentChanged` method will be invoked for you when the element's children\n   * change, turning on the optimization automatically.\n   */\n  class ContentItems extends base {\n\n    contentChanged() {\n      if (super.contentChanged) { super.contentChanged(); }\n\n      // Since we got the contentChanged call, we'll assume we'll be notified if\n      // the set of items changes later. We turn on memoization of the items\n      // property by setting our internal property to null (instead of\n      // undefined).\n      this[itemsSymbol] = null;\n\n      this[symbols.itemsChanged]();\n    }\n\n    /**\n     * This method is invoked whenever a new item is added to the list.\n     *\n     * The default implementation of this method does nothing. You can override\n     * this to perform per-item initialization.\n     *\n     * @param {HTMLElement} item - The item that was added.\n     */\n    [symbols.itemAdded](item) {\n      if (super[symbols.itemAdded]) { super[symbols.itemAdded](item); }\n    }\n\n    /**\n     * The selection state for a single item has changed.\n     *\n     * Invoke this method to signal that the selected state of the indicated item\n     * has changed. By default, this applies a `selected` CSS class if the item\n     * is selected, and removed it if not selected.\n     *\n     * @param {HTMLElement} item - The item whose selection state has changed.\n     * @param {boolean} selected - True if the item is selected, false if not.\n     */\n    [symbols.itemSelected](item, selected) {\n      if (super[symbols.itemSelected]) { super[symbols.itemSelected](item, selected); }\n      toggleClass(item, 'selected', selected);\n    }\n\n    /**\n     * The current set of items in the list. See the top-level documentation for\n     * mixin for a description of how items differ from plain content.\n     *\n     * @type {HTMLElement[]}\n     */\n    get items() {\n      let items;\n      if (this[itemsSymbol] == null) {\n        items = filterAuxiliaryElements(this.content);\n        // Note: test for *equality* with null; don't treat undefined as a match.\n        if (this[itemsSymbol] === null) {\n          // Memoize the set of items.\n          this[itemsSymbol] = items;\n        }\n      } else {\n        // Return the memoized items.\n        items = this[itemsSymbol];\n      }\n      return items;\n    }\n\n    /**\n     * This method is invoked when the underlying contents change. It is also\n     * invoked on component initialization – since the items have \"changed\" from\n     * being nothing.\n     */\n    [symbols.itemsChanged]() {\n      if (super[symbols.itemsChanged]) { super[symbols.itemsChanged](); }\n\n      // Perform per-item initialization.\n      Array.prototype.forEach.call(this.items, item => {\n        if (!item[itemInitializedSymbol]) {\n          this[symbols.itemAdded](item);\n          item[itemInitializedSymbol] = true;\n        }\n      });\n\n      this.dispatchEvent(new CustomEvent('items-changed'));\n    }\n\n    /**\n     * Fires when the items in the list change.\n     *\n     * @memberof ContentItems\n     * @event items-changed\n     */\n  }\n\n  return ContentItems;\n};\n\n\n// Return the given elements, filtering out auxiliary elements that aren't\n// typically visible. Items which are not elements are returned as is.\nfunction filterAuxiliaryElements(items) {\n  const auxiliaryTags = [\n    'link',\n    'script',\n    'style',\n    'template'\n  ];\n  return [].filter.call(items, function(item) {\n    return !item.localName || auxiliaryTags.indexOf(item.localName) < 0;\n  });\n}\n","import symbols from './symbols';\n\n\n/* Exported function extends a base class with DirectionSelection. */\nexport default (base) => {\n\n  /**\n   * Mixin which maps direction semantics (goLeft, goRight, etc.) to selection\n   * semantics (selectPrevious, selectNext, etc.).\n   *\n   * This mixin can be used in conjunction with\n   * [KeyboardDirectionMixin](KeyboardDirectionMixin.md) (which maps keyboard\n   * events to directions) and a mixin that handles selection like\n   * [SingleSelectionMixin](SingleSelectionMixin.md).\n   */\n  class DirectionSelection extends base {\n\n    [symbols.goDown]() {\n      if (super[symbols.goDown]) { super[symbols.goDown](); }\n      return this.selectNext();\n    }\n\n    [symbols.goEnd]() {\n      if (super[symbols.goEnd]) { super[symbols.goEnd](); }\n      return this.selectLast();\n    }\n\n    [symbols.goLeft]() {\n      if (super[symbols.goLeft]) { super[symbols.goLeft](); }\n      return this.selectPrevious();\n    }\n\n    [symbols.goRight]() {\n      if (super[symbols.goRight]) { super[symbols.goRight](); }\n      return this.selectNext();\n    }\n\n    [symbols.goStart]() {\n      if (super[symbols.goStart]) { super[symbols.goStart](); }\n      return this.selectFirst();\n    }\n\n    [symbols.goUp]() {\n      if (super[symbols.goUp]) { super[symbols.goUp](); }\n      return this.selectPrevious();\n    }\n\n    // Default implementation. This will typically be handled by other mixins.\n    get selectedFraction() {\n      return super.selectedFraction;\n    }\n    set selectedFraction(value) {\n      if ('selectedFraction' in base.prototype) { super.selectedFraction = value; }\n    }\n\n    // Default implementation. This will typically be handled by other mixins.\n    selectFirst() {\n      if (super.selectFirst) { return super.selectFirst(); }\n    }\n\n    // Default implementation. This will typically be handled by other mixins.\n    selectLast() {\n      if (super.selectLast) { return super.selectLast(); }\n    }\n\n    // Default implementation. This will typically be handled by other mixins.\n    selectNext() {\n      if (super.selectNext) { return super.selectNext(); }\n    }\n\n    // Default implementation. This will typically be handled by other mixins.\n    selectPrevious() {\n      if (super.selectPrevious) { return super.selectPrevious(); }\n    }\n\n    // Map drag travel fraction to selection fraction.\n    get travelFraction() {\n      return super.travelFraction;\n    }\n    set travelFraction(value) {\n      if ('travelFraction' in base.prototype) { super.travelFraction = value; }\n      this.selectedFraction = value;\n    }\n\n  }\n\n  return DirectionSelection;\n};\n","import microtask from './microtask';\n\n\n/* Exported function extends a base class with DistributedChildrenContent. */\nexport default (base) => {\n\n  /**\n   * Mixin which defines a component's content as its children, expanding any\n   * nodes distributed to the component's slots.\n   *\n   * This also provides notification of changes to a component's content. It\n   * will invoke a `contentChanged` method when the component is first\n   * instantiated, and whenever its distributed children change. This is an\n   * easy way to satisfy the Gold Standard checklist item for monitoring\n   * [Content Changes](https://github.com/webcomponents/gold-standard/wiki/Content-Changes).\n   *\n   * Example:\n   *\n   * ```\n   * let base = DistributedChildrenContentMixin(DistributedChildrenMixin(HTMLElement));\n   * class CountingElement extends base {\n   *\n   *   constructor() {\n   *     super();\n   *     let root = this.attachShadow({ mode: 'open' });\n   *     root.innerHTML = `<slot></slot>`;\n   *   }\n   *\n   *   contentChanged() {\n   *     // Count the component's children, both initially and when changed.\n   *     this.count = this.distributedChildren.length;\n   *   }\n   *\n   * }\n   * ```\n   *\n   * Note that content change detection depends upon the element having at least\n   * one `slot` element in its shadow subtree.\n   *\n   * This mixin is intended for use with the\n   * [DistributedChildrenMixin](DistributedChildrenMixin.md). See that mixin for\n   * a discussion of how that works. This DistributedChildrenContentMixin\n   * provides an easy way of defining the \"content\" of a component as the\n   * component's distributed children. That in turn lets mixins like\n   * [ContentItemsMixin](ContentItemsMixin.md) manipulate the children as list\n   * items.\n   */\n  class DistributedChildrenContent extends base {\n\n    constructor() {\n      super();\n\n      if (this.shadowRoot) {\n        // Listen to changes on all slots.\n        const slots = this.shadowRoot.querySelectorAll('slot');\n        slots.forEach(slot => slot.addEventListener('slotchange', event => {\n          this.contentChanged();\n        }));\n      }\n\n      // Make an initial call to contentChanged() so that the component can do\n      // initialization that it normally does when content changes.\n      //\n      // This will invoke contentChanged() handlers in other mixins. In order\n      // that those mixins have a chance to complete their own initialization,\n      // we add the contentChanged() call to the microtask queue.\n      microtask(() => this.contentChanged());\n    }\n\n    /**\n     * Invoked when the contents of the component (including distributed\n     * children) have changed.\n     *\n     * This method is also invoked when a component is first instantiated; the\n     * contents have essentially \"changed\" from being nothing. This allows the\n     * component to perform initial processing of its children.\n     */\n    contentChanged() {\n      if (super.contentChanged) { super.contentChanged(); }\n      const event = new CustomEvent('content-changed');\n      this.dispatchEvent(event);\n    }\n\n    /**\n     * The content of this component, defined to be the flattened array of\n     * children distributed to the component.\n     *\n     * @type {HTMLElement[]}\n     */\n    get content() {\n      const distributedChildren = this.distributedChildren;\n      if (typeof distributedChildren === 'undefined') {\n        console.warn(`DistributedChildrenContentMixin expects the component to define a \"distributedChildren\" property.`);\n      }\n      return distributedChildren;\n    }\n    set content(value) {\n      if ('content' in base.prototype) { super.content = value; }\n      // TODO: Set the children to the given value (which should be an array of\n      // elements)?\n    }\n\n    /**\n     * This event is raised when the component's contents (including distributed\n     * children) have changed.\n     *\n     * @memberof DistributedChildrenContent\n     * @event content-changed\n     */\n  }\n\n  return DistributedChildrenContent;\n};\n","/* Exported function extends a base class with DistributedChildren. */\nexport default (base) => {\n\n  /**\n   * Mixin which defines helpers for accessing a component's distributed\n   * children as a flattened array or string.\n   *\n   * The standard DOM API provides several ways of accessing child content:\n   * `children`, `childNodes`, and `textContent`. None of these functions are\n   * Shadow DOM aware. This mixin defines variations of those functions that\n   * *are* Shadow DOM aware.\n   *\n   * Example: you create a component `<count-children>` that displays a number\n   * equal to the number of children placed inside that component. If someone\n   * instantiates your component like:\n   *\n   *     <count-children>\n   *       <div></div>\n   *       <div></div>\n   *       <div></div>\n   *     </count-children>\n   *\n   * Then the component should show \"3\", because there are three children. To\n   * calculate the number of children, the component can just calculate\n   * `this.children.length`. However, suppose someone instantiates your\n   * component inside one of their own components, and puts a `<slot>` element\n   * inside your component:\n   *\n   *     <count-children>\n   *       <slot></slot>\n   *     </count-children>\n   *\n   * If your component only looks at `this.children`, it will always see exactly\n   * one child — the `<slot>` element. But the user looking at the page will\n   * *see* any nodes distributed to that slot. To match what the user sees, your\n   * component should expand any `<slot>` elements it contains.\n   *\n   * That is the problem this mixin solves. After applying this mixin, your\n   * component code has access to `this.distributedChildren`, whose `length`\n   * will return the total number of all children distributed to your component\n   * in the composed tree.\n   *\n   * Note: The latest Custom Elements API design calls for a new function,\n   * `getAssignedNodes` that takes an optional `deep` parameter, that will solve\n   * this problem at the API level.\n   */\n  class DistributedChildren extends base {\n\n    /**\n     * An in-order collection of distributed children, expanding any slot\n     * elements. Like the standard children property, this skips text nodes.\n     *\n     * @type {HTMLElement[]}\n     */\n    get distributedChildren() {\n      return expandContentElements(this.children, false);\n    }\n\n    /**\n     * An in-order collection of distributed child nodes, expanding any slot\n     * elements. Like the standard childNodes property, this includes text\n     * nodes.\n     *\n     * @type {Node[]}\n     */\n    get distributedChildNodes() {\n      return expandContentElements(this.childNodes, true);\n    }\n\n    /**\n     * The concatenated text content of all distributed child nodes, expanding\n     * any slot elements.\n     *\n     * @type {string}\n     */\n    get distributedTextContent() {\n      const strings = this.distributedChildNodes.map(function(child) {\n        return child.textContent;\n      });\n      return strings.join('');\n    }\n\n  }\n\n  return DistributedChildren;\n};\n\n\n/*\n * Given a array of nodes, return a new array with any content elements expanded\n * to the nodes distributed to that content element. This rule is applied\n * recursively.\n *\n * If includeTextNodes is true, text nodes will be included, as in the\n * standard childNodes property; by default, this skips text nodes, like the\n * standard children property.\n */\nfunction expandContentElements(nodes, includeTextNodes) {\n  const expanded = Array.prototype.map.call(nodes, node => {\n    // We want to see if the node is an instanceof HTMLSlotELement, but\n    // that class won't exist if the browser that doesn't support native\n    // Shadow DOM and if the Shadow DOM polyfill hasn't been loaded. Instead,\n    // we do a simplistic check to see if the tag name is \"slot\".\n    const isSlot = typeof HTMLSlotElement !== 'undefined' ?\n      node instanceof HTMLSlotElement :\n      node.localName === 'slot';\n    if (isSlot) {\n      // Use the nodes assigned to this node instead.\n      const assignedNodes = node.assignedNodes({ flatten: true });\n      return assignedNodes ?\n        expandContentElements(assignedNodes, includeTextNodes) :\n        [];\n    } else if (node instanceof HTMLElement) {\n      // Plain element; use as is.\n      return [node];\n    } else if (node instanceof Text && includeTextNodes) {\n      // Text node.\n      return [node];\n    } else {\n      // Comment, processing instruction, etc.; skip.\n      return [];\n    }\n  });\n  const flattened = [].concat(...expanded);\n  return flattened;\n}\n","import createSymbol from './createSymbol';\n\n\n// Symbols for private data members on an element.\nconst selectedFractionSymbol = createSymbol('selectedFraction');\n\n\n/* Exported function extends a base class with FractionalSelection. */\nexport default function mixin(base) {\n\n  /**\n   * Adds support for fractional selection: treating a selection as a real\n   * number that combines an integer portion (an index into a list), and a\n   * fraction (indicating how far of the way we are to the next or previous\n   * item).\n   *\n   * This is useful in components that support incremental operations during\n   * dragging and swiping. Example: a carousel component has several items, and the\n   * currently selected item is item 3. The user begins swiping to the left,\n   * moving towards selecting item 4. Halfway through this operation, the\n   * fractional selection value is 3.5.\n   *\n   * This value permits communication between mixins like\n   * [SwipeDirectionMixin](./SwipeDirectionMixin.md) and\n   * [TrackpadDirectionMixin](./TrackpadDirectionMixin.md), which generate\n   * fractional selection values, and mixins like\n   * [SelectionAnimationMixin](./SelectionAnimationMixin.md), which can render\n   * selection at a fractional value.\n   */\n  class FractionalSelection extends base {\n\n    connectedCallback() {\n      if (super.connectedCallback) { super.connectedCallback(); }\n      this.selectedFraction = 0;\n    }\n\n    /**\n     * A fractional value indicating how far the user has currently advanced to\n     * the next/previous item. E.g., a `selectedFraction` of 3.5 indicates the\n     * user is halfway between items 3 and 4.\n     *\n     * @type {number}\n     */\n    get selectedFraction() {\n      return this[selectedFractionSymbol];\n    }\n    set selectedFraction(value) {\n      this[selectedFractionSymbol] = value;\n      if ('selectedFraction' in base.prototype) { super.selectedFraction = value; }\n      const event = new CustomEvent('selected-fraction-changed');\n      this.dispatchEvent(event);\n    }\n\n  }\n\n  return FractionalSelection;\n}\n\n\nmixin.helpers = {\n\n  /*\n   * Dampen a selection that goes past the beginning or end of a list. This is\n   * generally used to produce a visual effect of tension as the user tries to\n   * go further in a direction that has no more items.\n   *\n   * Example: suppose `itemCount` is 5, indicating a list of 5 items. The index of\n   * the last item is 4. If the `selection` parameter is 4.5, the user is trying\n   * to go past this last item. When a damping function is applied, the resulting\n   * value will be less than 4.5 (the actual value will be 4.25). When this\n   * selection state is rendered, the user will see that, each unit distance the\n   * drag travels has less and less visible effect. This is perceived as tension.\n   *\n   * @param {number} selection - A real number indicating a selection position\n   * @param {number} itemCount - An integer for the number of items in the list\n   * @returns {number} A real number representing the damped selection value.\n   */\n  dampedSelection(selection, itemCount) {\n    const bound = itemCount - 1;\n    let damped;\n    if (selection < 0) {\n      // Trying to go past beginning of list. Apply tension from the left edge.\n      damped = -mixin.helpers.damping(-selection);\n    } else if (selection >= bound) {\n      // Trying to go past end of list. Apply tension from the right edge.\n      damped = bound + mixin.helpers.damping(selection - bound);\n    } else {\n      // No damping required.\n      damped = selection;\n    }\n    return damped;\n  },\n\n  /*\n   * Calculate damping as a function of the distance past the minimum/maximum\n   * values.\n   *\n   * We want to asymptotically approach an absolute minimum of 1 unit\n   * below/above the actual minimum/maximum. This requires calculating a\n   * hyperbolic function.\n   *\n   * See http://www.wolframalpha.com/input/?i=y+%3D+-1%2F%28x%2B1%29+%2B+1\n   * for the one we use. The only portion of that function we care about is when\n   * x is zero or greater. An important consideration is that the curve be\n   * tangent to the diagonal line x=y at (0, 0). This ensures smooth continuity\n   * with the normal drag behavior, in which the visible sliding is linear with\n   * the distance the touchpoint has been dragged.\n   */\n  damping(x) {\n    const y = (-1 / (x + 1)) + 1;\n    return y;\n  },\n\n  /*\n   * Return the current fractional selection value for the given element.\n   *\n   * This simply adds the element's `selectedIndex` and `selectedFraction`\n   * properties.\n   *\n   * @param {HTMLElement} element - An element that supports selection\n   */\n  elementSelection(element) {\n    const selectedIndex = element.selectedIndex;\n    if (selectedIndex < 0) {\n      // No selection\n      return;\n    }\n    const selectedFraction = element.selectedFraction || 0;\n    return selectedIndex + selectedFraction;\n  },\n\n  /*\n   * Breaks a fractional selection into its integer and fractional parts.\n   *\n   * Example: if passed 3.5, this returns { index: 3, fraction: 5 }.\n   *\n   * @param {number} selection – A real number representing a selection point\n   * @returns {object} - An object with an `index` property holding the\n   * selection's integer component, and a `fraction` property holding the\n   * selection's fractional component.\n   */\n  selectionParts(selection) {\n    // Stupid IE doesn't have Math.trunc.\n    // const index = Math.trunc(selection);\n    const index = selection < 0 ? Math.ceil(selection) : Math.floor(selection);\n    const fraction = selection - index;\n    return { index, fraction };\n  },\n\n  /*\n   * Returns a fractional selection point after accounting for wrapping, ensuring\n   * that the integer portion of the selection stays between 0 and `itemCount`-1.\n   * That is, the integer portion will always be a valid index into the list.\n   *\n   * Example of wrapping past the end of the list: if `selection` is 5.5 and\n   * `itemCount` is 5, this returns 0.5. Example of wrapping past the beginning of\n   * the list: if `selection` is 0.5 and `itemCount` is 5, this returns 4.5.\n   *\n   * @param {number} selection - A real number representing a selection point\n   * @param {number} itemCount - The number of items in the list\n   * @returns {number} - The result of wrapping the selection point\n   */\n  wrappedSelection(selection, itemCount) {\n    // Handles possibility of negative mod.\n    // See http://stackoverflow.com/a/18618250/76472\n    return ((selection % itemCount) + itemCount) % itemCount;\n  },\n\n  /*\n   * Return the parts of a selection, first wrapping if necessary.\n   *\n   * @param {number} selection – A real number representing a selection point\n   * @param {number} itemCount - The number of items in the list\n   * @param {boolean} wrap – True if the selection should wrap to stay within the\n   * list\n   * @returns {object} – The parts of the selection, using the same format as\n   * `selectionParts`.\n   */\n  wrappedSelectionParts(selection, itemCount, wrap) {\n    if (wrap) {\n      selection = mixin.helpers.wrappedSelection(selection, itemCount);\n    }\n    return mixin.helpers.selectionParts(selection);\n  }\n\n};\n","import createSymbol from './createSymbol';\nimport symbols from './symbols';\n\n\n// Symbols for private data members on an element.\nconst navigationAxisSymbol = createSymbol('navigationAxis');\n\n\n/* Exported function extends a base class with KeyboardDirection. */\nexport default (base) => {\n\n  /**\n   * Mixin which maps direction keys (Left, Right, etc.) to direction semantics\n   * (go left, go right, etc.).\n   *\n   * This mixin expects the component to invoke a `keydown` method when a key is\n   * pressed. You can use [KeyboardMixin](KeyboardMixin.md) for that\n   * purpose, or wire up your own keyboard handling and call `keydown` yourself.\n   *\n   * This mixin calls methods such as `goLeft` and `goRight`. You can define\n   * what that means by implementing those methods yourself. If you want to use\n   * direction keys to navigate a selection, use this mixin with\n   * [DirectionSelectionMixin](DirectionSelectionMixin.md).\n   */\n  class KeyboardDirection extends base {\n\n    constructor() {\n      super();\n      // Set defaults.\n      if (typeof this.navigationAxis === 'undefined') {\n        this.navigationAxis = this[symbols.defaults].navigationAxis;\n      }\n    }\n\n    get [symbols.defaults]() {\n      const defaults = super[symbols.defaults] || {};\n      defaults.navigationAxis = 'both';\n      return defaults;\n    }\n\n    /**\n     * Invoked when the user wants to go/navigate down.\n     * The default implementation of this method does nothing.\n     */\n    [symbols.goDown]() {\n      if (super[symbols.goDown]) { return super[symbols.goDown](); }\n    }\n\n    /**\n     * Invoked when the user wants to go/navigate to the end (e.g., of a list).\n     * The default implementation of this method does nothing.\n     */\n    [symbols.goEnd]() {\n      if (super[symbols.goEnd]) { return super[symbols.goEnd](); }\n    }\n\n    /**\n     * Invoked when the user wants to go/navigate left.\n     * The default implementation of this method does nothing.\n     */\n    [symbols.goLeft]() {\n      if (super[symbols.goLeft]) { return super[symbols.goLeft](); }\n    }\n\n    /**\n     * Invoked when the user wants to go/navigate right.\n     * The default implementation of this method does nothing.\n     */\n    [symbols.goRight]() {\n      if (super[symbols.goRight]) { return super[symbols.goRight](); }\n    }\n\n    /**\n     * Invoked when the user wants to go/navigate to the start (e.g., of a\n     * list). The default implementation of this method does nothing.\n     */\n    [symbols.goStart]() {\n      if (super[symbols.goStart]) { return super[symbols.goStart](); }\n    }\n\n    /**\n     * Invoked when the user wants to go/navigate up.\n     * The default implementation of this method does nothing.\n     */\n    [symbols.goUp]() {\n      if (super[symbols.goUp]) { return super[symbols.goUp](); }\n    }\n\n    /**\n     * Indicates the direction of permitted navigation with the keyboard.\n     *\n     * Accepted values are \"horizontal\", \"vertical\", or \"both\" (the default).\n     * If this property is \"horizontal\", the Up Arrow and Down Arrow keys will\n     * be ignored. Conversely, if this is \"vertical\", the Left Arrow and Right\n     * Arrow keys will be ignored.\n     *\n     * @type {string}\n     */\n    get navigationAxis() {\n      return this[navigationAxisSymbol];\n    }\n    set navigationAxis(value) {\n      this[navigationAxisSymbol] = value;\n      if ('navigationAxis' in base.prototype) { super.navigationAxis = value; }\n    }\n\n    [symbols.keydown](event) {\n      let handled;\n\n      const axis = this.navigationAxis;\n      const horizontal = (axis === 'horizontal' || axis === 'both');\n      const vertical = (axis === 'vertical' || axis === 'both');\n\n      // Ignore Left/Right keys when metaKey or altKey modifier is also pressed,\n      // as the user may be trying to navigate back or forward in the browser.\n      switch (event.keyCode) {\n        case 35: // End\n          handled = this[symbols.goEnd]();\n          break;\n        case 36: // Home\n          handled = this[symbols.goStart]();\n          break;\n        case 37: // Left\n          if (horizontal && !event.metaKey && !event.altKey) {\n            handled = this[symbols.goLeft]();\n          }\n          break;\n        case 38: // Up\n          if (vertical) {\n            handled = event.altKey ? this[symbols.goStart]() : this[symbols.goUp]();\n          }\n          break;\n        case 39: // Right\n          if (horizontal && !event.metaKey && !event.altKey) {\n            handled = this[symbols.goRight]();\n          }\n          break;\n        case 40: // Down\n          if (vertical) {\n            handled = event.altKey ? this[symbols.goEnd]() : this[symbols.goDown]();\n          }\n          break;\n      }\n      // Prefer mixin result if it's defined, otherwise use base result.\n      return handled || (super[symbols.keydown] && super[symbols.keydown](event));\n    }\n\n  }\n\n  return KeyboardDirection;\n};\n","import symbols from './symbols';\n\n\n/* Exported function extends a base class with Keyboard. */\nexport default (base) => {\n\n  /**\n   * Mixin which manages the keydown handling for a component.\n   *\n   * This mixin handles several keyboard-related features.\n   *\n   * First, it wires up a single keydown event handler that can be shared by\n   * multiple mixins on a component. The event handler will invoke a `keydown`\n   * method with the event object, and any mixin along the prototype chain that\n   * wants to handle that method can do so.\n   *\n   * If a mixin wants to indicate that keyboard event has been handled, and that\n   * other mixins should *not* handle it, the mixin's `keydown` handler should\n   * return a value of true. The convention that seems to work well is that a\n   * mixin should see if it wants to handle the event and, if not, then ask the\n   * superclass to see if it wants to handle the event. This has the effect of\n   * giving the mixin that was applied last the first chance at handling a\n   * keyboard event.\n   *\n   * Example:\n   *\n   *     [symbols.keydown](event) {\n   *       let handled;\n   *       switch (event.keyCode) {\n   *         // Handle the keys you want, setting handled = true if appropriate.\n   *       }\n   *       // Prefer mixin result if it's defined, otherwise use base result.\n   *       return handled || (super[symbols.keydown] && super[symbols.keydown](event));\n   *     }\n   *\n   * A second feature provided by this mixin is that it implicitly makes the\n   * component a tab stop if it isn't already, by setting `tabIndex` to 0. This\n   * has the effect of adding the component to the tab order in document order.\n   */\n  class Keyboard extends base {\n\n    constructor() {\n      super();\n      this.addEventListener('keydown', event => {\n        const handled = this[symbols.keydown](event);\n        if (handled) {\n          event.preventDefault();\n          event.stopPropagation();\n        }\n      });\n    }\n\n    connectedCallback() {\n      if (super.connectedCallback) { super.connectedCallback(); }\n      if (this.getAttribute('tabindex') == null && this[symbols.defaults].tabindex !== null) {\n        this.setAttribute('tabindex', this[symbols.defaults].tabindex);\n      }\n    }\n\n    get [symbols.defaults]() {\n      const defaults = super[symbols.defaults] || {};\n      // The default tab index is 0 (document order).\n      defaults.tabindex = 0;\n      return defaults;\n    }\n\n    /**\n     * Handle the indicated keyboard event.\n     *\n     * The default implementation of this method does nothing. This will\n     * typically be handled by other mixins.\n     *\n     * @param {KeyboardEvent} event - the keyboard event\n     * @return {boolean} true if the event was handled\n     */\n    [symbols.keydown](event) {\n      if (super[symbols.keydown]) { return super[symbols.keydown](event); }\n    }\n\n  }\n\n  return Keyboard;\n};\n","import renderArrayAsElements from '../../basic-component-mixins/src/renderArrayAsElements';\nimport symbols from '../../basic-component-mixins/src/symbols';\nimport toggleClass from '../../basic-component-mixins/src/toggleClass';\n\n\n/* Exported function extends a base class with PageDots. */\nexport default (base) => {\n\n  /**\n   * Template mixin which adds small dots to show the number of items and let\n   * the user select a specific item.\n   *\n   * You can see a\n   * [live demo](http://basicwebcomponents.org/basic-web-components/packages/demos/carousel-with-dots.html)\n   * of this mixin applied to a carousel.\n   *\n   * There will be one dot for each item, and the dot for the currently selected\n   * item will be shown selected.\n   *\n   * Typical usage:\n   *\n   *     class CarouselWithDots extends PageDotsMixin(Carousel) {}\n   *     customElements.define('carousel-with-dots', CarouselWithDots);\n   *\n   * Although the dots are quite small by default, clicking/tapping a dot will\n   * will select the corresponding list item.\n   */\n  class PageDots extends base {\n\n    constructor() {\n      super();\n\n      this.$.dots.addEventListener('click', event => {\n        const dot = event.target;\n        const dotIndex = this.dots.indexOf(dot);\n        if (dotIndex >= 0) {\n          this.selectedIndex = dotIndex;\n        }\n      });\n    }\n\n    get dots() {\n      return [].slice.call(this.$.dots.querySelectorAll('.dot'));\n    }\n\n    [symbols.itemsChanged]() {\n      if (super[symbols.itemsChanged]) { super[symbols.itemsChanged](); }\n      renderArrayAsElements(this.items, this.$.dots, (item, element) => {\n        // We don't use the item parameter, because any item will produce an\n        // identical corresponding dot.\n        if (!element) {\n          element = document.createElement('div');\n          element.classList.add('dot');\n          element.classList.add('style-scope');\n          element.classList.add('basic-page-dots');\n          element.setAttribute('role', 'none');\n          return element;\n        }\n      });\n      refreshDots(this);\n    }\n\n    [symbols.itemSelected](item, selected) {\n      if (super[symbols.itemSelected]) { super[symbols.itemSelected](item, selected); }\n      const index = this.items.indexOf(item);\n      // See if the corresponding dot has already been created.\n      // If not, the correct dot will be selected when it gets created.\n      const dots = this.dots;\n      if (dots && dots.length > index) {\n        const dot = this.dots[index];\n        if (dot) {\n          toggleClass(dot, 'selected', selected);\n        }\n      }\n    }\n\n    /**\n     * The distance the user has moved the first touchpoint since the beginning\n     * of a drag, expressed as a fraction of the element's width.\n     *\n     * @type number\n     */\n    get selectedFraction() {\n      return super.selectedFraction;\n    }\n    set selectedFraction(value) {\n      if ('selectedFraction' in base.prototype) { super.selectedFraction = value; }\n      renderTransition(this, this.selectedIndex, value);\n    }\n\n    get selectedIndex() {\n      return super.selectedIndex;\n    }\n    set selectedIndex(index) {\n      if ('selectedIndex' in base.prototype) { super.selectedIndex = index; }\n      refreshDots(this);\n    }\n\n    get [symbols.template]() {\n      const baseTemplate = super[symbols.template] || '';\n      return `\n        <style>\n        :host {\n          display: -webkit-flex;\n          display: flex;\n          position: relative;\n        }\n\n        #dots {\n          bottom: 0;\n          display: -webkit-flex;\n          display: flex;\n          -webkit-justify-content: center;\n          justify-content: center;\n          position: absolute;\n          width: 100%;\n          z-index: 1;\n        }\n\n        #dotNavigationContainer {\n          display: -webkit-flex;\n          display: flex;\n          -webkit-flex: 1;\n          flex: 1;\n          position: relative;\n          z-index: 0;\n        }\n\n        #container ::slotted(*) {\n          -webkit-flex: 1;\n          flex: 1;\n        }\n\n        .dot {\n          background: rgb(255, 255, 255);\n          border-radius: 7px;\n          box-shadow: 0 0 1px 1px rgba(0, 0, 0, 0.5);\n          box-sizing: border-box;\n          cursor: pointer;\n          height: 8px;\n          margin: 7px 5px;\n          opacity: 0.4;\n          padding: 0;\n          transition: background 0.2s box-shadow 0.2s;\n          width: 8px;\n        }\n\n        .dot:hover {\n          background: rgba(0, 0, 0, 0.75);\n          box-shadow: 0 0 1px 3px rgba(255, 255, 255, 0.5);\n        }\n\n        .dot.selected {\n          opacity: 0.95;\n        }\n\n        @media (min-width: 768px) {\n          .dot {\n            height: 12px;\n            width: 12px;\n          }\n        }\n        </style>\n\n        <div id=\"dots\" role=\"none\"></div>\n        <div id=\"dotNavigationContainer\" role=\"none\">\n          ${baseTemplate}\n        </div>\n      `;\n    }\n\n  }\n\n  return PageDots;\n};\n\n\n// Return the index, ensuring it stays between 0 and the given length.\nfunction keepIndexWithinBounds(length, index) {\n  // Handle possibility of negative mod.\n  // See http://stackoverflow.com/a/18618250/76472\n  return ((index % length) + length) % length;\n}\n\nfunction renderTransition(element, selectedIndex, selectedFraction) {\n  const dots = element.dots;\n  if (!dots || dots.length === 0) {\n    return;\n  }\n  const dotCount = dots.length;\n  const opacityMinimum = 0.4;\n  const opacityMaximum = 0.95;\n  const opacityRange = opacityMaximum - opacityMinimum;\n  const fractionalIndex = selectedIndex + selectedFraction;\n  const leftIndex = Math.floor(fractionalIndex);\n  const rightIndex = Math.ceil(fractionalIndex);\n  const selectionWraps = element.selectionWraps;\n  let awayIndex = selectedFraction >= 0 ? leftIndex : rightIndex;\n  let towardIndex = selectedFraction >= 0 ? rightIndex : leftIndex;\n  if (selectionWraps) {\n    awayIndex = keepIndexWithinBounds(dotCount, awayIndex);\n    towardIndex = keepIndexWithinBounds(dotCount, towardIndex);\n  }\n  // Stupid IE doesn't have Math.trunc.\n  // const truncatedSelectedFraction = Math.trunc(selectedFraction);\n  const truncatedSelectedFraction = selectedFraction < 0 ? Math.ceil(selectedFraction) : Math.floor(selectedFraction);\n  const progress = selectedFraction - truncatedSelectedFraction;\n  const opacityProgressThroughRange = Math.abs(progress) * opacityRange;\n  dots.forEach((dot, index) => {\n    let dotOpacity;\n    if (selectedFraction === 0) {\n      // Remove explicit opacity and rely on styling.\n      dotOpacity = '';\n    } else if (index === awayIndex) {\n      dotOpacity = opacityMaximum - opacityProgressThroughRange;\n    } else if (index === towardIndex) {\n      dotOpacity = opacityMinimum + opacityProgressThroughRange;\n    } else {\n      dotOpacity = opacityMinimum;\n    }\n    dot.style.opacity = dotOpacity;\n  });\n}\n\nfunction refreshDots(element) {\n  const selectedIndex = element.selectedIndex;\n  element.dots.forEach((dot, i) => {\n    toggleClass(dot, 'selected', i === selectedIndex);\n  });\n}\n","import createSymbol from './createSymbol';\nimport FractionalSelectionMixin from './FractionalSelectionMixin';\nimport symbols from './symbols';\n\n\n// Symbols for private data members on an element.\nconst animationSymbol = createSymbol('animation');\nconst draggingSymbol = createSymbol('dragging');\nconst lastAnimationSymbol = createSymbol('lastAnimation');\nconst playingAnimationSymbol = createSymbol('animatingSelection');\nconst previousSelectionSymbol = createSymbol('previousSelection');\nconst selectionAnimationDurationSymbol = createSymbol('selectionAnimationDuration');\nconst selectionAnimationEffectSymbol = createSymbol('selectionAnimationEffect');\nconst selectionAnimationKeyframesSymbol = createSymbol('selectionAnimationKeyframes');\nconst resetAnimationsOnNextRenderSymbol = createSymbol('resetAnimationsOnNextRender');\n\n\n/* Exported function extends a base class with SelectionAnimation. */\nexport default function mixin(base) {\n\n  /**\n   * Mixin which uses animation to show transitions between selection states.\n   *\n   * This mixin can be used by components that want to provide visible\n   * animations when changing the selection. For example, a carousel component\n   * may want to define a sliding animation effect shown when moving between\n   * items.\n   *\n   * The animation is defined by a `selectionAnimationKeyframes` property; see\n   * that property for details on how to define these keyframes. This animation\n   * will be used in two ways. First, when moving strictly between items, the\n   * animation will play smoothly to show the selection changing. Second, the\n   * animation can be used to render the selection at a fixed point in the\n   * transition between states. E.g., if the user pauses halfway through\n   * dragging an element using [SwipeDirectionMixin](SwipeDirectionMixin.md)\n   * or [TrackpadDirectionMixin](TrackpadDirectionMixin.md)s, then the selection\n   * animation will be shown at the point exactly halfway through.\n   *\n   * This mixin expects a component to provide an `items` array of all elements\n   * in the list, which can be provided via\n   * [ContentItemsMixin](ContentItemsMixin.md). This mixin also expects\n   * `selectedIndex` and `selectedItem` properties, which can be provided via\n   * [SingleSelectionMixin](SingleSelectionMixin.md).\n   *\n   * This mixin supports a `selectionWraps` property. When true, the user can\n   * navigate forward from the last item in the list and wrap around to the\n   * first item, or navigate backward from the first item and wrap around to the\n   * last item.\n   *\n   * This mixin uses the Web Animations API. For use on browsers which\n   * do not support that API natively, you will need to load the\n   * [Web Animations polyfill](https://github.com/web-animations/web-animations-js).\n   */\n  class SelectionAnimation extends base {\n\n    constructor() {\n      super();\n\n      // Set defaults.\n      if (typeof this.selectionAnimationDuration === 'undefined') {\n        this.selectionAnimationDuration = this[symbols.defaults].selectionAnimationDuration;\n      }\n      if (typeof this.selectionAnimationEffect === 'undefined' && this.selectionAnimationKeyframes == null) {\n        this.selectionAnimationEffect = this[symbols.defaults].selectionAnimationEffect;\n      }\n\n      this[symbols.dragging] = false;\n    }\n\n    get [symbols.defaults]() {\n      const defaults = super[symbols.defaults] || {};\n      defaults.selectionAnimationDuration = 250;\n      defaults.selectionAnimationEffect = 'slide';\n      return defaults;\n    }\n\n    /*\n     * Provide backing for the dragging property.\n     * Also, when a drag begins, reset the animations.\n     */\n    get [symbols.dragging]() {\n      return this[draggingSymbol];\n    }\n    set [symbols.dragging](value) {\n      const previousValue = this[symbols.dragging];\n      this[draggingSymbol] = value;\n      if (symbols.dragging in base.prototype) { super[symbols.dragging] = value; }\n      if (value && !previousValue) {\n        // Have begun a drag.\n        this[resetAnimationsOnNextRenderSymbol] = true;\n      }\n    }\n\n    [symbols.itemAdded](item) {\n      // We mark new items in the list as explicitly visible to ARIA. Otherwise,\n      // when an item isn't visible on the screen, ARIA will assume the item is\n      // of no interest to the user, and leave it out of the accessibility tree.\n      // If the list contains 10 items, but only 3 are visible, a screen reader\n      // might then announce the list only has 3 items. To ensure that screen\n      // readers and other assistive technologies announce the correct total\n      // number of items, we explicitly mark all items as not hidden. This will\n      // expose them all in the accessibility tree, even the items which are\n      // currently not rendered.\n      //\n      // TODO: Generally speaking, this entire mixin assumes that the user can\n      // navigate through all items in a list. But an app could style an item as\n      // display:none or visibility:hidden because the user is not allowed to\n      // interact with that item at the moment. Support for this scenario should\n      // be added. This would entail changing all locations where a mixin\n      // function is counting items, iterating over the (visible) items, and\n      // showing or hiding items. Among other things, the code below to make\n      // items visible to ARIA would need to discriminate between items which\n      // are invisible because of animation state, or invisible because the user\n      // shouldn't interact with them.\n      item.setAttribute('aria-hidden', false);\n    }\n\n    [symbols.itemsChanged]() {\n      if (super[symbols.itemsChanged]) { super[symbols.itemsChanged](); }\n\n      resetAnimations(this);\n\n      // TODO: Also reset our notion of the last rendered selection? This comes\n      // up when a DOM removal causes the selected item to change position.\n      // this[previousSelectionSymbol] = null;\n\n      renderSelection(this);\n    }\n\n    resetAnimations() {\n      resetAnimations(this);\n    }\n\n    /**\n     * A fractional value indicating how far the user has currently advanced to\n     * the next/previous item. E.g., a `selectedFraction` of 3.5 indicates the\n     * user is halfway between items 3 and 4.\n     *\n     * For more details, see [FractionalSelectionMixin](FractionalSelectionMixin.md)\n     * mixin.\n     *\n     * @type {number}\n     */\n    get selectedFraction() {\n      return super.selectedFraction || 0;\n    }\n    set selectedFraction(value) {\n      if ('selectedFraction' in base.prototype) { super.selectedFraction = value; }\n      renderSelection(this, this.selectedIndex, value);\n    }\n\n    get selectedIndex() {\n      return super.selectedIndex;\n    }\n    set selectedIndex(index) {\n      if ('selectedIndex' in base.prototype) { super.selectedIndex = index; }\n      renderSelection(this, index, 0);\n    }\n\n    /**\n     * The duration of a selection animation in milliseconds.\n     *\n     * This measures the amount of time required for a selection animation to\n     * complete. This number remains constant, even if the number of items being\n     * animated increases.\n     *\n     * The default value is 250 milliseconds (a quarter a second).\n     *\n     * @type {number}\n     * @default 250\n     */\n    get selectionAnimationDuration() {\n      return this[selectionAnimationDurationSymbol];\n    }\n    set selectionAnimationDuration(value) {\n      this[selectionAnimationDurationSymbol] = value;\n      if ('selectionAnimationDuration' in base.prototype) { super.selectionAnimationDuration = value; }\n    }\n\n    /**\n     * The name of a standard selection animation effect.\n     *\n     * This is a shorthand for setting the `selectionAnimationKeyframes`\n     * property to standard keyframes. Supported string values:\n     *\n     * * \"crossfade\"\n     * * \"reveal\"\n     * * \"revealWithFade\"\n     * * \"showAdjacent\"\n     * * \"slide\"\n     * * \"slideWithGap\"\n     *\n     * @type {string}\n     * @default \"slide\"\n     */\n    get selectionAnimationEffect() {\n      return this[selectionAnimationEffectSymbol];\n    }\n    set selectionAnimationEffect(value) {\n      this[selectionAnimationEffectSymbol] = value;\n      if ('selectionAnimationEffect' in base.prototype) { super.selectionAnimationEffect = value; }\n      this.selectionAnimationKeyframes = mixin.standardEffectKeyframes[value];\n    }\n\n    /**\n     * The keyframes that define an animation that plays for an item when moving\n     * forward in the sequence.\n     *\n     * This is an array of CSS rules that will be applied. These are used as\n     * [keyframes](http://w3c.github.io/web-animations/#keyframes-section)\n     * to animate the item with the\n     * [Web Animations API](https://developer.mozilla.org/en-US/docs/Web/API/animation).\n     *\n     * The animation represents the state of the next item as it moves from\n     * completely unselected (offstage, usually right), to selected (center\n     * stage), to completely unselected (offstage, usually left). The center time\n     * of the animation should correspond to the item's quiscent selected state,\n     * typically in the center of the stage and at the item's largest size.\n     *\n     * The default forward animation is a smooth slide at full size from right to\n     * left.\n     *\n     * When moving the selection backward, this animation is played in reverse.\n     *\n     * @type {cssRules[]}\n     */\n    get selectionAnimationKeyframes() {\n      // Standard animation slides left/right, keeps adjacent items out of view.\n      return this[selectionAnimationKeyframesSymbol];\n    }\n    set selectionAnimationKeyframes(value) {\n      this[selectionAnimationKeyframesSymbol] = value;\n      if ('selectionAnimationKeyframes' in base.prototype) { super.selectionAnimationKeyframes = value; }\n      resetAnimations(this);\n      renderSelection(this);\n    }\n\n    get selectionWraps() {\n      return super.selectionWraps;\n    }\n    set selectionWraps(value) {\n      if ('selectionWraps' in base.prototype) { super.selectionWraps = value; }\n      resetAnimations(this);\n      renderSelection(this);\n    }\n  }\n\n  return SelectionAnimation;\n}\n\n\n// We expose helpers on the mixin function that we want to be able to unit test.\n// Since these are on the function, not on the class emitted by the function,\n// they don't end up getting exposed on actual element instances.\nmixin.helpers = {\n\n  /*\n   * Calculate the animation fractions for an element's items at the given\n   * selection point. This is used when rendering the element's selection state\n   * instantaneously.\n   *\n   * This function considers the selectedIndex parameter, which can be a whole\n   * or fractional number, and determines which items will be visible at that\n   * index. This function then calculates a corresponding animation fraction: a\n   * number between 0 and 1 indicating how far through the selection animation\n   * an item should be shown, or null if the item should not be visible at that\n   * selection index. These fractions are returned as an array, where the\n   * animation fraction at position N corresponds to how item N should be shown.\n   */\n  animationFractionsForSelection(element, selection) {\n\n    const items = element.items;\n    if (!items) {\n      return;\n    }\n\n    const itemCount = items.length;\n    const selectionWraps = element.selectionWraps;\n\n    return items.map((item, itemIndex) => {\n      // How many steps from the selection point to this item?\n      const steps = stepsToIndex(itemCount, selectionWraps, selection, itemIndex);\n      // To convert steps to animation fraction:\n      // steps      animation fraction\n      //  1         0     (stage right)\n      //  0         0.5   (center stage)\n      // -1         1     (stage left)\n      const animationFraction = (1 - steps) / 2;\n      return (animationFraction >= 0 && animationFraction <= 1) ?\n        animationFraction :\n        null; // Outside animation range\n    });\n  },\n\n  /*\n   * Calculate the animation timings that should be used to smoothly animate the\n   * element's items from one selection state to another.\n   *\n   * This returns an array of timings, where the timing at position N should be\n   * used to animate item N. If an item's timing is null, then that item should\n   * not take place in the animation, and should be hidden instead.\n   */\n  effectTimingsForSelectionAnimation(element, fromSelection, toSelection) {\n\n    const items = element.items;\n    if (!items) {\n      return;\n    }\n    const itemCount = items.length;\n    const selectionWraps = element.selectionWraps;\n    const toIndex = FractionalSelectionMixin.helpers.wrappedSelectionParts(toSelection, itemCount, selectionWraps).index;\n    const totalSteps = stepsToIndex(itemCount, selectionWraps, fromSelection, toSelection);\n    const direction = totalSteps >= 0 ? 'normal': 'reverse';\n    const fill = 'both';\n    const totalDuration = element.selectionAnimationDuration;\n    const stepDuration = totalSteps !== 0 ?\n      totalDuration * 2 / Math.ceil(Math.abs(totalSteps)) :\n      0;  // No steps required, animation will be instantenous.\n\n    const timings = items.map((item, itemIndex) => {\n      const steps = stepsToIndex(itemCount, selectionWraps, itemIndex, toSelection);\n      // If we include this item in the staggered sequence of animations we're\n      // creating, where would the item appear in the sequence?\n      let positionInSequence = totalSteps - steps;\n      if (totalSteps < 0) {\n        positionInSequence = -positionInSequence;\n      }\n      // So, is this item really included in the sequence?\n      if (Math.ceil(positionInSequence) >= 0 && positionInSequence <= Math.abs(totalSteps)) {\n        // Note that delay for first item will be negative. That will cause\n        // the animation to start halfway through, which is what we want.\n        const delay = stepDuration * (positionInSequence - 1)/2;\n        const endDelay = itemIndex === toIndex ?\n          -stepDuration/2 :   // Stop halfway through.\n          0;              // Play animation until end.\n        return { duration: stepDuration, direction, fill, delay, endDelay };\n      } else {\n        return null;\n      }\n    });\n\n    return timings;\n  }\n\n};\n\n\n// Keyframes for standard selection animation effects.\nmixin.standardEffectKeyframes = {\n\n  // Simple crossfade\n  crossfade: [\n    { opacity: 0 },\n    { opacity: 1 },\n    { opacity: 0 }\n  ],\n\n  // Reveal, as if sliding the top card off a deck of cards\n  reveal: [\n    { transform: 'translateX(0%)', zIndex: 0 },\n    { transform: 'translateX(0%)', zIndex: 1 },\n    { transform: 'translateX(-100%)', zIndex: 2 }\n  ],\n\n  // Google Photos-style reveal-with-fade animation\n  revealWithFade: [\n    { transform: 'translateX(0%) scale(0.75)', opacity: 0, zIndex: 0 },\n    { transform: 'translateX(0%) scale(1.0)', opacity: 1, zIndex: 1 },\n    { transform: 'translateX(-100%) scale(1.0)', opacity: 1, zIndex: 2 }\n  ],\n\n  // Carousel variant with a bit of off-stage elements showing\n  showAdjacent: [\n    { transform: 'translateX(78%) scale(0.7)', zIndex: 0 },\n    { transform: 'translateX(0%) scale(0.82)', zIndex: 1 },\n    { transform: 'translateX(-78%) scale(0.7)', zIndex: 0 }\n  ],\n\n  // Simple slide\n  slide: [\n    { transform: 'translateX(100%)' },\n    { transform: 'translateX(-100%)' }\n  ],\n\n  // Slide, with a gap between\n  slideWithGap: [\n    { transform: 'translateX(110%)' },\n    { transform: 'translateX(-110%)' }\n  ]\n\n};\n\n\n/*\n * Smoothly animate the selection between the indicated \"from\" and \"to\"\n * indices. The former can be a fraction, e.g., when the user releases a finger\n * to complete a touch drag, and the selection will snap to the closest whole\n * index.\n */\nfunction animateSelection(element, fromSelection, toSelection) {\n\n  resetAnimations(element);\n\n  // Calculate the animation timings.\n  const items = element.items;\n  const keyframes = element.selectionAnimationKeyframes;\n  element[playingAnimationSymbol] = true;\n  const timings = mixin.helpers.effectTimingsForSelectionAnimation(element, fromSelection, toSelection);\n\n  // Figure out which item will be the one *after* the one we're selecting.\n  const itemCount = items.length;\n  const selectionWraps = element.selectionWraps;\n  const selectionIndex = FractionalSelectionMixin.helpers.selectionParts(toSelection, itemCount, selectionWraps).index;\n  const totalSteps = stepsToIndex(itemCount, selectionWraps, fromSelection, toSelection);\n  const forward = totalSteps >= 0;\n  let nextUpIndex = selectionIndex + (forward ? 1 : - 1);\n  if (selectionWraps) {\n    nextUpIndex = FractionalSelectionMixin.helpers.wrappedSelection(nextUpIndex, itemCount);\n  } else if (!isItemIndexInBounds(element, nextUpIndex)) {\n    nextUpIndex = null; // At start/end of list; don't have a next item to show.\n  }\n\n  // Play the animations using those timings.\n  let lastAnimationDetails;\n  timings.forEach((timing, index) => {\n    const item = items[index];\n    if (timing) {\n      showItem(item, true);\n      const animation = item.animate(keyframes, timing);\n      element[animationSymbol][index] = animation;\n      if (index === nextUpIndex) {\n        // This item will be animated, so will already be in the desired state\n        // after the animation completes.\n        nextUpIndex = null;\n      }\n      if (timing.endDelay !== 0) {\n        // This is the animation for the item that will be left selected.\n        // We want to clean up when this animation completes.\n        lastAnimationDetails = { animation, index, timing, forward };\n      }\n    } else {\n      // This item doesn't participate in the animation.\n      showItem(item, false);\n    }\n  });\n\n  if (lastAnimationDetails != null) {\n    // Arrange for clean-up work to be performed.\n    lastAnimationDetails.nextUpIndex = nextUpIndex;\n    lastAnimationDetails.animation.onfinish = event => selectionAnimationFinished(element, lastAnimationDetails);\n    element[lastAnimationSymbol] = lastAnimationDetails.animation;\n  } else {\n    // Shouldn't happen -- we should always have at least one animation.\n    element[playingAnimationSymbol] = false;\n  }\n}\n\n\nfunction getAnimationForItemIndex(element, index) {\n  if (element[animationSymbol] == null) {\n    // Not ready yet;\n    return null;\n  }\n  let animation = element[animationSymbol][index];\n  if (!animation) {\n    const item = element.items[index];\n    animation = item.animate(element.selectionAnimationKeyframes, {\n      duration: element.selectionAnimationDuration,\n      fill: 'both'\n    });\n    animation.pause();\n    element[animationSymbol][index] = animation;\n  }\n  return animation;\n}\n\nfunction isItemIndexInBounds(element, index) {\n  return index >= 0 && element.items && index < element.items.length;\n}\n\n/*\n * Render the selection state of the element.\n *\n * This can be used to re-render a previous selection state (if the\n * selectedIndex param is omitted), render the selection instantly at a given\n * whole or fractional selection index, or animate to a given selection index.\n *\n * There are several distinct scenarios we need to cover:\n *\n * 1. Initial positioning, or repositioning after changing a property like\n *    selectionAnimationKeyframes that affects rendering.\n * 2. Animate on selectedIndex change. This should override any animation/swipe\n *    already in progress.\n * 3. Instantly render the current position of a drag operation in progress.\n * 4. Complete a drag operation. If the drag wasn't far enough to affect\n *    selection, we'll just be restoring the selectedFraction to 0.\n *\n * If the list does not wrap, any selection position outside the list's bounds\n * will be damped to produce a visual effect of tension.\n */\nfunction renderSelection(element, selectedIndex=element.selectedIndex, selectedFraction=element.selectedFraction) {\n  const itemCount = element.items ? element.items.length : 0;\n  if (itemCount === 0) {\n    // Nothing to render.\n    return;\n  }\n  if (selectedIndex < 0) {\n    // TODO: Handle no selection.\n    return;\n  }\n  let selection = selectedIndex + selectedFraction;\n  if (element.selectionWraps) {\n    // Apply wrapping to ensure consistent representation of selection.\n    selection = FractionalSelectionMixin.helpers.wrappedSelection(selection, itemCount);\n  } else {\n    // Apply damping if necessary.\n    selection = FractionalSelectionMixin.helpers.dampedSelection(selection, itemCount);\n  }\n  const previousSelection = element[previousSelectionSymbol];\n  // TODO: If an item changes position in the DOM, we end up animating from\n  // its old index to its new index, but we really don't want to animate at all.\n  if (!element[symbols.dragging] && previousSelection != null &&\n      previousSelection !== selection) {\n    // Animate selection from previous state to new state.\n    animateSelection(element, previousSelection, selection);\n  } else if (selectedFraction === 0 && element[playingAnimationSymbol]) {\n    // Already in process of animating to fraction 0. During that process,\n    // ignore subsequent attempts to renderSelection to fraction 0.\n    return;\n  } else {\n    // Render current selection state instantly.\n    renderSelectionInstantly(element, selection);\n  }\n  element[previousSelectionSymbol] = selection;\n}\n\n/*\n * Instantly render (don't animate) the element's items at the given whole or\n * fractional selection index.\n */\nfunction renderSelectionInstantly(element, toSelection) {\n  if (element[resetAnimationsOnNextRenderSymbol]) {\n    resetAnimations(element);\n    element[resetAnimationsOnNextRenderSymbol] = false;\n  }\n  const animationFractions = mixin.helpers.animationFractionsForSelection(element, toSelection);\n  animationFractions.map((animationFraction, index) => {\n    const item = element.items[index];\n    if (animationFraction != null) {\n      showItem(item, true);\n      setAnimationFraction(element, index, animationFraction);\n    } else {\n      showItem(item, false);\n    }\n  });\n}\n\n/*\n * We maintain an array containing an animation per item. This is used for two\n * reasons:\n *\n * * During a drag operation, we want to be able to reuse animations between\n *   drag updates.\n * * When a selection animation completes, we need to be able to leave the\n *   visibile items in a paused state. Later, we'll want to be able to clean up\n *   those animations.\n *\n * Note that this array is sparse: it will only hold up from 0–3 animations at\n * any given point.\n */\nfunction resetAnimations(element) {\n  const animations = element[animationSymbol];\n  if (animations) {\n    // Cancel existing animations to remove the effects they're applying.\n    animations.forEach((animation, index) => {\n      if (animation) {\n        animation.cancel();\n        animations[index] = null;\n      }\n    });\n  }\n  const itemCount = element.items ? element.items.length : 0;\n  if (!animations || animations.length !== itemCount) {\n    // Haven't animated before with this number of items; (re)create array.\n    element[animationSymbol] = new Array(itemCount);\n  }\n}\n\n/*\n * The last animation in our selection animation has completed. Clean up.\n */\nfunction selectionAnimationFinished(element, details) {\n\n  // When the last animation completes, show the next item in the direction\n  // we're going. Waiting to that until this point is a bit of a hack to avoid\n  // having a next item that's higher in the natural z-order obscure other items\n  // during animation.\n  const nextUpIndex = details.nextUpIndex;\n  if (nextUpIndex != null) {\n    if (element[animationSymbol][nextUpIndex]) {\n      // Cancel existing selection animation so we can construct a new one.\n      element[animationSymbol][nextUpIndex].cancel();\n      element[animationSymbol][nextUpIndex] = null;\n    }\n    const animationFraction = details.forward ? 0 : 1;\n    setAnimationFraction(element, nextUpIndex, animationFraction);\n    showItem(element.items[nextUpIndex], true);\n  }\n\n  element[lastAnimationSymbol].onfinish = null;\n  element[playingAnimationSymbol] = false;\n}\n\n/*\n * Pause the indicated animation and have it show the animation at the given\n * fraction (between 0 and 1) of the way through the animation.\n */\nfunction setAnimationFraction(element, itemIndex, fraction) {\n  const animation = getAnimationForItemIndex(element, itemIndex);\n  if (animation) {\n    const duration = element.selectionAnimationDuration;\n    if (duration) {\n      animation.currentTime = fraction * duration;\n    }\n  }\n}\n\nfunction showItem(item, flag) {\n  item.style.visibility = flag ? 'visible' : 'hidden';\n}\n\n/*\n * Figure out how many steps it will take to go from fromSelection to\n * toSelection. To go from item 3 to item 4 is one step.\n *\n * If wrapping is allowed, then going from the last item to the first will take\n * one step (forward), and going from the first item to the last will take one\n * step (backward).\n */\nfunction stepsToIndex(length, allowWrap, fromSelection, toSelection) {\n  let steps = toSelection - fromSelection;\n  // Wrapping only kicks in when list has more than 1 item.\n  if (allowWrap && length > 1) {\n    const wrapSteps = length - Math.abs(steps);\n    if (wrapSteps <= 1) {\n      // Special case\n      steps = steps < 0 ?\n        wrapSteps :   // Wrap forward from last item to first.\n        -wrapSteps;   // Wrap backward from first item to last.\n    }\n  }\n  return steps;\n}\n","import symbols from './symbols';\n\n\n// Used to assign unique IDs to item elements without IDs.\nlet idCount = 0;\n\n\n/* Exported function extends a base class with SelectionAriaActive. */\nexport default (base) => {\n\n  /**\n   * Mixin which treats the selected item in a list as the active item in ARIA\n   * accessibility terms.\n   *\n   * Handling ARIA selection state properly is actually quite complex:\n   *\n   * * The items in the list need to be indicated as possible items via an ARIA\n   *   `role` attribute value such as \"option\".\n   * * The selected item need to be marked as selected by setting the item's\n   *   `aria-selected` attribute to true *and* the other items need be marked as\n   *   *not* selected by setting `aria-selected` to false.\n   * * The outermost element with the keyboard focus needs to have attributes\n   *   set on it so that the selection is knowable at the list level via the\n   *   `aria-activedescendant` attribute.\n   * * Use of `aria-activedescendant` in turn requires that all items in the\n   *   list have ID attributes assigned to them.\n   *\n   * This mixin tries to address all of the above requirements. To that end,\n   * this mixin will assign generated IDs to any item that doesn't already have\n   * an ID.\n   *\n   * ARIA relies on elements to provide `role` attributes. This mixin will apply\n   * a default role of \"listbox\" on the outer list if it doesn't already have an\n   * explicit role. Similarly, this mixin will apply a default role of \"option\"\n   * to any list item that does not already have a role specified.\n   *\n   * This mixin expects a set of members that manage the state of the selection:\n   * `[symbols.itemSelected]`, `itemAdded`, and `selectedIndex`. You can\n   * supply these yourself, or do so via\n   * [SingleSelectionMixin](SingleSelectionMixin.md).\n   */\n  class SelectionAriaActive extends base {\n\n    connectedCallback() {\n      if (super.connectedCallback) { super.connectedCallback(); }\n      // Set default ARIA role.\n      if (this.getAttribute('role') == null && this[symbols.defaults].role) {\n        this.setAttribute('role', this[symbols.defaults].role);\n      }\n    }\n\n    get [symbols.defaults]() {\n      const defaults = super[symbols.defaults] || {};\n      defaults.role = 'listbox';\n      return defaults;\n    }\n\n    [symbols.itemAdded](item) {\n      if (super[symbols.itemAdded]) { super[symbols.itemAdded](item); }\n\n      if (!item.getAttribute('role')) {\n        // Assign a default ARIA role.\n        item.setAttribute('role', 'option');\n      }\n\n      // Ensure each item has an ID so we can set aria-activedescendant on the\n      // overall list whenever the selection changes.\n      //\n      // The ID will take the form of a base ID plus a unique integer. The base\n      // ID will be incorporate the component's own ID. E.g., if a component has\n      // ID \"foo\", then its items will have IDs that look like \"_fooOption1\". If\n      // the compnent has no ID itself, its items will get IDs that look like\n      // \"_option1\". Item IDs are prefixed with an underscore to differentiate\n      // them from manually-assigned IDs, and to minimize the potential for ID\n      // conflicts.\n      if (!item.id) {\n        const baseId = this.id ?\n            \"_\" + this.id + \"Option\" :\n            \"_option\";\n        item.id = baseId + idCount++;\n      }\n    }\n\n    [symbols.itemSelected](item, selected) {\n      if (super[symbols.itemSelected]) { super[symbols.itemSelected](item, selected); }\n      item.setAttribute('aria-selected', selected);\n      const itemId = item.id;\n      if (itemId && selected) {\n        this.setAttribute('aria-activedescendant', itemId);\n      }\n    }\n\n    get selectedItem() {\n      return super.selectedItem;\n    }\n    set selectedItem(item) {\n      if ('selectedItem' in base.prototype) { super.selectedItem = item; }\n      if (item == null) {\n        // Selection was removed.\n        this.removeAttribute('aria-activedescendant');\n      }\n    }\n\n  }\n\n  return SelectionAriaActive;\n};\n","/* Exported function extends a base class with ShadowElementReferences. */\nexport default (base) => {\n\n  /**\n   * Mixin to create references to elements in a component's Shadow DOM subtree.\n   *\n   * This adds a member on the component called `this.$` that can be used to\n   * reference shadow elements with IDs. E.g., if component's shadow contains an\n   * element `<button id=\"foo\">`, then this mixin will create a member\n   * `this.$.foo` that points to that button.\n   *\n   * Such references simplify a component's access to its own elements. In\n   * exchange, this mixin trades off a one-time cost of querying all elements in\n   * the shadow tree instead of paying an ongoing cost to query for an element\n   * each time the component wants to inspect or manipulate it.\n   *\n   * This mixin expects the component to define a Shadow DOM subtree. You can\n   * create that tree yourself, or make use of\n   * [ShadowTemplateMixin](ShadowTemplateMixin.md).\n   *\n   * This mixin is inspired by Polymer's [automatic\n   * node finding](https://www.polymer-project.org/1.0/docs/devguide/local-dom.html#node-finding)\n   * feature.\n   */\n  class ShadowElementReferences extends base {\n\n    constructor() {\n      super();\n      if (this.shadowRoot) {\n        // Look for elements in the shadow subtree that have id attributes.\n        // An alternatively implementation of this mixin would be to just define\n        // a this.$ getter that lazily does this search the first time someone\n        // tries to access this.$. That might introduce some complexity – if the\n        // the tree changed after it was first populated, the result of\n        // searching for a node might be somewhat unpredictable.\n        this.$ = {};\n        const nodesWithIds = this.shadowRoot.querySelectorAll('[id]');\n        [].forEach.call(nodesWithIds, node => {\n          const id = node.getAttribute('id');\n          this.$[id] = node;\n        });\n      }\n    }\n\n    /**\n     * The collection of references to the elements with IDs in a component's\n     * Shadow DOM subtree.\n     *\n     * @type {object}\n     * @member $\n     */\n  }\n\n  return ShadowElementReferences;\n};\n","import symbols from '../src/symbols';\n\n\n/* Exported function extends a base class with ShadowTemplate. */\nexport default (base) => {\n\n  /**\n   * Mixin for stamping a template into a Shadow DOM subtree upon component\n   * instantiation.\n   *\n   * To use this mixin, define a `template` property as a string or HTML\n   * `<template>` element:\n   *\n   *     class MyElement extends ShadowTemplateMixin(HTMLElement) {\n   *       get [symbols.template]() {\n   *         return `Hello, <em>world</em>.`;\n   *       }\n   *     }\n   *\n   * When your component class is instantiated, a shadow root will be created on\n   * the instance, and the contents of the template will be cloned into the\n   * shadow root. If your component does not define a `template` property, this\n   * mixin has no effect.\n   *\n   * For the time being, this extension retains support for Shadow DOM v0. That\n   * will eventually be deprecated as browsers (and the Shadow DOM polyfill)\n   * implement Shadow DOM v1.\n   */\n  class ShadowTemplate extends base {\n\n    /*\n     * If the component defines a template, a shadow root will be created on the\n     * component instance, and the template stamped into it.\n     */\n    constructor() {\n      super();\n      let template = this[symbols.template];\n      // TODO: Save the processed template with the component's class prototype\n      // so it doesn't need to be processed with every instantiation.\n      if (template) {\n\n        if (typeof template === 'string') {\n          // Upgrade plain string to real template.\n          template = createTemplateWithInnerHTML(template);\n        }\n\n        if (window.ShadowDOMPolyfill) {\n          shimTemplateStyles(template, this.localName);\n        }\n\n        const root = this.attachShadow({ mode: 'open' });\n        const clone = document.importNode(template.content, true);\n        root.appendChild(clone);\n      }\n    }\n\n  }\n\n  return ShadowTemplate;\n};\n\n\n// Convert a plain string of HTML into a real template element.\nfunction createTemplateWithInnerHTML(innerHTML) {\n  const template = document.createElement('template');\n  // REVIEW: Is there an easier way to do this?\n  // We'd like to just set innerHTML on the template content, but since it's\n  // a DocumentFragment, that doesn't work.\n  const div = document.createElement('div');\n  div.innerHTML = innerHTML;\n  while (div.childNodes.length > 0) {\n    template.content.appendChild(div.childNodes[0]);\n  }\n  return template;\n}\n\n// Invoke basic style shimming with ShadowCSS.\nfunction shimTemplateStyles(template, tag) {\n  window.WebComponents.ShadowCSS.shimStyling(template.content, tag);\n}\n","import createSymbol from './createSymbol';\nimport symbols from './symbols';\n\n\n// Symbols for private data members on an element.\nconst canSelectNextSymbol = createSymbol('canSelectNext');\nconst canSelectPreviousSymbol = createSymbol('canSelectPrevious');\nconst selectionRequiredSymbol = createSymbol('selectionRequired');\nconst selectionWrapsSymbol = createSymbol('selectionWraps');\n\n// We want to expose both selectedIndex and selectedItem as independent\n// properties but keep them in sync. This allows a component user to reference\n// the selection by whatever means is most natural for their situation.\n//\n// To efficiently keep these properties in sync, we track \"external\" and\n// \"internal\" references for each property:\n//\n// The external index or item is the one we report to the outside world when\n// asked for selection.  When handling a change to index or item, we update the\n// external reference as soon as possible, so that if anyone immediately asks\n// for the current selection, they will receive a stable answer.\n//\n// The internal index or item tracks whichever index or item last received the\n// full set of processing. Processing includes raising a change event for the\n// new value. Once we've begun that processing, we store the new value as the\n// internal value to indicate we've handled it.\n//\nconst externalSelectedIndexSymbol = createSymbol('externalSelectedIndex');\nconst externalSelectedItemSymbol = createSymbol('externalSelectedItem');\nconst internalSelectedIndexSymbol = createSymbol('internalSelectedIndex');\nconst internalSelectedItemSymbol = createSymbol('internalSelectedItem');\n\n\n/* Exported function extends a base class with SingleSelection. */\nexport default (base) => {\n\n  /**\n   * Mixin which manages single-selection semantics for items in a list.\n   *\n   * This mixin expects a component to provide an `items` Array or NodeList of\n   * all elements in the list. A standard way to do that with is the\n   * [ContentItemsMixin](ContentItemsMixin.md), which takes a component's\n   * content (typically its distributed children) as the set of list items; see\n   * that mixin for details.\n   *\n   * This mixin tracks a single selected item in the list, and provides means to\n   * get and set that state by item position (`selectedIndex`) or item identity\n   * (`selectedItem`). The selection can be moved in the list via the methods\n   * `selectFirst`, `selectLast`, `selectNext`, and `selectPrevious`.\n   *\n   * This mixin does not produce any user-visible effects to represent\n   * selection. Other mixins, such as\n   * [SelectionAriaActiveMixin](SelectionAriaActiveMixin.md),\n   * [SelectionHighlightMixin](SelectionHighlightMixin.md) and\n   * [SelectionInViewMixin](SelectionInViewMixin.md), modify the selected item\n   * in common ways to let the user know a given item is selected or not\n   * selected.\n   */\n  class SingleSelection extends base {\n\n    constructor() {\n      super();\n      // Set defaults.\n      if (typeof this.selectionRequired === 'undefined') {\n        this.selectionRequired = this[symbols.defaults].selectionRequired;\n      }\n      if (typeof this.selectionWraps === 'undefined') {\n        this.selectionWraps = this[symbols.defaults].selectionWraps;\n      }\n    }\n\n    /**\n     * True if the selection can be moved to the next item, false if not (the\n     * selected item is the last item in the list).\n     *\n     * @type {boolean}\n     */\n    get canSelectNext() {\n      return this[canSelectNextSymbol];\n    }\n    set canSelectNext(canSelectNext) {\n      const previousCanSelectNext = this[canSelectNextSymbol];\n      this[canSelectNextSymbol] = canSelectNext;\n      if ('canSelectNext' in base.prototype) { super.canSelectNext = canSelectNext; }\n      if (canSelectNext !== previousCanSelectNext) {\n        this.dispatchEvent(new CustomEvent('can-select-next-changed'));\n      }\n    }\n\n    /**\n     * True if the selection can be moved to the previous item, false if not\n     * (the selected item is the first one in the list).\n     *\n     * @type {boolean}\n     */\n    get canSelectPrevious() {\n      return this[canSelectPreviousSymbol];\n    }\n    set canSelectPrevious(canSelectPrevious) {\n      const previousCanSelectPrevious = this[canSelectPreviousSymbol];\n      this[canSelectPreviousSymbol] = canSelectPrevious;\n      if ('canSelectPrevious' in base.prototype) { super.canSelectPrevious = canSelectPrevious; }\n      if (canSelectPrevious !== previousCanSelectPrevious) {\n        this.dispatchEvent(new CustomEvent('can-select-previous-changed'));\n      }\n    }\n\n    get [symbols.defaults]() {\n      const defaults = super[symbols.defaults] || {};\n      defaults.selectionRequired = false;\n      defaults.selectionWraps = false;\n      return defaults;\n    }\n\n    /**\n     * Handle a new item being added to the list.\n     *\n     * The default implementation of this method simply sets the item's\n     * selection state to false.\n     *\n     * @param {HTMLElement} item - the item being added\n     */\n    [symbols.itemAdded](item) {\n      if (super[symbols.itemAdded]) { super[symbols.itemAdded](item); }\n      this[symbols.itemSelected](item, item === this.selectedItem);\n    }\n\n    [symbols.itemsChanged]() {\n      if (super[symbols.itemsChanged]) { super[symbols.itemsChanged](); }\n\n      // In case selected item changed position or was removed.\n      trackSelectedItem(this);\n\n      // In case the change in items affected which navigations are possible.\n      updatePossibleNavigations(this);\n    }\n\n    /**\n     * Apply the indicate selection state to the item.\n     *\n     * The default implementation of this method does nothing. User-visible\n     * effects will typically be handled by other mixins.\n     *\n     * @param {HTMLElement} item - the item being selected/deselected\n     * @param {boolean} selected - true if the item is selected, false if not\n     */\n    [symbols.itemSelected](item, selected) {\n      if (super[symbols.itemSelected]) { super[symbols.itemSelected](item, selected); }\n    }\n\n    /**\n     * The index of the item which is currently selected.\n     *\n     * A `selectedIndex` of -1 indicates there is no selection. Setting this\n     * property to -1 will remove any existing selection.\n     *\n     * @type {number}\n     */\n    get selectedIndex() {\n      return this[externalSelectedIndexSymbol] != null ?\n        this[externalSelectedIndexSymbol] :\n        -1;\n    }\n    set selectedIndex(index) {\n      // See notes at top about internal vs. external copies of this property.\n      const previousSelectedIndex = this[internalSelectedIndexSymbol];\n      let item;\n      if (index !== this[externalSelectedIndexSymbol]) {\n        // Store the new index and the corresponding item.\n        const items = this.items;\n        const hasItems = items && items.length > 0;\n        if (!(hasItems && index >= 0 && index < items.length)) {\n          index = -1; // No item at that index.\n        }\n        this[externalSelectedIndexSymbol] = index;\n        item = hasItems && index >= 0 ? items[index] : null;\n        this[externalSelectedItemSymbol] = item;\n      } else {\n        item = this[externalSelectedItemSymbol];\n      }\n\n      // Now let super do any work.\n      if ('selectedIndex' in base.prototype) { super.selectedIndex = index; }\n\n      if (index !== previousSelectedIndex) {\n        // The selected index changed.\n        this[internalSelectedIndexSymbol] = index;\n\n        const event = new CustomEvent('selected-index-changed', {\n          detail: {\n            selectedIndex: index,\n            value: index // for Polymer binding. TODO: Verify still necessary\n          }\n        });\n        this.dispatchEvent(event);\n      }\n\n      if (this[internalSelectedItemSymbol] !== item) {\n        // Update selectedItem property so it can have its own effects.\n        this.selectedItem = item;\n      }\n    }\n\n    /**\n     * The currently selected item, or null if there is no selection.\n     *\n     * Setting this property to null deselects any currently-selected item.\n     * Setting this property to an object that is not in the list has no effect.\n     *\n     * TODO: Even if selectionRequired, can still explicitly set selectedItem to null.\n     * TODO: If selectionRequired, leave selection alone?\n     *\n     * @type {object}\n     */\n    get selectedItem() {\n      return this[externalSelectedItemSymbol] || null;\n    }\n    set selectedItem(item) {\n      // See notes at top about internal vs. external copies of this property.\n      const previousSelectedItem = this[internalSelectedItemSymbol];\n      let index;\n      if (item !== this[externalSelectedItemSymbol]) {\n        // Store item and look up corresponding index.\n        const items = this.items;\n        const hasItems = items && items.length > 0;\n        index = hasItems ? Array.prototype.indexOf.call(items, item) : -1;\n        this[externalSelectedIndexSymbol] = index;\n        if (index < 0) {\n          item = null; // The indicated item isn't actually in `items`.\n        }\n        this[externalSelectedItemSymbol] = item;\n      } else {\n        index = this[externalSelectedIndexSymbol];\n      }\n\n      // Now let super do any work.\n      if ('selectedItem' in base.prototype) { super.selectedItem = item; }\n\n      if (item !== previousSelectedItem) {\n        // The selected item changed.\n        this[internalSelectedItemSymbol] = item;\n\n        if (previousSelectedItem) {\n          // Update selection state of old item.\n          this[symbols.itemSelected](previousSelectedItem, false);\n        }\n        if (item) {\n          // Update selection state to new item.\n          this[symbols.itemSelected](item, true);\n        }\n\n        updatePossibleNavigations(this);\n\n        const event = new CustomEvent('selected-item-changed', {\n          detail: {\n            selectedItem: item,\n            value: item // for Polymer binding\n          }\n        });\n        this.dispatchEvent(event);\n      }\n\n      if (this[internalSelectedIndexSymbol] !== index) {\n        // Update selectedIndex property so it can have its own effects.\n        this.selectedIndex = index;\n      }\n    }\n\n    /**\n     * Select the first item in the list.\n     */\n    selectFirst() {\n      if (super.selectFirst) { super.selectFirst(); }\n      return selectIndex(this, 0);\n    }\n\n    /**\n     * True if the list should always have a selection (if it has items).\n     *\n     * @type {boolean}\n     * @default false\n     */\n    get selectionRequired() {\n      return this[selectionRequiredSymbol];\n    }\n    set selectionRequired(selectionRequired) {\n      this[selectionRequiredSymbol] = selectionRequired;\n      if ('selectionRequired' in base.prototype) { super.selectionRequired = selectionRequired; }\n      trackSelectedItem(this);\n    }\n\n    /**\n     * True if selection navigations wrap from last to first, and vice versa.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    get selectionWraps() {\n      return this[selectionWrapsSymbol];\n    }\n    set selectionWraps(value) {\n      this[selectionWrapsSymbol] = String(value) === 'true';\n      if ('selectionWraps' in base.prototype) { super.selectionWraps = value; }\n      updatePossibleNavigations(this);\n    }\n\n    /**\n     * Select the last item in the list.\n     */\n    selectLast() {\n      if (super.selectLast) { super.selectLast(); }\n      return selectIndex(this, this.items.length - 1);\n    }\n\n    /**\n     * Select the next item in the list.\n     */\n    selectNext() {\n      if (super.selectNext) { super.selectNext(); }\n      return selectIndex(this, this.selectedIndex + 1);\n    }\n\n    /**\n     * Select the previous item in the list.\n     *\n     * If the list has no selection, the last item will be selected.\n     */\n    selectPrevious() {\n      if (super.selectPrevious) { super.selectPrevious(); }\n      const newIndex = this.selectedIndex < 0 ?\n        this.items.length - 1 :     // No selection yet; select last item.\n        this.selectedIndex - 1;\n      return selectIndex(this, newIndex);\n    }\n\n    /**\n     * Fires when the selectedItem property changes.\n     *\n     * @memberof SingleSelection\n     * @event selected-item-changed\n     * @param {HTMLElement} detail.selectedItem The new selected item.\n     * @param {HTMLElement} detail.previousItem The previously selected item.\n     */\n\n    /**\n     * Fires when the selectedIndex property changes.\n     *\n     * @memberof SingleSelection\n     * @event selected-index-changed\n     * @param {number} detail.selectedIndex The new selected index.\n     */\n\n  }\n\n  return SingleSelection;\n};\n\n\n// Ensure the given index is within bounds, and select it if it's not already\n// selected.\nfunction selectIndex(element, index) {\n  const count = element.items.length;\n\n  const boundedIndex = (element.selectionWraps) ?\n    // JavaScript mod doesn't handle negative numbers the way we want to wrap.\n    // See http://stackoverflow.com/a/18618250/76472\n    ((index % count) + count) % count :\n\n    // Keep index within bounds of array.\n    Math.max(Math.min(index, count - 1), 0);\n\n  const previousIndex = element.selectedIndex;\n  if (previousIndex !== boundedIndex) {\n    element.selectedIndex = boundedIndex;\n    return true;\n  } else {\n    return false;\n  }\n}\n\n// Following a change in the set of items, or in the value of the\n// `selectionRequired` property, reacquire the selected item. If it's moved,\n// update `selectedIndex`. If it's been removed, and a selection is required,\n// try to select another item.\nfunction trackSelectedItem(element) {\n\n  const items = element.items;\n  const itemCount = items ? items.length : 0;\n\n  const previousSelectedItem = element.selectedItem;\n  if (!previousSelectedItem) {\n    // No item was previously selected.\n    if (element.selectionRequired) {\n      // Select the first item by default.\n      element.selectedIndex = 0;\n    }\n  } else if (itemCount === 0) {\n    // We've lost the selection, and there's nothing left to select.\n    element.selectedItem = null;\n  } else {\n    // Try to find the previously-selected item in the current set of items.\n    const indexInCurrentItems = Array.prototype.indexOf.call(items, previousSelectedItem);\n    const previousSelectedIndex = element.selectedIndex;\n    if (indexInCurrentItems < 0) {\n      // Previously-selected item was removed from the items.\n      // Select the item at the same index (if it exists) or as close as possible.\n      const newSelectedIndex = Math.min(previousSelectedIndex, itemCount - 1);\n      // Select by item, since index may be the same, and we want to raise the\n      // selected-item-changed event.\n      element.selectedItem = items[newSelectedIndex];\n    } else if (indexInCurrentItems !== previousSelectedIndex) {\n      // Previously-selected item still there, but changed position.\n      element.selectedIndex = indexInCurrentItems;\n    }\n  }\n}\n\n// Following a change in selection, report whether it's now possible to\n// go next/previous from the given index.\nfunction updatePossibleNavigations(element) {\n  let canSelectNext;\n  let canSelectPrevious;\n  const items = element.items;\n  if (items == null || items.length === 0) {\n    // No items to select.\n    canSelectNext = false;\n    canSelectPrevious = false;\n  } if (element.selectionWraps) {\n    // Since there are items, can always go next/previous.\n    canSelectNext = true;\n    canSelectPrevious = true;\n  } else {\n    const index = element.selectedIndex;\n    if (index < 0 && items.length > 0) {\n      // Special case. If there are items but no selection, declare that it's\n      // always possible to go next/previous to create a selection.\n      canSelectNext = true;\n      canSelectPrevious = true;\n    } else {\n      // Normal case: we have an index in a list that has items.\n      canSelectPrevious = (index > 0);\n      canSelectNext = (index < items.length - 1);\n    }\n  }\n  if (element.canSelectNext !== canSelectNext) {\n    element.canSelectNext = canSelectNext;\n  }\n  if (element.canSelectPrevious !== canSelectPrevious) {\n    element.canSelectPrevious = canSelectPrevious;\n  }\n}\n","import createSymbol from './createSymbol';\nimport symbols from './symbols';\n\n\n// Symbols for private data members on an element.\nconst deltaXSymbol = createSymbol('deltaX');\nconst deltaYSymbol = createSymbol('deltaY');\nconst multiTouchSymbol = createSymbol('multiTouch');\nconst previousXSymbol = createSymbol('previousX');\nconst previousYSymbol = createSymbol('previousY');\nconst startXSymbol = createSymbol('startX');\nconst travelFractionSymbol = createSymbol('travelFraction');\n\n\n/* Exported function extends a base class with SwipeDirection. */\nexport default (base) => {\n\n  /**\n   * Mixin which maps touch gestures (swipe left, swipe right) to direction\n   * semantics (go right, go left).\n   *\n   * By default, this mixin presents no user-visible effects; it just indicates\n   * a direction in which the user is currently swiping or has finished swiping.\n   * To map the direction to a change in selection, use\n   * [DirectionSelectionMixin](DirectionSelectionMixin.md).\n   */\n  class SwipeDirection extends base {\n\n    constructor() {\n      super();\n\n      this.travelFraction = 0;\n\n      // In all touch events, only handle single touches. We don't want to\n      // inadvertently do work when the user's trying to pinch-zoom for example.\n      // TODO: Even better approach than below would be to ignore touches after\n      // the first if the user has already begun a swipe.\n      // TODO: Touch events should probably be factored out into its own mixin.\n      if (window.PointerEvent) {\n        // Prefer listening to standard pointer events.\n        this.addEventListener('pointerdown', event => {\n          if (isEventForPenOrPrimaryTouch(event)) {\n            touchStart(this, event.clientX, event.clientY);\n          }\n        });\n        this.addEventListener('pointermove', event => {\n          if (isEventForPenOrPrimaryTouch(event)) {\n            const handled = touchMove(this, event.clientX, event.clientY);\n            if (handled) {\n              event.preventDefault();\n            }\n          }\n        });\n        this.addEventListener('pointerup', event => {\n          if (isEventForPenOrPrimaryTouch(event)) {\n            touchEnd(this, event.clientX, event.clientY);\n          }\n        });\n      } else {\n        // Pointer events not supported -- listen to older touch events.\n        this.addEventListener('touchstart', event => {\n          if (this[multiTouchSymbol]) {\n            return;\n          } else if (event.touches.length === 1) {\n            const clientX = event.changedTouches[0].clientX;\n            const clientY = event.changedTouches[0].clientY;\n            touchStart(this, clientX, clientY);\n          } else {\n            this[multiTouchSymbol] = true;\n          }\n        });\n        this.addEventListener('touchmove', event => {\n          if (!this[multiTouchSymbol] && event.touches.length === 1) {\n            const clientX = event.changedTouches[0].clientX;\n            const clientY = event.changedTouches[0].clientY;\n            const handled = touchMove(this, clientX, clientY);\n            if (handled) {\n              event.preventDefault();\n            }\n          }\n        });\n        this.addEventListener('touchend', event => {\n          if (event.touches.length === 0) {\n            // All touches removed; gesture is complete.\n            if (!this[multiTouchSymbol]) {\n              // Single-touch swipe has finished.\n              const clientX = event.changedTouches[0].clientX;\n              const clientY = event.changedTouches[0].clientY;\n              touchEnd(this, clientX, clientY);\n            }\n            this[multiTouchSymbol] = false;\n          }\n        });\n      }\n    }\n\n    connectedCallback() {\n      if (super.connectedCallback) { super.connectedCallback(); }\n\n      // For the component to receive PointerEvents in IE/Edge, we need to set\n      // touch-action: none. Only make this change if touch-action is currently\n      // the default value (\"auto\"), in case the developer knows better than we\n      // do what they want in their particular context.\n      if (getComputedStyle(this).touchAction === 'auto') {\n        this.style.touchAction = 'none';\n      }\n    }\n\n    // Default implementation.\n    get [symbols.dragging]() {\n      return super[symbols.dragging];\n    }\n    set [symbols.dragging](value) {\n      if (symbols.dragging in base.prototype) { super[symbols.dragging] = value; }\n    }\n\n    /**\n     * Invoked when the user wants to go/navigate left.\n     * The default implementation of this method does nothing.\n     */\n    [symbols.goLeft]() {\n      if (super[symbols.goLeft]) { return super[symbols.goLeft](); }\n    }\n\n    /**\n     * Invoked when the user wants to go/navigate right.\n     * The default implementation of this method does nothing.\n     */\n    [symbols.goRight]() {\n      if (super[symbols.goRight]) { return super[symbols.goRight](); }\n    }\n\n    /**\n     * The distance the first touchpoint has traveled since the beginning of a\n     * drag, expressed as a fraction of the element's width.\n     *\n     * @type number\n     */\n    get travelFraction() {\n      return this[travelFractionSymbol];\n    }\n    set travelFraction(value) {\n      this[travelFractionSymbol] = value;\n      if ('travelFraction' in base.prototype) { super.travelFraction = value; }\n    }\n\n  }\n\n  return SwipeDirection;\n};\n\n\n// Return true if the pointer event is for the pen, or the primary touch point.\nfunction isEventForPenOrPrimaryTouch(event) {\n  return event.pointerType === 'pen' ||\n      (event.pointerType === 'touch' && event.isPrimary);\n}\n\n/*\n * Invoked when the user has finished a touch operation.\n */\nfunction touchEnd(element, clientX, clientY) {\n  element[symbols.dragging] = false;\n  if (element[deltaXSymbol] >= 20) {\n    // Finished going right at high speed.\n    element[symbols.goLeft]();\n  } else if (element[deltaXSymbol] <= -20) {\n    // Finished going left at high speed.\n    element[symbols.goRight]();\n  } else {\n    // Finished at low speed.\n    trackTo(element, clientX);\n    const travelFraction = element.travelFraction;\n    if (travelFraction >= 0.5) {\n      element[symbols.goRight]();\n    } else if (travelFraction <= -0.5) {\n      element[symbols.goLeft]();\n    }\n  }\n  element.travelFraction = 0;\n  element[deltaXSymbol] = null;\n  element[deltaYSymbol] = null;\n}\n\n/*\n * Invoked when the user has moved during a touch operation.\n */\nfunction touchMove(element, clientX, clientY) {\n\n  element[deltaXSymbol] = clientX - element[previousXSymbol];\n  element[deltaYSymbol] = clientY - element[previousYSymbol];\n  element[previousXSymbol] = clientX;\n  element[previousYSymbol] = clientY;\n  if (Math.abs(element[deltaXSymbol]) > Math.abs(element[deltaYSymbol])) {\n    // Move was mostly horizontal.\n    trackTo(element, clientX);\n    // Indicate that the event was handled. It'd be nicer if we didn't have\n    // to do this so that, e.g., a user could be swiping left and right\n    // while simultaneously scrolling up and down. (Native touch apps can do\n    // that.) However, Mobile Safari wants to handle swipe events near the\n    // page and interpret them as navigations. To avoid having a horiziontal\n    // swipe misintepreted as a navigation, we indicate that we've handled\n    // the event, and prevent default behavior.\n    return true;\n  } else {\n    // Move was mostly vertical.\n    return false; // Not handled\n  }\n}\n\n/*\n * Invoked when the user has begun a touch operation.\n */\nfunction touchStart(element, clientX, clientY) {\n  element[symbols.dragging] = true;\n  element[startXSymbol] = clientX;\n  element[previousXSymbol] = clientX;\n  element[previousYSymbol] = clientY;\n  element[deltaXSymbol] = 0;\n  element[deltaYSymbol] = 0;\n}\n\nfunction trackTo(element, x) {\n  const width = element.offsetWidth;\n  const dragDistance = element[startXSymbol] - x;\n  const fraction = width > 0 ?\n    dragDistance / width :\n    0;\n  element.travelFraction = fraction;\n}\n","import createSymbol from '../../basic-component-mixins/src/createSymbol';\nimport symbols from './symbols';\n\n\n// Symbols for private data members on an element.\nconst absorbDecelerationSymbol = createSymbol('absorbDeceleration');\nconst lastDeltaXSymbol = createSymbol('lastDeltaX');\nconst lastWheelTimeoutSymbol = createSymbol('lastWheelTimeout');\nconst postNavigateDelayCompleteSymbol = createSymbol('postNavigateDelayComplete');\nconst wheelDistanceSymbol = createSymbol('wheelDistance');\n\n\n/* Exported function extends a base class with TrackpadDirection. */\nexport default (base) => {\n\n  /**\n   * Mixin which maps a horizontal trackpad swipe gestures (or horizontal mouse\n   * wheel actions) to direction semantics.\n   *\n   * You can use this mixin with a mixin like\n   * [DirectionSelectionMixin](DirectionSelectionMixin.md) to let the user\n   * change the selection with the trackpad or mouse wheel.\n   *\n   * To respond to the trackpad, we can listen to the DOM's \"wheel\" events.\n   * These events are fired as the user drags their fingers across a trackpad.\n   * Unfortunately, browsers are missing a critical event — there is no event\n   * when the user *stops* a gestured on the trackpad or mouse wheel.\n   *\n   * To make things worse, the mainstream browsers continue to generate fake\n   * wheel events even after the user has stopped dragging their fingers. These\n   * fake events simulate the user gradually slowing down the drag until they\n   * come to a smooth stop. In some contexts, these fake wheel events might be\n   * helpful, but in trying to supply typical trackpad swipe navigation, these\n   * fake events get in the way.\n   *\n   * This component uses heuristics to work around these problems, but the\n   * complex nature of the problem make it extremely difficult to achieve the\n   * same degree of trackpad responsiveness possible with native applications.\n   */\n  class TrackpadDirection extends base {\n\n    constructor() {\n      super();\n      this.addEventListener('wheel', event => {\n        const handled = wheel(this, event);\n        if (handled) {\n          event.preventDefault();\n        }\n      });\n      resetWheelTracking(this);\n    }\n\n    // Default implementation.\n    get [symbols.dragging]() {\n      return super[symbols.dragging];\n    }\n    set [symbols.dragging](value) {\n      if (symbols.dragging in base.prototype) { super[symbols.dragging] = value; }\n    }\n\n    /**\n     * Invoked when the user wants to go/navigate left.\n     * The default implementation of this method does nothing.\n     */\n    [symbols.goLeft]() {\n      if (super[symbols.goLeft]) { return super[symbols.goLeft](); }\n    }\n\n    /**\n     * Invoked when the user wants to go/navigate right.\n     * The default implementation of this method does nothing.\n     */\n    [symbols.goRight]() {\n      if (super[symbols.goRight]) { return super[symbols.goRight](); }\n    }\n\n    /**\n     * The distance the user has moved the first touchpoint since the beginning\n     * of a trackpad/wheel operation, expressed as a fraction of the element's\n     * width.\n     *\n     * @type number\n     */\n    get travelFraction() {\n      return super.travelFraction;\n    }\n    set travelFraction(value) {\n      if ('travelFraction' in base.prototype) { super.travelFraction = value; }\n    }\n\n  }\n\n  return TrackpadDirection;\n};\n\n\n// Time we wait following a navigation before paying attention to wheel\n// events again.\nconst POST_NAVIGATE_TIME = 250;\n\n// Time we wait after the last wheel event before we reset things.\nconst WHEEL_TIME = 100;\n\n\n// Following a navigation, partially reset our wheel tracking.\nfunction postNavigate(element) {\n  element.travelFraction = 0;\n  element[wheelDistanceSymbol] = 0;\n  element[postNavigateDelayCompleteSymbol] = true;\n  element[absorbDecelerationSymbol] = true;\n  setTimeout(() => {\n    element[postNavigateDelayCompleteSymbol] = false;\n  }, POST_NAVIGATE_TIME);\n}\n\n// Reset all state related to the tracking of the wheel.\nfunction resetWheelTracking(element) {\n  element.travelFraction = 0;\n  element[wheelDistanceSymbol] = 0;\n  element[lastDeltaXSymbol] = 0;\n  element[absorbDecelerationSymbol] = false;\n  element[postNavigateDelayCompleteSymbol] = false;\n  if (element[lastWheelTimeoutSymbol]) {\n    clearTimeout(element[lastWheelTimeoutSymbol]);\n    element[lastWheelTimeoutSymbol] = null;\n  }\n}\n\n// Define our own sign function, since (as of May 2015), Safari and IE don't\n// supply Math.sign().\nfunction sign(x) {\n  return (x === 0) ?\n    0 :\n    (x > 0) ?\n      1 :\n      -1;\n}\n\n// TODO: Damping, or some other treatment for going past the ends.\n\n/*\n * A wheel event has been generated. This could be a real wheel event, or it\n * could be fake (see notes in the header).\n *\n * This handler uses several strategies to try to approximate native trackpad\n * swipe navigation.\n *\n * If the user has dragged enough to cause a navigation, then for a short\n * delay following that navigation, subsequent wheel events will be ignored.\n *\n * Furthermore, follwowing a navigation, we ignore all wheel events until we\n * receive at least one event where the event's deltaX (distance traveled) is\n * *greater* than the previous event's deltaX. This helps us filter out the\n * fake wheel events generated by the browser to simulate deceleration.\n *\n */\nfunction wheel(element, event) {\n\n  // Since we have a new wheel event, reset our timer waiting for the last\n  // wheel event to pass.\n  if (element[lastWheelTimeoutSymbol]) {\n    clearTimeout(element[lastWheelTimeoutSymbol]);\n  }\n  element[lastWheelTimeoutSymbol] = setTimeout(() => {\n    wheelTimedOut(element);\n  }, WHEEL_TIME);\n\n  const deltaX = event.deltaX;\n  const deltaY = event.deltaY;\n\n  // See if element event represents acceleration or deceleration.\n  const acceleration = sign(deltaX) * (deltaX - element[lastDeltaXSymbol]);\n  element[lastDeltaXSymbol] = deltaX;\n\n  if (Math.abs(deltaX) < Math.abs(deltaY)) {\n    // Move was mostly vertical. The user may be trying scroll with the\n    // trackpad/wheel. To be on the safe, we ignore such events.\n    return false;\n  }\n\n  if (element[postNavigateDelayCompleteSymbol]) {\n    // It's too soon after a navigation; ignore the event.\n    return true;\n  }\n\n  if (acceleration > 0) {\n    // The events are not (or are no longer) decelerating, so we can start\n    // paying attention to them again.\n    element[absorbDecelerationSymbol] = false;\n  } else if (element[absorbDecelerationSymbol]) {\n    // The wheel event was likely faked to simulate deceleration; ignore it.\n    return true;\n  }\n\n  element[wheelDistanceSymbol] += deltaX;\n\n  // Update the travel fraction of the element being navigated.\n  const width = element.offsetWidth;\n  let travelFraction = width > 0 ?\n    element[wheelDistanceSymbol] / width :\n    0;\n  element[symbols.dragging] = true;\n  travelFraction = sign(travelFraction) * Math.min(Math.abs(travelFraction), 1);\n  element.travelFraction = travelFraction;\n\n  // If the user has dragged enough to reach the previous/next item, then\n  // complete a navigation to that item.\n  if (travelFraction === 1) {\n    element[symbols.dragging] = false;\n    element[symbols.goRight]();\n    postNavigate(element);\n  } else if (travelFraction === -1) {\n    element[symbols.dragging] = false;\n    element[symbols.goLeft]();\n    postNavigate(element);\n  }\n\n  return true;\n}\n\n// A sufficiently long period of time has passed since the last wheel event.\n// We snap the selection to the closest item, then reset our state.\nfunction wheelTimedOut(element) {\n\n  // Snap to the closest item.\n  element[symbols.dragging] = false;\n  const travelFraction = element.travelFraction;\n  if (travelFraction >= 0.5) {\n    element[symbols.goRight]();\n  } else if (travelFraction <= -0.5) {\n    element[symbols.goLeft]();\n  }\n\n  // TODO: Listen for the transition to complete, and then restore\n  // dragging to false (or the previous value).\n\n  resetWheelTracking(element);\n}\n","/**\n * Helper function to create a symbol that can be used for associating private\n * data with an element.\n *\n * Mixins and component classes often want to associate private data with an\n * element instance, but JavaScript does not have direct support for true\n * private properties. One approach is to use the\n * [Symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol)\n * data type to set and retrieve data on an element.\n *\n * Unfortunately, the Symbol type is not available in Internet Explorer 11. The\n * `createSymbol` helper function exists as a workaround for IE 11. Rather than\n * returning a true Symbol, it simply returns an underscore-prefixed string.\n *\n * Usage:\n *\n *     const fooSymbol = createSymbol('foo');\n *\n *     class MyElement extends HTMLElement {\n *       get foo() {\n *         return this[fooSymbol];\n *       }\n *       set foo(value) {\n *         this[fooSymbol] = value;\n *       }\n *     }\n *\n * In IE 11, this sample will \"hide\" data behind an instance property this._foo.\n * The use of the underscore is meant to reduce (not eliminate) the potential\n * for name conflicts, and discourage (not prevent) external access to this\n * data. In modern browsers, the above code will eliminate the potential of\n * naming conflicts, and better hide the data behind a real Symbol.\n *\n * @function createSymbol\n * @param {string} description - A string to identify the symbol when debugging\n */\nexport default function createSymbol(description) {\n  return typeof Symbol === 'function' ?\n    Symbol(description) :\n    `_${description}`;\n}\n","/*\n * Microtask helper for IE 11.\n *\n * Executing a function as a microtask is trivial in browsers that support\n * promises, whose then() clauses use microtask timing. IE 11 doesn't support\n * promises, but does support MutationObservers, which are also executed as\n * microtasks. So this helper uses an MutationObserver to achieve microtask\n * timing.\n *\n * See https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/\n *\n * Inspired by Polymer's async() function.\n */\n\n\n// The queue of pending callbacks to be executed as microtasks.\nconst callbacks = [];\n\n// Create an element that we will modify to force observable mutations.\nconst element = document.createTextNode('');\n\n// A monotonically-increasing value.\nlet counter = 0;\n\n\n/**\n * Add a callback to the microtask queue.\n *\n * This uses a MutationObserver so that it works on IE 11.\n *\n * NOTE: IE 11 may actually use timeout timing with MutationObservers. This\n * needs more investigation.\n *\n * @function microtask\n * @param {function} callback\n */\nexport default function microtask(callback) {\n  callbacks.push(callback);\n  // Force a mutation.\n  element.textContent = ++counter;\n}\n\n\n// Execute any pending callbacks.\nfunction executeCallbacks() {\n  while (callbacks.length > 0) {\n    const callback = callbacks.shift();\n    callback();\n  }\n}\n\n\n// Create the observer.\nconst observer = new MutationObserver(executeCallbacks);\nobserver.observe(element, {\n  characterData: true\n});\n","/**\n * Helper function for rendering an array of items as elements.\n *\n * This is not a mixin, but a function components can use if they need to\n * generate a set of elements for the items in an array.\n *\n * This function will reuse existing elements if possible. E.g., if it is called\n * to render an array of 4 items, and later called to render an array of 5\n * items, it can reuse the existing 4 items, creating just one new element.\n * Note, however, that this re-rendering is not automatic. If, after calling\n * this function, you manipulate the array you used, you must still call this\n * function again to re-render the array.\n *\n * The `renderItem` parameter takes a function of two arguments: an item to\n * to render, and an existing element (if one exists) which can be repurposed to\n * render that item. If the latter argument is null, the `renderItem()` function\n * should create a new element and return it. The function should do the same\n * if the supplied existing element is not suitable for rendering the given\n * item; the returned element will be used to replace the existing one. If the\n * existing element *is* suitable, the function can simply update it and return\n * it as is.\n *\n * Example: The following will render an array of strings in divs as children\n * of the `container` element:\n *\n *     let strings = ['a', 'b', 'c', ...];\n *     let container = this.querySelector(...);\n *     renderArrayAsElements(strings, container, (string, element) => {\n *       if (!element) {\n *         // No element exists yet, so create a new one.\n *         element = document.createElement('div');\n *       }\n *       // Set/update the text content of the element.\n *       element.textContent = string;\n *       return element;\n *     });\n *\n * @param {Array} items - the items to render\n * @param {HTMLElement} container - the parent that will hold the elements\n * @param {function} renderItem - returns a new element for an item, or\n *                                repurposes an existing element for an item\n */\nfunction renderArrayAsElements(items, container, renderItem) {\n  // Create a new set of elements for the current items.\n  items.forEach((item, index) => {\n    const oldElement = container.childNodes[index];\n    const newElement = renderItem(item, oldElement);\n    if (newElement) {\n      if (!oldElement) {\n        container.appendChild(newElement);\n      } else if (newElement !== oldElement) {\n        container.replaceChild(newElement, oldElement);\n      }\n    }\n  });\n\n  // If the array shrank, remove the extra elements which are no longer needed.\n  while (container.childNodes.length > items.length) {\n    container.removeChild(container.childNodes[items.length]);\n  }\n}\n\nexport default renderArrayAsElements;\n","import createSymbol from './createSymbol';\nimport toggleClass from './toggleClass';\n\n\n// Symbols for private data members on an element.\nconst safeToSetAttributesSymbol = createSymbol('safeToSetAttributes');\nconst pendingAttributesSymbol = createSymbol('pendingAttributes');\nconst pendingClassesSymbol = createSymbol('pendingClasses');\n\n\n/**\n * Helper functions for updating attributes, including the `class` attribute.\n */\nexport default {\n\n  /**\n   * Perform any pending updates to attributes and classes.\n   *\n   * This writes any `setAttribute` or `toggleClass` values that were performed\n   * before an element was attached to the document for the first time.\n   *\n   * This method should be called by mixins/components in their\n   * `connectedCallback`. If mulitple mixins/components invoke this during the\n   * same `connectedCallback`, only the first call will have any effect. The\n   * subsequent calls will be harmless.\n   *\n   * @param {HTMLElement} element - The element being added to the document.\n   */\n  connected(element) {\n    element[safeToSetAttributesSymbol] = true;\n\n    // Set any pending attributes.\n    if (element[pendingAttributesSymbol]) {\n      for (let attribute in element[pendingAttributesSymbol]) {\n        const value = element[pendingAttributesSymbol][attribute];\n        setAttributeToElement(element, attribute, value);\n      }\n      element[pendingAttributesSymbol] = null;\n    }\n\n    // Set any pending classes.\n    if (element[pendingClassesSymbol]) {\n      for (let className in element[pendingClassesSymbol]) {\n        const value = element[pendingClassesSymbol][className];\n        toggleClass(element, className, value);\n      }\n      element[pendingClassesSymbol] = null;\n    }\n  },\n\n  /**\n   * Set/unset the attribute with the indicated name.\n   *\n   * This method exists primarily to handle the case where an element wants to\n   * set a default property value that should be reflected as an attribute. An\n   * important limitation of custom element consturctors is that they cannot\n   * set attributes. A call to `setAttribute` during the constructor will\n   * be deferred until the element is connected to the document.\n   *\n   * @param {string} attribute - The name of the *attribute* (not property) to set.\n   * @param {object} value - The value to set. If null, the attribute will be removed.\n   */\n  setAttribute(element, attribute, value) {\n    if (element[safeToSetAttributesSymbol]) {\n      // Safe to set attributes immediately.\n      setAttributeToElement(element, attribute, value);\n    } else {\n      // Defer setting attributes until the first time we're connected.\n      if (!element[pendingAttributesSymbol]) {\n        element[pendingAttributesSymbol] = {};\n      }\n      element[pendingAttributesSymbol][attribute] = value;\n    }\n  },\n\n  /**\n   * Set/unset the class with the indicated name.\n   *\n   * This method exists primarily to handle the case where an element wants to\n   * set a default property value that should be reflected as as class. An\n   * important limitation of custom element consturctors is that they cannot\n   * set attributes, including the `class` attribute. A call to\n   * `toggleClass` during the constructor will be deferred until the element\n   * is connected to the document.\n   *\n   * @param {string} className - The name of the class to set.\n   * @param {object} value - True to set the class, false to remove it.\n   */\n  toggleClass(element, className, value) {\n    if (element[safeToSetAttributesSymbol]) {\n      // Safe to set class immediately.\n      toggleClass(element, className, value);\n    } else {\n      // Defer setting class until the first time we're connected.\n      if (!element[pendingClassesSymbol]) {\n        element[pendingClassesSymbol] = {};\n      }\n      element[pendingClassesSymbol][className] = value;\n    }\n  }\n\n};\n\n\n// Reflect the attribute to the given element.\n// If the value is null, remove the attribute.\nfunction setAttributeToElement(element, attributeName, value) {\n  if (value === null || typeof value === 'undefined') {\n    element.removeAttribute(attributeName);\n  } else {\n    const text = String(value);\n    // Avoid recursive attributeChangedCallback calls.\n    if (element.getAttribute(attributeName) !== text) {\n      element.setAttribute(attributeName, value);\n    }\n  }\n}\n","import createSymbol from './createSymbol';\n\n/**\n * A collection of Symbol objects for standard component properties and methods.\n *\n * These Symbol objects are used to allow mixins and a component to internally\n * communicate, without exposing these properties and methods in the component's\n * public API.\n *\n * To use these Symbol objects in your own component, include this module and\n * then create a property or method whose key is the desired Symbol.\n *\n *     import 'SingleSelectionMixin' from 'basic-component-mixins/src/SingleSelectionMixin';\n *     import 'symbols' from 'basic-component-mixins/src/symbols';\n *\n *     class MyElement extends SingleSelectionMixin(HTMLElement) {\n *       [symbols.itemSelected](item, selected) {\n *         // This will be invoked whenever an item is selected/deselected.\n *       }\n *     }\n *\n * @module symbols\n */\nconst symbols = {\n\n  /**\n   * Symbol for the `defaults` property.\n   *\n   * This property can be used to set or override defaults that will be applied\n   * to a new component instance. When implementing this property, take care to\n   * first acquire any defaults defined by the superclass. The standard idiom is\n   * as follows:\n   *\n   *     get [symbols.defaults]() {\n   *       const defaults = super[symbols.defaults] || {};\n   *       // Set or override default values here\n   *       defaults.customProperty = false;\n   *       return defaults;\n   *     }\n   *\n   * @var {object} defaults\n   */\n  defaults: createSymbol('defaults'),\n\n  /**\n   * Symbol for the `dragging` property.\n   *\n   * Components like carousels often define animated CSS transitions for\n   * sliding effects. Such a transition should usually *not* be applied while\n   * the user is dragging, because a CSS animation will introduce a lag that\n   * makes the swipe feel sluggish. Instead, as long as the user is dragging\n   * with their finger down, the transition should be suppressed. When the\n   * user releases their finger, the transition can be restored, allowing the\n   * animation to show the carousel sliding into its final position.\n   *\n   * @type {boolean} true if a drag is in progress, false if not.\n   */\n  dragging: createSymbol('dragging'),\n\n  /**\n   * Symbol for the `goDown` method.\n   *\n   * This method is invoked when the user wants to go/navigate down.\n   *\n   * @function goDown\n   */\n  goDown: createSymbol('goDown'),\n\n  /**\n   * Symbol for the `goEnd` method.\n   *\n   * This method is invoked when the user wants to go/navigate to the end (e.g.,\n   * of a list).\n   *\n   * @function goEnd\n   */\n  goEnd: createSymbol('goEnd'),\n\n  /**\n   * Symbol for the `goLeft` method.\n   *\n   * This method is invoked when the user wants to go/navigate left.\n   *\n   * @function goLeft\n   */\n  goLeft: createSymbol('goLeft'),\n\n  /**\n   * Symbol for the `goRight` method.\n   *\n   * This method is invoked when the user wants to go/navigate right.\n   *\n   * @function goRight\n   */\n  goRight: createSymbol('goRight'),\n\n  /**\n   * Symbol for the `goStart` method.\n   *\n   * This method is invoked when the user wants to go/navigate to the start\n   * (e.g., of a list).\n   *\n   * @function goStart\n   */\n  goStart: createSymbol('goStart'),\n\n  /**\n   * Symbol for the `goUp` method.\n   *\n   * This method is invoked when the user wants to go/navigate up.\n   *\n   * @function goUp\n   */\n  goUp: createSymbol('goUp'),\n\n  /**\n   * Symbol for the `itemAdded` method.\n   *\n   * This method is invoked when a new item is added to a list.\n   *\n   * @function itemAdded\n   * @param {HTMLElement} item - the item being selected/deselected\n   */\n  itemAdded: createSymbol('itemAdded'),\n\n\n  /**\n   * Symbol for the `itemsChanged` method.\n   *\n   * This method is invoked when the underlying contents change. It is also\n   * invoked on component initialization – since the items have \"changed\" from\n   * being nothing.\n   */\n  itemsChanged: createSymbol('itemsChanged'),\n\n  /**\n   * Symbol for the `itemSelected` method.\n   *\n   * This method is invoked when an item becomes selected or deselected.\n   *\n   * @function itemSelected\n   * @param {HTMLElement} item - the item being selected/deselected\n   * @param {boolean} selected - true if the item is selected, false if not\n   */\n  itemSelected: createSymbol('itemSelected'),\n\n  /**\n   * Symbol for the `keydown` method.\n   *\n   * This method is invoked when an element receives a `keydown` event.\n   *\n   * @function keydown\n   * @param {KeyboardEvent} event - the event being processed\n   */\n  keydown: createSymbol('keydown'),\n\n  /**\n   * Symbol for the `template` property.\n   *\n   * This property returns a component's template.\n   *\n   * @type {string|HTMLElement}\n   */\n  template: createSymbol('template')\n};\n\nexport default symbols;\n","/**\n * Helper function for standard classList.toggle() behavior on old browsers,\n * namely IE 11.\n *\n * The standard\n * [classlist](https://developer.mozilla.org/en-US/docs/Web/API/Element/classList)\n * object has a `toggle()` function that supports a second Boolean parameter\n * that can be used to succinctly turn a class on or off. This feature is often\n * useful in designing custom elements, which may want to externally reflect\n * component state in a CSS class that can be used for styling purposes.\n *\n * Unfortunately, IE 11 does not support the Boolean parameter to\n * `classList.toggle()`. This helper function behaves like the standard\n * `toggle()`, including support for the Boolean parameter, so that it can be\n * used even on IE 11.\n *\n * @function toggleClass\n * @param {HTMLElement} element - The element to modify\n * @param {string} className - The class to add/remove\n * @param {boolean} [force] - Force the class to be added (if true) or removed\n *                            (if false)\n */\nexport default function toggleClass(element, className, force) {\n  const classList = element.classList;\n  const addClass = (typeof force === 'undefined') ?\n    !classList.contains(className) :\n    force;\n  if (addClass) {\n    classList.add(className);\n  } else {\n    classList.remove(className);\n  }\n  return addClass;\n}\n","import AttributeMarshallingMixin from '../../basic-component-mixins/src/AttributeMarshallingMixin';\nimport ComposableMixin from '../../basic-component-mixins/src/ComposableMixin';\nimport DistributedChildrenMixin from '../../basic-component-mixins/src/DistributedChildrenMixin';\nimport ShadowElementReferencesMixin from '../../basic-component-mixins/src/ShadowElementReferencesMixin';\nimport ShadowTemplateMixin from '../../basic-component-mixins/src/ShadowTemplateMixin';\n\n\n/**\n * A sample general-purpose base class for defining custom elements that mixes\n * in some common features: template stamping into a shadow root, shadow element\n * references, marshalling attributes to properties, and retrieving the children\n * distributed to a component.\n *\n * This base class is not special in any way, and is defined only as a\n * convenient shorthand for applying the mixins listed above. You can use this\n * class as a base class for your own elements, or easily create your own base\n * class by applying the same set of mixins.\n *\n * The ElementBase base class does not register itself as a custom element with\n * the browser, and hence cannot be independently instantiated.\n *\n * @mixes AttributeMarshallingMixin\n * @mixes ComposableMixin\n * @mixes DistributedChildrenMixin\n * @mixes ShadowElementReferencesMixin\n * @mixes ShadowTemplateMixin\n */\nclass ElementBase extends ComposableMixin(HTMLElement).compose(\n  ShadowTemplateMixin,          // before node finding, so shadow root is populated\n  ShadowElementReferencesMixin, // before marshalling, so properties can use refs\n  AttributeMarshallingMixin,\n  DistributedChildrenMixin\n) {}\n\nexport default ElementBase;\n","import AnimationStage from '../../basic-animation-stage/src/AnimationStage';\nimport PageDotsMixin from '../../basic-component-mixins/src/PageDotsMixin';\n\nclass AnimationStageWithDots extends PageDotsMixin(AnimationStage) {}\ncustomElements.define('animation-stage-with-dots', AnimationStageWithDots);\n\nexport default AnimationStageWithDots;\n","import ArrowSelectionMixin from '../../basic-component-mixins/src/ArrowSelectionMixin';\nimport Carousel from '../../basic-carousel/src/Carousel';\n\nclass CarouselWithArrows extends ArrowSelectionMixin(Carousel) {}\ncustomElements.define('carousel-with-arrows', CarouselWithArrows);\n\nexport default CarouselWithArrows;\n","import ArrowSelectionMixin from '../../basic-component-mixins/src/ArrowSelectionMixin';\nimport Carousel from '../../basic-carousel/src/Carousel';\nimport PageDotsMixin from '../../basic-component-mixins/src/PageDotsMixin';\n\nclass CarouselWithArrows extends Carousel.compose(\n  ArrowSelectionMixin,\n  PageDotsMixin\n) {}\ncustomElements.define('carousel-with-arrows-and-dots', CarouselWithArrows);\n\nexport default CarouselWithArrows;\n","import Carousel from '../../basic-carousel/src/Carousel';\nimport PageDotsMixin from '../../basic-component-mixins/src/PageDotsMixin';\n\nclass CarouselWithDots extends PageDotsMixin(Carousel) {}\ncustomElements.define('carousel-with-dots', CarouselWithDots);\n\nexport default CarouselWithDots;\n"]}