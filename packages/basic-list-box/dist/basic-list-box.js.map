{"version":3,"sources":["node_modules/browser-pack/_prelude.js","packages/basic-component-mixins/src/AttributeMarshallingMixin.js","packages/basic-component-mixins/src/ClickSelectionMixin.js","packages/basic-component-mixins/src/ComposableMixin.js","packages/basic-component-mixins/src/ContentItemsMixin.js","packages/basic-component-mixins/src/DirectionSelectionMixin.js","packages/basic-component-mixins/src/DistributedChildrenContentMixin.js","packages/basic-component-mixins/src/DistributedChildrenMixin.js","packages/basic-component-mixins/src/GenericMixin.js","packages/basic-component-mixins/src/KeyboardDirectionMixin.js","packages/basic-component-mixins/src/KeyboardMixin.js","packages/basic-component-mixins/src/KeyboardPagedSelectionMixin.js","packages/basic-component-mixins/src/KeyboardPrefixSelectionMixin.js","packages/basic-component-mixins/src/SelectedItemTextValueMixin.js","packages/basic-component-mixins/src/SelectionAriaActiveMixin.js","packages/basic-component-mixins/src/SelectionHighlightMixin.js","packages/basic-component-mixins/src/SelectionInViewMixin.js","packages/basic-component-mixins/src/ShadowElementReferencesMixin.js","packages/basic-component-mixins/src/ShadowTemplateMixin.js","packages/basic-component-mixins/src/SingleSelectionMixin.js","packages/basic-component-mixins/src/createSymbol.js","packages/basic-component-mixins/src/microtask.js","packages/basic-component-mixins/src/safeAttributes.js","packages/basic-component-mixins/src/symbols.js","packages/basic-component-mixins/src/toggleClass.js","packages/basic-element-base/src/ElementBase.js","packages/basic-list-box/globals.js","packages/basic-list-box/src/ListBox.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","attributeToPropertyName","attributeName","propertyName","attributeToPropertyNames","hypenRegEx","replace","match","toUpperCase","attributesForClass","classFn","HTMLElement","Object","baseClass","getPrototypeOf","prototype","constructor","baseAttributes","propertyNames","getOwnPropertyNames","setterNames","filter","getOwnPropertyDescriptor","set","attributes","map","setterName","propertyNameToAttribute","diff","attribute","indexOf","concat","propertyNamesToAttributes","uppercaseRegEx","toLowerCase","_safeAttributes","base","AttributeMarshalling","_base","_classCallCheck","this","_possibleConstructorReturn","__proto__","apply","arguments","_inherits","_createClass","key","value","oldValue","newValue","_get","_safeAttributes2","default","connected","setAttribute","className","toggleClass","get","indexOfContainingItem","element","target","items","itemCount","item","contains","ClickSelection","_this","addEventListener","event","path","index","selectedIndex","stopPropagation","_set","composeClass","mixin","Subclass","_base2","copyOwnProperties","NON_MIXABLE_OBJECT_PROPERTIES","source","ignorePropertyNames","undefined","forEach","name","descriptor","defineProperty","Composable","_len","mixins","Array","_key","reduce","filterAuxiliaryElements","auxiliaryTags","localName","_createSymbol","_toggleClass","_symbols","itemsSymbol","_createSymbol2","itemInitializedSymbol","ContentItems","_symbols2","itemsChanged","itemAdded","itemSelected","selected","_toggleClass2","_this2","dispatchEvent","CustomEvent","content","DirectionSelection","goDown","selectNext","goEnd","selectLast","goLeft","selectPrevious","goRight","goStart","selectFirst","goUp","selectedFraction","_microtask","DistributedChildrenContent","shadowRoot","slots","querySelectorAll","slot","contentChanged","_microtask2","distributedChildren","console","warn","expandContentElements","nodes","includeTextNodes","_ref","expanded","node","isSlot","HTMLSlotElement","assignedNodes","flatten","Text","flattened","_toConsumableArray","DistributedChildren","children","childNodes","strings","distributedChildNodes","child","textContent","join","genericSymbol","Generic","generic","defaults","parsed","String","removeAttribute","navigationAxisSymbol","KeyboardDirection","navigationAxis","keydown","handled","axis","horizontal","vertical","keyCode","metaKey","altKey","Keyboard","preventDefault","getAttribute","tabindex","getIndexOfItemAtY","y","downward","start","end","step","scrollTarget","topOfClientArea","offsetTop","clientTop","itemIndex","itemTop","found","itemBottom","offsetHeight","itemStyle","getComputedStyle","itemPaddingTop","parseFloat","paddingTop","itemPaddingBottom","paddingBottom","contentTop","contentBottom","clientHeight","scrollOnePage","edge","scrollTop","indexOfItemAtEdge","newIndex","delta","KeyboardPagedSelection","pageUp","pageDown","getIndexOfItemWithTextPrefix","prefix","itemTextContents","getItemTextContents","prefixLength","itemTextContent","substr","itemTextContentsSymbol","text","alt","handleBackspace","typedPrefixSymbol","selectItemWithTextPrefix","setPrefixTimeout","handlePlainCharacter","char","resetPrefixTimeout","prefixTimeoutSymbol","clearTimeout","resetTypedPrefix","setTimeout","PREFIX_TIMEOUT_DURATION","KeyboardPrefixSelection","resetPrefix","ctrlKey","which","fromCharCode","SelectedItemTextValue","selectedItem","currentIndex","idCount","SelectionAriaActive","role","id","baseId","itemId","SelectionHighlight","template","baseTemplate","SelectionInView","scrollItemIntoView","elementTop","elementBottom","scrollBottom","ShadowElementReferences","$","nodesWithIds","createTemplateWithInnerHTML","innerHTML","document","createElement","div","appendChild","shimTemplateStyles","tag","window","WebComponents","ShadowCSS","shimStyling","ShadowTemplate","ShadowDOMPolyfill","root","attachShadow","mode","clone","importNode","selectIndex","count","boundedIndex","selectionWraps","Math","max","min","previousIndex","trackSelectedItem","previousSelectedItem","indexInCurrentItems","previousSelectedIndex","newSelectedIndex","selectionRequired","updatePossibleNavigations","canSelectNext","canSelectPrevious","canSelectNextSymbol","canSelectPreviousSymbol","selectionRequiredSymbol","selectionWrapsSymbol","externalSelectedIndexSymbol","externalSelectedItemSymbol","internalSelectedIndexSymbol","internalSelectedItemSymbol","SingleSelection","previousCanSelectNext","previousCanSelectPrevious","hasItems","detail","createSymbol","description","Symbol","microtask","callback","callbacks","push","counter","executeCallbacks","shift","createTextNode","observer","MutationObserver","observe","characterData","setAttributeToElement","safeToSetAttributesSymbol","pendingAttributesSymbol","pendingClassesSymbol","_value","_toggleClass3","symbols","dragging","force","classList","addClass","add","remove","_AttributeMarshallingMixin","_ComposableMixin","_DistributedChildrenMixin","_ShadowElementReferencesMixin","_ShadowTemplateMixin","ElementBase","_ComposableMixin2","compose","_ShadowTemplateMixin2","_ShadowElementReferencesMixin2","_AttributeMarshallingMixin2","_DistributedChildrenMixin2","_ListBox","Basic","ListBox","_ListBox2","_ElementBase","_DistributedChildrenContentMixin","_ClickSelectionMixin","_ContentItemsMixin","_DirectionSelectionMixin","_GenericMixin","_KeyboardMixin","_KeyboardDirectionMixin","_KeyboardPagedSelectionMixin","_KeyboardPrefixSelectionMixin","_SelectedItemTextValueMixin","_SelectionAriaActiveMixin","_SelectionHighlightMixin","_SelectionInViewMixin","_SingleSelectionMixin","itemsContainer","_ElementBase2","_ClickSelectionMixin2","_ContentItemsMixin2","_DirectionSelectionMixin2","_DistributedChildrenContentMixin2","_GenericMixin2","_KeyboardMixin2","_KeyboardDirectionMixin2","_KeyboardPagedSelectionMixin2","_KeyboardPrefixSelectionMixin2","_SelectedItemTextValueMixin2","_SelectionAriaActiveMixin2","_SelectionHighlightMixin2","_SelectionInViewMixin2","_SingleSelectionMixin2","customElements","define"],"mappings":"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","file":"basic-list-box.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import safeAttributes from './safeAttributes';\n\n\n// Memoized maps of attribute to property names and vice versa.\nconst attributeToPropertyNames = {};\nconst propertyNamesToAttributes = {};\n\n\n/* Exported function extends a base class with AttributeMarshalling. */\nexport default (base) => {\n\n  /**\n   * Mixin which marshalls attributes to properties and vice versa.\n   *\n   * If your component exposes a setter for a property, it's generally a good\n   * idea to let devs using your component be able to set that property in HTML\n   * via an element attribute. You can code that yourself by writing an\n   * `attributeChangedCallback`, or you can use this mixin to get a degree of\n   * automatic support.\n   *\n   * This mixin implements an `attributeChangedCallback` that will attempt to\n   * convert a change in an element attribute into a call to the corresponding\n   * property setter. Attributes typically follow hyphenated names (\"foo-bar\"),\n   * whereas properties typically use camelCase names (\"fooBar\"). This mixin\n   * respects that convention, automatically mapping the hyphenated attribute\n   * name to the corresponding camelCase property name.\n   *\n   * Example: You define a component using this mixin:\n   *\n   *     class MyElement extends AttributeMarshallingMixin(HTMLElement) {\n   *       get fooBar() { return this._fooBar; }\n   *       set fooBar(value) { this._fooBar = value; }\n   *     }\n   *     customElements.define('my-element', MyElement);\n   *\n   * If someone then instantiates your component in HTML:\n   *\n   *     <my-element foo-bar=\"Hello\"></my-element>\n   *\n   * Then, after the element has been upgraded, the `fooBar` setter will\n   * automatically be invoked with the initial value \"Hello\".\n   *\n   * For the time being, this mixin only supports string-valued properties.\n   * If you'd like to convert string attributes to other types (numbers,\n   * booleans), you need to implement `attributeChangedCallback` yourself.\n   */\n  class AttributeMarshalling extends base {\n\n    /*\n     * Handle a change to the attribute with the given name.\n     */\n    attributeChangedCallback(attributeName, oldValue, newValue) {\n      if (super.attributeChangedCallback) { super.attributeChangedCallback(); }\n      const propertyName = attributeToPropertyName(attributeName);\n      // If the attribute name corresponds to a property name, set the property.\n      // Ignore standard HTMLElement properties handled by the DOM.\n      if (propertyName in this && !(propertyName in HTMLElement.prototype)) {\n        this[propertyName] = newValue;\n      }\n    }\n\n    connectedCallback() {\n      if (super.connectedCallback) { super.connectedCallback(); }\n      safeAttributes.connected(this);\n    }\n\n    static get observedAttributes() {\n      return attributesForClass(this);\n    }\n\n    /**\n     * Set/unset the attribute with the indicated name.\n     *\n     * This method exists primarily to handle the case where an element wants to\n     * set a default property value that should be reflected as an attribute. An\n     * important limitation of custom element consturctors is that they cannot\n     * set attributes. A call to `reflectAttribute` during the constructor will\n     * be deferred until the element is connected to the document.\n     *\n     * @param {string} attribute - The name of the *attribute* (not property) to set.\n     * @param {object} value - The value to set. If null, the attribute will be removed.\n     */\n    reflectAttribute(attribute, value) {\n      return safeAttributes.setAttribute(this, attribute, value);\n    }\n\n    /**\n     * Set/unset the class with the indicated name.\n     *\n     * This method exists primarily to handle the case where an element wants to\n     * set a default property value that should be reflected as as class. An\n     * important limitation of custom element consturctors is that they cannot\n     * set attributes, including the `class` attribute. A call to\n     * `reflectClass` during the constructor will be deferred until the element\n     * is connected to the document.\n     *\n     * @param {string} className - The name of the class to set.\n     * @param {object} value - True to set the class, false to remove it.\n     */\n    reflectClass(className, value) {\n      return safeAttributes.toggleClass(this, className, value);\n    }\n\n  }\n\n  return AttributeMarshalling;\n};\n\n\n// Convert hyphenated foo-bar attribute name to camel case fooBar property name.\nfunction attributeToPropertyName(attributeName) {\n  let propertyName = attributeToPropertyNames[attributeName];\n  if (!propertyName) {\n    // Convert and memoize.\n    const hypenRegEx = /-([a-z])/g;\n    propertyName = attributeName.replace(hypenRegEx,\n        match => match[1].toUpperCase());\n    attributeToPropertyNames[attributeName] = propertyName;\n  }\n  return propertyName;\n}\n\nfunction attributesForClass(classFn) {\n\n  // We treat the element base classes as if they have no attributes, since we\n  // don't want to receive attributeChangedCallback for them.\n  if (classFn === HTMLElement || classFn === Object) {\n    return [];\n  }\n\n  // Get attributes for parent class.\n  const baseClass = Object.getPrototypeOf(classFn.prototype).constructor;\n  const baseAttributes = attributesForClass(baseClass);\n\n  // Get attributes for this class.\n  const propertyNames = Object.getOwnPropertyNames(classFn.prototype);\n  const setterNames = propertyNames.filter(propertyName =>\n    typeof Object.getOwnPropertyDescriptor(\n        classFn.prototype, propertyName).set === 'function');\n  const attributes = setterNames.map(setterName =>\n      propertyNameToAttribute(setterName));\n\n  // Merge.\n  const diff = attributes.filter(attribute =>\n      baseAttributes.indexOf(attribute) < 0);\n  return baseAttributes.concat(diff);\n}\n\n// Convert a camel case fooBar property name to a hyphenated foo-bar attribute.\nfunction propertyNameToAttribute(propertyName) {\n  let attribute = propertyNamesToAttributes[propertyName];\n  if (!attribute) {\n    // Convert and memoize.\n    const uppercaseRegEx = /([A-Z])/g;\n    attribute = propertyName.replace(uppercaseRegEx, '-$1').toLowerCase();\n  }\n  return attribute;\n}\n","/* Exported function extends a base class with ClickSelection. */\nexport default (base) => {\n\n  /**\n   * Mixin which maps a click (actually, a mousedown) to a selection.\n   *\n   * This simple mixin is useful in list box-like elements, where a click on a\n   * list item implicitly selects it.\n   *\n   * This mixin expects the component to provide an `items` property. You can\n   * provide that property yourself, or use\n   * [ContentItemsMixin](ContentItemsMixin.md). This mixin also expects the\n   * component to define a `selectedIndex` property. You can provide that\n   * yourself, or use [SingleSelectionMixin](SingleSelectionMixin.md).\n   */\n  class ClickSelection extends base {\n\n    constructor() {\n      super();\n      /*\n       * REVIEW: Which event should we listen to here?\n       *\n       * The standard use for this mixin is in list boxes. List boxes don't\n       * appear to be consistent with regard to whether they select on mousedown\n       * or click/mouseup.\n       */\n      this.addEventListener('mousedown', event => {\n        // HACK: If the item is a button, the event seems to be raised in\n        // phase 2 (AT_TARGET), but the target is the component, not item.\n        // Need to invesigate.\n        const target = event.target === this ?\n          event.path[0] :\n          event.target;\n        const index = indexOfContainingItem(this, target);\n        if (index >= 0) {\n          this.selectedIndex = index;\n          // Note: We don't call preventDefault here. The default behavior for\n          // mousedown includes setting keyboard focus if the element doesn't\n          // already have the focus, and we want to preserve that behavior.\n          event.stopPropagation();\n        }\n      });\n    }\n\n    // Default implementation. This will typically be handled by other mixins.\n    get selectedIndex() {\n      return super.selectedIndex;\n    }\n    set selectedIndex(index) {\n      if ('selectedIndex' in base.prototype) { super.selectedIndex = index; }\n    }\n\n  }\n\n  return ClickSelection;\n};\n\n\n/*\n * Return index of the element items that either is or contains the indicated\n * target. Return -1 if not found.\n */\nfunction indexOfContainingItem(element, target) {\n  const items = element.items;\n  const itemCount = items ? items.length : 0;\n  for (let i = 0; i < itemCount; i++) {\n    let item = items[i];\n    if (item === target || item.contains(target)) {\n      return i;\n    }\n  }\n  return -1;\n}\n","/* Exported function extends a base class with Composable. */\nexport default (base) => {\n\n  /**\n   * Mixin to make a class more easily composable with other mixins.\n   *\n   * This mixin contributes a `compose` method that applies a set of mixin\n   * functions and returns the resulting new class. This sugar can make the\n   * application of many mixins at once easier to read.\n   */\n  class Composable extends base {\n\n    /**\n     * Apply a set of mixin functions or mixin objects to the present class and\n     * return the new class.\n     *\n     * Instead of writing:\n     *\n     *     let MyClass = Mixin1(Mixin2(Mixin3(Mixin4(Mixin5(BaseClass)))));\n     *\n     * You can write:\n     *\n     *     let MyClass = ComposableMixin(BaseClass).compose(\n     *       Mixin1,\n     *       Mixin2,\n     *       Mixin3,\n     *       Mixin4,\n     *       Mixin5\n     *     );\n     *\n     * This function can also take mixin objects. A mixin object is just a\n     * shorthand for a mixin function that creates a new subclass with the given\n     * members. The mixin object's members are *not* copied directly onto the\n     * prototype of the base class, as with traditional mixins.\n     *\n     * In addition to providing syntactic sugar, this mixin can be used to\n     * define a class in ES5, which lacks ES6's `class` keyword.\n     *\n     * @param {...mixins} mixins - A set of mixin functions or objects to apply.\n     */\n    static compose(...mixins) {\n      // We create a new subclass for each mixin in turn. The result becomes\n      // the base class extended by any subsequent mixins. It turns out that\n      // we can use Array.reduce() to concisely express this, using the current\n      // object as the seed for reduce().\n      return mixins.reduce(composeClass, this);\n    }\n\n  }\n\n  return Composable;\n};\n\n\n// Properties defined by Object that we don't want to mixin.\nconst NON_MIXABLE_OBJECT_PROPERTIES = [\n  'constructor'\n];\n\n/*\n * Apply the mixin to the given base class to return a new class.\n * The mixin can either be a function that returns the modified class, or a\n * plain object whose members will be copied to the new class' prototype.\n */\nfunction composeClass(base, mixin) {\n  if (typeof mixin === 'function') {\n    // Mixin function\n    return mixin(base);\n  } else {\n    // Mixin object\n    class Subclass extends base {}\n    copyOwnProperties(mixin, Subclass.prototype, NON_MIXABLE_OBJECT_PROPERTIES);\n    return Subclass;\n  }\n}\n\n\n/*\n * Copy the given properties/methods to the target.\n * Return the updated target.\n */\nfunction copyOwnProperties(source, target, ignorePropertyNames = []) {\n  Object.getOwnPropertyNames(source).forEach(name => {\n    if (ignorePropertyNames.indexOf(name) < 0) {\n      const descriptor = Object.getOwnPropertyDescriptor(source, name);\n      Object.defineProperty(target, name, descriptor);\n    }\n  });\n  return target;\n}\n","import createSymbol from './createSymbol';\nimport toggleClass from './toggleClass';\nimport symbols from './symbols';\n\n\n// Symbols for private data members on an element.\nconst itemsSymbol = createSymbol('items');\nconst itemInitializedSymbol = createSymbol('itemInitialized');\n\n\n/* Exported function extends a base class with ContentItems. */\nexport default (base) => {\n\n  /**\n   * Mixin which maps content semantics (elements) to list item semantics.\n   *\n   * Items differ from element contents in several ways:\n   *\n   * * They are often referenced via index.\n   * * They may have a selection state.\n   * * It's common to do work to initialize the appearance or state of a new\n   *   item.\n   * * Auxiliary invisible child elements are filtered out and not counted as\n   *   items. Auxiliary elements include link, script, style, and template\n   *   elements. This filtering ensures that those auxiliary elements can be\n   *   used in markup inside of a list without being treated as list items.\n   *\n   * This mixin expects a component to provide a `content` property returning a\n   * raw set of elements. You can provide that yourself, or use\n   * [DistributedChildrenContentMixin](DistributedChildrenContentMixin.md).\n   *\n   * The most commonly referenced property defined by this mixin is the `items`\n   * property. To avoid having to do work each time that property is requested,\n   * this mixin supports an optimized mode. If you invoke the `contentChanged`\n   * method when the set of items changes, the mixin concludes that you'll take\n   * care of notifying it of future changes, and turns on the optimization. With\n   * that on, the mixin saves a reference to the computed set of items, and will\n   * return that immediately on subsequent calls to the `items` property. If you\n   * use this mixin in conjunction with\n   * [DistributedChildrenContentMixin](DistributedChildrenContentMixin.md), the\n   * `contentChanged` method will be invoked for you when the element's children\n   * change, turning on the optimization automatically.\n   */\n  class ContentItems extends base {\n\n    contentChanged() {\n      if (super.contentChanged) { super.contentChanged(); }\n\n      // Since we got the contentChanged call, we'll assume we'll be notified if\n      // the set of items changes later. We turn on memoization of the items\n      // property by setting our internal property to null (instead of\n      // undefined).\n      this[itemsSymbol] = null;\n\n      this[symbols.itemsChanged]();\n    }\n\n    /**\n     * This method is invoked whenever a new item is added to the list.\n     *\n     * The default implementation of this method does nothing. You can override\n     * this to perform per-item initialization.\n     *\n     * @param {HTMLElement} item - The item that was added.\n     */\n    [symbols.itemAdded](item) {\n      if (super[symbols.itemAdded]) { super[symbols.itemAdded](item); }\n    }\n\n    /**\n     * The selection state for a single item has changed.\n     *\n     * Invoke this method to signal that the selected state of the indicated item\n     * has changed. By default, this applies a `selected` CSS class if the item\n     * is selected, and removed it if not selected.\n     *\n     * @param {HTMLElement} item - The item whose selection state has changed.\n     * @param {boolean} selected - True if the item is selected, false if not.\n     */\n    [symbols.itemSelected](item, selected) {\n      if (super[symbols.itemSelected]) { super[symbols.itemSelected](item, selected); }\n      toggleClass(item, 'selected', selected);\n    }\n\n    /**\n     * The current set of items in the list. See the top-level documentation for\n     * mixin for a description of how items differ from plain content.\n     *\n     * @type {HTMLElement[]}\n     */\n    get items() {\n      let items;\n      if (this[itemsSymbol] == null) {\n        items = filterAuxiliaryElements(this.content);\n        // Note: test for *equality* with null; don't treat undefined as a match.\n        if (this[itemsSymbol] === null) {\n          // Memoize the set of items.\n          this[itemsSymbol] = items;\n        }\n      } else {\n        // Return the memoized items.\n        items = this[itemsSymbol];\n      }\n      return items;\n    }\n\n    /**\n     * This method is invoked when the underlying contents change. It is also\n     * invoked on component initialization – since the items have \"changed\" from\n     * being nothing.\n     */\n    [symbols.itemsChanged]() {\n      if (super[symbols.itemsChanged]) { super[symbols.itemsChanged](); }\n\n      // Perform per-item initialization.\n      Array.prototype.forEach.call(this.items, item => {\n        if (!item[itemInitializedSymbol]) {\n          this[symbols.itemAdded](item);\n          item[itemInitializedSymbol] = true;\n        }\n      });\n\n      this.dispatchEvent(new CustomEvent('items-changed'));\n    }\n\n    /**\n     * Fires when the items in the list change.\n     *\n     * @memberof ContentItems\n     * @event items-changed\n     */\n  }\n\n  return ContentItems;\n};\n\n\n// Return the given elements, filtering out auxiliary elements that aren't\n// typically visible. Items which are not elements are returned as is.\nfunction filterAuxiliaryElements(items) {\n  const auxiliaryTags = [\n    'link',\n    'script',\n    'style',\n    'template'\n  ];\n  return [].filter.call(items, function(item) {\n    return !item.localName || auxiliaryTags.indexOf(item.localName) < 0;\n  });\n}\n","import symbols from './symbols';\n\n\n/* Exported function extends a base class with DirectionSelection. */\nexport default (base) => {\n\n  /**\n   * Mixin which maps direction semantics (goLeft, goRight, etc.) to selection\n   * semantics (selectPrevious, selectNext, etc.).\n   *\n   * This mixin can be used in conjunction with\n   * [KeyboardDirectionMixin](KeyboardDirectionMixin.md) (which maps keyboard\n   * events to directions) and a mixin that handles selection like\n   * [SingleSelectionMixin](SingleSelectionMixin.md).\n   */\n  class DirectionSelection extends base {\n\n    [symbols.goDown]() {\n      if (super[symbols.goDown]) { super[symbols.goDown](); }\n      return this.selectNext();\n    }\n\n    [symbols.goEnd]() {\n      if (super[symbols.goEnd]) { super[symbols.goEnd](); }\n      return this.selectLast();\n    }\n\n    [symbols.goLeft]() {\n      if (super[symbols.goLeft]) { super[symbols.goLeft](); }\n      return this.selectPrevious();\n    }\n\n    [symbols.goRight]() {\n      if (super[symbols.goRight]) { super[symbols.goRight](); }\n      return this.selectNext();\n    }\n\n    [symbols.goStart]() {\n      if (super[symbols.goStart]) { super[symbols.goStart](); }\n      return this.selectFirst();\n    }\n\n    [symbols.goUp]() {\n      if (super[symbols.goUp]) { super[symbols.goUp](); }\n      return this.selectPrevious();\n    }\n\n    // Default implementation. This will typically be handled by other mixins.\n    get selectedFraction() {\n      return super.selectedFraction;\n    }\n    set selectedFraction(value) {\n      if ('selectedFraction' in base.prototype) { super.selectedFraction = value; }\n    }\n\n    // Default implementation. This will typically be handled by other mixins.\n    selectFirst() {\n      if (super.selectFirst) { return super.selectFirst(); }\n    }\n\n    // Default implementation. This will typically be handled by other mixins.\n    selectLast() {\n      if (super.selectLast) { return super.selectLast(); }\n    }\n\n    // Default implementation. This will typically be handled by other mixins.\n    selectNext() {\n      if (super.selectNext) { return super.selectNext(); }\n    }\n\n    // Default implementation. This will typically be handled by other mixins.\n    selectPrevious() {\n      if (super.selectPrevious) { return super.selectPrevious(); }\n    }\n\n    // Map drag travel fraction to selection fraction.\n    get travelFraction() {\n      return super.travelFraction;\n    }\n    set travelFraction(value) {\n      if ('travelFraction' in base.prototype) { super.travelFraction = value; }\n      this.selectedFraction = value;\n    }\n\n  }\n\n  return DirectionSelection;\n};\n","import microtask from './microtask';\n\n\n/* Exported function extends a base class with DistributedChildrenContent. */\nexport default (base) => {\n\n  /**\n   * Mixin which defines a component's content as its children, expanding any\n   * nodes distributed to the component's slots.\n   *\n   * This also provides notification of changes to a component's content. It\n   * will invoke a `contentChanged` method when the component is first\n   * instantiated, and whenever its distributed children change. This is an\n   * easy way to satisfy the Gold Standard checklist item for monitoring\n   * [Content Changes](https://github.com/webcomponents/gold-standard/wiki/Content-Changes).\n   *\n   * Example:\n   *\n   * ```\n   * let base = DistributedChildrenContentMixin(DistributedChildrenMixin(HTMLElement));\n   * class CountingElement extends base {\n   *\n   *   constructor() {\n   *     super();\n   *     let root = this.attachShadow({ mode: 'open' });\n   *     root.innerHTML = `<slot></slot>`;\n   *   }\n   *\n   *   contentChanged() {\n   *     // Count the component's children, both initially and when changed.\n   *     this.count = this.distributedChildren.length;\n   *   }\n   *\n   * }\n   * ```\n   *\n   * Note that content change detection depends upon the element having at least\n   * one `slot` element in its shadow subtree.\n   *\n   * This mixin is intended for use with the\n   * [DistributedChildrenMixin](DistributedChildrenMixin.md). See that mixin for\n   * a discussion of how that works. This DistributedChildrenContentMixin\n   * provides an easy way of defining the \"content\" of a component as the\n   * component's distributed children. That in turn lets mixins like\n   * [ContentItemsMixin](ContentItemsMixin.md) manipulate the children as list\n   * items.\n   */\n  class DistributedChildrenContent extends base {\n\n    constructor() {\n      super();\n\n      if (this.shadowRoot) {\n        // Listen to changes on all slots.\n        const slots = this.shadowRoot.querySelectorAll('slot');\n        slots.forEach(slot => slot.addEventListener('slotchange', event => {\n          this.contentChanged();\n        }));\n      }\n\n      // Make an initial call to contentChanged() so that the component can do\n      // initialization that it normally does when content changes.\n      //\n      // This will invoke contentChanged() handlers in other mixins. In order\n      // that those mixins have a chance to complete their own initialization,\n      // we add the contentChanged() call to the microtask queue.\n      microtask(() => this.contentChanged());\n    }\n\n    /**\n     * Invoked when the contents of the component (including distributed\n     * children) have changed.\n     *\n     * This method is also invoked when a component is first instantiated; the\n     * contents have essentially \"changed\" from being nothing. This allows the\n     * component to perform initial processing of its children.\n     */\n    contentChanged() {\n      if (super.contentChanged) { super.contentChanged(); }\n      const event = new CustomEvent('content-changed');\n      this.dispatchEvent(event);\n    }\n\n    /**\n     * The content of this component, defined to be the flattened array of\n     * children distributed to the component.\n     *\n     * @type {HTMLElement[]}\n     */\n    get content() {\n      const distributedChildren = this.distributedChildren;\n      if (typeof distributedChildren === 'undefined') {\n        console.warn(`DistributedChildrenContentMixin expects the component to define a \"distributedChildren\" property.`);\n      }\n      return distributedChildren;\n    }\n    set content(value) {\n      if ('content' in base.prototype) { super.content = value; }\n      // TODO: Set the children to the given value (which should be an array of\n      // elements)?\n    }\n\n    /**\n     * This event is raised when the component's contents (including distributed\n     * children) have changed.\n     *\n     * @memberof DistributedChildrenContent\n     * @event content-changed\n     */\n  }\n\n  return DistributedChildrenContent;\n};\n","/* Exported function extends a base class with DistributedChildren. */\nexport default (base) => {\n\n  /**\n   * Mixin which defines helpers for accessing a component's distributed\n   * children as a flattened array or string.\n   *\n   * The standard DOM API provides several ways of accessing child content:\n   * `children`, `childNodes`, and `textContent`. None of these functions are\n   * Shadow DOM aware. This mixin defines variations of those functions that\n   * *are* Shadow DOM aware.\n   *\n   * Example: you create a component `<count-children>` that displays a number\n   * equal to the number of children placed inside that component. If someone\n   * instantiates your component like:\n   *\n   *     <count-children>\n   *       <div></div>\n   *       <div></div>\n   *       <div></div>\n   *     </count-children>\n   *\n   * Then the component should show \"3\", because there are three children. To\n   * calculate the number of children, the component can just calculate\n   * `this.children.length`. However, suppose someone instantiates your\n   * component inside one of their own components, and puts a `<slot>` element\n   * inside your component:\n   *\n   *     <count-children>\n   *       <slot></slot>\n   *     </count-children>\n   *\n   * If your component only looks at `this.children`, it will always see exactly\n   * one child — the `<slot>` element. But the user looking at the page will\n   * *see* any nodes distributed to that slot. To match what the user sees, your\n   * component should expand any `<slot>` elements it contains.\n   *\n   * That is the problem this mixin solves. After applying this mixin, your\n   * component code has access to `this.distributedChildren`, whose `length`\n   * will return the total number of all children distributed to your component\n   * in the composed tree.\n   *\n   * Note: The latest Custom Elements API design calls for a new function,\n   * `getAssignedNodes` that takes an optional `deep` parameter, that will solve\n   * this problem at the API level.\n   */\n  class DistributedChildren extends base {\n\n    /**\n     * An in-order collection of distributed children, expanding any slot\n     * elements. Like the standard children property, this skips text nodes.\n     *\n     * @type {HTMLElement[]}\n     */\n    get distributedChildren() {\n      return expandContentElements(this.children, false);\n    }\n\n    /**\n     * An in-order collection of distributed child nodes, expanding any slot\n     * elements. Like the standard childNodes property, this includes text\n     * nodes.\n     *\n     * @type {Node[]}\n     */\n    get distributedChildNodes() {\n      return expandContentElements(this.childNodes, true);\n    }\n\n    /**\n     * The concatenated text content of all distributed child nodes, expanding\n     * any slot elements.\n     *\n     * @type {string}\n     */\n    get distributedTextContent() {\n      const strings = this.distributedChildNodes.map(function(child) {\n        return child.textContent;\n      });\n      return strings.join('');\n    }\n\n  }\n\n  return DistributedChildren;\n};\n\n\n/*\n * Given a array of nodes, return a new array with any content elements expanded\n * to the nodes distributed to that content element. This rule is applied\n * recursively.\n *\n * If includeTextNodes is true, text nodes will be included, as in the\n * standard childNodes property; by default, this skips text nodes, like the\n * standard children property.\n */\nfunction expandContentElements(nodes, includeTextNodes) {\n  const expanded = Array.prototype.map.call(nodes, node => {\n    // We want to see if the node is an instanceof HTMLSlotELement, but\n    // that class won't exist if the browser that doesn't support native\n    // Shadow DOM and if the Shadow DOM polyfill hasn't been loaded. Instead,\n    // we do a simplistic check to see if the tag name is \"slot\".\n    const isSlot = typeof HTMLSlotElement !== 'undefined' ?\n      node instanceof HTMLSlotElement :\n      node.localName === 'slot';\n    if (isSlot) {\n      // Use the nodes assigned to this node instead.\n      const assignedNodes = node.assignedNodes({ flatten: true });\n      return assignedNodes ?\n        expandContentElements(assignedNodes, includeTextNodes) :\n        [];\n    } else if (node instanceof HTMLElement) {\n      // Plain element; use as is.\n      return [node];\n    } else if (node instanceof Text && includeTextNodes) {\n      // Text node.\n      return [node];\n    } else {\n      // Comment, processing instruction, etc.; skip.\n      return [];\n    }\n  });\n  const flattened = [].concat(...expanded);\n  return flattened;\n}\n","import createSymbol from './createSymbol';\nimport safeAttributes from './safeAttributes';\nimport symbols from './symbols';\n\n\n// Symbols for private data members on an element.\nconst genericSymbol = createSymbol('generic');\n\n\n/* Exported function extends a base class with Generic. */\nexport default (base) => {\n\n  /**\n   * Mixin which allows a component to support a \"generic\" style: a minimalist\n   * style that can easily be removed to reset its visual appearance to a\n   * baseline state.\n   *\n   * By default, a component should provide a minimal visual presentation that\n   * allows the component to function. However, the more styling the component\n   * provides by default, the harder it becomes to get the component to fit in\n   * in other settings. Each CSS rule has to be overridden. Worse, new CSS rules\n   * added to the default style won't be overridden by default, making it hard\n   * to know whether a new version of a component will still look okay.\n   *\n   * As a compromise, the mixin defines a `generic` attribute. This attribute is\n   * normally set by default, and styles can be written that apply only when the\n   * generic attribute is set. This allows the construction of CSS rules that\n   * will only apply to generic components like:\n   *\n   *     :host([generic=\"\"]) {\n   *       ... generic appearance defined here ...\n   *     }\n   *\n   * This makes it easy to remove all default styling — set the `GenericMixin`\n   * attribute to false, and all default styling will be removed.\n   */\n  class Generic extends base {\n\n    constructor() {\n      super();\n      // Set defaults.\n      if (typeof this.generic === 'undefined') {\n        this.generic = this[symbols.defaults].generic;\n      }\n    }\n\n    // This mixin doesn't actually respond to attribute changes, but relies\n    // on separately-defined behavior (e.g., in AttributeMarshallingMixin) for that.\n    // Still, we need define a baseline attributeChangedCallback that does\n    // nothing, in case this mixin gets used on its own.\n    attributeChangedCallback(name, oldValue, newValue) {\n      if (super.attributeChangedCallback) { super.attributeChangedCallback(name, oldValue, newValue); }\n    }\n\n    connectedCallback() {\n      if (super.connectedCallback) { super.connectedCallback(); }\n      safeAttributes.connected(this);\n    }\n\n    get [symbols.defaults]() {\n      const defaults = super[symbols.defaults] || {};\n      defaults.generic = true;\n      return defaults;\n    }\n\n    /**\n     * True if the component would like to receive generic styling.\n     *\n     * This property is true by default — set it to false to turn off all\n     * generic styles. This makes it easier to apply custom styling; you won't\n     * have to explicitly override styling you don't want.\n     *\n     * @type Boolean\n     * @default true\n     */\n    get generic() {\n      return this[genericSymbol];\n    }\n    set generic(value) {\n      const parsed = typeof value === 'string' ?\n        String(value) !== 'false' :\n        value;\n      this[genericSymbol] = parsed;\n\n      if ('generic' in base.prototype) { super.generic = value; }\n\n      // We roll our own attribute setting so that an explicitly false value\n      // shows up as GenericMixin=\"false\".\n      if (parsed === false) {\n        // Explicitly use false string.\n        safeAttributes.setAttribute(this, 'generic', 'false');\n      } else if (parsed == null) {\n        // Explicitly remove attribute. (Always safe to do this.)\n        this.removeAttribute('generic');\n      } else {\n        // Use the empty string to get attribute to appear with no value.\n        safeAttributes.setAttribute(this, 'generic', '');\n      }\n    }\n\n  }\n\n  return Generic;\n};\n\n\n","import createSymbol from './createSymbol';\nimport symbols from './symbols';\n\n\n// Symbols for private data members on an element.\nconst navigationAxisSymbol = createSymbol('navigationAxis');\n\n\n/* Exported function extends a base class with KeyboardDirection. */\nexport default (base) => {\n\n  /**\n   * Mixin which maps direction keys (Left, Right, etc.) to direction semantics\n   * (go left, go right, etc.).\n   *\n   * This mixin expects the component to invoke a `keydown` method when a key is\n   * pressed. You can use [KeyboardMixin](KeyboardMixin.md) for that\n   * purpose, or wire up your own keyboard handling and call `keydown` yourself.\n   *\n   * This mixin calls methods such as `goLeft` and `goRight`. You can define\n   * what that means by implementing those methods yourself. If you want to use\n   * direction keys to navigate a selection, use this mixin with\n   * [DirectionSelectionMixin](DirectionSelectionMixin.md).\n   */\n  class KeyboardDirection extends base {\n\n    constructor() {\n      super();\n      // Set defaults.\n      if (typeof this.navigationAxis === 'undefined') {\n        this.navigationAxis = this[symbols.defaults].navigationAxis;\n      }\n    }\n\n    get [symbols.defaults]() {\n      const defaults = super[symbols.defaults] || {};\n      defaults.navigationAxis = 'both';\n      return defaults;\n    }\n\n    /**\n     * Invoked when the user wants to go/navigate down.\n     * The default implementation of this method does nothing.\n     */\n    [symbols.goDown]() {\n      if (super[symbols.goDown]) { return super[symbols.goDown](); }\n    }\n\n    /**\n     * Invoked when the user wants to go/navigate to the end (e.g., of a list).\n     * The default implementation of this method does nothing.\n     */\n    [symbols.goEnd]() {\n      if (super[symbols.goEnd]) { return super[symbols.goEnd](); }\n    }\n\n    /**\n     * Invoked when the user wants to go/navigate left.\n     * The default implementation of this method does nothing.\n     */\n    [symbols.goLeft]() {\n      if (super[symbols.goLeft]) { return super[symbols.goLeft](); }\n    }\n\n    /**\n     * Invoked when the user wants to go/navigate right.\n     * The default implementation of this method does nothing.\n     */\n    [symbols.goRight]() {\n      if (super[symbols.goRight]) { return super[symbols.goRight](); }\n    }\n\n    /**\n     * Invoked when the user wants to go/navigate to the start (e.g., of a\n     * list). The default implementation of this method does nothing.\n     */\n    [symbols.goStart]() {\n      if (super[symbols.goStart]) { return super[symbols.goStart](); }\n    }\n\n    /**\n     * Invoked when the user wants to go/navigate up.\n     * The default implementation of this method does nothing.\n     */\n    [symbols.goUp]() {\n      if (super[symbols.goUp]) { return super[symbols.goUp](); }\n    }\n\n    /**\n     * Indicates the direction of permitted navigation with the keyboard.\n     *\n     * Accepted values are \"horizontal\", \"vertical\", or \"both\" (the default).\n     * If this property is \"horizontal\", the Up Arrow and Down Arrow keys will\n     * be ignored. Conversely, if this is \"vertical\", the Left Arrow and Right\n     * Arrow keys will be ignored.\n     *\n     * @type {string}\n     */\n    get navigationAxis() {\n      return this[navigationAxisSymbol];\n    }\n    set navigationAxis(value) {\n      this[navigationAxisSymbol] = value;\n      if ('navigationAxis' in base.prototype) { super.navigationAxis = value; }\n    }\n\n    [symbols.keydown](event) {\n      let handled;\n\n      const axis = this.navigationAxis;\n      const horizontal = (axis === 'horizontal' || axis === 'both');\n      const vertical = (axis === 'vertical' || axis === 'both');\n\n      // Ignore Left/Right keys when metaKey or altKey modifier is also pressed,\n      // as the user may be trying to navigate back or forward in the browser.\n      switch (event.keyCode) {\n        case 35: // End\n          handled = this[symbols.goEnd]();\n          break;\n        case 36: // Home\n          handled = this[symbols.goStart]();\n          break;\n        case 37: // Left\n          if (horizontal && !event.metaKey && !event.altKey) {\n            handled = this[symbols.goLeft]();\n          }\n          break;\n        case 38: // Up\n          if (vertical) {\n            handled = event.altKey ? this[symbols.goStart]() : this[symbols.goUp]();\n          }\n          break;\n        case 39: // Right\n          if (horizontal && !event.metaKey && !event.altKey) {\n            handled = this[symbols.goRight]();\n          }\n          break;\n        case 40: // Down\n          if (vertical) {\n            handled = event.altKey ? this[symbols.goEnd]() : this[symbols.goDown]();\n          }\n          break;\n      }\n      // Prefer mixin result if it's defined, otherwise use base result.\n      return handled || (super[symbols.keydown] && super[symbols.keydown](event));\n    }\n\n  }\n\n  return KeyboardDirection;\n};\n","import symbols from './symbols';\n\n\n/* Exported function extends a base class with Keyboard. */\nexport default (base) => {\n\n  /**\n   * Mixin which manages the keydown handling for a component.\n   *\n   * This mixin handles several keyboard-related features.\n   *\n   * First, it wires up a single keydown event handler that can be shared by\n   * multiple mixins on a component. The event handler will invoke a `keydown`\n   * method with the event object, and any mixin along the prototype chain that\n   * wants to handle that method can do so.\n   *\n   * If a mixin wants to indicate that keyboard event has been handled, and that\n   * other mixins should *not* handle it, the mixin's `keydown` handler should\n   * return a value of true. The convention that seems to work well is that a\n   * mixin should see if it wants to handle the event and, if not, then ask the\n   * superclass to see if it wants to handle the event. This has the effect of\n   * giving the mixin that was applied last the first chance at handling a\n   * keyboard event.\n   *\n   * Example:\n   *\n   *     [symbols.keydown](event) {\n   *       let handled;\n   *       switch (event.keyCode) {\n   *         // Handle the keys you want, setting handled = true if appropriate.\n   *       }\n   *       // Prefer mixin result if it's defined, otherwise use base result.\n   *       return handled || (super[symbols.keydown] && super[symbols.keydown](event));\n   *     }\n   *\n   * A second feature provided by this mixin is that it implicitly makes the\n   * component a tab stop if it isn't already, by setting `tabIndex` to 0. This\n   * has the effect of adding the component to the tab order in document order.\n   */\n  class Keyboard extends base {\n\n    constructor() {\n      super();\n      this.addEventListener('keydown', event => {\n        const handled = this[symbols.keydown](event);\n        if (handled) {\n          event.preventDefault();\n          event.stopPropagation();\n        }\n      });\n    }\n\n    connectedCallback() {\n      if (super.connectedCallback) { super.connectedCallback(); }\n      if (this.getAttribute('tabindex') == null && this[symbols.defaults].tabindex !== null) {\n        this.setAttribute('tabindex', this[symbols.defaults].tabindex);\n      }\n    }\n\n    get [symbols.defaults]() {\n      const defaults = super[symbols.defaults] || {};\n      // The default tab index is 0 (document order).\n      defaults.tabindex = 0;\n      return defaults;\n    }\n\n    /**\n     * Handle the indicated keyboard event.\n     *\n     * The default implementation of this method does nothing. This will\n     * typically be handled by other mixins.\n     *\n     * @param {KeyboardEvent} event - the keyboard event\n     * @return {boolean} true if the event was handled\n     */\n    [symbols.keydown](event) {\n      if (super[symbols.keydown]) { return super[symbols.keydown](event); }\n    }\n\n  }\n\n  return Keyboard;\n};\n","import symbols from './symbols';\n\n\n/* Exported function extends a base class with KeyboardPagedSelection. */\nexport default (base) => {\n\n  /**\n   * Mixin which maps page keys (Page Up, Page Down) into operations that move\n   * the selection by one page.\n   *\n   * The keyboard interaction model generally follows that of Microsoft Windows'\n   * list boxes instead of those in OS X:\n   *\n   * * The Page Up/Down and Home/End keys actually change the selection, rather\n   *   than just scrolling. The former behavior seems more generally useful for\n   *   keyboard users.\n   *\n   * * Pressing Page Up/Down will change the selection to the topmost/bottommost\n   *   visible item if the selection is not already there. Thereafter, the key\n   *   will move the selection up/down by a page, and (per the above point) make\n   *   the selected item visible.\n   *\n   * To ensure the selected item is in view following use of Page Up/Down, use\n   * the related [SelectionInViewMixin](SelectionInViewMixin.md).\n   *\n   * This mixin expects the component to invoke a `keydown` method when a key is\n   * pressed. You can use [KeyboardMixin](KeyboardMixin.md) for that\n   * purpose, or wire up your own keyboard handling and call `keydown` yourself.\n   */\n  class KeyboardPagedSelection extends base {\n\n    [symbols.keydown](event) {\n      let handled;\n      switch (event.keyCode) {\n        case 33: // Page Up\n          handled = this.pageUp();\n          break;\n        case 34: // Page Down\n          handled = this.pageDown();\n          break;\n      }\n      // Prefer mixin result if it's defined, otherwise use base result.\n      return handled || (super[symbols.keydown] && super[symbols.keydown](event));\n    }\n\n    /**\n     * Scroll down one page.\n     */\n    pageDown() {\n      if (super.pageDown) { super.pageDown(); }\n      return scrollOnePage(this, true);\n    }\n\n    /**\n     * Scroll up one page.\n     */\n    pageUp() {\n      if (super.pageUp) { super.pageUp(); }\n      return scrollOnePage(this, false);\n    }\n\n    /**\n     * The element that should be scrolled with the Page Up/Down keys.\n     * Default is the current element.\n     *\n     * @type {HTMLElement}\n     */\n    get scrollTarget() {\n      // Prefer base result.\n      return 'scrollTarget' in base.prototype ? super.scrollTarget : this;\n    }\n    set scrollTarget(element) {\n      if ('scrollTarget' in base.prototype) { super.scrollTarget = element; }\n    }\n  }\n\n  return KeyboardPagedSelection;\n};\n\n\n// Return the item whose content spans the given y position (relative to the\n// top of the list's scrolling client area), or null if not found.\n//\n// If downward is true, move down the list of items to find the first item\n// found at the given y position; if downward is false, move up the list of\n// items to find the last item at that position.\nfunction getIndexOfItemAtY(element, y, downward) {\n  const items = element.items;\n  const start = downward ? 0 : items.length - 1;\n  const end = downward ? items.length : 0;\n  const step = downward ? 1 : -1;\n  const scrollTarget = element.scrollTarget;\n  const topOfClientArea = scrollTarget.offsetTop + scrollTarget.clientTop;\n\n  // Find the item spanning the indicated y coordinate.\n  let item;\n  let itemIndex = start;\n  let itemTop;\n  let found = false;\n  while (itemIndex !== end) {\n    item = items[itemIndex];\n    itemTop = item.offsetTop - topOfClientArea;\n    const itemBottom = itemTop + item.offsetHeight;\n    if (itemTop <= y && itemBottom >= y) {\n      // Item spans the indicated y coordinate.\n      found = true;\n      break;\n    }\n    itemIndex += step;\n  }\n\n  if (!found) {\n    return null;\n  }\n\n  // We may have found an item whose padding spans the given y coordinate,\n  // but whose content is actually above/below that point.\n  // TODO: If the item has a border, then padding should be included in\n  // considering a hit.\n  const itemStyle = getComputedStyle(item);\n  const itemPaddingTop = parseFloat(itemStyle.paddingTop);\n  const itemPaddingBottom = parseFloat(itemStyle.paddingBottom);\n  const contentTop = itemTop + item.clientTop + itemPaddingTop;\n  const contentBottom = contentTop + item.clientHeight - itemPaddingTop - itemPaddingBottom;\n  if (downward && contentTop <= y || !downward && contentBottom >= y) {\n    // The indicated coordinate hits the actual item content.\n    return itemIndex;\n  }\n  else {\n    // The indicated coordinate falls within the item's padding. Back up to\n    // the item below/above the item we found and return that.\n    return itemIndex - step;\n  }\n}\n\n// Move by one page downward (if downward is true), or upward (if false).\n// Return true if we ended up changing the selection, false if not.\n// TODO: Better support for horizontal lists.\nfunction scrollOnePage(element, downward) {\n\n  // Determine the item visible just at the edge of direction we're heading.\n  // We'll select that item if it's not already selected.\n  const scrollTarget = element.scrollTarget;\n  const edge = scrollTarget.scrollTop + (downward ? scrollTarget.clientHeight : 0);\n  const indexOfItemAtEdge = getIndexOfItemAtY(element, edge, downward);\n\n  const selectedIndex = element.selectedIndex;\n  let newIndex;\n  if (indexOfItemAtEdge && selectedIndex === indexOfItemAtEdge) {\n    // The item at the edge was already selected, so scroll in the indicated\n    // direction by one page. Leave the new item at that edge selected.\n    const delta = (downward ? 1 : -1) * scrollTarget.clientHeight;\n    newIndex = getIndexOfItemAtY(element, edge + delta, downward);\n  }\n  else {\n    // The item at the edge wasn't selected yet. Instead of scrolling, we'll\n    // just select that item. That is, the first attempt to page up/down\n    // usually just moves the selection to the edge in that direction.\n    newIndex = indexOfItemAtEdge;\n  }\n\n  if (!newIndex) {\n    // We can't find an item in the direction we want to travel. Select the\n    // last item (if moving downward) or first item (if moving upward).\n    newIndex = (downward ? element.items.length - 1 : 0);\n  }\n\n  if (newIndex !== selectedIndex) {\n    element.selectedIndex = newIndex;\n    return true; // We handled the page up/down ourselves.\n  }\n  else {\n    return false; // We didn't do anything.\n  }\n}\n","import createSymbol from './createSymbol';\nimport symbols from './symbols';\n\n\n// Symbols for private data members on an element.\nconst itemTextContentsSymbol = createSymbol('itemTextContents');\nconst typedPrefixSymbol = createSymbol('typedPrefix');\nconst prefixTimeoutSymbol = createSymbol('prefixTimeout');\n\n\n/* Exported function extends a base class with KeyboardPrefixSelection. */\nexport default (base) => {\n\n  /**\n   * Mixin that handles list box-style prefix typing, in which the user can type\n   * a string to select the first item that begins with that string.\n   *\n   * Example: suppose a component using this mixin has the following items:\n   *\n   *     <sample-list-component>\n   *       <div>Apple</div>\n   *       <div>Apricot</div>\n   *       <div>Banana</div>\n   *       <div>Blackberry</div>\n   *       <div>Blueberry</div>\n   *       <div>Cantaloupe</div>\n   *       <div>Cherry</div>\n   *       <div>Lemon</div>\n   *       <div>Lime</div>\n   *     </sample-list-component>\n   *\n   * If this component receives the focus, and the user presses the \"b\" or \"B\"\n   * key, the \"Banana\" item will be selected, because it's the first item that\n   * matches the prefix \"b\". (Matching is case-insensitive.) If the user now\n   * presses the \"l\" or \"L\" key quickly, the prefix to match becomes \"bl\", so\n   * \"Blackberry\" will be selected.\n   *\n   * The prefix typing feature has a one second timeout — the prefix to match\n   * will be reset after a second has passed since the user last typed a key.\n   * If, in the above example, the user waits a second between typing \"b\" and\n   * \"l\", the prefix will become \"l\", so \"Lemon\" would be selected.\n   *\n   * This mixin expects the component to invoke a `keydown` method when a key is\n   * pressed. You can use [KeyboardMixin](KeyboardMixin.md) for that\n   * purpose, or wire up your own keyboard handling and call `keydown` yourself.\n   *\n   * This mixin also expects the component to provide an `items` property. The\n   * `textContent` of those items will be used for purposes of prefix matching.\n   */\n  class KeyboardPrefixSelection extends base {\n\n    // TODO: If the set of items is changed, reset the prefix.\n    // [symbols.itemsChanged]() {\n    //   this[itemTextContentsSymbol] = null;\n    //   resetTypedPrefix(this);\n    // }\n\n    // TODO: If the selection is changed by some other means (e.g., arrow keys)\n    // other than prefix typing, then that act should reset the prefix.\n\n    [symbols.keydown](event) {\n      let handled;\n      let resetPrefix = true;\n\n      switch (event.keyCode) {\n        case 8: // Backspace\n          handleBackspace(this);\n          handled = true;\n          resetPrefix = false;\n          break;\n        case 27: // Escape\n          handled = true;\n          break;\n        default:\n          if (!event.ctrlKey && !event.metaKey && !event.altKey &&\n              event.which !== 32 /* Space */) {\n            handlePlainCharacter(this, String.fromCharCode(event.which));\n          }\n          resetPrefix = false;\n      }\n\n      if (resetPrefix) {\n        resetTypedPrefix(this);\n      }\n\n      // Prefer mixin result if it's defined, otherwise use base result.\n      return handled || (super[symbols.keydown] && super[symbols.keydown](event));\n    }\n\n    /**\n     * Select the first item whose text content begins with the given prefix.\n     *\n     * @param prefix [String] The prefix string to search for\n     */\n    selectItemWithTextPrefix(prefix) {\n      if (super.selectItemWithTextPrefix) { super.selectItemWithTextPrefix(prefix); }\n      if (prefix == null || prefix.length === 0) {\n        return;\n      }\n      const index = getIndexOfItemWithTextPrefix(this, prefix);\n      if (index >= 0) {\n        this.selectedIndex = index;\n      }\n    }\n\n  }\n\n  return KeyboardPrefixSelection;\n};\n\n\n// Time in milliseconds after which the user is considered to have stopped\n// typing.\nconst PREFIX_TIMEOUT_DURATION = 1000;\n\n\n// Return the index of the first item with the given prefix, else -1.\nfunction getIndexOfItemWithTextPrefix(element, prefix) {\n  const itemTextContents = getItemTextContents(element);\n  const prefixLength = prefix.length;\n  for (let i = 0; i < itemTextContents.length; i++) {\n    const itemTextContent = itemTextContents[i];\n    if (itemTextContent.substr(0, prefixLength) === prefix) {\n      return i;\n    }\n  }\n  return -1;\n}\n\n// Return an array of the text content (in lowercase) of all items.\n// Cache these results.\nfunction getItemTextContents(element) {\n  if (!element[itemTextContentsSymbol]) {\n    const items = element.items;\n    element[itemTextContentsSymbol] = items.map(child => {\n      const text = child.textContent || child.alt;\n      return text.toLowerCase();\n    });\n  }\n  return element[itemTextContentsSymbol];\n}\n\nfunction handleBackspace(element) {\n  const length = element[typedPrefixSymbol] ? element[typedPrefixSymbol].length : 0;\n  if (length > 0) {\n    element[typedPrefixSymbol] = element[typedPrefixSymbol].substr(0, length - 1);\n  }\n  element.selectItemWithTextPrefix(element[typedPrefixSymbol]);\n  setPrefixTimeout(element);\n}\n\nfunction handlePlainCharacter(element, char) {\n  const prefix = element[typedPrefixSymbol] || '';\n  element[typedPrefixSymbol] = prefix + char.toLowerCase();\n  element.selectItemWithTextPrefix(element[typedPrefixSymbol]);\n  setPrefixTimeout(element);\n}\n\nfunction resetPrefixTimeout(element) {\n  if (element[prefixTimeoutSymbol]) {\n    clearTimeout(element[prefixTimeoutSymbol]);\n    element[prefixTimeoutSymbol] = false;\n  }\n}\n\nfunction resetTypedPrefix(element) {\n  element[typedPrefixSymbol] = '';\n  resetPrefixTimeout(element);\n}\n\nfunction setPrefixTimeout(element) {\n  resetPrefixTimeout(element);\n  element[prefixTimeoutSymbol] = setTimeout(() => {\n    resetTypedPrefix(element);\n  }, PREFIX_TIMEOUT_DURATION);\n}\n","/* Exported function extends a base class with SelectedItemTextValue. */\nexport default (base) => {\n\n  /**\n   * Mixin which defines a `value` property that reflects the text content of a\n   * selected item.\n   *\n   * This mixin exists for list-like components that want to provide a more\n   * convenient way to get/set the selected item using text.\n   *\n   * This mixin expects a component to provide an `items` array of all elements\n   * in the list. A standard way to do that with is\n   * [ContentItemsMixin](ContentItemsMixin.md). This also expects the definition\n   * of `selectedIndex` and `selectedItem` properties, which can be obtained\n   * from [SingleSelectionMixin](SingleSelectionMixin.md).\n   */\n  class SelectedItemTextValue extends base {\n\n    /**\n     * The text content of the selected item.\n     *\n     * Setting this value to a string will attempt to select the first list item\n     * whose text content match that string. Setting this to a string not matching\n     * any list item will result in no selection.\n     *\n     * @type {string}\n     */\n    get value() {\n      return this.selectedItem == null || this.selectedItem.textContent == null ?\n        '' :\n        this.selectedItem.textContent;\n    }\n    set value(text) {\n\n      const currentIndex = this.selectedIndex;\n      let newIndex = -1; // Assume we won't find the text.\n\n      // Find the item with the indicated text.\n      const items = this.items;\n      for (let i = 0, length = items.length; i < length; i++) {\n        if (items[i].textContent === text) {\n          newIndex = i;\n          break;\n        }\n      }\n\n      if (newIndex !== currentIndex) {\n        this.selectedIndex = newIndex;\n        const event = new CustomEvent('value-changed');\n        this.dispatchEvent(event);\n      }\n    }\n  }\n\n  return SelectedItemTextValue;\n};\n","import symbols from './symbols';\n\n\n// Used to assign unique IDs to item elements without IDs.\nlet idCount = 0;\n\n\n/* Exported function extends a base class with SelectionAriaActive. */\nexport default (base) => {\n\n  /**\n   * Mixin which treats the selected item in a list as the active item in ARIA\n   * accessibility terms.\n   *\n   * Handling ARIA selection state properly is actually quite complex:\n   *\n   * * The items in the list need to be indicated as possible items via an ARIA\n   *   `role` attribute value such as \"option\".\n   * * The selected item need to be marked as selected by setting the item's\n   *   `aria-selected` attribute to true *and* the other items need be marked as\n   *   *not* selected by setting `aria-selected` to false.\n   * * The outermost element with the keyboard focus needs to have attributes\n   *   set on it so that the selection is knowable at the list level via the\n   *   `aria-activedescendant` attribute.\n   * * Use of `aria-activedescendant` in turn requires that all items in the\n   *   list have ID attributes assigned to them.\n   *\n   * This mixin tries to address all of the above requirements. To that end,\n   * this mixin will assign generated IDs to any item that doesn't already have\n   * an ID.\n   *\n   * ARIA relies on elements to provide `role` attributes. This mixin will apply\n   * a default role of \"listbox\" on the outer list if it doesn't already have an\n   * explicit role. Similarly, this mixin will apply a default role of \"option\"\n   * to any list item that does not already have a role specified.\n   *\n   * This mixin expects a set of members that manage the state of the selection:\n   * `[symbols.itemSelected]`, `itemAdded`, and `selectedIndex`. You can\n   * supply these yourself, or do so via\n   * [SingleSelectionMixin](SingleSelectionMixin.md).\n   */\n  class SelectionAriaActive extends base {\n\n    connectedCallback() {\n      if (super.connectedCallback) { super.connectedCallback(); }\n      // Set default ARIA role.\n      if (this.getAttribute('role') == null && this[symbols.defaults].role) {\n        this.setAttribute('role', this[symbols.defaults].role);\n      }\n    }\n\n    get [symbols.defaults]() {\n      const defaults = super[symbols.defaults] || {};\n      defaults.role = 'listbox';\n      return defaults;\n    }\n\n    [symbols.itemAdded](item) {\n      if (super[symbols.itemAdded]) { super[symbols.itemAdded](item); }\n\n      if (!item.getAttribute('role')) {\n        // Assign a default ARIA role.\n        item.setAttribute('role', 'option');\n      }\n\n      // Ensure each item has an ID so we can set aria-activedescendant on the\n      // overall list whenever the selection changes.\n      //\n      // The ID will take the form of a base ID plus a unique integer. The base\n      // ID will be incorporate the component's own ID. E.g., if a component has\n      // ID \"foo\", then its items will have IDs that look like \"_fooOption1\". If\n      // the compnent has no ID itself, its items will get IDs that look like\n      // \"_option1\". Item IDs are prefixed with an underscore to differentiate\n      // them from manually-assigned IDs, and to minimize the potential for ID\n      // conflicts.\n      if (!item.id) {\n        const baseId = this.id ?\n            \"_\" + this.id + \"Option\" :\n            \"_option\";\n        item.id = baseId + idCount++;\n      }\n    }\n\n    [symbols.itemSelected](item, selected) {\n      if (super[symbols.itemSelected]) { super[symbols.itemSelected](item, selected); }\n      item.setAttribute('aria-selected', selected);\n      const itemId = item.id;\n      if (itemId && selected) {\n        this.setAttribute('aria-activedescendant', itemId);\n      }\n    }\n\n    get selectedItem() {\n      return super.selectedItem;\n    }\n    set selectedItem(item) {\n      if ('selectedItem' in base.prototype) { super.selectedItem = item; }\n      if (item == null) {\n        // Selection was removed.\n        this.removeAttribute('aria-activedescendant');\n      }\n    }\n\n  }\n\n  return SelectionAriaActive;\n};\n","import symbols from '../src/symbols';\n\n\n/* Exported function extends a base class with SelectionHighlight. */\nexport default (base) => {\n\n  /**\n   * Template mixin which applies standard highlight colors to a selected item.\n   *\n   * This mixin highlights textual items (e.g., in a list) in a standard way by\n   * using the CSS `highlight` and `highlighttext` color values. These values\n   * respect operating system defaults and user preferences, and hence are good\n   * default values for highlight colors.\n   *\n   * This mixin expects a `selected` class to be applied to selected items. You\n   * can use [ContentItemsMixin](ContentItemsMixin.md) for that purpose.\n   */\n  class SelectionHighlight extends base {\n\n    get [symbols.template]() {\n      const baseTemplate = super[symbols.template] || '';\n      return `\n        <style>\n          :host([generic=\"\"]) ::slotted(.selected) {\n            background-color: highlight;\n            color: highlighttext;\n          }\n        </style>\n        ${baseTemplate}\n      `;\n    }\n\n  }\n\n  return SelectionHighlight;\n};\n","/* Exported function extends a base class with SelectionInView. */\nexport default (base) => {\n\n  /**\n   * Mixin which scrolls a container to ensure that a newly-selected item is\n   * visible to the user.\n   *\n   * When the selected item in a list-like component changes, it's easier for\n   * the to confirm that the selection has changed to an appropriate item if the\n   * user can actually see that item.\n   *\n   * This mixin expects a `selectedItem` property to be set when the selection\n   * changes. You can supply that yourself, or use\n   * [SingleSelectionMixin](SingleSelectionMixin.md).\n   */\n  class SelectionInView extends base {\n\n    connectedCallback() {\n      if (super.connectedCallback) { super.connectedCallback(); }\n      const selectedItem = this.selectedItem;\n      if (selectedItem) {\n        this.scrollItemIntoView(selectedItem);\n      }\n    }\n\n    get selectedItem() {\n      return super.selectedItem;\n    }\n    set selectedItem(item) {\n      if ('selectedItem' in base.prototype) { super.selectedItem = item; }\n      if (item) {\n        // Keep the selected item in view.\n        this.scrollItemIntoView(item);\n      }\n    }\n\n    /**\n     * Scroll the given element completely into view, minimizing the degree of\n     * scrolling performed.\n     *\n     * Blink has a `scrollIntoViewIfNeeded()` function that does something\n     * similar, but unfortunately it's non-standard, and in any event often ends\n     * up scrolling more than is absolutely necessary.\n     *\n     * @param {HTMLElement} item - the item to scroll into view.\n     */\n    scrollItemIntoView(item) {\n      if (super.scrollItemIntoView) { super.scrollItemIntoView(); }\n      // Get the relative position of the item with respect to the top of the\n      // list's scrollable canvas. An item at the top of the list will have a\n      // elementTop of 0.\n\n      const scrollTarget = this.scrollTarget;\n      const elementTop = item.offsetTop - scrollTarget.offsetTop - scrollTarget.clientTop;\n      const elementBottom = elementTop + item.offsetHeight;\n      // Determine the bottom of the scrollable canvas.\n      const scrollBottom = scrollTarget.scrollTop + scrollTarget.clientHeight;\n      if (elementBottom > scrollBottom) {\n        // Scroll up until item is entirely visible.\n        scrollTarget.scrollTop += elementBottom - scrollBottom;\n      }\n      else if (elementTop < scrollTarget.scrollTop) {\n        // Scroll down until item is entirely visible.\n        scrollTarget.scrollTop = elementTop;\n      }\n    }\n\n    /**\n     * The element that should be scrolled to bring an item into view.\n     *\n     * The default value of this property is the element itself.\n     *\n     * @type {HTMLElement}\n     */\n    get scrollTarget() {\n      // Prefer base result.\n      return 'scrollTarget' in base.prototype ? super.scrollTarget : this;\n    }\n    set scrollTarget(element) {\n      if ('scrollTarget' in base.prototype) { super.scrollTarget = element; }\n    }\n\n  }\n\n  return SelectionInView;\n};\n","/* Exported function extends a base class with ShadowElementReferences. */\nexport default (base) => {\n\n  /**\n   * Mixin to create references to elements in a component's Shadow DOM subtree.\n   *\n   * This adds a member on the component called `this.$` that can be used to\n   * reference shadow elements with IDs. E.g., if component's shadow contains an\n   * element `<button id=\"foo\">`, then this mixin will create a member\n   * `this.$.foo` that points to that button.\n   *\n   * Such references simplify a component's access to its own elements. In\n   * exchange, this mixin trades off a one-time cost of querying all elements in\n   * the shadow tree instead of paying an ongoing cost to query for an element\n   * each time the component wants to inspect or manipulate it.\n   *\n   * This mixin expects the component to define a Shadow DOM subtree. You can\n   * create that tree yourself, or make use of\n   * [ShadowTemplateMixin](ShadowTemplateMixin.md).\n   *\n   * This mixin is inspired by Polymer's [automatic\n   * node finding](https://www.polymer-project.org/1.0/docs/devguide/local-dom.html#node-finding)\n   * feature.\n   */\n  class ShadowElementReferences extends base {\n\n    constructor() {\n      super();\n      if (this.shadowRoot) {\n        // Look for elements in the shadow subtree that have id attributes.\n        // An alternatively implementation of this mixin would be to just define\n        // a this.$ getter that lazily does this search the first time someone\n        // tries to access this.$. That might introduce some complexity – if the\n        // the tree changed after it was first populated, the result of\n        // searching for a node might be somewhat unpredictable.\n        this.$ = {};\n        const nodesWithIds = this.shadowRoot.querySelectorAll('[id]');\n        [].forEach.call(nodesWithIds, node => {\n          const id = node.getAttribute('id');\n          this.$[id] = node;\n        });\n      }\n    }\n\n    /**\n     * The collection of references to the elements with IDs in a component's\n     * Shadow DOM subtree.\n     *\n     * @type {object}\n     * @member $\n     */\n  }\n\n  return ShadowElementReferences;\n};\n","import symbols from '../src/symbols';\n\n\n/* Exported function extends a base class with ShadowTemplate. */\nexport default (base) => {\n\n  /**\n   * Mixin for stamping a template into a Shadow DOM subtree upon component\n   * instantiation.\n   *\n   * To use this mixin, define a `template` property as a string or HTML\n   * `<template>` element:\n   *\n   *     class MyElement extends ShadowTemplateMixin(HTMLElement) {\n   *       get [symbols.template]() {\n   *         return `Hello, <em>world</em>.`;\n   *       }\n   *     }\n   *\n   * When your component class is instantiated, a shadow root will be created on\n   * the instance, and the contents of the template will be cloned into the\n   * shadow root. If your component does not define a `template` property, this\n   * mixin has no effect.\n   *\n   * For the time being, this extension retains support for Shadow DOM v0. That\n   * will eventually be deprecated as browsers (and the Shadow DOM polyfill)\n   * implement Shadow DOM v1.\n   */\n  class ShadowTemplate extends base {\n\n    /*\n     * If the component defines a template, a shadow root will be created on the\n     * component instance, and the template stamped into it.\n     */\n    constructor() {\n      super();\n      let template = this[symbols.template];\n      // TODO: Save the processed template with the component's class prototype\n      // so it doesn't need to be processed with every instantiation.\n      if (template) {\n\n        if (typeof template === 'string') {\n          // Upgrade plain string to real template.\n          template = createTemplateWithInnerHTML(template);\n        }\n\n        if (window.ShadowDOMPolyfill) {\n          shimTemplateStyles(template, this.localName);\n        }\n\n        const root = this.attachShadow({ mode: 'open' });\n        const clone = document.importNode(template.content, true);\n        root.appendChild(clone);\n      }\n    }\n\n  }\n\n  return ShadowTemplate;\n};\n\n\n// Convert a plain string of HTML into a real template element.\nfunction createTemplateWithInnerHTML(innerHTML) {\n  const template = document.createElement('template');\n  // REVIEW: Is there an easier way to do this?\n  // We'd like to just set innerHTML on the template content, but since it's\n  // a DocumentFragment, that doesn't work.\n  const div = document.createElement('div');\n  div.innerHTML = innerHTML;\n  while (div.childNodes.length > 0) {\n    template.content.appendChild(div.childNodes[0]);\n  }\n  return template;\n}\n\n// Invoke basic style shimming with ShadowCSS.\nfunction shimTemplateStyles(template, tag) {\n  window.WebComponents.ShadowCSS.shimStyling(template.content, tag);\n}\n","import createSymbol from './createSymbol';\nimport symbols from './symbols';\n\n\n// Symbols for private data members on an element.\nconst canSelectNextSymbol = createSymbol('canSelectNext');\nconst canSelectPreviousSymbol = createSymbol('canSelectPrevious');\nconst selectionRequiredSymbol = createSymbol('selectionRequired');\nconst selectionWrapsSymbol = createSymbol('selectionWraps');\n\n// We want to expose both selectedIndex and selectedItem as independent\n// properties but keep them in sync. This allows a component user to reference\n// the selection by whatever means is most natural for their situation.\n//\n// To efficiently keep these properties in sync, we track \"external\" and\n// \"internal\" references for each property:\n//\n// The external index or item is the one we report to the outside world when\n// asked for selection.  When handling a change to index or item, we update the\n// external reference as soon as possible, so that if anyone immediately asks\n// for the current selection, they will receive a stable answer.\n//\n// The internal index or item tracks whichever index or item last received the\n// full set of processing. Processing includes raising a change event for the\n// new value. Once we've begun that processing, we store the new value as the\n// internal value to indicate we've handled it.\n//\nconst externalSelectedIndexSymbol = createSymbol('externalSelectedIndex');\nconst externalSelectedItemSymbol = createSymbol('externalSelectedItem');\nconst internalSelectedIndexSymbol = createSymbol('internalSelectedIndex');\nconst internalSelectedItemSymbol = createSymbol('internalSelectedItem');\n\n\n/* Exported function extends a base class with SingleSelection. */\nexport default (base) => {\n\n  /**\n   * Mixin which manages single-selection semantics for items in a list.\n   *\n   * This mixin expects a component to provide an `items` Array or NodeList of\n   * all elements in the list. A standard way to do that with is the\n   * [ContentItemsMixin](ContentItemsMixin.md), which takes a component's\n   * content (typically its distributed children) as the set of list items; see\n   * that mixin for details.\n   *\n   * This mixin tracks a single selected item in the list, and provides means to\n   * get and set that state by item position (`selectedIndex`) or item identity\n   * (`selectedItem`). The selection can be moved in the list via the methods\n   * `selectFirst`, `selectLast`, `selectNext`, and `selectPrevious`.\n   *\n   * This mixin does not produce any user-visible effects to represent\n   * selection. Other mixins, such as\n   * [SelectionAriaActiveMixin](SelectionAriaActiveMixin.md),\n   * [SelectionHighlightMixin](SelectionHighlightMixin.md) and\n   * [SelectionInViewMixin](SelectionInViewMixin.md), modify the selected item\n   * in common ways to let the user know a given item is selected or not\n   * selected.\n   */\n  class SingleSelection extends base {\n\n    constructor() {\n      super();\n      // Set defaults.\n      if (typeof this.selectionRequired === 'undefined') {\n        this.selectionRequired = this[symbols.defaults].selectionRequired;\n      }\n      if (typeof this.selectionWraps === 'undefined') {\n        this.selectionWraps = this[symbols.defaults].selectionWraps;\n      }\n    }\n\n    /**\n     * True if the selection can be moved to the next item, false if not (the\n     * selected item is the last item in the list).\n     *\n     * @type {boolean}\n     */\n    get canSelectNext() {\n      return this[canSelectNextSymbol];\n    }\n    set canSelectNext(canSelectNext) {\n      const previousCanSelectNext = this[canSelectNextSymbol];\n      this[canSelectNextSymbol] = canSelectNext;\n      if ('canSelectNext' in base.prototype) { super.canSelectNext = canSelectNext; }\n      if (canSelectNext !== previousCanSelectNext) {\n        this.dispatchEvent(new CustomEvent('can-select-next-changed'));\n      }\n    }\n\n    /**\n     * True if the selection can be moved to the previous item, false if not\n     * (the selected item is the first one in the list).\n     *\n     * @type {boolean}\n     */\n    get canSelectPrevious() {\n      return this[canSelectPreviousSymbol];\n    }\n    set canSelectPrevious(canSelectPrevious) {\n      const previousCanSelectPrevious = this[canSelectPreviousSymbol];\n      this[canSelectPreviousSymbol] = canSelectPrevious;\n      if ('canSelectPrevious' in base.prototype) { super.canSelectPrevious = canSelectPrevious; }\n      if (canSelectPrevious !== previousCanSelectPrevious) {\n        this.dispatchEvent(new CustomEvent('can-select-previous-changed'));\n      }\n    }\n\n    get [symbols.defaults]() {\n      const defaults = super[symbols.defaults] || {};\n      defaults.selectionRequired = false;\n      defaults.selectionWraps = false;\n      return defaults;\n    }\n\n    /**\n     * Handle a new item being added to the list.\n     *\n     * The default implementation of this method simply sets the item's\n     * selection state to false.\n     *\n     * @param {HTMLElement} item - the item being added\n     */\n    [symbols.itemAdded](item) {\n      if (super[symbols.itemAdded]) { super[symbols.itemAdded](item); }\n      this[symbols.itemSelected](item, item === this.selectedItem);\n    }\n\n    [symbols.itemsChanged]() {\n      if (super[symbols.itemsChanged]) { super[symbols.itemsChanged](); }\n\n      // In case selected item changed position or was removed.\n      trackSelectedItem(this);\n\n      // In case the change in items affected which navigations are possible.\n      updatePossibleNavigations(this);\n    }\n\n    /**\n     * Apply the indicate selection state to the item.\n     *\n     * The default implementation of this method does nothing. User-visible\n     * effects will typically be handled by other mixins.\n     *\n     * @param {HTMLElement} item - the item being selected/deselected\n     * @param {boolean} selected - true if the item is selected, false if not\n     */\n    [symbols.itemSelected](item, selected) {\n      if (super[symbols.itemSelected]) { super[symbols.itemSelected](item, selected); }\n    }\n\n    /**\n     * The index of the item which is currently selected.\n     *\n     * A `selectedIndex` of -1 indicates there is no selection. Setting this\n     * property to -1 will remove any existing selection.\n     *\n     * @type {number}\n     */\n    get selectedIndex() {\n      return this[externalSelectedIndexSymbol] != null ?\n        this[externalSelectedIndexSymbol] :\n        -1;\n    }\n    set selectedIndex(index) {\n      // See notes at top about internal vs. external copies of this property.\n      const previousSelectedIndex = this[internalSelectedIndexSymbol];\n      let item;\n      if (index !== this[externalSelectedIndexSymbol]) {\n        // Store the new index and the corresponding item.\n        const items = this.items;\n        const hasItems = items && items.length > 0;\n        if (!(hasItems && index >= 0 && index < items.length)) {\n          index = -1; // No item at that index.\n        }\n        this[externalSelectedIndexSymbol] = index;\n        item = hasItems && index >= 0 ? items[index] : null;\n        this[externalSelectedItemSymbol] = item;\n      } else {\n        item = this[externalSelectedItemSymbol];\n      }\n\n      // Now let super do any work.\n      if ('selectedIndex' in base.prototype) { super.selectedIndex = index; }\n\n      if (index !== previousSelectedIndex) {\n        // The selected index changed.\n        this[internalSelectedIndexSymbol] = index;\n\n        const event = new CustomEvent('selected-index-changed', {\n          detail: {\n            selectedIndex: index,\n            value: index // for Polymer binding. TODO: Verify still necessary\n          }\n        });\n        this.dispatchEvent(event);\n      }\n\n      if (this[internalSelectedItemSymbol] !== item) {\n        // Update selectedItem property so it can have its own effects.\n        this.selectedItem = item;\n      }\n    }\n\n    /**\n     * The currently selected item, or null if there is no selection.\n     *\n     * Setting this property to null deselects any currently-selected item.\n     * Setting this property to an object that is not in the list has no effect.\n     *\n     * TODO: Even if selectionRequired, can still explicitly set selectedItem to null.\n     * TODO: If selectionRequired, leave selection alone?\n     *\n     * @type {object}\n     */\n    get selectedItem() {\n      return this[externalSelectedItemSymbol] || null;\n    }\n    set selectedItem(item) {\n      // See notes at top about internal vs. external copies of this property.\n      const previousSelectedItem = this[internalSelectedItemSymbol];\n      let index;\n      if (item !== this[externalSelectedItemSymbol]) {\n        // Store item and look up corresponding index.\n        const items = this.items;\n        const hasItems = items && items.length > 0;\n        index = hasItems ? Array.prototype.indexOf.call(items, item) : -1;\n        this[externalSelectedIndexSymbol] = index;\n        if (index < 0) {\n          item = null; // The indicated item isn't actually in `items`.\n        }\n        this[externalSelectedItemSymbol] = item;\n      } else {\n        index = this[externalSelectedIndexSymbol];\n      }\n\n      // Now let super do any work.\n      if ('selectedItem' in base.prototype) { super.selectedItem = item; }\n\n      if (item !== previousSelectedItem) {\n        // The selected item changed.\n        this[internalSelectedItemSymbol] = item;\n\n        if (previousSelectedItem) {\n          // Update selection state of old item.\n          this[symbols.itemSelected](previousSelectedItem, false);\n        }\n        if (item) {\n          // Update selection state to new item.\n          this[symbols.itemSelected](item, true);\n        }\n\n        updatePossibleNavigations(this);\n\n        const event = new CustomEvent('selected-item-changed', {\n          detail: {\n            selectedItem: item,\n            value: item // for Polymer binding\n          }\n        });\n        this.dispatchEvent(event);\n      }\n\n      if (this[internalSelectedIndexSymbol] !== index) {\n        // Update selectedIndex property so it can have its own effects.\n        this.selectedIndex = index;\n      }\n    }\n\n    /**\n     * Select the first item in the list.\n     */\n    selectFirst() {\n      if (super.selectFirst) { super.selectFirst(); }\n      return selectIndex(this, 0);\n    }\n\n    /**\n     * True if the list should always have a selection (if it has items).\n     *\n     * @type {boolean}\n     * @default false\n     */\n    get selectionRequired() {\n      return this[selectionRequiredSymbol];\n    }\n    set selectionRequired(selectionRequired) {\n      this[selectionRequiredSymbol] = selectionRequired;\n      if ('selectionRequired' in base.prototype) { super.selectionRequired = selectionRequired; }\n      trackSelectedItem(this);\n    }\n\n    /**\n     * True if selection navigations wrap from last to first, and vice versa.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    get selectionWraps() {\n      return this[selectionWrapsSymbol];\n    }\n    set selectionWraps(value) {\n      this[selectionWrapsSymbol] = String(value) === 'true';\n      if ('selectionWraps' in base.prototype) { super.selectionWraps = value; }\n      updatePossibleNavigations(this);\n    }\n\n    /**\n     * Select the last item in the list.\n     */\n    selectLast() {\n      if (super.selectLast) { super.selectLast(); }\n      return selectIndex(this, this.items.length - 1);\n    }\n\n    /**\n     * Select the next item in the list.\n     */\n    selectNext() {\n      if (super.selectNext) { super.selectNext(); }\n      return selectIndex(this, this.selectedIndex + 1);\n    }\n\n    /**\n     * Select the previous item in the list.\n     *\n     * If the list has no selection, the last item will be selected.\n     */\n    selectPrevious() {\n      if (super.selectPrevious) { super.selectPrevious(); }\n      const newIndex = this.selectedIndex < 0 ?\n        this.items.length - 1 :     // No selection yet; select last item.\n        this.selectedIndex - 1;\n      return selectIndex(this, newIndex);\n    }\n\n    /**\n     * Fires when the selectedItem property changes.\n     *\n     * @memberof SingleSelection\n     * @event selected-item-changed\n     * @param {HTMLElement} detail.selectedItem The new selected item.\n     * @param {HTMLElement} detail.previousItem The previously selected item.\n     */\n\n    /**\n     * Fires when the selectedIndex property changes.\n     *\n     * @memberof SingleSelection\n     * @event selected-index-changed\n     * @param {number} detail.selectedIndex The new selected index.\n     */\n\n  }\n\n  return SingleSelection;\n};\n\n\n// Ensure the given index is within bounds, and select it if it's not already\n// selected.\nfunction selectIndex(element, index) {\n  const count = element.items.length;\n\n  const boundedIndex = (element.selectionWraps) ?\n    // JavaScript mod doesn't handle negative numbers the way we want to wrap.\n    // See http://stackoverflow.com/a/18618250/76472\n    ((index % count) + count) % count :\n\n    // Keep index within bounds of array.\n    Math.max(Math.min(index, count - 1), 0);\n\n  const previousIndex = element.selectedIndex;\n  if (previousIndex !== boundedIndex) {\n    element.selectedIndex = boundedIndex;\n    return true;\n  } else {\n    return false;\n  }\n}\n\n// Following a change in the set of items, or in the value of the\n// `selectionRequired` property, reacquire the selected item. If it's moved,\n// update `selectedIndex`. If it's been removed, and a selection is required,\n// try to select another item.\nfunction trackSelectedItem(element) {\n\n  const items = element.items;\n  const itemCount = items ? items.length : 0;\n\n  const previousSelectedItem = element.selectedItem;\n  if (!previousSelectedItem) {\n    // No item was previously selected.\n    if (element.selectionRequired) {\n      // Select the first item by default.\n      element.selectedIndex = 0;\n    }\n  } else if (itemCount === 0) {\n    // We've lost the selection, and there's nothing left to select.\n    element.selectedItem = null;\n  } else {\n    // Try to find the previously-selected item in the current set of items.\n    const indexInCurrentItems = Array.prototype.indexOf.call(items, previousSelectedItem);\n    const previousSelectedIndex = element.selectedIndex;\n    if (indexInCurrentItems < 0) {\n      // Previously-selected item was removed from the items.\n      // Select the item at the same index (if it exists) or as close as possible.\n      const newSelectedIndex = Math.min(previousSelectedIndex, itemCount - 1);\n      // Select by item, since index may be the same, and we want to raise the\n      // selected-item-changed event.\n      element.selectedItem = items[newSelectedIndex];\n    } else if (indexInCurrentItems !== previousSelectedIndex) {\n      // Previously-selected item still there, but changed position.\n      element.selectedIndex = indexInCurrentItems;\n    }\n  }\n}\n\n// Following a change in selection, report whether it's now possible to\n// go next/previous from the given index.\nfunction updatePossibleNavigations(element) {\n  let canSelectNext;\n  let canSelectPrevious;\n  const items = element.items;\n  if (items == null || items.length === 0) {\n    // No items to select.\n    canSelectNext = false;\n    canSelectPrevious = false;\n  } if (element.selectionWraps) {\n    // Since there are items, can always go next/previous.\n    canSelectNext = true;\n    canSelectPrevious = true;\n  } else {\n    const index = element.selectedIndex;\n    if (index < 0 && items.length > 0) {\n      // Special case. If there are items but no selection, declare that it's\n      // always possible to go next/previous to create a selection.\n      canSelectNext = true;\n      canSelectPrevious = true;\n    } else {\n      // Normal case: we have an index in a list that has items.\n      canSelectPrevious = (index > 0);\n      canSelectNext = (index < items.length - 1);\n    }\n  }\n  if (element.canSelectNext !== canSelectNext) {\n    element.canSelectNext = canSelectNext;\n  }\n  if (element.canSelectPrevious !== canSelectPrevious) {\n    element.canSelectPrevious = canSelectPrevious;\n  }\n}\n","/**\n * Helper function to create a symbol that can be used for associating private\n * data with an element.\n *\n * Mixins and component classes often want to associate private data with an\n * element instance, but JavaScript does not have direct support for true\n * private properties. One approach is to use the\n * [Symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol)\n * data type to set and retrieve data on an element.\n *\n * Unfortunately, the Symbol type is not available in Internet Explorer 11. The\n * `createSymbol` helper function exists as a workaround for IE 11. Rather than\n * returning a true Symbol, it simply returns an underscore-prefixed string.\n *\n * Usage:\n *\n *     const fooSymbol = createSymbol('foo');\n *\n *     class MyElement extends HTMLElement {\n *       get foo() {\n *         return this[fooSymbol];\n *       }\n *       set foo(value) {\n *         this[fooSymbol] = value;\n *       }\n *     }\n *\n * In IE 11, this sample will \"hide\" data behind an instance property this._foo.\n * The use of the underscore is meant to reduce (not eliminate) the potential\n * for name conflicts, and discourage (not prevent) external access to this\n * data. In modern browsers, the above code will eliminate the potential of\n * naming conflicts, and better hide the data behind a real Symbol.\n *\n * @function createSymbol\n * @param {string} description - A string to identify the symbol when debugging\n */\nexport default function createSymbol(description) {\n  return typeof Symbol === 'function' ?\n    Symbol(description) :\n    `_${description}`;\n}\n","/*\n * Microtask helper for IE 11.\n *\n * Executing a function as a microtask is trivial in browsers that support\n * promises, whose then() clauses use microtask timing. IE 11 doesn't support\n * promises, but does support MutationObservers, which are also executed as\n * microtasks. So this helper uses an MutationObserver to achieve microtask\n * timing.\n *\n * See https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/\n *\n * Inspired by Polymer's async() function.\n */\n\n\n// The queue of pending callbacks to be executed as microtasks.\nconst callbacks = [];\n\n// Create an element that we will modify to force observable mutations.\nconst element = document.createTextNode('');\n\n// A monotonically-increasing value.\nlet counter = 0;\n\n\n/**\n * Add a callback to the microtask queue.\n *\n * This uses a MutationObserver so that it works on IE 11.\n *\n * NOTE: IE 11 may actually use timeout timing with MutationObservers. This\n * needs more investigation.\n *\n * @function microtask\n * @param {function} callback\n */\nexport default function microtask(callback) {\n  callbacks.push(callback);\n  // Force a mutation.\n  element.textContent = ++counter;\n}\n\n\n// Execute any pending callbacks.\nfunction executeCallbacks() {\n  while (callbacks.length > 0) {\n    const callback = callbacks.shift();\n    callback();\n  }\n}\n\n\n// Create the observer.\nconst observer = new MutationObserver(executeCallbacks);\nobserver.observe(element, {\n  characterData: true\n});\n","import createSymbol from './createSymbol';\nimport toggleClass from './toggleClass';\n\n\n// Symbols for private data members on an element.\nconst safeToSetAttributesSymbol = createSymbol('safeToSetAttributes');\nconst pendingAttributesSymbol = createSymbol('pendingAttributes');\nconst pendingClassesSymbol = createSymbol('pendingClasses');\n\n\n/**\n * Helper functions for updating attributes, including the `class` attribute.\n */\nexport default {\n\n  /**\n   * Perform any pending updates to attributes and classes.\n   *\n   * This writes any `setAttribute` or `toggleClass` values that were performed\n   * before an element was attached to the document for the first time.\n   *\n   * This method should be called by mixins/components in their\n   * `connectedCallback`. If mulitple mixins/components invoke this during the\n   * same `connectedCallback`, only the first call will have any effect. The\n   * subsequent calls will be harmless.\n   *\n   * @param {HTMLElement} element - The element being added to the document.\n   */\n  connected(element) {\n    element[safeToSetAttributesSymbol] = true;\n\n    // Set any pending attributes.\n    if (element[pendingAttributesSymbol]) {\n      for (let attribute in element[pendingAttributesSymbol]) {\n        const value = element[pendingAttributesSymbol][attribute];\n        setAttributeToElement(element, attribute, value);\n      }\n      element[pendingAttributesSymbol] = null;\n    }\n\n    // Set any pending classes.\n    if (element[pendingClassesSymbol]) {\n      for (let className in element[pendingClassesSymbol]) {\n        const value = element[pendingClassesSymbol][className];\n        toggleClass(element, className, value);\n      }\n      element[pendingClassesSymbol] = null;\n    }\n  },\n\n  /**\n   * Set/unset the attribute with the indicated name.\n   *\n   * This method exists primarily to handle the case where an element wants to\n   * set a default property value that should be reflected as an attribute. An\n   * important limitation of custom element consturctors is that they cannot\n   * set attributes. A call to `setAttribute` during the constructor will\n   * be deferred until the element is connected to the document.\n   *\n   * @param {string} attribute - The name of the *attribute* (not property) to set.\n   * @param {object} value - The value to set. If null, the attribute will be removed.\n   */\n  setAttribute(element, attribute, value) {\n    if (element[safeToSetAttributesSymbol]) {\n      // Safe to set attributes immediately.\n      setAttributeToElement(element, attribute, value);\n    } else {\n      // Defer setting attributes until the first time we're connected.\n      if (!element[pendingAttributesSymbol]) {\n        element[pendingAttributesSymbol] = {};\n      }\n      element[pendingAttributesSymbol][attribute] = value;\n    }\n  },\n\n  /**\n   * Set/unset the class with the indicated name.\n   *\n   * This method exists primarily to handle the case where an element wants to\n   * set a default property value that should be reflected as as class. An\n   * important limitation of custom element consturctors is that they cannot\n   * set attributes, including the `class` attribute. A call to\n   * `toggleClass` during the constructor will be deferred until the element\n   * is connected to the document.\n   *\n   * @param {string} className - The name of the class to set.\n   * @param {object} value - True to set the class, false to remove it.\n   */\n  toggleClass(element, className, value) {\n    if (element[safeToSetAttributesSymbol]) {\n      // Safe to set class immediately.\n      toggleClass(element, className, value);\n    } else {\n      // Defer setting class until the first time we're connected.\n      if (!element[pendingClassesSymbol]) {\n        element[pendingClassesSymbol] = {};\n      }\n      element[pendingClassesSymbol][className] = value;\n    }\n  }\n\n};\n\n\n// Reflect the attribute to the given element.\n// If the value is null, remove the attribute.\nfunction setAttributeToElement(element, attributeName, value) {\n  if (value === null || typeof value === 'undefined') {\n    element.removeAttribute(attributeName);\n  } else {\n    const text = String(value);\n    // Avoid recursive attributeChangedCallback calls.\n    if (element.getAttribute(attributeName) !== text) {\n      element.setAttribute(attributeName, value);\n    }\n  }\n}\n","import createSymbol from './createSymbol';\n\n/**\n * A collection of Symbol objects for standard component properties and methods.\n *\n * These Symbol objects are used to allow mixins and a component to internally\n * communicate, without exposing these properties and methods in the component's\n * public API.\n *\n * To use these Symbol objects in your own component, include this module and\n * then create a property or method whose key is the desired Symbol.\n *\n *     import 'SingleSelectionMixin' from 'basic-component-mixins/src/SingleSelectionMixin';\n *     import 'symbols' from 'basic-component-mixins/src/symbols';\n *\n *     class MyElement extends SingleSelectionMixin(HTMLElement) {\n *       [symbols.itemSelected](item, selected) {\n *         // This will be invoked whenever an item is selected/deselected.\n *       }\n *     }\n *\n * @module symbols\n */\nconst symbols = {\n\n  /**\n   * Symbol for the `defaults` property.\n   *\n   * This property can be used to set or override defaults that will be applied\n   * to a new component instance. When implementing this property, take care to\n   * first acquire any defaults defined by the superclass. The standard idiom is\n   * as follows:\n   *\n   *     get [symbols.defaults]() {\n   *       const defaults = super[symbols.defaults] || {};\n   *       // Set or override default values here\n   *       defaults.customProperty = false;\n   *       return defaults;\n   *     }\n   *\n   * @var {object} defaults\n   */\n  defaults: createSymbol('defaults'),\n\n  /**\n   * Symbol for the `dragging` property.\n   *\n   * Components like carousels often define animated CSS transitions for\n   * sliding effects. Such a transition should usually *not* be applied while\n   * the user is dragging, because a CSS animation will introduce a lag that\n   * makes the swipe feel sluggish. Instead, as long as the user is dragging\n   * with their finger down, the transition should be suppressed. When the\n   * user releases their finger, the transition can be restored, allowing the\n   * animation to show the carousel sliding into its final position.\n   *\n   * @type {boolean} true if a drag is in progress, false if not.\n   */\n  dragging: createSymbol('dragging'),\n\n  /**\n   * Symbol for the `goDown` method.\n   *\n   * This method is invoked when the user wants to go/navigate down.\n   *\n   * @function goDown\n   */\n  goDown: createSymbol('goDown'),\n\n  /**\n   * Symbol for the `goEnd` method.\n   *\n   * This method is invoked when the user wants to go/navigate to the end (e.g.,\n   * of a list).\n   *\n   * @function goEnd\n   */\n  goEnd: createSymbol('goEnd'),\n\n  /**\n   * Symbol for the `goLeft` method.\n   *\n   * This method is invoked when the user wants to go/navigate left.\n   *\n   * @function goLeft\n   */\n  goLeft: createSymbol('goLeft'),\n\n  /**\n   * Symbol for the `goRight` method.\n   *\n   * This method is invoked when the user wants to go/navigate right.\n   *\n   * @function goRight\n   */\n  goRight: createSymbol('goRight'),\n\n  /**\n   * Symbol for the `goStart` method.\n   *\n   * This method is invoked when the user wants to go/navigate to the start\n   * (e.g., of a list).\n   *\n   * @function goStart\n   */\n  goStart: createSymbol('goStart'),\n\n  /**\n   * Symbol for the `goUp` method.\n   *\n   * This method is invoked when the user wants to go/navigate up.\n   *\n   * @function goUp\n   */\n  goUp: createSymbol('goUp'),\n\n  /**\n   * Symbol for the `itemAdded` method.\n   *\n   * This method is invoked when a new item is added to a list.\n   *\n   * @function itemAdded\n   * @param {HTMLElement} item - the item being selected/deselected\n   */\n  itemAdded: createSymbol('itemAdded'),\n\n\n  /**\n   * Symbol for the `itemsChanged` method.\n   *\n   * This method is invoked when the underlying contents change. It is also\n   * invoked on component initialization – since the items have \"changed\" from\n   * being nothing.\n   */\n  itemsChanged: createSymbol('itemsChanged'),\n\n  /**\n   * Symbol for the `itemSelected` method.\n   *\n   * This method is invoked when an item becomes selected or deselected.\n   *\n   * @function itemSelected\n   * @param {HTMLElement} item - the item being selected/deselected\n   * @param {boolean} selected - true if the item is selected, false if not\n   */\n  itemSelected: createSymbol('itemSelected'),\n\n  /**\n   * Symbol for the `keydown` method.\n   *\n   * This method is invoked when an element receives a `keydown` event.\n   *\n   * @function keydown\n   * @param {KeyboardEvent} event - the event being processed\n   */\n  keydown: createSymbol('keydown'),\n\n  /**\n   * Symbol for the `template` property.\n   *\n   * This property returns a component's template.\n   *\n   * @type {string|HTMLElement}\n   */\n  template: createSymbol('template')\n};\n\nexport default symbols;\n","/**\n * Helper function for standard classList.toggle() behavior on old browsers,\n * namely IE 11.\n *\n * The standard\n * [classlist](https://developer.mozilla.org/en-US/docs/Web/API/Element/classList)\n * object has a `toggle()` function that supports a second Boolean parameter\n * that can be used to succinctly turn a class on or off. This feature is often\n * useful in designing custom elements, which may want to externally reflect\n * component state in a CSS class that can be used for styling purposes.\n *\n * Unfortunately, IE 11 does not support the Boolean parameter to\n * `classList.toggle()`. This helper function behaves like the standard\n * `toggle()`, including support for the Boolean parameter, so that it can be\n * used even on IE 11.\n *\n * @function toggleClass\n * @param {HTMLElement} element - The element to modify\n * @param {string} className - The class to add/remove\n * @param {boolean} [force] - Force the class to be added (if true) or removed\n *                            (if false)\n */\nexport default function toggleClass(element, className, force) {\n  const classList = element.classList;\n  const addClass = (typeof force === 'undefined') ?\n    !classList.contains(className) :\n    force;\n  if (addClass) {\n    classList.add(className);\n  } else {\n    classList.remove(className);\n  }\n  return addClass;\n}\n","import AttributeMarshallingMixin from '../../basic-component-mixins/src/AttributeMarshallingMixin';\nimport ComposableMixin from '../../basic-component-mixins/src/ComposableMixin';\nimport DistributedChildrenMixin from '../../basic-component-mixins/src/DistributedChildrenMixin';\nimport ShadowElementReferencesMixin from '../../basic-component-mixins/src/ShadowElementReferencesMixin';\nimport ShadowTemplateMixin from '../../basic-component-mixins/src/ShadowTemplateMixin';\n\n\n/**\n * A sample general-purpose base class for defining custom elements that mixes\n * in some common features: template stamping into a shadow root, shadow element\n * references, marshalling attributes to properties, and retrieving the children\n * distributed to a component.\n *\n * This base class is not special in any way, and is defined only as a\n * convenient shorthand for applying the mixins listed above. You can use this\n * class as a base class for your own elements, or easily create your own base\n * class by applying the same set of mixins.\n *\n * The ElementBase base class does not register itself as a custom element with\n * the browser, and hence cannot be independently instantiated.\n *\n * @mixes AttributeMarshallingMixin\n * @mixes ComposableMixin\n * @mixes DistributedChildrenMixin\n * @mixes ShadowElementReferencesMixin\n * @mixes ShadowTemplateMixin\n */\nclass ElementBase extends ComposableMixin(HTMLElement).compose(\n  ShadowTemplateMixin,          // before node finding, so shadow root is populated\n  ShadowElementReferencesMixin, // before marshalling, so properties can use refs\n  AttributeMarshallingMixin,\n  DistributedChildrenMixin\n) {}\n\nexport default ElementBase;\n","/*\n * This file is transpiled to create an ES5-compatible distribution in which\n * the package's main feature(s) are available via the window.Basic global.\n * If you're already using ES6 yourself, ignore this file, and instead import\n * the source file(s) you want from the src folder.\n */\n\nimport ListBox from './src/ListBox';\n\nwindow.Basic = window.Basic || {};\nwindow.Basic.ListBox = ListBox;\n","import ElementBase from '../../basic-element-base/src/ElementBase';\nimport DistributedChildrenContentMixin from '../../basic-component-mixins/src/DistributedChildrenContentMixin';\nimport ClickSelectionMixin from '../../basic-component-mixins/src/ClickSelectionMixin';\nimport ContentItemsMixin from '../../basic-component-mixins/src/ContentItemsMixin';\nimport DirectionSelectionMixin from '../../basic-component-mixins/src/DirectionSelectionMixin';\nimport GenericMixin from '../../basic-component-mixins/src/GenericMixin';\nimport KeyboardMixin from '../../basic-component-mixins/src/KeyboardMixin';\nimport KeyboardDirectionMixin from '../../basic-component-mixins/src/KeyboardDirectionMixin';\nimport KeyboardPagedSelectionMixin from '../../basic-component-mixins/src/KeyboardPagedSelectionMixin';\nimport KeyboardPrefixSelectionMixin from '../../basic-component-mixins/src/KeyboardPrefixSelectionMixin';\nimport SelectedItemTextValueMixin from '../../basic-component-mixins/src/SelectedItemTextValueMixin';\nimport SelectionAriaActiveMixin from '../../basic-component-mixins/src/SelectionAriaActiveMixin';\nimport SelectionHighlightMixin from '../../basic-component-mixins/src/SelectionHighlightMixin';\nimport SelectionInViewMixin from '../../basic-component-mixins/src/SelectionInViewMixin';\nimport SingleSelectionMixin from '../../basic-component-mixins/src/SingleSelectionMixin';\nimport symbols from '../../basic-component-mixins/src/symbols';\n\n\n/**\n * A single-selection list box that supports selection highlighting (using the\n * system highlight color) and keyboard navigation.\n *\n * [Live demo](http://basicwebcomponents.org/basic-web-components/packages/basic-list-box/)\n *\n * The user can select an item with the mouse/touch or keyboard: Up/Down, Page\n * Up/Down, Home/End.\n *\n * Like other Basic Web Components, this can handle distributed content: you can\n * include a content element inside a basic-list-box, and the list will navigate\n * through the distributed content.\n *\n * This component includes basic ARIA support to provide a reasonable default\n * experience, e.g., for screen readers. The list component itself will be\n * assigned an appropriate ARIA role (default is \"listbox\"). The ID of the\n * selected item will be reflected in an \"aria-activedescendant\" attribute\n * applied to the list. To support this feature, all items in the list need\n * unique IDs. If an item does not have an ID, basic-list-box will automatically\n * assign a default ID.\n *\n * The keyboard interaction model generally follows that of Microsoft Windows'\n * list boxes instead of those in OS X:\n *\n * * The Page Up/Down and Home/End keys actually move the selection, rather than\n *   just scrolling the list. The former behavior seems more generally useful\n *   for keyboard users.\n *\n * * Pressing Page Up/Down will move the selection to the topmost/bottommost\n *   visible item if the selection is not already there. Thereafter, the key\n *   will move the selection up/down by a page, and (per the above point) make\n *   the selected item visible.\n *\n * Programmatically selecting an item (by setting the selected property) scrolls\n * the item into view.\n *\n * The user can also select an item by typing the beginning of an item's text.\n *\n * @extends ElementBase\n * @mixes ClickSelectionMixin\n * @mixes ContentItemsMixin\n * @mixes DirectionSelectionMixin\n * @mixes DistributedChildrenContentMixin\n * @mixes GenericMixin\n * @mixes KeyboardMixin\n * @mixes KeyboardDirectionMixin\n * @mixes KeyboardPagedSelectionMixin\n * @mixes KeyboardPrefixSelectionMixin\n * @mixis SelectedItemTextValueMixin\n * @mixes SelectionAriaActiveMixin\n * @mixes SelectionHighlightMixin\n * @mixes SelectionInViewMixin\n * @mixes SingleSelectionMixin\n */\nclass ListBox extends ElementBase.compose(\n  ClickSelectionMixin,\n  ContentItemsMixin,\n  DirectionSelectionMixin,\n  DistributedChildrenContentMixin,\n  GenericMixin,\n  KeyboardMixin,\n  KeyboardDirectionMixin,\n  KeyboardPagedSelectionMixin,\n  KeyboardPrefixSelectionMixin,\n  SelectedItemTextValueMixin,\n  SelectionAriaActiveMixin,\n  SelectionHighlightMixin,\n  SelectionInViewMixin,\n  SingleSelectionMixin\n) {\n\n  get [symbols.defaults]() {\n    const defaults = super[symbols.defaults] || {};\n    defaults.navigationAxis = 'vertical';\n    return defaults;\n  }\n\n  get scrollTarget() {\n    return this.$.itemsContainer;\n  }\n\n  get [symbols.template]() {\n    const baseTemplate = super[symbols.template] || '';\n    return `\n      <style>\n      :host {\n        display: -webkit-flex;\n        display: flex;\n        -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n      }\n\n      [target=\"child\"] {\n        display: -webkit-flex;\n        display: flex;\n        -webkit-flex: 1;\n        flex: 1;\n      }\n\n      #itemsContainer {\n        -webkit-flex: 1;\n        flex: 1;\n        -webkit-overflow-scrolling: touch;\n        overflow-y: scroll; /* for momentum scrolling */\n      }\n\n      /* GenericMixin appearance */\n      :host([generic=\"\"]) {\n        border: 1px solid gray;\n        box-sizing: border-box;\n        cursor: default;\n      }\n\n      :host([generic=\"\"]) #itemsContainer ::slotted(*) {\n        cursor: default;\n        padding: 0.25em;\n        -webkit-user-select: none;\n        -moz-user-select: none;\n        -ms-user-select: none;\n        user-select: none;\n      }\n      </style>\n\n      <div id=\"itemsContainer\" role=\"none\">\n        <slot></slot>\n      </div>\n      ${baseTemplate}\n    `;\n  }\n\n  /**\n   * Fires when the list's value property changes.\n   *\n   * @memberof ListBox\n   * @event value-changed\n   */\n}\n\n\ncustomElements.define('basic-list-box', ListBox);\nexport default ListBox;\n"]}