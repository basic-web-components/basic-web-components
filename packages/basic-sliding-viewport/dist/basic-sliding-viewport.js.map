{"version":3,"sources":["node_modules/browser-pack/_prelude.js","packages/basic-component-mixins/src/AttributeMarshallingMixin.js","packages/basic-component-mixins/src/ComposableMixin.js","packages/basic-component-mixins/src/DistributedChildrenContentMixin.js","packages/basic-component-mixins/src/DistributedChildrenMixin.js","packages/basic-component-mixins/src/FractionalSelectionMixin.js","packages/basic-component-mixins/src/ShadowElementReferencesMixin.js","packages/basic-component-mixins/src/ShadowTemplateMixin.js","packages/basic-component-mixins/src/createSymbol.js","packages/basic-component-mixins/src/microtask.js","packages/basic-component-mixins/src/safeAttributes.js","packages/basic-component-mixins/src/symbols.js","packages/basic-component-mixins/src/toggleClass.js","packages/basic-element-base/src/ElementBase.js","packages/basic-sliding-viewport/globals.js","packages/basic-sliding-viewport/src/SlidingViewport.js","packages/basic-spread-items/src/SpreadItems.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","attributeToPropertyName","attributeName","propertyName","attributeToPropertyNames","hypenRegEx","replace","match","toUpperCase","attributesForClass","classFn","HTMLElement","Object","baseClass","getPrototypeOf","prototype","constructor","baseAttributes","propertyNames","getOwnPropertyNames","setterNames","filter","getOwnPropertyDescriptor","set","attributes","map","setterName","propertyNameToAttribute","diff","attribute","indexOf","concat","propertyNamesToAttributes","uppercaseRegEx","toLowerCase","_safeAttributes","base","AttributeMarshalling","_base","_classCallCheck","this","_possibleConstructorReturn","__proto__","apply","arguments","_inherits","_createClass","key","value","oldValue","newValue","_get","_safeAttributes2","default","connected","setAttribute","className","toggleClass","get","composeClass","mixin","Subclass","_base2","copyOwnProperties","NON_MIXABLE_OBJECT_PROPERTIES","source","target","ignorePropertyNames","undefined","forEach","name","descriptor","defineProperty","Composable","_len","mixins","Array","_key","reduce","_microtask","DistributedChildrenContent","_this","shadowRoot","slots","querySelectorAll","slot","addEventListener","event","contentChanged","_microtask2","CustomEvent","dispatchEvent","distributedChildren","console","warn","_set","expandContentElements","nodes","includeTextNodes","_ref","expanded","node","isSlot","HTMLSlotElement","localName","assignedNodes","flatten","Text","flattened","_toConsumableArray","DistributedChildren","children","childNodes","strings","distributedChildNodes","child","textContent","join","FractionalSelection","selectedFraction","selectedFractionSymbol","_createSymbol","_createSymbol2","helpers","dampedSelection","selection","itemCount","bound","damped","damping","x","y","elementSelection","element","selectedIndex","selectionParts","index","Math","ceil","floor","fraction","wrappedSelection","wrappedSelectionParts","wrap","ShadowElementReferences","$","nodesWithIds","id","getAttribute","createTemplateWithInnerHTML","innerHTML","template","document","createElement","div","content","appendChild","shimTemplateStyles","tag","window","WebComponents","ShadowCSS","shimStyling","_symbols","ShadowTemplate","_symbols2","ShadowDOMPolyfill","root","attachShadow","mode","clone","importNode","createSymbol","description","Symbol","microtask","callback","callbacks","push","counter","executeCallbacks","shift","createTextNode","observer","MutationObserver","observe","characterData","setAttributeToElement","removeAttribute","text","String","_toggleClass2","safeToSetAttributesSymbol","pendingAttributesSymbol","pendingClassesSymbol","_value","_toggleClass3","symbols","defaults","dragging","goDown","goEnd","goLeft","goRight","goStart","goUp","itemAdded","itemsChanged","itemSelected","keydown","force","classList","addClass","contains","add","remove","_AttributeMarshallingMixin","_ComposableMixin","_DistributedChildrenMixin","_ShadowElementReferencesMixin","_ShadowTemplateMixin","ElementBase","_ComposableMixin2","compose","_ShadowTemplateMixin2","_ShadowElementReferencesMixin2","_AttributeMarshallingMixin2","_DistributedChildrenMixin2","_SlidingViewport","Basic","SlidingViewport","_SlidingViewport2","renderSelection","selectedItem","_FractionalSelectionMixin2","items","left","transform","slidingContainer","style","webkitTransform","_ElementBase","_FractionalSelectionMixin","_SpreadItems","selectedItemSymbol","_ElementBase2","showTransition","render","requestAnimationFrame","bind","item","reflectClass","customElements","define","_DistributedChildrenContentMixin","SpreadItems","count","spreadContainer","width","itemWidth","_DistributedChildrenContentMixin2"],"mappings":"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","file":"basic-sliding-viewport.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import safeAttributes from './safeAttributes';\n\n\n// Memoized maps of attribute to property names and vice versa.\nconst attributeToPropertyNames = {};\nconst propertyNamesToAttributes = {};\n\n\n/* Exported function extends a base class with AttributeMarshalling. */\nexport default (base) => {\n\n  /**\n   * Mixin which marshalls attributes to properties and vice versa.\n   *\n   * If your component exposes a setter for a property, it's generally a good\n   * idea to let devs using your component be able to set that property in HTML\n   * via an element attribute. You can code that yourself by writing an\n   * `attributeChangedCallback`, or you can use this mixin to get a degree of\n   * automatic support.\n   *\n   * This mixin implements an `attributeChangedCallback` that will attempt to\n   * convert a change in an element attribute into a call to the corresponding\n   * property setter. Attributes typically follow hyphenated names (\"foo-bar\"),\n   * whereas properties typically use camelCase names (\"fooBar\"). This mixin\n   * respects that convention, automatically mapping the hyphenated attribute\n   * name to the corresponding camelCase property name.\n   *\n   * Example: You define a component using this mixin:\n   *\n   *     class MyElement extends AttributeMarshallingMixin(HTMLElement) {\n   *       get fooBar() { return this._fooBar; }\n   *       set fooBar(value) { this._fooBar = value; }\n   *     }\n   *     customElements.define('my-element', MyElement);\n   *\n   * If someone then instantiates your component in HTML:\n   *\n   *     <my-element foo-bar=\"Hello\"></my-element>\n   *\n   * Then, after the element has been upgraded, the `fooBar` setter will\n   * automatically be invoked with the initial value \"Hello\".\n   *\n   * For the time being, this mixin only supports string-valued properties.\n   * If you'd like to convert string attributes to other types (numbers,\n   * booleans), you need to implement `attributeChangedCallback` yourself.\n   */\n  class AttributeMarshalling extends base {\n\n    /*\n     * Handle a change to the attribute with the given name.\n     */\n    attributeChangedCallback(attributeName, oldValue, newValue) {\n      if (super.attributeChangedCallback) { super.attributeChangedCallback(); }\n      const propertyName = attributeToPropertyName(attributeName);\n      // If the attribute name corresponds to a property name, set the property.\n      // Ignore standard HTMLElement properties handled by the DOM.\n      if (propertyName in this && !(propertyName in HTMLElement.prototype)) {\n        this[propertyName] = newValue;\n      }\n    }\n\n    connectedCallback() {\n      if (super.connectedCallback) { super.connectedCallback(); }\n      safeAttributes.connected(this);\n    }\n\n    static get observedAttributes() {\n      return attributesForClass(this);\n    }\n\n    /**\n     * Set/unset the attribute with the indicated name.\n     *\n     * This method exists primarily to handle the case where an element wants to\n     * set a default property value that should be reflected as an attribute. An\n     * important limitation of custom element consturctors is that they cannot\n     * set attributes. A call to `reflectAttribute` during the constructor will\n     * be deferred until the element is connected to the document.\n     *\n     * @param {string} attribute - The name of the *attribute* (not property) to set.\n     * @param {object} value - The value to set. If null, the attribute will be removed.\n     */\n    reflectAttribute(attribute, value) {\n      return safeAttributes.setAttribute(this, attribute, value);\n    }\n\n    /**\n     * Set/unset the class with the indicated name.\n     *\n     * This method exists primarily to handle the case where an element wants to\n     * set a default property value that should be reflected as as class. An\n     * important limitation of custom element consturctors is that they cannot\n     * set attributes, including the `class` attribute. A call to\n     * `reflectClass` during the constructor will be deferred until the element\n     * is connected to the document.\n     *\n     * @param {string} className - The name of the class to set.\n     * @param {object} value - True to set the class, false to remove it.\n     */\n    reflectClass(className, value) {\n      return safeAttributes.toggleClass(this, className, value);\n    }\n\n  }\n\n  return AttributeMarshalling;\n};\n\n\n// Convert hyphenated foo-bar attribute name to camel case fooBar property name.\nfunction attributeToPropertyName(attributeName) {\n  let propertyName = attributeToPropertyNames[attributeName];\n  if (!propertyName) {\n    // Convert and memoize.\n    const hypenRegEx = /-([a-z])/g;\n    propertyName = attributeName.replace(hypenRegEx,\n        match => match[1].toUpperCase());\n    attributeToPropertyNames[attributeName] = propertyName;\n  }\n  return propertyName;\n}\n\nfunction attributesForClass(classFn) {\n\n  // We treat the element base classes as if they have no attributes, since we\n  // don't want to receive attributeChangedCallback for them.\n  if (classFn === HTMLElement || classFn === Object) {\n    return [];\n  }\n\n  // Get attributes for parent class.\n  const baseClass = Object.getPrototypeOf(classFn.prototype).constructor;\n  const baseAttributes = attributesForClass(baseClass);\n\n  // Get attributes for this class.\n  const propertyNames = Object.getOwnPropertyNames(classFn.prototype);\n  const setterNames = propertyNames.filter(propertyName =>\n    typeof Object.getOwnPropertyDescriptor(\n        classFn.prototype, propertyName).set === 'function');\n  const attributes = setterNames.map(setterName =>\n      propertyNameToAttribute(setterName));\n\n  // Merge.\n  const diff = attributes.filter(attribute =>\n      baseAttributes.indexOf(attribute) < 0);\n  return baseAttributes.concat(diff);\n}\n\n// Convert a camel case fooBar property name to a hyphenated foo-bar attribute.\nfunction propertyNameToAttribute(propertyName) {\n  let attribute = propertyNamesToAttributes[propertyName];\n  if (!attribute) {\n    // Convert and memoize.\n    const uppercaseRegEx = /([A-Z])/g;\n    attribute = propertyName.replace(uppercaseRegEx, '-$1').toLowerCase();\n  }\n  return attribute;\n}\n","/* Exported function extends a base class with Composable. */\nexport default (base) => {\n\n  /**\n   * Mixin to make a class more easily composable with other mixins.\n   *\n   * This mixin contributes a `compose` method that applies a set of mixin\n   * functions and returns the resulting new class. This sugar can make the\n   * application of many mixins at once easier to read.\n   */\n  class Composable extends base {\n\n    /**\n     * Apply a set of mixin functions or mixin objects to the present class and\n     * return the new class.\n     *\n     * Instead of writing:\n     *\n     *     let MyClass = Mixin1(Mixin2(Mixin3(Mixin4(Mixin5(BaseClass)))));\n     *\n     * You can write:\n     *\n     *     let MyClass = ComposableMixin(BaseClass).compose(\n     *       Mixin1,\n     *       Mixin2,\n     *       Mixin3,\n     *       Mixin4,\n     *       Mixin5\n     *     );\n     *\n     * This function can also take mixin objects. A mixin object is just a\n     * shorthand for a mixin function that creates a new subclass with the given\n     * members. The mixin object's members are *not* copied directly onto the\n     * prototype of the base class, as with traditional mixins.\n     *\n     * In addition to providing syntactic sugar, this mixin can be used to\n     * define a class in ES5, which lacks ES6's `class` keyword.\n     *\n     * @param {...mixins} mixins - A set of mixin functions or objects to apply.\n     */\n    static compose(...mixins) {\n      // We create a new subclass for each mixin in turn. The result becomes\n      // the base class extended by any subsequent mixins. It turns out that\n      // we can use Array.reduce() to concisely express this, using the current\n      // object as the seed for reduce().\n      return mixins.reduce(composeClass, this);\n    }\n\n  }\n\n  return Composable;\n};\n\n\n// Properties defined by Object that we don't want to mixin.\nconst NON_MIXABLE_OBJECT_PROPERTIES = [\n  'constructor'\n];\n\n/*\n * Apply the mixin to the given base class to return a new class.\n * The mixin can either be a function that returns the modified class, or a\n * plain object whose members will be copied to the new class' prototype.\n */\nfunction composeClass(base, mixin) {\n  if (typeof mixin === 'function') {\n    // Mixin function\n    return mixin(base);\n  } else {\n    // Mixin object\n    class Subclass extends base {}\n    copyOwnProperties(mixin, Subclass.prototype, NON_MIXABLE_OBJECT_PROPERTIES);\n    return Subclass;\n  }\n}\n\n\n/*\n * Copy the given properties/methods to the target.\n * Return the updated target.\n */\nfunction copyOwnProperties(source, target, ignorePropertyNames = []) {\n  Object.getOwnPropertyNames(source).forEach(name => {\n    if (ignorePropertyNames.indexOf(name) < 0) {\n      const descriptor = Object.getOwnPropertyDescriptor(source, name);\n      Object.defineProperty(target, name, descriptor);\n    }\n  });\n  return target;\n}\n","import microtask from './microtask';\n\n\n/* Exported function extends a base class with DistributedChildrenContent. */\nexport default (base) => {\n\n  /**\n   * Mixin which defines a component's content as its children, expanding any\n   * nodes distributed to the component's slots.\n   *\n   * This also provides notification of changes to a component's content. It\n   * will invoke a `contentChanged` method when the component is first\n   * instantiated, and whenever its distributed children change. This is an\n   * easy way to satisfy the Gold Standard checklist item for monitoring\n   * [Content Changes](https://github.com/webcomponents/gold-standard/wiki/Content-Changes).\n   *\n   * Example:\n   *\n   * ```\n   * let base = DistributedChildrenContentMixin(DistributedChildrenMixin(HTMLElement));\n   * class CountingElement extends base {\n   *\n   *   constructor() {\n   *     super();\n   *     let root = this.attachShadow({ mode: 'open' });\n   *     root.innerHTML = `<slot></slot>`;\n   *   }\n   *\n   *   contentChanged() {\n   *     // Count the component's children, both initially and when changed.\n   *     this.count = this.distributedChildren.length;\n   *   }\n   *\n   * }\n   * ```\n   *\n   * Note that content change detection depends upon the element having at least\n   * one `slot` element in its shadow subtree.\n   *\n   * This mixin is intended for use with the\n   * [DistributedChildrenMixin](DistributedChildrenMixin.md). See that mixin for\n   * a discussion of how that works. This DistributedChildrenContentMixin\n   * provides an easy way of defining the \"content\" of a component as the\n   * component's distributed children. That in turn lets mixins like\n   * [ContentItemsMixin](ContentItemsMixin.md) manipulate the children as list\n   * items.\n   */\n  class DistributedChildrenContent extends base {\n\n    constructor() {\n      super();\n\n      if (this.shadowRoot) {\n        // Listen to changes on all slots.\n        const slots = this.shadowRoot.querySelectorAll('slot');\n        slots.forEach(slot => slot.addEventListener('slotchange', event => {\n          this.contentChanged();\n        }));\n      }\n\n      // Make an initial call to contentChanged() so that the component can do\n      // initialization that it normally does when content changes.\n      //\n      // This will invoke contentChanged() handlers in other mixins. In order\n      // that those mixins have a chance to complete their own initialization,\n      // we add the contentChanged() call to the microtask queue.\n      microtask(() => this.contentChanged());\n    }\n\n    /**\n     * Invoked when the contents of the component (including distributed\n     * children) have changed.\n     *\n     * This method is also invoked when a component is first instantiated; the\n     * contents have essentially \"changed\" from being nothing. This allows the\n     * component to perform initial processing of its children.\n     */\n    contentChanged() {\n      if (super.contentChanged) { super.contentChanged(); }\n      const event = new CustomEvent('content-changed');\n      this.dispatchEvent(event);\n    }\n\n    /**\n     * The content of this component, defined to be the flattened array of\n     * children distributed to the component.\n     *\n     * @type {HTMLElement[]}\n     */\n    get content() {\n      const distributedChildren = this.distributedChildren;\n      if (typeof distributedChildren === 'undefined') {\n        console.warn(`DistributedChildrenContentMixin expects the component to define a \"distributedChildren\" property.`);\n      }\n      return distributedChildren;\n    }\n    set content(value) {\n      if ('content' in base.prototype) { super.content = value; }\n      // TODO: Set the children to the given value (which should be an array of\n      // elements)?\n    }\n\n    /**\n     * This event is raised when the component's contents (including distributed\n     * children) have changed.\n     *\n     * @memberof DistributedChildrenContent\n     * @event content-changed\n     */\n  }\n\n  return DistributedChildrenContent;\n};\n","/* Exported function extends a base class with DistributedChildren. */\nexport default (base) => {\n\n  /**\n   * Mixin which defines helpers for accessing a component's distributed\n   * children as a flattened array or string.\n   *\n   * The standard DOM API provides several ways of accessing child content:\n   * `children`, `childNodes`, and `textContent`. None of these functions are\n   * Shadow DOM aware. This mixin defines variations of those functions that\n   * *are* Shadow DOM aware.\n   *\n   * Example: you create a component `<count-children>` that displays a number\n   * equal to the number of children placed inside that component. If someone\n   * instantiates your component like:\n   *\n   *     <count-children>\n   *       <div></div>\n   *       <div></div>\n   *       <div></div>\n   *     </count-children>\n   *\n   * Then the component should show \"3\", because there are three children. To\n   * calculate the number of children, the component can just calculate\n   * `this.children.length`. However, suppose someone instantiates your\n   * component inside one of their own components, and puts a `<slot>` element\n   * inside your component:\n   *\n   *     <count-children>\n   *       <slot></slot>\n   *     </count-children>\n   *\n   * If your component only looks at `this.children`, it will always see exactly\n   * one child — the `<slot>` element. But the user looking at the page will\n   * *see* any nodes distributed to that slot. To match what the user sees, your\n   * component should expand any `<slot>` elements it contains.\n   *\n   * That is the problem this mixin solves. After applying this mixin, your\n   * component code has access to `this.distributedChildren`, whose `length`\n   * will return the total number of all children distributed to your component\n   * in the composed tree.\n   *\n   * Note: The latest Custom Elements API design calls for a new function,\n   * `getAssignedNodes` that takes an optional `deep` parameter, that will solve\n   * this problem at the API level.\n   */\n  class DistributedChildren extends base {\n\n    /**\n     * An in-order collection of distributed children, expanding any slot\n     * elements. Like the standard children property, this skips text nodes.\n     *\n     * @type {HTMLElement[]}\n     */\n    get distributedChildren() {\n      return expandContentElements(this.children, false);\n    }\n\n    /**\n     * An in-order collection of distributed child nodes, expanding any slot\n     * elements. Like the standard childNodes property, this includes text\n     * nodes.\n     *\n     * @type {Node[]}\n     */\n    get distributedChildNodes() {\n      return expandContentElements(this.childNodes, true);\n    }\n\n    /**\n     * The concatenated text content of all distributed child nodes, expanding\n     * any slot elements.\n     *\n     * @type {string}\n     */\n    get distributedTextContent() {\n      const strings = this.distributedChildNodes.map(function(child) {\n        return child.textContent;\n      });\n      return strings.join('');\n    }\n\n  }\n\n  return DistributedChildren;\n};\n\n\n/*\n * Given a array of nodes, return a new array with any content elements expanded\n * to the nodes distributed to that content element. This rule is applied\n * recursively.\n *\n * If includeTextNodes is true, text nodes will be included, as in the\n * standard childNodes property; by default, this skips text nodes, like the\n * standard children property.\n */\nfunction expandContentElements(nodes, includeTextNodes) {\n  const expanded = Array.prototype.map.call(nodes, node => {\n    // We want to see if the node is an instanceof HTMLSlotELement, but\n    // that class won't exist if the browser that doesn't support native\n    // Shadow DOM and if the Shadow DOM polyfill hasn't been loaded. Instead,\n    // we do a simplistic check to see if the tag name is \"slot\".\n    const isSlot = typeof HTMLSlotElement !== 'undefined' ?\n      node instanceof HTMLSlotElement :\n      node.localName === 'slot';\n    if (isSlot) {\n      // Use the nodes assigned to this node instead.\n      const assignedNodes = node.assignedNodes({ flatten: true });\n      return assignedNodes ?\n        expandContentElements(assignedNodes, includeTextNodes) :\n        [];\n    } else if (node instanceof HTMLElement) {\n      // Plain element; use as is.\n      return [node];\n    } else if (node instanceof Text && includeTextNodes) {\n      // Text node.\n      return [node];\n    } else {\n      // Comment, processing instruction, etc.; skip.\n      return [];\n    }\n  });\n  const flattened = [].concat(...expanded);\n  return flattened;\n}\n","import createSymbol from './createSymbol';\n\n\n// Symbols for private data members on an element.\nconst selectedFractionSymbol = createSymbol('selectedFraction');\n\n\n/* Exported function extends a base class with FractionalSelection. */\nexport default function mixin(base) {\n\n  /**\n   * Adds support for fractional selection: treating a selection as a real\n   * number that combines an integer portion (an index into a list), and a\n   * fraction (indicating how far of the way we are to the next or previous\n   * item).\n   *\n   * This is useful in components that support incremental operations during\n   * dragging and swiping. Example: a carousel component has several items, and the\n   * currently selected item is item 3. The user begins swiping to the left,\n   * moving towards selecting item 4. Halfway through this operation, the\n   * fractional selection value is 3.5.\n   *\n   * This value permits communication between mixins like\n   * [SwipeDirectionMixin](./SwipeDirectionMixin.md) and\n   * [TrackpadDirectionMixin](./TrackpadDirectionMixin.md), which generate\n   * fractional selection values, and mixins like\n   * [SelectionAnimationMixin](./SelectionAnimationMixin.md), which can render\n   * selection at a fractional value.\n   */\n  class FractionalSelection extends base {\n\n    connectedCallback() {\n      if (super.connectedCallback) { super.connectedCallback(); }\n      this.selectedFraction = 0;\n    }\n\n    /**\n     * A fractional value indicating how far the user has currently advanced to\n     * the next/previous item. E.g., a `selectedFraction` of 3.5 indicates the\n     * user is halfway between items 3 and 4.\n     *\n     * @type {number}\n     */\n    get selectedFraction() {\n      return this[selectedFractionSymbol];\n    }\n    set selectedFraction(value) {\n      this[selectedFractionSymbol] = value;\n      if ('selectedFraction' in base.prototype) { super.selectedFraction = value; }\n      const event = new CustomEvent('selected-fraction-changed');\n      this.dispatchEvent(event);\n    }\n\n  }\n\n  return FractionalSelection;\n}\n\n\nmixin.helpers = {\n\n  /*\n   * Dampen a selection that goes past the beginning or end of a list. This is\n   * generally used to produce a visual effect of tension as the user tries to\n   * go further in a direction that has no more items.\n   *\n   * Example: suppose `itemCount` is 5, indicating a list of 5 items. The index of\n   * the last item is 4. If the `selection` parameter is 4.5, the user is trying\n   * to go past this last item. When a damping function is applied, the resulting\n   * value will be less than 4.5 (the actual value will be 4.25). When this\n   * selection state is rendered, the user will see that, each unit distance the\n   * drag travels has less and less visible effect. This is perceived as tension.\n   *\n   * @param {number} selection - A real number indicating a selection position\n   * @param {number} itemCount - An integer for the number of items in the list\n   * @returns {number} A real number representing the damped selection value.\n   */\n  dampedSelection(selection, itemCount) {\n    const bound = itemCount - 1;\n    let damped;\n    if (selection < 0) {\n      // Trying to go past beginning of list. Apply tension from the left edge.\n      damped = -mixin.helpers.damping(-selection);\n    } else if (selection >= bound) {\n      // Trying to go past end of list. Apply tension from the right edge.\n      damped = bound + mixin.helpers.damping(selection - bound);\n    } else {\n      // No damping required.\n      damped = selection;\n    }\n    return damped;\n  },\n\n  /*\n   * Calculate damping as a function of the distance past the minimum/maximum\n   * values.\n   *\n   * We want to asymptotically approach an absolute minimum of 1 unit\n   * below/above the actual minimum/maximum. This requires calculating a\n   * hyperbolic function.\n   *\n   * See http://www.wolframalpha.com/input/?i=y+%3D+-1%2F%28x%2B1%29+%2B+1\n   * for the one we use. The only portion of that function we care about is when\n   * x is zero or greater. An important consideration is that the curve be\n   * tangent to the diagonal line x=y at (0, 0). This ensures smooth continuity\n   * with the normal drag behavior, in which the visible sliding is linear with\n   * the distance the touchpoint has been dragged.\n   */\n  damping(x) {\n    const y = (-1 / (x + 1)) + 1;\n    return y;\n  },\n\n  /*\n   * Return the current fractional selection value for the given element.\n   *\n   * This simply adds the element's `selectedIndex` and `selectedFraction`\n   * properties.\n   *\n   * @param {HTMLElement} element - An element that supports selection\n   */\n  elementSelection(element) {\n    const selectedIndex = element.selectedIndex;\n    if (selectedIndex < 0) {\n      // No selection\n      return;\n    }\n    const selectedFraction = element.selectedFraction || 0;\n    return selectedIndex + selectedFraction;\n  },\n\n  /*\n   * Breaks a fractional selection into its integer and fractional parts.\n   *\n   * Example: if passed 3.5, this returns { index: 3, fraction: 5 }.\n   *\n   * @param {number} selection – A real number representing a selection point\n   * @returns {object} - An object with an `index` property holding the\n   * selection's integer component, and a `fraction` property holding the\n   * selection's fractional component.\n   */\n  selectionParts(selection) {\n    // Stupid IE doesn't have Math.trunc.\n    // const index = Math.trunc(selection);\n    const index = selection < 0 ? Math.ceil(selection) : Math.floor(selection);\n    const fraction = selection - index;\n    return { index, fraction };\n  },\n\n  /*\n   * Returns a fractional selection point after accounting for wrapping, ensuring\n   * that the integer portion of the selection stays between 0 and `itemCount`-1.\n   * That is, the integer portion will always be a valid index into the list.\n   *\n   * Example of wrapping past the end of the list: if `selection` is 5.5 and\n   * `itemCount` is 5, this returns 0.5. Example of wrapping past the beginning of\n   * the list: if `selection` is 0.5 and `itemCount` is 5, this returns 4.5.\n   *\n   * @param {number} selection - A real number representing a selection point\n   * @param {number} itemCount - The number of items in the list\n   * @returns {number} - The result of wrapping the selection point\n   */\n  wrappedSelection(selection, itemCount) {\n    // Handles possibility of negative mod.\n    // See http://stackoverflow.com/a/18618250/76472\n    return ((selection % itemCount) + itemCount) % itemCount;\n  },\n\n  /*\n   * Return the parts of a selection, first wrapping if necessary.\n   *\n   * @param {number} selection – A real number representing a selection point\n   * @param {number} itemCount - The number of items in the list\n   * @param {boolean} wrap – True if the selection should wrap to stay within the\n   * list\n   * @returns {object} – The parts of the selection, using the same format as\n   * `selectionParts`.\n   */\n  wrappedSelectionParts(selection, itemCount, wrap) {\n    if (wrap) {\n      selection = mixin.helpers.wrappedSelection(selection, itemCount);\n    }\n    return mixin.helpers.selectionParts(selection);\n  }\n\n};\n","/* Exported function extends a base class with ShadowElementReferences. */\nexport default (base) => {\n\n  /**\n   * Mixin to create references to elements in a component's Shadow DOM subtree.\n   *\n   * This adds a member on the component called `this.$` that can be used to\n   * reference shadow elements with IDs. E.g., if component's shadow contains an\n   * element `<button id=\"foo\">`, then this mixin will create a member\n   * `this.$.foo` that points to that button.\n   *\n   * Such references simplify a component's access to its own elements. In\n   * exchange, this mixin trades off a one-time cost of querying all elements in\n   * the shadow tree instead of paying an ongoing cost to query for an element\n   * each time the component wants to inspect or manipulate it.\n   *\n   * This mixin expects the component to define a Shadow DOM subtree. You can\n   * create that tree yourself, or make use of\n   * [ShadowTemplateMixin](ShadowTemplateMixin.md).\n   *\n   * This mixin is inspired by Polymer's [automatic\n   * node finding](https://www.polymer-project.org/1.0/docs/devguide/local-dom.html#node-finding)\n   * feature.\n   */\n  class ShadowElementReferences extends base {\n\n    constructor() {\n      super();\n      if (this.shadowRoot) {\n        // Look for elements in the shadow subtree that have id attributes.\n        // An alternatively implementation of this mixin would be to just define\n        // a this.$ getter that lazily does this search the first time someone\n        // tries to access this.$. That might introduce some complexity – if the\n        // the tree changed after it was first populated, the result of\n        // searching for a node might be somewhat unpredictable.\n        this.$ = {};\n        const nodesWithIds = this.shadowRoot.querySelectorAll('[id]');\n        [].forEach.call(nodesWithIds, node => {\n          const id = node.getAttribute('id');\n          this.$[id] = node;\n        });\n      }\n    }\n\n    /**\n     * The collection of references to the elements with IDs in a component's\n     * Shadow DOM subtree.\n     *\n     * @type {object}\n     * @member $\n     */\n  }\n\n  return ShadowElementReferences;\n};\n","import symbols from '../src/symbols';\n\n\n/* Exported function extends a base class with ShadowTemplate. */\nexport default (base) => {\n\n  /**\n   * Mixin for stamping a template into a Shadow DOM subtree upon component\n   * instantiation.\n   *\n   * To use this mixin, define a `template` property as a string or HTML\n   * `<template>` element:\n   *\n   *     class MyElement extends ShadowTemplateMixin(HTMLElement) {\n   *       get [symbols.template]() {\n   *         return `Hello, <em>world</em>.`;\n   *       }\n   *     }\n   *\n   * When your component class is instantiated, a shadow root will be created on\n   * the instance, and the contents of the template will be cloned into the\n   * shadow root. If your component does not define a `template` property, this\n   * mixin has no effect.\n   *\n   * For the time being, this extension retains support for Shadow DOM v0. That\n   * will eventually be deprecated as browsers (and the Shadow DOM polyfill)\n   * implement Shadow DOM v1.\n   */\n  class ShadowTemplate extends base {\n\n    /*\n     * If the component defines a template, a shadow root will be created on the\n     * component instance, and the template stamped into it.\n     */\n    constructor() {\n      super();\n      let template = this[symbols.template];\n      // TODO: Save the processed template with the component's class prototype\n      // so it doesn't need to be processed with every instantiation.\n      if (template) {\n\n        if (typeof template === 'string') {\n          // Upgrade plain string to real template.\n          template = createTemplateWithInnerHTML(template);\n        }\n\n        if (window.ShadowDOMPolyfill) {\n          shimTemplateStyles(template, this.localName);\n        }\n\n        const root = this.attachShadow({ mode: 'open' });\n        const clone = document.importNode(template.content, true);\n        root.appendChild(clone);\n      }\n    }\n\n  }\n\n  return ShadowTemplate;\n};\n\n\n// Convert a plain string of HTML into a real template element.\nfunction createTemplateWithInnerHTML(innerHTML) {\n  const template = document.createElement('template');\n  // REVIEW: Is there an easier way to do this?\n  // We'd like to just set innerHTML on the template content, but since it's\n  // a DocumentFragment, that doesn't work.\n  const div = document.createElement('div');\n  div.innerHTML = innerHTML;\n  while (div.childNodes.length > 0) {\n    template.content.appendChild(div.childNodes[0]);\n  }\n  return template;\n}\n\n// Invoke basic style shimming with ShadowCSS.\nfunction shimTemplateStyles(template, tag) {\n  window.WebComponents.ShadowCSS.shimStyling(template.content, tag);\n}\n","/**\n * Helper function to create a symbol that can be used for associating private\n * data with an element.\n *\n * Mixins and component classes often want to associate private data with an\n * element instance, but JavaScript does not have direct support for true\n * private properties. One approach is to use the\n * [Symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol)\n * data type to set and retrieve data on an element.\n *\n * Unfortunately, the Symbol type is not available in Internet Explorer 11. The\n * `createSymbol` helper function exists as a workaround for IE 11. Rather than\n * returning a true Symbol, it simply returns an underscore-prefixed string.\n *\n * Usage:\n *\n *     const fooSymbol = createSymbol('foo');\n *\n *     class MyElement extends HTMLElement {\n *       get foo() {\n *         return this[fooSymbol];\n *       }\n *       set foo(value) {\n *         this[fooSymbol] = value;\n *       }\n *     }\n *\n * In IE 11, this sample will \"hide\" data behind an instance property this._foo.\n * The use of the underscore is meant to reduce (not eliminate) the potential\n * for name conflicts, and discourage (not prevent) external access to this\n * data. In modern browsers, the above code will eliminate the potential of\n * naming conflicts, and better hide the data behind a real Symbol.\n *\n * @function createSymbol\n * @param {string} description - A string to identify the symbol when debugging\n */\nexport default function createSymbol(description) {\n  return typeof Symbol === 'function' ?\n    Symbol(description) :\n    `_${description}`;\n}\n","/*\n * Microtask helper for IE 11.\n *\n * Executing a function as a microtask is trivial in browsers that support\n * promises, whose then() clauses use microtask timing. IE 11 doesn't support\n * promises, but does support MutationObservers, which are also executed as\n * microtasks. So this helper uses an MutationObserver to achieve microtask\n * timing.\n *\n * See https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/\n *\n * Inspired by Polymer's async() function.\n */\n\n\n// The queue of pending callbacks to be executed as microtasks.\nconst callbacks = [];\n\n// Create an element that we will modify to force observable mutations.\nconst element = document.createTextNode('');\n\n// A monotonically-increasing value.\nlet counter = 0;\n\n\n/**\n * Add a callback to the microtask queue.\n *\n * This uses a MutationObserver so that it works on IE 11.\n *\n * NOTE: IE 11 may actually use timeout timing with MutationObservers. This\n * needs more investigation.\n *\n * @function microtask\n * @param {function} callback\n */\nexport default function microtask(callback) {\n  callbacks.push(callback);\n  // Force a mutation.\n  element.textContent = ++counter;\n}\n\n\n// Execute any pending callbacks.\nfunction executeCallbacks() {\n  while (callbacks.length > 0) {\n    const callback = callbacks.shift();\n    callback();\n  }\n}\n\n\n// Create the observer.\nconst observer = new MutationObserver(executeCallbacks);\nobserver.observe(element, {\n  characterData: true\n});\n","import createSymbol from './createSymbol';\nimport toggleClass from './toggleClass';\n\n\n// Symbols for private data members on an element.\nconst safeToSetAttributesSymbol = createSymbol('safeToSetAttributes');\nconst pendingAttributesSymbol = createSymbol('pendingAttributes');\nconst pendingClassesSymbol = createSymbol('pendingClasses');\n\n\n/**\n * Helper functions for updating attributes, including the `class` attribute.\n */\nexport default {\n\n  /**\n   * Perform any pending updates to attributes and classes.\n   *\n   * This writes any `setAttribute` or `toggleClass` values that were performed\n   * before an element was attached to the document for the first time.\n   *\n   * This method should be called by mixins/components in their\n   * `connectedCallback`. If mulitple mixins/components invoke this during the\n   * same `connectedCallback`, only the first call will have any effect. The\n   * subsequent calls will be harmless.\n   *\n   * @param {HTMLElement} element - The element being added to the document.\n   */\n  connected(element) {\n    element[safeToSetAttributesSymbol] = true;\n\n    // Set any pending attributes.\n    if (element[pendingAttributesSymbol]) {\n      for (let attribute in element[pendingAttributesSymbol]) {\n        const value = element[pendingAttributesSymbol][attribute];\n        setAttributeToElement(element, attribute, value);\n      }\n      element[pendingAttributesSymbol] = null;\n    }\n\n    // Set any pending classes.\n    if (element[pendingClassesSymbol]) {\n      for (let className in element[pendingClassesSymbol]) {\n        const value = element[pendingClassesSymbol][className];\n        toggleClass(element, className, value);\n      }\n      element[pendingClassesSymbol] = null;\n    }\n  },\n\n  /**\n   * Set/unset the attribute with the indicated name.\n   *\n   * This method exists primarily to handle the case where an element wants to\n   * set a default property value that should be reflected as an attribute. An\n   * important limitation of custom element consturctors is that they cannot\n   * set attributes. A call to `setAttribute` during the constructor will\n   * be deferred until the element is connected to the document.\n   *\n   * @param {string} attribute - The name of the *attribute* (not property) to set.\n   * @param {object} value - The value to set. If null, the attribute will be removed.\n   */\n  setAttribute(element, attribute, value) {\n    if (element[safeToSetAttributesSymbol]) {\n      // Safe to set attributes immediately.\n      setAttributeToElement(element, attribute, value);\n    } else {\n      // Defer setting attributes until the first time we're connected.\n      if (!element[pendingAttributesSymbol]) {\n        element[pendingAttributesSymbol] = {};\n      }\n      element[pendingAttributesSymbol][attribute] = value;\n    }\n  },\n\n  /**\n   * Set/unset the class with the indicated name.\n   *\n   * This method exists primarily to handle the case where an element wants to\n   * set a default property value that should be reflected as as class. An\n   * important limitation of custom element consturctors is that they cannot\n   * set attributes, including the `class` attribute. A call to\n   * `toggleClass` during the constructor will be deferred until the element\n   * is connected to the document.\n   *\n   * @param {string} className - The name of the class to set.\n   * @param {object} value - True to set the class, false to remove it.\n   */\n  toggleClass(element, className, value) {\n    if (element[safeToSetAttributesSymbol]) {\n      // Safe to set class immediately.\n      toggleClass(element, className, value);\n    } else {\n      // Defer setting class until the first time we're connected.\n      if (!element[pendingClassesSymbol]) {\n        element[pendingClassesSymbol] = {};\n      }\n      element[pendingClassesSymbol][className] = value;\n    }\n  }\n\n};\n\n\n// Reflect the attribute to the given element.\n// If the value is null, remove the attribute.\nfunction setAttributeToElement(element, attributeName, value) {\n  if (value === null || typeof value === 'undefined') {\n    element.removeAttribute(attributeName);\n  } else {\n    const text = String(value);\n    // Avoid recursive attributeChangedCallback calls.\n    if (element.getAttribute(attributeName) !== text) {\n      element.setAttribute(attributeName, value);\n    }\n  }\n}\n","import createSymbol from './createSymbol';\n\n/**\n * A collection of Symbol objects for standard component properties and methods.\n *\n * These Symbol objects are used to allow mixins and a component to internally\n * communicate, without exposing these properties and methods in the component's\n * public API.\n *\n * To use these Symbol objects in your own component, include this module and\n * then create a property or method whose key is the desired Symbol.\n *\n *     import 'SingleSelectionMixin' from 'basic-component-mixins/src/SingleSelectionMixin';\n *     import 'symbols' from 'basic-component-mixins/src/symbols';\n *\n *     class MyElement extends SingleSelectionMixin(HTMLElement) {\n *       [symbols.itemSelected](item, selected) {\n *         // This will be invoked whenever an item is selected/deselected.\n *       }\n *     }\n *\n * @module symbols\n */\nconst symbols = {\n\n  /**\n   * Symbol for the `defaults` property.\n   *\n   * This property can be used to set or override defaults that will be applied\n   * to a new component instance. When implementing this property, take care to\n   * first acquire any defaults defined by the superclass. The standard idiom is\n   * as follows:\n   *\n   *     get [symbols.defaults]() {\n   *       const defaults = super[symbols.defaults] || {};\n   *       // Set or override default values here\n   *       defaults.customProperty = false;\n   *       return defaults;\n   *     }\n   *\n   * @var {object} defaults\n   */\n  defaults: createSymbol('defaults'),\n\n  /**\n   * Symbol for the `dragging` property.\n   *\n   * Components like carousels often define animated CSS transitions for\n   * sliding effects. Such a transition should usually *not* be applied while\n   * the user is dragging, because a CSS animation will introduce a lag that\n   * makes the swipe feel sluggish. Instead, as long as the user is dragging\n   * with their finger down, the transition should be suppressed. When the\n   * user releases their finger, the transition can be restored, allowing the\n   * animation to show the carousel sliding into its final position.\n   *\n   * @type {boolean} true if a drag is in progress, false if not.\n   */\n  dragging: createSymbol('dragging'),\n\n  /**\n   * Symbol for the `goDown` method.\n   *\n   * This method is invoked when the user wants to go/navigate down.\n   *\n   * @function goDown\n   */\n  goDown: createSymbol('goDown'),\n\n  /**\n   * Symbol for the `goEnd` method.\n   *\n   * This method is invoked when the user wants to go/navigate to the end (e.g.,\n   * of a list).\n   *\n   * @function goEnd\n   */\n  goEnd: createSymbol('goEnd'),\n\n  /**\n   * Symbol for the `goLeft` method.\n   *\n   * This method is invoked when the user wants to go/navigate left.\n   *\n   * @function goLeft\n   */\n  goLeft: createSymbol('goLeft'),\n\n  /**\n   * Symbol for the `goRight` method.\n   *\n   * This method is invoked when the user wants to go/navigate right.\n   *\n   * @function goRight\n   */\n  goRight: createSymbol('goRight'),\n\n  /**\n   * Symbol for the `goStart` method.\n   *\n   * This method is invoked when the user wants to go/navigate to the start\n   * (e.g., of a list).\n   *\n   * @function goStart\n   */\n  goStart: createSymbol('goStart'),\n\n  /**\n   * Symbol for the `goUp` method.\n   *\n   * This method is invoked when the user wants to go/navigate up.\n   *\n   * @function goUp\n   */\n  goUp: createSymbol('goUp'),\n\n  /**\n   * Symbol for the `itemAdded` method.\n   *\n   * This method is invoked when a new item is added to a list.\n   *\n   * @function itemAdded\n   * @param {HTMLElement} item - the item being selected/deselected\n   */\n  itemAdded: createSymbol('itemAdded'),\n\n\n  /**\n   * Symbol for the `itemsChanged` method.\n   *\n   * This method is invoked when the underlying contents change. It is also\n   * invoked on component initialization – since the items have \"changed\" from\n   * being nothing.\n   */\n  itemsChanged: createSymbol('itemsChanged'),\n\n  /**\n   * Symbol for the `itemSelected` method.\n   *\n   * This method is invoked when an item becomes selected or deselected.\n   *\n   * @function itemSelected\n   * @param {HTMLElement} item - the item being selected/deselected\n   * @param {boolean} selected - true if the item is selected, false if not\n   */\n  itemSelected: createSymbol('itemSelected'),\n\n  /**\n   * Symbol for the `keydown` method.\n   *\n   * This method is invoked when an element receives a `keydown` event.\n   *\n   * @function keydown\n   * @param {KeyboardEvent} event - the event being processed\n   */\n  keydown: createSymbol('keydown'),\n\n  /**\n   * Symbol for the `template` property.\n   *\n   * This property returns a component's template.\n   *\n   * @type {string|HTMLElement}\n   */\n  template: createSymbol('template')\n};\n\nexport default symbols;\n","/**\n * Helper function for standard classList.toggle() behavior on old browsers,\n * namely IE 11.\n *\n * The standard\n * [classlist](https://developer.mozilla.org/en-US/docs/Web/API/Element/classList)\n * object has a `toggle()` function that supports a second Boolean parameter\n * that can be used to succinctly turn a class on or off. This feature is often\n * useful in designing custom elements, which may want to externally reflect\n * component state in a CSS class that can be used for styling purposes.\n *\n * Unfortunately, IE 11 does not support the Boolean parameter to\n * `classList.toggle()`. This helper function behaves like the standard\n * `toggle()`, including support for the Boolean parameter, so that it can be\n * used even on IE 11.\n *\n * @function toggleClass\n * @param {HTMLElement} element - The element to modify\n * @param {string} className - The class to add/remove\n * @param {boolean} [force] - Force the class to be added (if true) or removed\n *                            (if false)\n */\nexport default function toggleClass(element, className, force) {\n  const classList = element.classList;\n  const addClass = (typeof force === 'undefined') ?\n    !classList.contains(className) :\n    force;\n  if (addClass) {\n    classList.add(className);\n  } else {\n    classList.remove(className);\n  }\n  return addClass;\n}\n","import AttributeMarshallingMixin from '../../basic-component-mixins/src/AttributeMarshallingMixin';\nimport ComposableMixin from '../../basic-component-mixins/src/ComposableMixin';\nimport DistributedChildrenMixin from '../../basic-component-mixins/src/DistributedChildrenMixin';\nimport ShadowElementReferencesMixin from '../../basic-component-mixins/src/ShadowElementReferencesMixin';\nimport ShadowTemplateMixin from '../../basic-component-mixins/src/ShadowTemplateMixin';\n\n\n/**\n * A sample general-purpose base class for defining custom elements that mixes\n * in some common features: template stamping into a shadow root, shadow element\n * references, marshalling attributes to properties, and retrieving the children\n * distributed to a component.\n *\n * This base class is not special in any way, and is defined only as a\n * convenient shorthand for applying the mixins listed above. You can use this\n * class as a base class for your own elements, or easily create your own base\n * class by applying the same set of mixins.\n *\n * The ElementBase base class does not register itself as a custom element with\n * the browser, and hence cannot be independently instantiated.\n *\n * @mixes AttributeMarshallingMixin\n * @mixes ComposableMixin\n * @mixes DistributedChildrenMixin\n * @mixes ShadowElementReferencesMixin\n * @mixes ShadowTemplateMixin\n */\nclass ElementBase extends ComposableMixin(HTMLElement).compose(\n  ShadowTemplateMixin,          // before node finding, so shadow root is populated\n  ShadowElementReferencesMixin, // before marshalling, so properties can use refs\n  AttributeMarshallingMixin,\n  DistributedChildrenMixin\n) {}\n\nexport default ElementBase;\n","/*\n * This file is transpiled to create an ES5-compatible distribution in which\n * the package's main feature(s) are available via the window.Basic global.\n * If you're already using ES6 yourself, ignore this file, and instead import\n * the source file(s) you want from the src folder.\n */\n\nimport SlidingViewport from './src/SlidingViewport';\n\nwindow.Basic = window.Basic || {};\nwindow.Basic.SlidingViewport = SlidingViewport;\n","import createSymbol from '../../basic-component-mixins/src/createSymbol';\nimport ElementBase from '../../basic-element-base/src/ElementBase';\nimport FractionalSelectionMixin from '../../basic-component-mixins/src/FractionalSelectionMixin';\nimport SpreadItems from '../../basic-spread-items/src/SpreadItems'; // jshint ignore:line\nimport symbols from '../../basic-component-mixins/src/symbols';\n\n\n// Symbols for private data members on an element.\nconst selectedItemSymbol = createSymbol('selectedItem');\n\n\nconst base = ElementBase.compose(\n  FractionalSelectionMixin\n);\n\n\n/**\n * Presents list items in a viewport such that only a single item is visible at\n * a time.\n *\n * Navigating between items will be represented with a horizontal visual\n * sliding effect. For more complex visual effects, see\n * [basic-animation-stage](../basic-animation-stage), which takes advantage of\n * the Web Animations API.\n *\n * This component handles the rendering responsibilities for the basic-carousel\n * component.\n *\n * This component currently requires that you explicitly apply a size to it.\n *\n * @extends ElementBase\n * @mixes FractionalSelectionMixin\n */\nclass SlidingViewport extends base {\n\n  constructor() {\n    super();\n    this.selectedFraction = 0;\n    this.showTransition = true;\n  }\n\n  connectedCallback() {\n    if (super.connectedCallback) { super.connectedCallback(); }\n    this.render();\n  }\n\n  get content() {\n    return this.$.slidingContainer.content;\n  }\n\n  get items() {\n    return this.$.slidingContainer.items;\n  }\n\n  render() {\n    if (super.render) { super.render(); }\n    requestAnimationFrame(renderSelection.bind(this));\n  }\n\n  get selectedFraction() {\n    return super.selectedFraction;\n  }\n  set selectedFraction(value) {\n    if ('selectedFraction' in base.prototype) { super.selectedFraction = value; }\n    this.render();\n  }\n\n  get selectedIndex() {\n    const items = this.items;\n    const selectedItem = this.selectedItem;\n    return items && selectedItem ?\n      items.indexOf(selectedItem) :\n      -1;\n  }\n  set selectedIndex(index) {\n    if ('selectedIndex' in base.prototype) { super.selectedIndex = index; }\n    const item = this.items && this.items[index];\n    if (item) {\n      this.selectedItem = item;\n    }\n  }\n\n  get selectedItem() {\n    return this[selectedItemSymbol];\n  }\n  set selectedItem(item) {\n    if ('selectedItem' in base.prototype) { super.selectedItem = item; }\n    this[selectedItemSymbol] = item;\n    this.render();\n  }\n\n  get showTransition() {\n    return super.showTransition || this.classList.contains('showTransition');\n  }\n  set showTransition(value) {\n    if ('showTransition' in base.prototype) { super.showTransition = value; }\n    this.reflectClass('showTransition', value);\n  }\n\n  get [symbols.template]() {\n    return `\n      <style>\n      :host {\n        display: block;\n        overflow: hidden;\n        position: relative;\n      }\n\n      #slidingContainer {\n        height: 100%;\n        position: absolute;\n        /*\n         Set width for IE/Edge. It's not clear why they need this, and the other\n         browsers don't.\n         */\n        width: 100%;\n        will-change: transform;\n      }\n\n      :host(.showTransition) #slidingContainer {\n        -webkit-transition: -webkit-transform 0.2s ease-out;\n        transition: transform 0.2s ease-out;\n      }\n      </style>\n\n      <basic-spread-items id=\"slidingContainer\" role=\"none\">\n        <slot></slot>\n      </basic-spread-items>\n    `;\n  }\n\n}\n\n\n// Note: In this routine, \"this\" is bound to an element instance.\nfunction renderSelection() {\n  if (!this.selectedItem) {\n    return;\n  }\n  const selection = FractionalSelectionMixin.helpers.elementSelection(this);\n  const itemCount = this.items ? this.items.length : 0;\n  const damped = FractionalSelectionMixin.helpers.dampedSelection(selection, itemCount);\n  // Use a percentage so the transform will still work if screen size changes\n  // (e.g., if device orientation changes).\n  const left = -damped * 100;\n  const transform = 'translateX(' + left + '%)';\n  this.$.slidingContainer.style.webkitTransform = transform;\n  this.$.slidingContainer.style.transform = transform;\n}\n\n\ncustomElements.define('basic-sliding-viewport', SlidingViewport);\nexport default SlidingViewport;\n","import ElementBase from '../../basic-element-base/src/ElementBase';\nimport DistributedChildrenContentMixin from '../../basic-component-mixins/src/DistributedChildrenContentMixin';\nimport symbols from '../../basic-component-mixins/src/symbols';\n\n\n/**\n * Spreads out a set of items horizontally so they take equal space.\n *\n * [Live demo](http://basicwebcomponents.org/basic-web-components/packages/basic-spread-items/)\n *\n * This component is used, for example, by the basic-sliding-viewport component\n * to ensure that children of different size will take up the same amount of\n * horizontal space.\n *\n * This component currently requires an explicit size by applied to it.\n *\n * @extends ElementBase\n * @mixes DistributedChildrenContentMixin\n */\nclass SpreadItems extends ElementBase.compose(\n  DistributedChildrenContentMixin\n) {\n\n  connectedCallback() {\n    if (super.connectedCallback) { super.connectedCallback(); }\n    // HACK\n    this[symbols.itemsChanged]();\n  }\n\n  get items() {\n    return this.content;\n  }\n\n  // TODO: Should also handle contentChanged(), but need to rationalize with\n  // invocation of [symbols.itemsChanged] in connectedCallback.\n  [symbols.itemsChanged]() {\n    if (super[symbols.itemsChanged]) { super[symbols.itemsChanged](); }\n    const items = this.items;\n    const count = items.length;\n    this.$.spreadContainer.style.width = (count * 100) + '%';\n    const itemWidth = (100 / count) + \"%\";\n    [].forEach.call(items, item => {\n      item.style.width = itemWidth;\n    });\n  }\n\n  get [symbols.template]() {\n    return `\n      <style>\n      :host {\n        display: block;\n      }\n\n      #spreadContainer {\n        display: -webkit-flex;\n        display: flex;\n        height: 100%;\n        position: relative;\n      }\n\n      #spreadContainer ::slotted(*) {\n        object-fit: contain;\n        object-fit: var(--basic-item-object-fit, contain);\n        height: 100%;\n        -webkit-user-drag: none;\n        -webkit-user-select: none;\n        -moz-user-select: none;\n        -ms-user-select: none;\n        user-select: none;\n      }\n      </style>\n\n      <div id=\"spreadContainer\" role=\"none\">\n        <slot></slot>\n      </div>\n    `;\n  }\n\n}\n\n\ncustomElements.define('basic-spread-items', SpreadItems);\nexport default SpreadItems;\n"]}