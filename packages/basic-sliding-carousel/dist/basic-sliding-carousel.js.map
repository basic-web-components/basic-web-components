{"version":3,"sources":["node_modules/browser-pack/_prelude.js","packages/basic-component-mixins/src/AttributeMarshallingMixin.js","packages/basic-component-mixins/src/ComposableMixin.js","packages/basic-component-mixins/src/ContentItemsMixin.js","packages/basic-component-mixins/src/DirectionSelectionMixin.js","packages/basic-component-mixins/src/DistributedChildrenContentMixin.js","packages/basic-component-mixins/src/DistributedChildrenMixin.js","packages/basic-component-mixins/src/FractionalSelectionMixin.js","packages/basic-component-mixins/src/HorizontalNavigationMixin.js","packages/basic-component-mixins/src/KeyboardDirectionMixin.js","packages/basic-component-mixins/src/KeyboardMixin.js","packages/basic-component-mixins/src/SelectionAriaActiveMixin.js","packages/basic-component-mixins/src/ShadowElementReferencesMixin.js","packages/basic-component-mixins/src/ShadowTemplateMixin.js","packages/basic-component-mixins/src/SingleSelectionMixin.js","packages/basic-component-mixins/src/SwipeDirectionMixin.js","packages/basic-component-mixins/src/TrackpadDirectionMixin.js","packages/basic-component-mixins/src/createSymbol.js","packages/basic-component-mixins/src/microtask.js","packages/basic-component-mixins/src/safeAttributes.js","packages/basic-component-mixins/src/symbols.js","packages/basic-component-mixins/src/toggleClass.js","packages/basic-element-base/src/ElementBase.js","packages/basic-sliding-carousel/globals.js","packages/basic-sliding-carousel/src/SlidingCarousel.js","packages/basic-sliding-viewport/src/SlidingViewport.js","packages/basic-spread-items/src/SpreadItems.js"],"names":[],"mappings":"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","file":"basic-sliding-carousel.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import safeAttributes from './safeAttributes';\n\n\n// Memoized maps of attribute to property names and vice versa.\nconst attributeToPropertyNames = {};\nconst propertyNamesToAttributes = {};\n\n\n/* Exported function extends a base class with AttributeMarshalling. */\nexport default (base) => {\n\n  /**\n   * Mixin which marshalls attributes to properties and vice versa.\n   *\n   * If your component exposes a setter for a property, it's generally a good\n   * idea to let devs using your component be able to set that property in HTML\n   * via an element attribute. You can code that yourself by writing an\n   * `attributeChangedCallback`, or you can use this mixin to get a degree of\n   * automatic support.\n   *\n   * This mixin implements an `attributeChangedCallback` that will attempt to\n   * convert a change in an element attribute into a call to the corresponding\n   * property setter. Attributes typically follow hyphenated names (\"foo-bar\"),\n   * whereas properties typically use camelCase names (\"fooBar\"). This mixin\n   * respects that convention, automatically mapping the hyphenated attribute\n   * name to the corresponding camelCase property name.\n   *\n   * Example: You define a component using this mixin:\n   *\n   *     class MyElement extends AttributeMarshallingMixin(HTMLElement) {\n   *       get fooBar() { return this._fooBar; }\n   *       set fooBar(value) { this._fooBar = value; }\n   *     }\n   *     customElements.define('my-element', MyElement);\n   *\n   * If someone then instantiates your component in HTML:\n   *\n   *     <my-element foo-bar=\"Hello\"></my-element>\n   *\n   * Then, after the element has been upgraded, the `fooBar` setter will\n   * automatically be invoked with the initial value \"Hello\".\n   *\n   * For the time being, this mixin only supports string-valued properties.\n   * If you'd like to convert string attributes to other types (numbers,\n   * booleans), you need to implement `attributeChangedCallback` yourself.\n   */\n  class AttributeMarshalling extends base {\n\n    /*\n     * Handle a change to the attribute with the given name.\n     */\n    attributeChangedCallback(attributeName, oldValue, newValue) {\n      if (super.attributeChangedCallback) { super.attributeChangedCallback(); }\n      const propertyName = attributeToPropertyName(attributeName);\n      // If the attribute name corresponds to a property name, set the property.\n      // Ignore standard HTMLElement properties handled by the DOM.\n      if (propertyName in this && !(propertyName in HTMLElement.prototype)) {\n        this[propertyName] = newValue;\n      }\n    }\n\n    connectedCallback() {\n      if (super.connectedCallback) { super.connectedCallback(); }\n      safeAttributes.connected(this);\n    }\n\n    static get observedAttributes() {\n      return attributesForClass(this);\n    }\n\n    /**\n     * Set/unset the attribute with the indicated name.\n     *\n     * This method exists primarily to handle the case where an element wants to\n     * set a default property value that should be reflected as an attribute. An\n     * important limitation of custom element consturctors is that they cannot\n     * set attributes. A call to `reflectAttribute` during the constructor will\n     * be deferred until the element is connected to the document.\n     *\n     * @param {string} attribute - The name of the *attribute* (not property) to set.\n     * @param {object} value - The value to set. If null, the attribute will be removed.\n     */\n    reflectAttribute(attribute, value) {\n      return safeAttributes.setAttribute(this, attribute, value);\n    }\n\n    /**\n     * Set/unset the class with the indicated name.\n     *\n     * This method exists primarily to handle the case where an element wants to\n     * set a default property value that should be reflected as as class. An\n     * important limitation of custom element consturctors is that they cannot\n     * set attributes, including the `class` attribute. A call to\n     * `reflectClass` during the constructor will be deferred until the element\n     * is connected to the document.\n     *\n     * @param {string} className - The name of the class to set.\n     * @param {object} value - True to set the class, false to remove it.\n     */\n    reflectClass(className, value) {\n      return safeAttributes.toggleClass(this, className, value);\n    }\n\n  }\n\n  return AttributeMarshalling;\n};\n\n\n// Convert hyphenated foo-bar attribute name to camel case fooBar property name.\nfunction attributeToPropertyName(attributeName) {\n  let propertyName = attributeToPropertyNames[attributeName];\n  if (!propertyName) {\n    // Convert and memoize.\n    const hypenRegEx = /-([a-z])/g;\n    propertyName = attributeName.replace(hypenRegEx,\n        match => match[1].toUpperCase());\n    attributeToPropertyNames[attributeName] = propertyName;\n  }\n  return propertyName;\n}\n\nfunction attributesForClass(classFn) {\n\n  // We treat the element base classes as if they have no attributes, since we\n  // don't want to receive attributeChangedCallback for them.\n  if (classFn === HTMLElement || classFn === Object) {\n    return [];\n  }\n\n  // Get attributes for parent class.\n  const baseClass = Object.getPrototypeOf(classFn.prototype).constructor;\n  const baseAttributes = attributesForClass(baseClass);\n\n  // Get attributes for this class.\n  const propertyNames = Object.getOwnPropertyNames(classFn.prototype);\n  const setterNames = propertyNames.filter(propertyName =>\n    typeof Object.getOwnPropertyDescriptor(\n        classFn.prototype, propertyName).set === 'function');\n  const attributes = setterNames.map(setterName =>\n      propertyNameToAttribute(setterName));\n\n  // Merge.\n  const diff = attributes.filter(attribute =>\n      baseAttributes.indexOf(attribute) < 0);\n  return baseAttributes.concat(diff);\n}\n\n// Convert a camel case fooBar property name to a hyphenated foo-bar attribute.\nfunction propertyNameToAttribute(propertyName) {\n  let attribute = propertyNamesToAttributes[propertyName];\n  if (!attribute) {\n    // Convert and memoize.\n    const uppercaseRegEx = /([A-Z])/g;\n    attribute = propertyName.replace(uppercaseRegEx, '-$1').toLowerCase();\n  }\n  return attribute;\n}\n","/* Exported function extends a base class with Composable. */\nexport default (base) => {\n\n  /**\n   * Mixin to make a class more easily composable with other mixins.\n   *\n   * This mixin contributes a `compose` method that applies a set of mixin\n   * functions and returns the resulting new class. This sugar can make the\n   * application of many mixins at once easier to read.\n   */\n  class Composable extends base {\n\n    /**\n     * Apply a set of mixin functions or mixin objects to the present class and\n     * return the new class.\n     *\n     * Instead of writing:\n     *\n     *     let MyClass = Mixin1(Mixin2(Mixin3(Mixin4(Mixin5(BaseClass)))));\n     *\n     * You can write:\n     *\n     *     let MyClass = ComposableMixin(BaseClass).compose(\n     *       Mixin1,\n     *       Mixin2,\n     *       Mixin3,\n     *       Mixin4,\n     *       Mixin5\n     *     );\n     *\n     * This function can also take mixin objects. A mixin object is just a\n     * shorthand for a mixin function that creates a new subclass with the given\n     * members. The mixin object's members are *not* copied directly onto the\n     * prototype of the base class, as with traditional mixins.\n     *\n     * In addition to providing syntactic sugar, this mixin can be used to\n     * define a class in ES5, which lacks ES6's `class` keyword.\n     *\n     * @param {...mixins} mixins - A set of mixin functions or objects to apply.\n     */\n    static compose(...mixins) {\n      // We create a new subclass for each mixin in turn. The result becomes\n      // the base class extended by any subsequent mixins. It turns out that\n      // we can use Array.reduce() to concisely express this, using the current\n      // object as the seed for reduce().\n      return mixins.reduce(composeClass, this);\n    }\n\n  }\n\n  return Composable;\n};\n\n\n// Properties defined by Object that we don't want to mixin.\nconst NON_MIXABLE_OBJECT_PROPERTIES = [\n  'constructor'\n];\n\n/*\n * Apply the mixin to the given base class to return a new class.\n * The mixin can either be a function that returns the modified class, or a\n * plain object whose members will be copied to the new class' prototype.\n */\nfunction composeClass(base, mixin) {\n  if (typeof mixin === 'function') {\n    // Mixin function\n    return mixin(base);\n  } else {\n    // Mixin object\n    class Subclass extends base {}\n    copyOwnProperties(mixin, Subclass.prototype, NON_MIXABLE_OBJECT_PROPERTIES);\n    return Subclass;\n  }\n}\n\n\n/*\n * Copy the given properties/methods to the target.\n * Return the updated target.\n */\nfunction copyOwnProperties(source, target, ignorePropertyNames = []) {\n  Object.getOwnPropertyNames(source).forEach(name => {\n    if (ignorePropertyNames.indexOf(name) < 0) {\n      const descriptor = Object.getOwnPropertyDescriptor(source, name);\n      Object.defineProperty(target, name, descriptor);\n    }\n  });\n  return target;\n}\n","import createSymbol from './createSymbol';\nimport toggleClass from './toggleClass';\nimport symbols from './symbols';\n\n\n// Symbols for private data members on an element.\nconst itemsSymbol = createSymbol('items');\nconst itemInitializedSymbol = createSymbol('itemInitialized');\n\n\n/* Exported function extends a base class with ContentItems. */\nexport default (base) => {\n\n  /**\n   * Mixin which maps content semantics (elements) to list item semantics.\n   *\n   * Items differ from element contents in several ways:\n   *\n   * * They are often referenced via index.\n   * * They may have a selection state.\n   * * It's common to do work to initialize the appearance or state of a new\n   *   item.\n   * * Auxiliary invisible child elements are filtered out and not counted as\n   *   items. Auxiliary elements include link, script, style, and template\n   *   elements. This filtering ensures that those auxiliary elements can be\n   *   used in markup inside of a list without being treated as list items.\n   *\n   * This mixin expects a component to provide a `content` property returning a\n   * raw set of elements. You can provide that yourself, or use\n   * [DistributedChildrenContentMixin](DistributedChildrenContentMixin.md).\n   *\n   * The most commonly referenced property defined by this mixin is the `items`\n   * property. To avoid having to do work each time that property is requested,\n   * this mixin supports an optimized mode. If you invoke the `contentChanged`\n   * method when the set of items changes, the mixin concludes that you'll take\n   * care of notifying it of future changes, and turns on the optimization. With\n   * that on, the mixin saves a reference to the computed set of items, and will\n   * return that immediately on subsequent calls to the `items` property. If you\n   * use this mixin in conjunction with\n   * [DistributedChildrenContentMixin](DistributedChildrenContentMixin.md), the\n   * `contentChanged` method will be invoked for you when the element's children\n   * change, turning on the optimization automatically.\n   */\n  class ContentItems extends base {\n\n    contentChanged() {\n      if (super.contentChanged) { super.contentChanged(); }\n\n      // Since we got the contentChanged call, we'll assume we'll be notified if\n      // the set of items changes later. We turn on memoization of the items\n      // property by setting our internal property to null (instead of\n      // undefined).\n      this[itemsSymbol] = null;\n\n      this[symbols.itemsChanged]();\n    }\n\n    /**\n     * This method is invoked whenever a new item is added to the list.\n     *\n     * The default implementation of this method does nothing. You can override\n     * this to perform per-item initialization.\n     *\n     * @param {HTMLElement} item - The item that was added.\n     */\n    [symbols.itemAdded](item) {\n      if (super[symbols.itemAdded]) { super[symbols.itemAdded](item); }\n    }\n\n    /**\n     * The selection state for a single item has changed.\n     *\n     * Invoke this method to signal that the selected state of the indicated item\n     * has changed. By default, this applies a `selected` CSS class if the item\n     * is selected, and removed it if not selected.\n     *\n     * @param {HTMLElement} item - The item whose selection state has changed.\n     * @param {boolean} selected - True if the item is selected, false if not.\n     */\n    [symbols.itemSelected](item, selected) {\n      if (super[symbols.itemSelected]) { super[symbols.itemSelected](item, selected); }\n      toggleClass(item, 'selected', selected);\n    }\n\n    /**\n     * The current set of items in the list. See the top-level documentation for\n     * mixin for a description of how items differ from plain content.\n     *\n     * @type {HTMLElement[]}\n     */\n    get items() {\n      let items;\n      if (this[itemsSymbol] == null) {\n        items = filterAuxiliaryElements(this.content);\n        // Note: test for *equality* with null; don't treat undefined as a match.\n        if (this[itemsSymbol] === null) {\n          // Memoize the set of items.\n          this[itemsSymbol] = items;\n        }\n      } else {\n        // Return the memoized items.\n        items = this[itemsSymbol];\n      }\n      return items;\n    }\n\n    /**\n     * This method is invoked when the underlying contents change. It is also\n     * invoked on component initialization – since the items have \"changed\" from\n     * being nothing.\n     */\n    [symbols.itemsChanged]() {\n      if (super[symbols.itemsChanged]) { super[symbols.itemsChanged](); }\n\n      // Perform per-item initialization.\n      Array.prototype.forEach.call(this.items, item => {\n        if (!item[itemInitializedSymbol]) {\n          this[symbols.itemAdded](item);\n          item[itemInitializedSymbol] = true;\n        }\n      });\n\n      this.dispatchEvent(new CustomEvent('items-changed'));\n    }\n\n    /**\n     * Fires when the items in the list change.\n     *\n     * @memberof ContentItems\n     * @event items-changed\n     */\n  }\n\n  return ContentItems;\n};\n\n\n// Return the given elements, filtering out auxiliary elements that aren't\n// typically visible. Items which are not elements are returned as is.\nfunction filterAuxiliaryElements(items) {\n  const auxiliaryTags = [\n    'link',\n    'script',\n    'style',\n    'template'\n  ];\n  return [].filter.call(items, function(item) {\n    return !item.localName || auxiliaryTags.indexOf(item.localName) < 0;\n  });\n}\n","import symbols from './symbols';\n\n\n/* Exported function extends a base class with DirectionSelection. */\nexport default (base) => {\n\n  /**\n   * Mixin which maps direction semantics (goLeft, goRight, etc.) to selection\n   * semantics (selectPrevious, selectNext, etc.).\n   *\n   * This mixin can be used in conjunction with\n   * [KeyboardDirectionMixin](KeyboardDirectionMixin.md) (which maps keyboard\n   * events to directions) and a mixin that handles selection like\n   * [SingleSelectionMixin](SingleSelectionMixin.md).\n   */\n  class DirectionSelection extends base {\n\n    [symbols.goDown]() {\n      if (super[symbols.goDown]) { super[symbols.goDown](); }\n      return this.selectNext();\n    }\n\n    [symbols.goEnd]() {\n      if (super[symbols.goEnd]) { super[symbols.goEnd](); }\n      return this.selectLast();\n    }\n\n    [symbols.goLeft]() {\n      if (super[symbols.goLeft]) { super[symbols.goLeft](); }\n      return this.selectPrevious();\n    }\n\n    [symbols.goRight]() {\n      if (super[symbols.goRight]) { super[symbols.goRight](); }\n      return this.selectNext();\n    }\n\n    [symbols.goStart]() {\n      if (super[symbols.goStart]) { super[symbols.goStart](); }\n      return this.selectFirst();\n    }\n\n    [symbols.goUp]() {\n      if (super[symbols.goUp]) { super[symbols.goUp](); }\n      return this.selectPrevious();\n    }\n\n    // Default implementation. This will typically be handled by other mixins.\n    get selectedFraction() {\n      return super.selectedFraction;\n    }\n    set selectedFraction(value) {\n      if ('selectedFraction' in base.prototype) { super.selectedFraction = value; }\n    }\n\n    // Default implementation. This will typically be handled by other mixins.\n    selectFirst() {\n      if (super.selectFirst) { return super.selectFirst(); }\n    }\n\n    // Default implementation. This will typically be handled by other mixins.\n    selectLast() {\n      if (super.selectLast) { return super.selectLast(); }\n    }\n\n    // Default implementation. This will typically be handled by other mixins.\n    selectNext() {\n      if (super.selectNext) { return super.selectNext(); }\n    }\n\n    // Default implementation. This will typically be handled by other mixins.\n    selectPrevious() {\n      if (super.selectPrevious) { return super.selectPrevious(); }\n    }\n\n    // Map drag travel fraction to selection fraction.\n    get travelFraction() {\n      return super.travelFraction;\n    }\n    set travelFraction(value) {\n      if ('travelFraction' in base.prototype) { super.travelFraction = value; }\n      this.selectedFraction = value;\n    }\n\n  }\n\n  return DirectionSelection;\n};\n","import microtask from './microtask';\n\n\n/* Exported function extends a base class with DistributedChildrenContent. */\nexport default (base) => {\n\n  /**\n   * Mixin which defines a component's content as its children, expanding any\n   * nodes distributed to the component's slots.\n   *\n   * This also provides notification of changes to a component's content. It\n   * will invoke a `contentChanged` method when the component is first\n   * instantiated, and whenever its distributed children change. This is an\n   * easy way to satisfy the Gold Standard checklist item for monitoring\n   * [Content Changes](https://github.com/webcomponents/gold-standard/wiki/Content-Changes).\n   *\n   * Example:\n   *\n   * ```\n   * let base = DistributedChildrenContentMixin(DistributedChildrenMixin(HTMLElement));\n   * class CountingElement extends base {\n   *\n   *   constructor() {\n   *     super();\n   *     let root = this.attachShadow({ mode: 'open' });\n   *     root.innerHTML = `<slot></slot>`;\n   *   }\n   *\n   *   contentChanged() {\n   *     // Count the component's children, both initially and when changed.\n   *     this.count = this.distributedChildren.length;\n   *   }\n   *\n   * }\n   * ```\n   *\n   * Note that content change detection depends upon the element having at least\n   * one `slot` element in its shadow subtree.\n   *\n   * This mixin is intended for use with the\n   * [DistributedChildrenMixin](DistributedChildrenMixin.md). See that mixin for\n   * a discussion of how that works. This DistributedChildrenContentMixin\n   * provides an easy way of defining the \"content\" of a component as the\n   * component's distributed children. That in turn lets mixins like\n   * [ContentItemsMixin](ContentItemsMixin.md) manipulate the children as list\n   * items.\n   */\n  class DistributedChildrenContent extends base {\n\n    constructor() {\n      super();\n\n      if (this.shadowRoot) {\n        // Listen to changes on all slots.\n        const slots = this.shadowRoot.querySelectorAll('slot');\n        slots.forEach(slot => slot.addEventListener('slotchange', event => {\n          this.contentChanged();\n        }));\n      }\n\n      // Make an initial call to contentChanged() so that the component can do\n      // initialization that it normally does when content changes.\n      //\n      // This will invoke contentChanged() handlers in other mixins. In order\n      // that those mixins have a chance to complete their own initialization,\n      // we add the contentChanged() call to the microtask queue.\n      microtask(() => this.contentChanged());\n    }\n\n    /**\n     * Invoked when the contents of the component (including distributed\n     * children) have changed.\n     *\n     * This method is also invoked when a component is first instantiated; the\n     * contents have essentially \"changed\" from being nothing. This allows the\n     * component to perform initial processing of its children.\n     */\n    contentChanged() {\n      if (super.contentChanged) { super.contentChanged(); }\n      const event = new CustomEvent('content-changed');\n      this.dispatchEvent(event);\n    }\n\n    /**\n     * The content of this component, defined to be the flattened array of\n     * children distributed to the component.\n     *\n     * @type {HTMLElement[]}\n     */\n    get content() {\n      const distributedChildren = this.distributedChildren;\n      if (typeof distributedChildren === 'undefined') {\n        console.warn(`DistributedChildrenContentMixin expects the component to define a \"distributedChildren\" property.`);\n      }\n      return distributedChildren;\n    }\n    set content(value) {\n      if ('content' in base.prototype) { super.content = value; }\n      // TODO: Set the children to the given value (which should be an array of\n      // elements)?\n    }\n\n    /**\n     * This event is raised when the component's contents (including distributed\n     * children) have changed.\n     *\n     * @memberof DistributedChildrenContent\n     * @event content-changed\n     */\n  }\n\n  return DistributedChildrenContent;\n};\n","/* Exported function extends a base class with DistributedChildren. */\nexport default (base) => {\n\n  /**\n   * Mixin which defines helpers for accessing a component's distributed\n   * children as a flattened array or string.\n   *\n   * The standard DOM API provides several ways of accessing child content:\n   * `children`, `childNodes`, and `textContent`. None of these functions are\n   * Shadow DOM aware. This mixin defines variations of those functions that\n   * *are* Shadow DOM aware.\n   *\n   * Example: you create a component `<count-children>` that displays a number\n   * equal to the number of children placed inside that component. If someone\n   * instantiates your component like:\n   *\n   *     <count-children>\n   *       <div></div>\n   *       <div></div>\n   *       <div></div>\n   *     </count-children>\n   *\n   * Then the component should show \"3\", because there are three children. To\n   * calculate the number of children, the component can just calculate\n   * `this.children.length`. However, suppose someone instantiates your\n   * component inside one of their own components, and puts a `<slot>` element\n   * inside your component:\n   *\n   *     <count-children>\n   *       <slot></slot>\n   *     </count-children>\n   *\n   * If your component only looks at `this.children`, it will always see exactly\n   * one child — the `<slot>` element. But the user looking at the page will\n   * *see* any nodes distributed to that slot. To match what the user sees, your\n   * component should expand any `<slot>` elements it contains.\n   *\n   * That is the problem this mixin solves. After applying this mixin, your\n   * component code has access to `this.distributedChildren`, whose `length`\n   * will return the total number of all children distributed to your component\n   * in the composed tree.\n   *\n   * Note: The latest Custom Elements API design calls for a new function,\n   * `getAssignedNodes` that takes an optional `deep` parameter, that will solve\n   * this problem at the API level.\n   */\n  class DistributedChildren extends base {\n\n    /**\n     * An in-order collection of distributed children, expanding any slot\n     * elements. Like the standard children property, this skips text nodes.\n     *\n     * @type {HTMLElement[]}\n     */\n    get distributedChildren() {\n      return expandContentElements(this.children, false);\n    }\n\n    /**\n     * An in-order collection of distributed child nodes, expanding any slot\n     * elements. Like the standard childNodes property, this includes text\n     * nodes.\n     *\n     * @type {Node[]}\n     */\n    get distributedChildNodes() {\n      return expandContentElements(this.childNodes, true);\n    }\n\n    /**\n     * The concatenated text content of all distributed child nodes, expanding\n     * any slot elements.\n     *\n     * @type {string}\n     */\n    get distributedTextContent() {\n      const strings = this.distributedChildNodes.map(function(child) {\n        return child.textContent;\n      });\n      return strings.join('');\n    }\n\n  }\n\n  return DistributedChildren;\n};\n\n\n/*\n * Given a array of nodes, return a new array with any content elements expanded\n * to the nodes distributed to that content element. This rule is applied\n * recursively.\n *\n * If includeTextNodes is true, text nodes will be included, as in the\n * standard childNodes property; by default, this skips text nodes, like the\n * standard children property.\n */\nfunction expandContentElements(nodes, includeTextNodes) {\n  const expanded = Array.prototype.map.call(nodes, node => {\n    // We want to see if the node is an instanceof HTMLSlotELement, but\n    // that class won't exist if the browser that doesn't support native\n    // Shadow DOM and if the Shadow DOM polyfill hasn't been loaded. Instead,\n    // we do a simplistic check to see if the tag name is \"slot\".\n    const isSlot = typeof HTMLSlotElement !== 'undefined' ?\n      node instanceof HTMLSlotElement :\n      node.localName === 'slot';\n    if (isSlot) {\n      // Use the nodes assigned to this node instead.\n      const assignedNodes = node.assignedNodes({ flatten: true });\n      return assignedNodes ?\n        expandContentElements(assignedNodes, includeTextNodes) :\n        [];\n    } else if (node instanceof HTMLElement) {\n      // Plain element; use as is.\n      return [node];\n    } else if (node instanceof Text && includeTextNodes) {\n      // Text node.\n      return [node];\n    } else {\n      // Comment, processing instruction, etc.; skip.\n      return [];\n    }\n  });\n  const flattened = [].concat(...expanded);\n  return flattened;\n}\n","import createSymbol from './createSymbol';\n\n\n// Symbols for private data members on an element.\nconst selectedFractionSymbol = createSymbol('selectedFraction');\n\n\n/* Exported function extends a base class with FractionalSelection. */\nexport default function mixin(base) {\n\n  /**\n   * Adds support for fractional selection: treating a selection as a real\n   * number that combines an integer portion (an index into a list), and a\n   * fraction (indicating how far of the way we are to the next or previous\n   * item).\n   *\n   * This is useful in components that support incremental operations during\n   * dragging and swiping. Example: a carousel component has several items, and the\n   * currently selected item is item 3. The user begins swiping to the left,\n   * moving towards selecting item 4. Halfway through this operation, the\n   * fractional selection value is 3.5.\n   *\n   * This value permits communication between mixins like\n   * [SwipeDirectionMixin](./SwipeDirectionMixin.md) and\n   * [TrackpadDirectionMixin](./TrackpadDirectionMixin.md), which generate\n   * fractional selection values, and mixins like\n   * [SelectionAnimationMixin](./SelectionAnimationMixin.md), which can render\n   * selection at a fractional value.\n   */\n  class FractionalSelection extends base {\n\n    connectedCallback() {\n      if (super.connectedCallback) { super.connectedCallback(); }\n      this.selectedFraction = 0;\n    }\n\n    /**\n     * A fractional value indicating how far the user has currently advanced to\n     * the next/previous item. E.g., a `selectedFraction` of 3.5 indicates the\n     * user is halfway between items 3 and 4.\n     *\n     * @type {number}\n     */\n    get selectedFraction() {\n      return this[selectedFractionSymbol];\n    }\n    set selectedFraction(value) {\n      this[selectedFractionSymbol] = value;\n      if ('selectedFraction' in base.prototype) { super.selectedFraction = value; }\n      const event = new CustomEvent('selected-fraction-changed');\n      this.dispatchEvent(event);\n    }\n\n  }\n\n  return FractionalSelection;\n}\n\n\nmixin.helpers = {\n\n  /*\n   * Dampen a selection that goes past the beginning or end of a list. This is\n   * generally used to produce a visual effect of tension as the user tries to\n   * go further in a direction that has no more items.\n   *\n   * Example: suppose `itemCount` is 5, indicating a list of 5 items. The index of\n   * the last item is 4. If the `selection` parameter is 4.5, the user is trying\n   * to go past this last item. When a damping function is applied, the resulting\n   * value will be less than 4.5 (the actual value will be 4.25). When this\n   * selection state is rendered, the user will see that, each unit distance the\n   * drag travels has less and less visible effect. This is perceived as tension.\n   *\n   * @param {number} selection - A real number indicating a selection position\n   * @param {number} itemCount - An integer for the number of items in the list\n   * @returns {number} A real number representing the damped selection value.\n   */\n  dampedSelection(selection, itemCount) {\n    const bound = itemCount - 1;\n    let damped;\n    if (selection < 0) {\n      // Trying to go past beginning of list. Apply tension from the left edge.\n      damped = -mixin.helpers.damping(-selection);\n    } else if (selection >= bound) {\n      // Trying to go past end of list. Apply tension from the right edge.\n      damped = bound + mixin.helpers.damping(selection - bound);\n    } else {\n      // No damping required.\n      damped = selection;\n    }\n    return damped;\n  },\n\n  /*\n   * Calculate damping as a function of the distance past the minimum/maximum\n   * values.\n   *\n   * We want to asymptotically approach an absolute minimum of 1 unit\n   * below/above the actual minimum/maximum. This requires calculating a\n   * hyperbolic function.\n   *\n   * See http://www.wolframalpha.com/input/?i=y+%3D+-1%2F%28x%2B1%29+%2B+1\n   * for the one we use. The only portion of that function we care about is when\n   * x is zero or greater. An important consideration is that the curve be\n   * tangent to the diagonal line x=y at (0, 0). This ensures smooth continuity\n   * with the normal drag behavior, in which the visible sliding is linear with\n   * the distance the touchpoint has been dragged.\n   */\n  damping(x) {\n    const y = (-1 / (x + 1)) + 1;\n    return y;\n  },\n\n  /*\n   * Return the current fractional selection value for the given element.\n   *\n   * This simply adds the element's `selectedIndex` and `selectedFraction`\n   * properties.\n   *\n   * @param {HTMLElement} element - An element that supports selection\n   */\n  elementSelection(element) {\n    const selectedIndex = element.selectedIndex;\n    if (selectedIndex < 0) {\n      // No selection\n      return;\n    }\n    const selectedFraction = element.selectedFraction || 0;\n    return selectedIndex + selectedFraction;\n  },\n\n  /*\n   * Breaks a fractional selection into its integer and fractional parts.\n   *\n   * Example: if passed 3.5, this returns { index: 3, fraction: 5 }.\n   *\n   * @param {number} selection – A real number representing a selection point\n   * @returns {object} - An object with an `index` property holding the\n   * selection's integer component, and a `fraction` property holding the\n   * selection's fractional component.\n   */\n  selectionParts(selection) {\n    // Stupid IE doesn't have Math.trunc.\n    // const index = Math.trunc(selection);\n    const index = selection < 0 ? Math.ceil(selection) : Math.floor(selection);\n    const fraction = selection - index;\n    return { index, fraction };\n  },\n\n  /*\n   * Returns a fractional selection point after accounting for wrapping, ensuring\n   * that the integer portion of the selection stays between 0 and `itemCount`-1.\n   * That is, the integer portion will always be a valid index into the list.\n   *\n   * Example of wrapping past the end of the list: if `selection` is 5.5 and\n   * `itemCount` is 5, this returns 0.5. Example of wrapping past the beginning of\n   * the list: if `selection` is 0.5 and `itemCount` is 5, this returns 4.5.\n   *\n   * @param {number} selection - A real number representing a selection point\n   * @param {number} itemCount - The number of items in the list\n   * @returns {number} - The result of wrapping the selection point\n   */\n  wrappedSelection(selection, itemCount) {\n    // Handles possibility of negative mod.\n    // See http://stackoverflow.com/a/18618250/76472\n    return ((selection % itemCount) + itemCount) % itemCount;\n  },\n\n  /*\n   * Return the parts of a selection, first wrapping if necessary.\n   *\n   * @param {number} selection – A real number representing a selection point\n   * @param {number} itemCount - The number of items in the list\n   * @param {boolean} wrap – True if the selection should wrap to stay within the\n   * list\n   * @returns {object} – The parts of the selection, using the same format as\n   * `selectionParts`.\n   */\n  wrappedSelectionParts(selection, itemCount, wrap) {\n    if (wrap) {\n      selection = mixin.helpers.wrappedSelection(selection, itemCount);\n    }\n    return mixin.helpers.selectionParts(selection);\n  }\n\n};\n","import DirectionSelectionMixin from '../../basic-component-mixins/src/DirectionSelectionMixin';\nimport KeyboardDirectionMixin from '../../basic-component-mixins/src/KeyboardDirectionMixin';\nimport KeyboardMixin from '../../basic-component-mixins/src/KeyboardMixin';\nimport SwipeDirectionMixin from '../../basic-component-mixins/src/SwipeDirectionMixin';\nimport symbols from '../../basic-component-mixins/src/symbols';\nimport TrackpadDirectionMixin from '../../basic-component-mixins/src/TrackpadDirectionMixin';\n\n\nexport default (base) => {\n\n  const mixins = [\n    DirectionSelectionMixin,\n    KeyboardMixin,\n    KeyboardDirectionMixin,\n    SwipeDirectionMixin,\n    TrackpadDirectionMixin\n  ];\n\n  // Don't assume base class uses ComposableMixin. Do composition by hand.\n  const baseWithMixins = mixins.reduce((c, mixin) => mixin(c), base);\n\n  /**\n   * @mixes KeyboardMixin\n   * @mixes KeyboardDirectionMixin\n   * @mixes SwipeDirectionMixin\n   * @mixes TrackpadDirectionMixin\n   */\n  class HorizontalNavigation extends baseWithMixins {\n\n    get [symbols.defaults]() {\n      const defaults = super[symbols.defaults] || {};\n      defaults.navigationAxis = 'horizontal';\n      defaults.selectionAnimationEffect = 'slideWithGap';\n      // defaults.selectionRequired = true;\n      return defaults;\n    }\n\n  }\n\n  return HorizontalNavigation;\n\n};\n","import createSymbol from './createSymbol';\nimport symbols from './symbols';\n\n\n// Symbols for private data members on an element.\nconst navigationAxisSymbol = createSymbol('navigationAxis');\n\n\n/* Exported function extends a base class with KeyboardDirection. */\nexport default (base) => {\n\n  /**\n   * Mixin which maps direction keys (Left, Right, etc.) to direction semantics\n   * (go left, go right, etc.).\n   *\n   * This mixin expects the component to invoke a `keydown` method when a key is\n   * pressed. You can use [KeyboardMixin](KeyboardMixin.md) for that\n   * purpose, or wire up your own keyboard handling and call `keydown` yourself.\n   *\n   * This mixin calls methods such as `goLeft` and `goRight`. You can define\n   * what that means by implementing those methods yourself. If you want to use\n   * direction keys to navigate a selection, use this mixin with\n   * [DirectionSelectionMixin](DirectionSelectionMixin.md).\n   */\n  class KeyboardDirection extends base {\n\n    constructor() {\n      super();\n      // Set defaults.\n      if (typeof this.navigationAxis === 'undefined') {\n        this.navigationAxis = this[symbols.defaults].navigationAxis;\n      }\n    }\n\n    get [symbols.defaults]() {\n      const defaults = super[symbols.defaults] || {};\n      defaults.navigationAxis = 'both';\n      return defaults;\n    }\n\n    /**\n     * Invoked when the user wants to go/navigate down.\n     * The default implementation of this method does nothing.\n     */\n    [symbols.goDown]() {\n      if (super[symbols.goDown]) { return super[symbols.goDown](); }\n    }\n\n    /**\n     * Invoked when the user wants to go/navigate to the end (e.g., of a list).\n     * The default implementation of this method does nothing.\n     */\n    [symbols.goEnd]() {\n      if (super[symbols.goEnd]) { return super[symbols.goEnd](); }\n    }\n\n    /**\n     * Invoked when the user wants to go/navigate left.\n     * The default implementation of this method does nothing.\n     */\n    [symbols.goLeft]() {\n      if (super[symbols.goLeft]) { return super[symbols.goLeft](); }\n    }\n\n    /**\n     * Invoked when the user wants to go/navigate right.\n     * The default implementation of this method does nothing.\n     */\n    [symbols.goRight]() {\n      if (super[symbols.goRight]) { return super[symbols.goRight](); }\n    }\n\n    /**\n     * Invoked when the user wants to go/navigate to the start (e.g., of a\n     * list). The default implementation of this method does nothing.\n     */\n    [symbols.goStart]() {\n      if (super[symbols.goStart]) { return super[symbols.goStart](); }\n    }\n\n    /**\n     * Invoked when the user wants to go/navigate up.\n     * The default implementation of this method does nothing.\n     */\n    [symbols.goUp]() {\n      if (super[symbols.goUp]) { return super[symbols.goUp](); }\n    }\n\n    /**\n     * Indicates the direction of permitted navigation with the keyboard.\n     *\n     * Accepted values are \"horizontal\", \"vertical\", or \"both\" (the default).\n     * If this property is \"horizontal\", the Up Arrow and Down Arrow keys will\n     * be ignored. Conversely, if this is \"vertical\", the Left Arrow and Right\n     * Arrow keys will be ignored.\n     *\n     * @type {string}\n     */\n    get navigationAxis() {\n      return this[navigationAxisSymbol];\n    }\n    set navigationAxis(value) {\n      this[navigationAxisSymbol] = value;\n      if ('navigationAxis' in base.prototype) { super.navigationAxis = value; }\n    }\n\n    [symbols.keydown](event) {\n      let handled;\n\n      const axis = this.navigationAxis;\n      const horizontal = (axis === 'horizontal' || axis === 'both');\n      const vertical = (axis === 'vertical' || axis === 'both');\n\n      // Ignore Left/Right keys when metaKey or altKey modifier is also pressed,\n      // as the user may be trying to navigate back or forward in the browser.\n      switch (event.keyCode) {\n        case 35: // End\n          handled = this[symbols.goEnd]();\n          break;\n        case 36: // Home\n          handled = this[symbols.goStart]();\n          break;\n        case 37: // Left\n          if (horizontal && !event.metaKey && !event.altKey) {\n            handled = this[symbols.goLeft]();\n          }\n          break;\n        case 38: // Up\n          if (vertical) {\n            handled = event.altKey ? this[symbols.goStart]() : this[symbols.goUp]();\n          }\n          break;\n        case 39: // Right\n          if (horizontal && !event.metaKey && !event.altKey) {\n            handled = this[symbols.goRight]();\n          }\n          break;\n        case 40: // Down\n          if (vertical) {\n            handled = event.altKey ? this[symbols.goEnd]() : this[symbols.goDown]();\n          }\n          break;\n      }\n      // Prefer mixin result if it's defined, otherwise use base result.\n      return handled || (super[symbols.keydown] && super[symbols.keydown](event));\n    }\n\n  }\n\n  return KeyboardDirection;\n};\n","import symbols from './symbols';\n\n\n/* Exported function extends a base class with Keyboard. */\nexport default (base) => {\n\n  /**\n   * Mixin which manages the keydown handling for a component.\n   *\n   * This mixin handles several keyboard-related features.\n   *\n   * First, it wires up a single keydown event handler that can be shared by\n   * multiple mixins on a component. The event handler will invoke a `keydown`\n   * method with the event object, and any mixin along the prototype chain that\n   * wants to handle that method can do so.\n   *\n   * If a mixin wants to indicate that keyboard event has been handled, and that\n   * other mixins should *not* handle it, the mixin's `keydown` handler should\n   * return a value of true. The convention that seems to work well is that a\n   * mixin should see if it wants to handle the event and, if not, then ask the\n   * superclass to see if it wants to handle the event. This has the effect of\n   * giving the mixin that was applied last the first chance at handling a\n   * keyboard event.\n   *\n   * Example:\n   *\n   *     [symbols.keydown](event) {\n   *       let handled;\n   *       switch (event.keyCode) {\n   *         // Handle the keys you want, setting handled = true if appropriate.\n   *       }\n   *       // Prefer mixin result if it's defined, otherwise use base result.\n   *       return handled || (super[symbols.keydown] && super[symbols.keydown](event));\n   *     }\n   *\n   * A second feature provided by this mixin is that it implicitly makes the\n   * component a tab stop if it isn't already, by setting `tabIndex` to 0. This\n   * has the effect of adding the component to the tab order in document order.\n   */\n  class Keyboard extends base {\n\n    constructor() {\n      super();\n      this.addEventListener('keydown', event => {\n        const handled = this[symbols.keydown](event);\n        if (handled) {\n          event.preventDefault();\n          event.stopPropagation();\n        }\n      });\n    }\n\n    connectedCallback() {\n      if (super.connectedCallback) { super.connectedCallback(); }\n      if (this.getAttribute('tabindex') == null && this[symbols.defaults].tabindex !== null) {\n        this.setAttribute('tabindex', this[symbols.defaults].tabindex);\n      }\n    }\n\n    get [symbols.defaults]() {\n      const defaults = super[symbols.defaults] || {};\n      // The default tab index is 0 (document order).\n      defaults.tabindex = 0;\n      return defaults;\n    }\n\n    /**\n     * Handle the indicated keyboard event.\n     *\n     * The default implementation of this method does nothing. This will\n     * typically be handled by other mixins.\n     *\n     * @param {KeyboardEvent} event - the keyboard event\n     * @return {boolean} true if the event was handled\n     */\n    [symbols.keydown](event) {\n      if (super[symbols.keydown]) { return super[symbols.keydown](event); }\n    }\n\n  }\n\n  return Keyboard;\n};\n","import symbols from './symbols';\n\n\n// Used to assign unique IDs to item elements without IDs.\nlet idCount = 0;\n\n\n/* Exported function extends a base class with SelectionAriaActive. */\nexport default (base) => {\n\n  /**\n   * Mixin which treats the selected item in a list as the active item in ARIA\n   * accessibility terms.\n   *\n   * Handling ARIA selection state properly is actually quite complex:\n   *\n   * * The items in the list need to be indicated as possible items via an ARIA\n   *   `role` attribute value such as \"option\".\n   * * The selected item need to be marked as selected by setting the item's\n   *   `aria-selected` attribute to true *and* the other items need be marked as\n   *   *not* selected by setting `aria-selected` to false.\n   * * The outermost element with the keyboard focus needs to have attributes\n   *   set on it so that the selection is knowable at the list level via the\n   *   `aria-activedescendant` attribute.\n   * * Use of `aria-activedescendant` in turn requires that all items in the\n   *   list have ID attributes assigned to them.\n   *\n   * This mixin tries to address all of the above requirements. To that end,\n   * this mixin will assign generated IDs to any item that doesn't already have\n   * an ID.\n   *\n   * ARIA relies on elements to provide `role` attributes. This mixin will apply\n   * a default role of \"listbox\" on the outer list if it doesn't already have an\n   * explicit role. Similarly, this mixin will apply a default role of \"option\"\n   * to any list item that does not already have a role specified.\n   *\n   * This mixin expects a set of members that manage the state of the selection:\n   * `[symbols.itemSelected]`, `itemAdded`, and `selectedIndex`. You can\n   * supply these yourself, or do so via\n   * [SingleSelectionMixin](SingleSelectionMixin.md).\n   */\n  class SelectionAriaActive extends base {\n\n    connectedCallback() {\n      if (super.connectedCallback) { super.connectedCallback(); }\n      // Set default ARIA role.\n      if (this.getAttribute('role') == null && this[symbols.defaults].role) {\n        this.setAttribute('role', this[symbols.defaults].role);\n      }\n    }\n\n    get [symbols.defaults]() {\n      const defaults = super[symbols.defaults] || {};\n      defaults.role = 'listbox';\n      return defaults;\n    }\n\n    [symbols.itemAdded](item) {\n      if (super[symbols.itemAdded]) { super[symbols.itemAdded](item); }\n\n      if (!item.getAttribute('role')) {\n        // Assign a default ARIA role.\n        item.setAttribute('role', 'option');\n      }\n\n      // Ensure each item has an ID so we can set aria-activedescendant on the\n      // overall list whenever the selection changes.\n      //\n      // The ID will take the form of a base ID plus a unique integer. The base\n      // ID will be incorporate the component's own ID. E.g., if a component has\n      // ID \"foo\", then its items will have IDs that look like \"_fooOption1\". If\n      // the compnent has no ID itself, its items will get IDs that look like\n      // \"_option1\". Item IDs are prefixed with an underscore to differentiate\n      // them from manually-assigned IDs, and to minimize the potential for ID\n      // conflicts.\n      if (!item.id) {\n        const baseId = this.id ?\n            \"_\" + this.id + \"Option\" :\n            \"_option\";\n        item.id = baseId + idCount++;\n      }\n    }\n\n    [symbols.itemSelected](item, selected) {\n      if (super[symbols.itemSelected]) { super[symbols.itemSelected](item, selected); }\n      item.setAttribute('aria-selected', selected);\n      const itemId = item.id;\n      if (itemId && selected) {\n        this.setAttribute('aria-activedescendant', itemId);\n      }\n    }\n\n    get selectedItem() {\n      return super.selectedItem;\n    }\n    set selectedItem(item) {\n      if ('selectedItem' in base.prototype) { super.selectedItem = item; }\n      if (item == null) {\n        // Selection was removed.\n        this.removeAttribute('aria-activedescendant');\n      }\n    }\n\n  }\n\n  return SelectionAriaActive;\n};\n","/* Exported function extends a base class with ShadowElementReferences. */\nexport default (base) => {\n\n  /**\n   * Mixin to create references to elements in a component's Shadow DOM subtree.\n   *\n   * This adds a member on the component called `this.$` that can be used to\n   * reference shadow elements with IDs. E.g., if component's shadow contains an\n   * element `<button id=\"foo\">`, then this mixin will create a member\n   * `this.$.foo` that points to that button.\n   *\n   * Such references simplify a component's access to its own elements. In\n   * exchange, this mixin trades off a one-time cost of querying all elements in\n   * the shadow tree instead of paying an ongoing cost to query for an element\n   * each time the component wants to inspect or manipulate it.\n   *\n   * This mixin expects the component to define a Shadow DOM subtree. You can\n   * create that tree yourself, or make use of\n   * [ShadowTemplateMixin](ShadowTemplateMixin.md).\n   *\n   * This mixin is inspired by Polymer's [automatic\n   * node finding](https://www.polymer-project.org/1.0/docs/devguide/local-dom.html#node-finding)\n   * feature.\n   */\n  class ShadowElementReferences extends base {\n\n    constructor() {\n      super();\n      if (this.shadowRoot) {\n        // Look for elements in the shadow subtree that have id attributes.\n        // An alternatively implementation of this mixin would be to just define\n        // a this.$ getter that lazily does this search the first time someone\n        // tries to access this.$. That might introduce some complexity – if the\n        // the tree changed after it was first populated, the result of\n        // searching for a node might be somewhat unpredictable.\n        this.$ = {};\n        const nodesWithIds = this.shadowRoot.querySelectorAll('[id]');\n        [].forEach.call(nodesWithIds, node => {\n          const id = node.getAttribute('id');\n          this.$[id] = node;\n        });\n      }\n    }\n\n    /**\n     * The collection of references to the elements with IDs in a component's\n     * Shadow DOM subtree.\n     *\n     * @type {object}\n     * @member $\n     */\n  }\n\n  return ShadowElementReferences;\n};\n","import symbols from '../src/symbols';\n\n\n/* Exported function extends a base class with ShadowTemplate. */\nexport default (base) => {\n\n  /**\n   * Mixin for stamping a template into a Shadow DOM subtree upon component\n   * instantiation.\n   *\n   * To use this mixin, define a `template` property as a string or HTML\n   * `<template>` element:\n   *\n   *     class MyElement extends ShadowTemplateMixin(HTMLElement) {\n   *       get [symbols.template]() {\n   *         return `Hello, <em>world</em>.`;\n   *       }\n   *     }\n   *\n   * When your component class is instantiated, a shadow root will be created on\n   * the instance, and the contents of the template will be cloned into the\n   * shadow root. If your component does not define a `template` property, this\n   * mixin has no effect.\n   *\n   * For the time being, this extension retains support for Shadow DOM v0. That\n   * will eventually be deprecated as browsers (and the Shadow DOM polyfill)\n   * implement Shadow DOM v1.\n   */\n  class ShadowTemplate extends base {\n\n    /*\n     * If the component defines a template, a shadow root will be created on the\n     * component instance, and the template stamped into it.\n     */\n    constructor() {\n      super();\n      let template = this[symbols.template];\n      // TODO: Save the processed template with the component's class prototype\n      // so it doesn't need to be processed with every instantiation.\n      if (template) {\n\n        if (typeof template === 'string') {\n          // Upgrade plain string to real template.\n          template = createTemplateWithInnerHTML(template);\n        }\n\n        if (window.ShadowDOMPolyfill) {\n          shimTemplateStyles(template, this.localName);\n        }\n\n        const root = this.attachShadow({ mode: 'open' });\n        const clone = document.importNode(template.content, true);\n        root.appendChild(clone);\n      }\n    }\n\n  }\n\n  return ShadowTemplate;\n};\n\n\n// Convert a plain string of HTML into a real template element.\nfunction createTemplateWithInnerHTML(innerHTML) {\n  const template = document.createElement('template');\n  // REVIEW: Is there an easier way to do this?\n  // We'd like to just set innerHTML on the template content, but since it's\n  // a DocumentFragment, that doesn't work.\n  const div = document.createElement('div');\n  div.innerHTML = innerHTML;\n  while (div.childNodes.length > 0) {\n    template.content.appendChild(div.childNodes[0]);\n  }\n  return template;\n}\n\n// Invoke basic style shimming with ShadowCSS.\nfunction shimTemplateStyles(template, tag) {\n  window.WebComponents.ShadowCSS.shimStyling(template.content, tag);\n}\n","import createSymbol from './createSymbol';\nimport symbols from './symbols';\n\n\n// Symbols for private data members on an element.\nconst canSelectNextSymbol = createSymbol('canSelectNext');\nconst canSelectPreviousSymbol = createSymbol('canSelectPrevious');\nconst selectionRequiredSymbol = createSymbol('selectionRequired');\nconst selectionWrapsSymbol = createSymbol('selectionWraps');\n\n// We want to expose both selectedIndex and selectedItem as independent\n// properties but keep them in sync. This allows a component user to reference\n// the selection by whatever means is most natural for their situation.\n//\n// To efficiently keep these properties in sync, we track \"external\" and\n// \"internal\" references for each property:\n//\n// The external index or item is the one we report to the outside world when\n// asked for selection.  When handling a change to index or item, we update the\n// external reference as soon as possible, so that if anyone immediately asks\n// for the current selection, they will receive a stable answer.\n//\n// The internal index or item tracks whichever index or item last received the\n// full set of processing. Processing includes raising a change event for the\n// new value. Once we've begun that processing, we store the new value as the\n// internal value to indicate we've handled it.\n//\nconst externalSelectedIndexSymbol = createSymbol('externalSelectedIndex');\nconst externalSelectedItemSymbol = createSymbol('externalSelectedItem');\nconst internalSelectedIndexSymbol = createSymbol('internalSelectedIndex');\nconst internalSelectedItemSymbol = createSymbol('internalSelectedItem');\n\n\n/* Exported function extends a base class with SingleSelection. */\nexport default (base) => {\n\n  /**\n   * Mixin which manages single-selection semantics for items in a list.\n   *\n   * This mixin expects a component to provide an `items` Array or NodeList of\n   * all elements in the list. A standard way to do that with is the\n   * [ContentItemsMixin](ContentItemsMixin.md), which takes a component's\n   * content (typically its distributed children) as the set of list items; see\n   * that mixin for details.\n   *\n   * This mixin tracks a single selected item in the list, and provides means to\n   * get and set that state by item position (`selectedIndex`) or item identity\n   * (`selectedItem`). The selection can be moved in the list via the methods\n   * `selectFirst`, `selectLast`, `selectNext`, and `selectPrevious`.\n   *\n   * This mixin does not produce any user-visible effects to represent\n   * selection. Other mixins, such as\n   * [SelectionAriaActiveMixin](SelectionAriaActiveMixin.md),\n   * [SelectionHighlightMixin](SelectionHighlightMixin.md) and\n   * [SelectionInViewMixin](SelectionInViewMixin.md), modify the selected item\n   * in common ways to let the user know a given item is selected or not\n   * selected.\n   */\n  class SingleSelection extends base {\n\n    constructor() {\n      super();\n      // Set defaults.\n      if (typeof this.selectionRequired === 'undefined') {\n        this.selectionRequired = this[symbols.defaults].selectionRequired;\n      }\n      if (typeof this.selectionWraps === 'undefined') {\n        this.selectionWraps = this[symbols.defaults].selectionWraps;\n      }\n    }\n\n    /**\n     * True if the selection can be moved to the next item, false if not (the\n     * selected item is the last item in the list).\n     *\n     * @type {boolean}\n     */\n    get canSelectNext() {\n      return this[canSelectNextSymbol];\n    }\n    set canSelectNext(canSelectNext) {\n      const previousCanSelectNext = this[canSelectNextSymbol];\n      this[canSelectNextSymbol] = canSelectNext;\n      if ('canSelectNext' in base.prototype) { super.canSelectNext = canSelectNext; }\n      if (canSelectNext !== previousCanSelectNext) {\n        this.dispatchEvent(new CustomEvent('can-select-next-changed'));\n      }\n    }\n\n    /**\n     * True if the selection can be moved to the previous item, false if not\n     * (the selected item is the first one in the list).\n     *\n     * @type {boolean}\n     */\n    get canSelectPrevious() {\n      return this[canSelectPreviousSymbol];\n    }\n    set canSelectPrevious(canSelectPrevious) {\n      const previousCanSelectPrevious = this[canSelectPreviousSymbol];\n      this[canSelectPreviousSymbol] = canSelectPrevious;\n      if ('canSelectPrevious' in base.prototype) { super.canSelectPrevious = canSelectPrevious; }\n      if (canSelectPrevious !== previousCanSelectPrevious) {\n        this.dispatchEvent(new CustomEvent('can-select-previous-changed'));\n      }\n    }\n\n    get [symbols.defaults]() {\n      const defaults = super[symbols.defaults] || {};\n      defaults.selectionRequired = false;\n      defaults.selectionWraps = false;\n      return defaults;\n    }\n\n    /**\n     * Handle a new item being added to the list.\n     *\n     * The default implementation of this method simply sets the item's\n     * selection state to false.\n     *\n     * @param {HTMLElement} item - the item being added\n     */\n    [symbols.itemAdded](item) {\n      if (super[symbols.itemAdded]) { super[symbols.itemAdded](item); }\n      this[symbols.itemSelected](item, item === this.selectedItem);\n    }\n\n    [symbols.itemsChanged]() {\n      if (super[symbols.itemsChanged]) { super[symbols.itemsChanged](); }\n\n      // In case selected item changed position or was removed.\n      trackSelectedItem(this);\n\n      // In case the change in items affected which navigations are possible.\n      updatePossibleNavigations(this);\n    }\n\n    /**\n     * Apply the indicate selection state to the item.\n     *\n     * The default implementation of this method does nothing. User-visible\n     * effects will typically be handled by other mixins.\n     *\n     * @param {HTMLElement} item - the item being selected/deselected\n     * @param {boolean} selected - true if the item is selected, false if not\n     */\n    [symbols.itemSelected](item, selected) {\n      if (super[symbols.itemSelected]) { super[symbols.itemSelected](item, selected); }\n    }\n\n    /**\n     * The index of the item which is currently selected.\n     *\n     * A `selectedIndex` of -1 indicates there is no selection. Setting this\n     * property to -1 will remove any existing selection.\n     *\n     * @type {number}\n     */\n    get selectedIndex() {\n      return this[externalSelectedIndexSymbol] != null ?\n        this[externalSelectedIndexSymbol] :\n        -1;\n    }\n    set selectedIndex(index) {\n      // See notes at top about internal vs. external copies of this property.\n      const previousSelectedIndex = this[internalSelectedIndexSymbol];\n      let item;\n      if (index !== this[externalSelectedIndexSymbol]) {\n        // Store the new index and the corresponding item.\n        const items = this.items;\n        const hasItems = items && items.length > 0;\n        if (!(hasItems && index >= 0 && index < items.length)) {\n          index = -1; // No item at that index.\n        }\n        this[externalSelectedIndexSymbol] = index;\n        item = hasItems && index >= 0 ? items[index] : null;\n        this[externalSelectedItemSymbol] = item;\n      } else {\n        item = this[externalSelectedItemSymbol];\n      }\n\n      // Now let super do any work.\n      if ('selectedIndex' in base.prototype) { super.selectedIndex = index; }\n\n      if (index !== previousSelectedIndex) {\n        // The selected index changed.\n        this[internalSelectedIndexSymbol] = index;\n\n        const event = new CustomEvent('selected-index-changed', {\n          detail: {\n            selectedIndex: index,\n            value: index // for Polymer binding. TODO: Verify still necessary\n          }\n        });\n        this.dispatchEvent(event);\n      }\n\n      if (this[internalSelectedItemSymbol] !== item) {\n        // Update selectedItem property so it can have its own effects.\n        this.selectedItem = item;\n      }\n    }\n\n    /**\n     * The currently selected item, or null if there is no selection.\n     *\n     * Setting this property to null deselects any currently-selected item.\n     * Setting this property to an object that is not in the list has no effect.\n     *\n     * TODO: Even if selectionRequired, can still explicitly set selectedItem to null.\n     * TODO: If selectionRequired, leave selection alone?\n     *\n     * @type {object}\n     */\n    get selectedItem() {\n      return this[externalSelectedItemSymbol] || null;\n    }\n    set selectedItem(item) {\n      // See notes at top about internal vs. external copies of this property.\n      const previousSelectedItem = this[internalSelectedItemSymbol];\n      let index;\n      if (item !== this[externalSelectedItemSymbol]) {\n        // Store item and look up corresponding index.\n        const items = this.items;\n        const hasItems = items && items.length > 0;\n        index = hasItems ? Array.prototype.indexOf.call(items, item) : -1;\n        this[externalSelectedIndexSymbol] = index;\n        if (index < 0) {\n          item = null; // The indicated item isn't actually in `items`.\n        }\n        this[externalSelectedItemSymbol] = item;\n      } else {\n        index = this[externalSelectedIndexSymbol];\n      }\n\n      // Now let super do any work.\n      if ('selectedItem' in base.prototype) { super.selectedItem = item; }\n\n      if (item !== previousSelectedItem) {\n        // The selected item changed.\n        this[internalSelectedItemSymbol] = item;\n\n        if (previousSelectedItem) {\n          // Update selection state of old item.\n          this[symbols.itemSelected](previousSelectedItem, false);\n        }\n        if (item) {\n          // Update selection state to new item.\n          this[symbols.itemSelected](item, true);\n        }\n\n        updatePossibleNavigations(this);\n\n        const event = new CustomEvent('selected-item-changed', {\n          detail: {\n            selectedItem: item,\n            value: item // for Polymer binding\n          }\n        });\n        this.dispatchEvent(event);\n      }\n\n      if (this[internalSelectedIndexSymbol] !== index) {\n        // Update selectedIndex property so it can have its own effects.\n        this.selectedIndex = index;\n      }\n    }\n\n    /**\n     * Select the first item in the list.\n     */\n    selectFirst() {\n      if (super.selectFirst) { super.selectFirst(); }\n      return selectIndex(this, 0);\n    }\n\n    /**\n     * True if the list should always have a selection (if it has items).\n     *\n     * @type {boolean}\n     * @default false\n     */\n    get selectionRequired() {\n      return this[selectionRequiredSymbol];\n    }\n    set selectionRequired(selectionRequired) {\n      this[selectionRequiredSymbol] = selectionRequired;\n      if ('selectionRequired' in base.prototype) { super.selectionRequired = selectionRequired; }\n      trackSelectedItem(this);\n    }\n\n    /**\n     * True if selection navigations wrap from last to first, and vice versa.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    get selectionWraps() {\n      return this[selectionWrapsSymbol];\n    }\n    set selectionWraps(value) {\n      this[selectionWrapsSymbol] = String(value) === 'true';\n      if ('selectionWraps' in base.prototype) { super.selectionWraps = value; }\n      updatePossibleNavigations(this);\n    }\n\n    /**\n     * Select the last item in the list.\n     */\n    selectLast() {\n      if (super.selectLast) { super.selectLast(); }\n      return selectIndex(this, this.items.length - 1);\n    }\n\n    /**\n     * Select the next item in the list.\n     */\n    selectNext() {\n      if (super.selectNext) { super.selectNext(); }\n      return selectIndex(this, this.selectedIndex + 1);\n    }\n\n    /**\n     * Select the previous item in the list.\n     *\n     * If the list has no selection, the last item will be selected.\n     */\n    selectPrevious() {\n      if (super.selectPrevious) { super.selectPrevious(); }\n      const newIndex = this.selectedIndex < 0 ?\n        this.items.length - 1 :     // No selection yet; select last item.\n        this.selectedIndex - 1;\n      return selectIndex(this, newIndex);\n    }\n\n    /**\n     * Fires when the selectedItem property changes.\n     *\n     * @memberof SingleSelection\n     * @event selected-item-changed\n     * @param {HTMLElement} detail.selectedItem The new selected item.\n     * @param {HTMLElement} detail.previousItem The previously selected item.\n     */\n\n    /**\n     * Fires when the selectedIndex property changes.\n     *\n     * @memberof SingleSelection\n     * @event selected-index-changed\n     * @param {number} detail.selectedIndex The new selected index.\n     */\n\n  }\n\n  return SingleSelection;\n};\n\n\n// Ensure the given index is within bounds, and select it if it's not already\n// selected.\nfunction selectIndex(element, index) {\n  const count = element.items.length;\n\n  const boundedIndex = (element.selectionWraps) ?\n    // JavaScript mod doesn't handle negative numbers the way we want to wrap.\n    // See http://stackoverflow.com/a/18618250/76472\n    ((index % count) + count) % count :\n\n    // Keep index within bounds of array.\n    Math.max(Math.min(index, count - 1), 0);\n\n  const previousIndex = element.selectedIndex;\n  if (previousIndex !== boundedIndex) {\n    element.selectedIndex = boundedIndex;\n    return true;\n  } else {\n    return false;\n  }\n}\n\n// Following a change in the set of items, or in the value of the\n// `selectionRequired` property, reacquire the selected item. If it's moved,\n// update `selectedIndex`. If it's been removed, and a selection is required,\n// try to select another item.\nfunction trackSelectedItem(element) {\n\n  const items = element.items;\n  const itemCount = items ? items.length : 0;\n\n  const previousSelectedItem = element.selectedItem;\n  if (!previousSelectedItem) {\n    // No item was previously selected.\n    if (element.selectionRequired) {\n      // Select the first item by default.\n      element.selectedIndex = 0;\n    }\n  } else if (itemCount === 0) {\n    // We've lost the selection, and there's nothing left to select.\n    element.selectedItem = null;\n  } else {\n    // Try to find the previously-selected item in the current set of items.\n    const indexInCurrentItems = Array.prototype.indexOf.call(items, previousSelectedItem);\n    const previousSelectedIndex = element.selectedIndex;\n    if (indexInCurrentItems < 0) {\n      // Previously-selected item was removed from the items.\n      // Select the item at the same index (if it exists) or as close as possible.\n      const newSelectedIndex = Math.min(previousSelectedIndex, itemCount - 1);\n      // Select by item, since index may be the same, and we want to raise the\n      // selected-item-changed event.\n      element.selectedItem = items[newSelectedIndex];\n    } else if (indexInCurrentItems !== previousSelectedIndex) {\n      // Previously-selected item still there, but changed position.\n      element.selectedIndex = indexInCurrentItems;\n    }\n  }\n}\n\n// Following a change in selection, report whether it's now possible to\n// go next/previous from the given index.\nfunction updatePossibleNavigations(element) {\n  let canSelectNext;\n  let canSelectPrevious;\n  const items = element.items;\n  if (items == null || items.length === 0) {\n    // No items to select.\n    canSelectNext = false;\n    canSelectPrevious = false;\n  } if (element.selectionWraps) {\n    // Since there are items, can always go next/previous.\n    canSelectNext = true;\n    canSelectPrevious = true;\n  } else {\n    const index = element.selectedIndex;\n    if (index < 0 && items.length > 0) {\n      // Special case. If there are items but no selection, declare that it's\n      // always possible to go next/previous to create a selection.\n      canSelectNext = true;\n      canSelectPrevious = true;\n    } else {\n      // Normal case: we have an index in a list that has items.\n      canSelectPrevious = (index > 0);\n      canSelectNext = (index < items.length - 1);\n    }\n  }\n  if (element.canSelectNext !== canSelectNext) {\n    element.canSelectNext = canSelectNext;\n  }\n  if (element.canSelectPrevious !== canSelectPrevious) {\n    element.canSelectPrevious = canSelectPrevious;\n  }\n}\n","import createSymbol from './createSymbol';\nimport symbols from './symbols';\n\n\n// Symbols for private data members on an element.\nconst deltaXSymbol = createSymbol('deltaX');\nconst deltaYSymbol = createSymbol('deltaY');\nconst multiTouchSymbol = createSymbol('multiTouch');\nconst previousXSymbol = createSymbol('previousX');\nconst previousYSymbol = createSymbol('previousY');\nconst startXSymbol = createSymbol('startX');\nconst travelFractionSymbol = createSymbol('travelFraction');\n\n\n/* Exported function extends a base class with SwipeDirection. */\nexport default (base) => {\n\n  /**\n   * Mixin which maps touch gestures (swipe left, swipe right) to direction\n   * semantics (go right, go left).\n   *\n   * By default, this mixin presents no user-visible effects; it just indicates\n   * a direction in which the user is currently swiping or has finished swiping.\n   * To map the direction to a change in selection, use\n   * [DirectionSelectionMixin](DirectionSelectionMixin.md).\n   */\n  class SwipeDirection extends base {\n\n    constructor() {\n      super();\n\n      this.travelFraction = 0;\n\n      // In all touch events, only handle single touches. We don't want to\n      // inadvertently do work when the user's trying to pinch-zoom for example.\n      // TODO: Even better approach than below would be to ignore touches after\n      // the first if the user has already begun a swipe.\n      // TODO: Touch events should probably be factored out into its own mixin.\n      if (window.PointerEvent) {\n        // Prefer listening to standard pointer events.\n        this.addEventListener('pointerdown', event => {\n          if (isEventForPenOrPrimaryTouch(event)) {\n            touchStart(this, event.clientX, event.clientY);\n          }\n        });\n        this.addEventListener('pointermove', event => {\n          if (isEventForPenOrPrimaryTouch(event)) {\n            const handled = touchMove(this, event.clientX, event.clientY);\n            if (handled) {\n              event.preventDefault();\n            }\n          }\n        });\n        this.addEventListener('pointerup', event => {\n          if (isEventForPenOrPrimaryTouch(event)) {\n            touchEnd(this, event.clientX, event.clientY);\n          }\n        });\n      } else {\n        // Pointer events not supported -- listen to older touch events.\n        this.addEventListener('touchstart', event => {\n          if (this[multiTouchSymbol]) {\n            return;\n          } else if (event.touches.length === 1) {\n            const clientX = event.changedTouches[0].clientX;\n            const clientY = event.changedTouches[0].clientY;\n            touchStart(this, clientX, clientY);\n          } else {\n            this[multiTouchSymbol] = true;\n          }\n        });\n        this.addEventListener('touchmove', event => {\n          if (!this[multiTouchSymbol] && event.touches.length === 1) {\n            const clientX = event.changedTouches[0].clientX;\n            const clientY = event.changedTouches[0].clientY;\n            const handled = touchMove(this, clientX, clientY);\n            if (handled) {\n              event.preventDefault();\n            }\n          }\n        });\n        this.addEventListener('touchend', event => {\n          if (event.touches.length === 0) {\n            // All touches removed; gesture is complete.\n            if (!this[multiTouchSymbol]) {\n              // Single-touch swipe has finished.\n              const clientX = event.changedTouches[0].clientX;\n              const clientY = event.changedTouches[0].clientY;\n              touchEnd(this, clientX, clientY);\n            }\n            this[multiTouchSymbol] = false;\n          }\n        });\n      }\n    }\n\n    connectedCallback() {\n      if (super.connectedCallback) { super.connectedCallback(); }\n\n      // For the component to receive PointerEvents in IE/Edge, we need to set\n      // touch-action: none. Only make this change if touch-action is currently\n      // the default value (\"auto\"), in case the developer knows better than we\n      // do what they want in their particular context.\n      if (getComputedStyle(this).touchAction === 'auto') {\n        this.style.touchAction = 'none';\n      }\n    }\n\n    // Default implementation.\n    get [symbols.dragging]() {\n      return super[symbols.dragging];\n    }\n    set [symbols.dragging](value) {\n      if (symbols.dragging in base.prototype) { super[symbols.dragging] = value; }\n    }\n\n    /**\n     * Invoked when the user wants to go/navigate left.\n     * The default implementation of this method does nothing.\n     */\n    [symbols.goLeft]() {\n      if (super[symbols.goLeft]) { return super[symbols.goLeft](); }\n    }\n\n    /**\n     * Invoked when the user wants to go/navigate right.\n     * The default implementation of this method does nothing.\n     */\n    [symbols.goRight]() {\n      if (super[symbols.goRight]) { return super[symbols.goRight](); }\n    }\n\n    /**\n     * The distance the first touchpoint has traveled since the beginning of a\n     * drag, expressed as a fraction of the element's width.\n     *\n     * @type number\n     */\n    get travelFraction() {\n      return this[travelFractionSymbol];\n    }\n    set travelFraction(value) {\n      this[travelFractionSymbol] = value;\n      if ('travelFraction' in base.prototype) { super.travelFraction = value; }\n    }\n\n  }\n\n  return SwipeDirection;\n};\n\n\n// Return true if the pointer event is for the pen, or the primary touch point.\nfunction isEventForPenOrPrimaryTouch(event) {\n  return event.pointerType === 'pen' ||\n      (event.pointerType === 'touch' && event.isPrimary);\n}\n\n/*\n * Invoked when the user has finished a touch operation.\n */\nfunction touchEnd(element, clientX, clientY) {\n  element[symbols.dragging] = false;\n  if (element[deltaXSymbol] >= 20) {\n    // Finished going right at high speed.\n    element[symbols.goLeft]();\n  } else if (element[deltaXSymbol] <= -20) {\n    // Finished going left at high speed.\n    element[symbols.goRight]();\n  } else {\n    // Finished at low speed.\n    trackTo(element, clientX);\n    const travelFraction = element.travelFraction;\n    if (travelFraction >= 0.5) {\n      element[symbols.goRight]();\n    } else if (travelFraction <= -0.5) {\n      element[symbols.goLeft]();\n    }\n  }\n  element.travelFraction = 0;\n  element[deltaXSymbol] = null;\n  element[deltaYSymbol] = null;\n}\n\n/*\n * Invoked when the user has moved during a touch operation.\n */\nfunction touchMove(element, clientX, clientY) {\n\n  element[deltaXSymbol] = clientX - element[previousXSymbol];\n  element[deltaYSymbol] = clientY - element[previousYSymbol];\n  element[previousXSymbol] = clientX;\n  element[previousYSymbol] = clientY;\n  if (Math.abs(element[deltaXSymbol]) > Math.abs(element[deltaYSymbol])) {\n    // Move was mostly horizontal.\n    trackTo(element, clientX);\n    // Indicate that the event was handled. It'd be nicer if we didn't have\n    // to do this so that, e.g., a user could be swiping left and right\n    // while simultaneously scrolling up and down. (Native touch apps can do\n    // that.) However, Mobile Safari wants to handle swipe events near the\n    // page and interpret them as navigations. To avoid having a horiziontal\n    // swipe misintepreted as a navigation, we indicate that we've handled\n    // the event, and prevent default behavior.\n    return true;\n  } else {\n    // Move was mostly vertical.\n    return false; // Not handled\n  }\n}\n\n/*\n * Invoked when the user has begun a touch operation.\n */\nfunction touchStart(element, clientX, clientY) {\n  element[symbols.dragging] = true;\n  element[startXSymbol] = clientX;\n  element[previousXSymbol] = clientX;\n  element[previousYSymbol] = clientY;\n  element[deltaXSymbol] = 0;\n  element[deltaYSymbol] = 0;\n}\n\nfunction trackTo(element, x) {\n  const width = element.offsetWidth;\n  const dragDistance = element[startXSymbol] - x;\n  const fraction = width > 0 ?\n    dragDistance / width :\n    0;\n  element.travelFraction = fraction;\n}\n","import createSymbol from '../../basic-component-mixins/src/createSymbol';\nimport symbols from './symbols';\n\n\n// Symbols for private data members on an element.\nconst absorbDecelerationSymbol = createSymbol('absorbDeceleration');\nconst lastDeltaXSymbol = createSymbol('lastDeltaX');\nconst lastWheelTimeoutSymbol = createSymbol('lastWheelTimeout');\nconst postNavigateDelayCompleteSymbol = createSymbol('postNavigateDelayComplete');\nconst wheelDistanceSymbol = createSymbol('wheelDistance');\n\n\n/* Exported function extends a base class with TrackpadDirection. */\nexport default (base) => {\n\n  /**\n   * Mixin which maps a horizontal trackpad swipe gestures (or horizontal mouse\n   * wheel actions) to direction semantics.\n   *\n   * You can use this mixin with a mixin like\n   * [DirectionSelectionMixin](DirectionSelectionMixin.md) to let the user\n   * change the selection with the trackpad or mouse wheel.\n   *\n   * To respond to the trackpad, we can listen to the DOM's \"wheel\" events.\n   * These events are fired as the user drags their fingers across a trackpad.\n   * Unfortunately, browsers are missing a critical event — there is no event\n   * when the user *stops* a gestured on the trackpad or mouse wheel.\n   *\n   * To make things worse, the mainstream browsers continue to generate fake\n   * wheel events even after the user has stopped dragging their fingers. These\n   * fake events simulate the user gradually slowing down the drag until they\n   * come to a smooth stop. In some contexts, these fake wheel events might be\n   * helpful, but in trying to supply typical trackpad swipe navigation, these\n   * fake events get in the way.\n   *\n   * This component uses heuristics to work around these problems, but the\n   * complex nature of the problem make it extremely difficult to achieve the\n   * same degree of trackpad responsiveness possible with native applications.\n   */\n  class TrackpadDirection extends base {\n\n    constructor() {\n      super();\n      this.addEventListener('wheel', event => {\n        const handled = wheel(this, event);\n        if (handled) {\n          event.preventDefault();\n        }\n      });\n      resetWheelTracking(this);\n    }\n\n    // Default implementation.\n    get [symbols.dragging]() {\n      return super[symbols.dragging];\n    }\n    set [symbols.dragging](value) {\n      if (symbols.dragging in base.prototype) { super[symbols.dragging] = value; }\n    }\n\n    /**\n     * Invoked when the user wants to go/navigate left.\n     * The default implementation of this method does nothing.\n     */\n    [symbols.goLeft]() {\n      if (super[symbols.goLeft]) { return super[symbols.goLeft](); }\n    }\n\n    /**\n     * Invoked when the user wants to go/navigate right.\n     * The default implementation of this method does nothing.\n     */\n    [symbols.goRight]() {\n      if (super[symbols.goRight]) { return super[symbols.goRight](); }\n    }\n\n    /**\n     * The distance the user has moved the first touchpoint since the beginning\n     * of a trackpad/wheel operation, expressed as a fraction of the element's\n     * width.\n     *\n     * @type number\n     */\n    get travelFraction() {\n      return super.travelFraction;\n    }\n    set travelFraction(value) {\n      if ('travelFraction' in base.prototype) { super.travelFraction = value; }\n    }\n\n  }\n\n  return TrackpadDirection;\n};\n\n\n// Time we wait following a navigation before paying attention to wheel\n// events again.\nconst POST_NAVIGATE_TIME = 250;\n\n// Time we wait after the last wheel event before we reset things.\nconst WHEEL_TIME = 100;\n\n\n// Following a navigation, partially reset our wheel tracking.\nfunction postNavigate(element) {\n  element.travelFraction = 0;\n  element[wheelDistanceSymbol] = 0;\n  element[postNavigateDelayCompleteSymbol] = true;\n  element[absorbDecelerationSymbol] = true;\n  setTimeout(() => {\n    element[postNavigateDelayCompleteSymbol] = false;\n  }, POST_NAVIGATE_TIME);\n}\n\n// Reset all state related to the tracking of the wheel.\nfunction resetWheelTracking(element) {\n  element.travelFraction = 0;\n  element[wheelDistanceSymbol] = 0;\n  element[lastDeltaXSymbol] = 0;\n  element[absorbDecelerationSymbol] = false;\n  element[postNavigateDelayCompleteSymbol] = false;\n  if (element[lastWheelTimeoutSymbol]) {\n    clearTimeout(element[lastWheelTimeoutSymbol]);\n    element[lastWheelTimeoutSymbol] = null;\n  }\n}\n\n// Define our own sign function, since (as of May 2015), Safari and IE don't\n// supply Math.sign().\nfunction sign(x) {\n  return (x === 0) ?\n    0 :\n    (x > 0) ?\n      1 :\n      -1;\n}\n\n// TODO: Damping, or some other treatment for going past the ends.\n\n/*\n * A wheel event has been generated. This could be a real wheel event, or it\n * could be fake (see notes in the header).\n *\n * This handler uses several strategies to try to approximate native trackpad\n * swipe navigation.\n *\n * If the user has dragged enough to cause a navigation, then for a short\n * delay following that navigation, subsequent wheel events will be ignored.\n *\n * Furthermore, follwowing a navigation, we ignore all wheel events until we\n * receive at least one event where the event's deltaX (distance traveled) is\n * *greater* than the previous event's deltaX. This helps us filter out the\n * fake wheel events generated by the browser to simulate deceleration.\n *\n */\nfunction wheel(element, event) {\n\n  // Since we have a new wheel event, reset our timer waiting for the last\n  // wheel event to pass.\n  if (element[lastWheelTimeoutSymbol]) {\n    clearTimeout(element[lastWheelTimeoutSymbol]);\n  }\n  element[lastWheelTimeoutSymbol] = setTimeout(() => {\n    wheelTimedOut(element);\n  }, WHEEL_TIME);\n\n  const deltaX = event.deltaX;\n  const deltaY = event.deltaY;\n\n  // See if element event represents acceleration or deceleration.\n  const acceleration = sign(deltaX) * (deltaX - element[lastDeltaXSymbol]);\n  element[lastDeltaXSymbol] = deltaX;\n\n  if (Math.abs(deltaX) < Math.abs(deltaY)) {\n    // Move was mostly vertical. The user may be trying scroll with the\n    // trackpad/wheel. To be on the safe, we ignore such events.\n    return false;\n  }\n\n  if (element[postNavigateDelayCompleteSymbol]) {\n    // It's too soon after a navigation; ignore the event.\n    return true;\n  }\n\n  if (acceleration > 0) {\n    // The events are not (or are no longer) decelerating, so we can start\n    // paying attention to them again.\n    element[absorbDecelerationSymbol] = false;\n  } else if (element[absorbDecelerationSymbol]) {\n    // The wheel event was likely faked to simulate deceleration; ignore it.\n    return true;\n  }\n\n  element[wheelDistanceSymbol] += deltaX;\n\n  // Update the travel fraction of the element being navigated.\n  const width = element.offsetWidth;\n  let travelFraction = width > 0 ?\n    element[wheelDistanceSymbol] / width :\n    0;\n  element[symbols.dragging] = true;\n  travelFraction = sign(travelFraction) * Math.min(Math.abs(travelFraction), 1);\n  element.travelFraction = travelFraction;\n\n  // If the user has dragged enough to reach the previous/next item, then\n  // complete a navigation to that item.\n  if (travelFraction === 1) {\n    element[symbols.dragging] = false;\n    element[symbols.goRight]();\n    postNavigate(element);\n  } else if (travelFraction === -1) {\n    element[symbols.dragging] = false;\n    element[symbols.goLeft]();\n    postNavigate(element);\n  }\n\n  return true;\n}\n\n// A sufficiently long period of time has passed since the last wheel event.\n// We snap the selection to the closest item, then reset our state.\nfunction wheelTimedOut(element) {\n\n  // Snap to the closest item.\n  element[symbols.dragging] = false;\n  const travelFraction = element.travelFraction;\n  if (travelFraction >= 0.5) {\n    element[symbols.goRight]();\n  } else if (travelFraction <= -0.5) {\n    element[symbols.goLeft]();\n  }\n\n  // TODO: Listen for the transition to complete, and then restore\n  // dragging to false (or the previous value).\n\n  resetWheelTracking(element);\n}\n","/**\n * Helper function to create a symbol that can be used for associating private\n * data with an element.\n *\n * Mixins and component classes often want to associate private data with an\n * element instance, but JavaScript does not have direct support for true\n * private properties. One approach is to use the\n * [Symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol)\n * data type to set and retrieve data on an element.\n *\n * Unfortunately, the Symbol type is not available in Internet Explorer 11. The\n * `createSymbol` helper function exists as a workaround for IE 11. Rather than\n * returning a true Symbol, it simply returns an underscore-prefixed string.\n *\n * Usage:\n *\n *     const fooSymbol = createSymbol('foo');\n *\n *     class MyElement extends HTMLElement {\n *       get foo() {\n *         return this[fooSymbol];\n *       }\n *       set foo(value) {\n *         this[fooSymbol] = value;\n *       }\n *     }\n *\n * In IE 11, this sample will \"hide\" data behind an instance property this._foo.\n * The use of the underscore is meant to reduce (not eliminate) the potential\n * for name conflicts, and discourage (not prevent) external access to this\n * data. In modern browsers, the above code will eliminate the potential of\n * naming conflicts, and better hide the data behind a real Symbol.\n *\n * @function createSymbol\n * @param {string} description - A string to identify the symbol when debugging\n */\nexport default function createSymbol(description) {\n  return typeof Symbol === 'function' ?\n    Symbol(description) :\n    `_${description}`;\n}\n","/*\n * Microtask helper for IE 11.\n *\n * Executing a function as a microtask is trivial in browsers that support\n * promises, whose then() clauses use microtask timing. IE 11 doesn't support\n * promises, but does support MutationObservers, which are also executed as\n * microtasks. So this helper uses an MutationObserver to achieve microtask\n * timing.\n *\n * See https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/\n *\n * Inspired by Polymer's async() function.\n */\n\n\n// The queue of pending callbacks to be executed as microtasks.\nconst callbacks = [];\n\n// Create an element that we will modify to force observable mutations.\nconst element = document.createTextNode('');\n\n// A monotonically-increasing value.\nlet counter = 0;\n\n\n/**\n * Add a callback to the microtask queue.\n *\n * This uses a MutationObserver so that it works on IE 11.\n *\n * NOTE: IE 11 may actually use timeout timing with MutationObservers. This\n * needs more investigation.\n *\n * @function microtask\n * @param {function} callback\n */\nexport default function microtask(callback) {\n  callbacks.push(callback);\n  // Force a mutation.\n  element.textContent = ++counter;\n}\n\n\n// Execute any pending callbacks.\nfunction executeCallbacks() {\n  while (callbacks.length > 0) {\n    const callback = callbacks.shift();\n    callback();\n  }\n}\n\n\n// Create the observer.\nconst observer = new MutationObserver(executeCallbacks);\nobserver.observe(element, {\n  characterData: true\n});\n","import createSymbol from './createSymbol';\nimport toggleClass from './toggleClass';\n\n\n// Symbols for private data members on an element.\nconst safeToSetAttributesSymbol = createSymbol('safeToSetAttributes');\nconst pendingAttributesSymbol = createSymbol('pendingAttributes');\nconst pendingClassesSymbol = createSymbol('pendingClasses');\n\n\n/**\n * Helper functions for updating attributes, including the `class` attribute.\n */\nexport default {\n\n  /**\n   * Perform any pending updates to attributes and classes.\n   *\n   * This writes any `setAttribute` or `toggleClass` values that were performed\n   * before an element was attached to the document for the first time.\n   *\n   * This method should be called by mixins/components in their\n   * `connectedCallback`. If mulitple mixins/components invoke this during the\n   * same `connectedCallback`, only the first call will have any effect. The\n   * subsequent calls will be harmless.\n   *\n   * @param {HTMLElement} element - The element being added to the document.\n   */\n  connected(element) {\n    element[safeToSetAttributesSymbol] = true;\n\n    // Set any pending attributes.\n    if (element[pendingAttributesSymbol]) {\n      for (let attribute in element[pendingAttributesSymbol]) {\n        const value = element[pendingAttributesSymbol][attribute];\n        setAttributeToElement(element, attribute, value);\n      }\n      element[pendingAttributesSymbol] = null;\n    }\n\n    // Set any pending classes.\n    if (element[pendingClassesSymbol]) {\n      for (let className in element[pendingClassesSymbol]) {\n        const value = element[pendingClassesSymbol][className];\n        toggleClass(element, className, value);\n      }\n      element[pendingClassesSymbol] = null;\n    }\n  },\n\n  /**\n   * Set/unset the attribute with the indicated name.\n   *\n   * This method exists primarily to handle the case where an element wants to\n   * set a default property value that should be reflected as an attribute. An\n   * important limitation of custom element consturctors is that they cannot\n   * set attributes. A call to `setAttribute` during the constructor will\n   * be deferred until the element is connected to the document.\n   *\n   * @param {string} attribute - The name of the *attribute* (not property) to set.\n   * @param {object} value - The value to set. If null, the attribute will be removed.\n   */\n  setAttribute(element, attribute, value) {\n    if (element[safeToSetAttributesSymbol]) {\n      // Safe to set attributes immediately.\n      setAttributeToElement(element, attribute, value);\n    } else {\n      // Defer setting attributes until the first time we're connected.\n      if (!element[pendingAttributesSymbol]) {\n        element[pendingAttributesSymbol] = {};\n      }\n      element[pendingAttributesSymbol][attribute] = value;\n    }\n  },\n\n  /**\n   * Set/unset the class with the indicated name.\n   *\n   * This method exists primarily to handle the case where an element wants to\n   * set a default property value that should be reflected as as class. An\n   * important limitation of custom element consturctors is that they cannot\n   * set attributes, including the `class` attribute. A call to\n   * `toggleClass` during the constructor will be deferred until the element\n   * is connected to the document.\n   *\n   * @param {string} className - The name of the class to set.\n   * @param {object} value - True to set the class, false to remove it.\n   */\n  toggleClass(element, className, value) {\n    if (element[safeToSetAttributesSymbol]) {\n      // Safe to set class immediately.\n      toggleClass(element, className, value);\n    } else {\n      // Defer setting class until the first time we're connected.\n      if (!element[pendingClassesSymbol]) {\n        element[pendingClassesSymbol] = {};\n      }\n      element[pendingClassesSymbol][className] = value;\n    }\n  }\n\n};\n\n\n// Reflect the attribute to the given element.\n// If the value is null, remove the attribute.\nfunction setAttributeToElement(element, attributeName, value) {\n  if (value === null || typeof value === 'undefined') {\n    element.removeAttribute(attributeName);\n  } else {\n    const text = String(value);\n    // Avoid recursive attributeChangedCallback calls.\n    if (element.getAttribute(attributeName) !== text) {\n      element.setAttribute(attributeName, value);\n    }\n  }\n}\n","import createSymbol from './createSymbol';\n\n/**\n * A collection of Symbol objects for standard component properties and methods.\n *\n * These Symbol objects are used to allow mixins and a component to internally\n * communicate, without exposing these properties and methods in the component's\n * public API.\n *\n * To use these Symbol objects in your own component, include this module and\n * then create a property or method whose key is the desired Symbol.\n *\n *     import 'SingleSelectionMixin' from 'basic-component-mixins/src/SingleSelectionMixin';\n *     import 'symbols' from 'basic-component-mixins/src/symbols';\n *\n *     class MyElement extends SingleSelectionMixin(HTMLElement) {\n *       [symbols.itemSelected](item, selected) {\n *         // This will be invoked whenever an item is selected/deselected.\n *       }\n *     }\n *\n * @module symbols\n */\nconst symbols = {\n\n  /**\n   * Symbol for the `defaults` property.\n   *\n   * This property can be used to set or override defaults that will be applied\n   * to a new component instance. When implementing this property, take care to\n   * first acquire any defaults defined by the superclass. The standard idiom is\n   * as follows:\n   *\n   *     get [symbols.defaults]() {\n   *       const defaults = super[symbols.defaults] || {};\n   *       // Set or override default values here\n   *       defaults.customProperty = false;\n   *       return defaults;\n   *     }\n   *\n   * @var {object} defaults\n   */\n  defaults: createSymbol('defaults'),\n\n  /**\n   * Symbol for the `dragging` property.\n   *\n   * Components like carousels often define animated CSS transitions for\n   * sliding effects. Such a transition should usually *not* be applied while\n   * the user is dragging, because a CSS animation will introduce a lag that\n   * makes the swipe feel sluggish. Instead, as long as the user is dragging\n   * with their finger down, the transition should be suppressed. When the\n   * user releases their finger, the transition can be restored, allowing the\n   * animation to show the carousel sliding into its final position.\n   *\n   * @type {boolean} true if a drag is in progress, false if not.\n   */\n  dragging: createSymbol('dragging'),\n\n  /**\n   * Symbol for the `goDown` method.\n   *\n   * This method is invoked when the user wants to go/navigate down.\n   *\n   * @function goDown\n   */\n  goDown: createSymbol('goDown'),\n\n  /**\n   * Symbol for the `goEnd` method.\n   *\n   * This method is invoked when the user wants to go/navigate to the end (e.g.,\n   * of a list).\n   *\n   * @function goEnd\n   */\n  goEnd: createSymbol('goEnd'),\n\n  /**\n   * Symbol for the `goLeft` method.\n   *\n   * This method is invoked when the user wants to go/navigate left.\n   *\n   * @function goLeft\n   */\n  goLeft: createSymbol('goLeft'),\n\n  /**\n   * Symbol for the `goRight` method.\n   *\n   * This method is invoked when the user wants to go/navigate right.\n   *\n   * @function goRight\n   */\n  goRight: createSymbol('goRight'),\n\n  /**\n   * Symbol for the `goStart` method.\n   *\n   * This method is invoked when the user wants to go/navigate to the start\n   * (e.g., of a list).\n   *\n   * @function goStart\n   */\n  goStart: createSymbol('goStart'),\n\n  /**\n   * Symbol for the `goUp` method.\n   *\n   * This method is invoked when the user wants to go/navigate up.\n   *\n   * @function goUp\n   */\n  goUp: createSymbol('goUp'),\n\n  /**\n   * Symbol for the `itemAdded` method.\n   *\n   * This method is invoked when a new item is added to a list.\n   *\n   * @function itemAdded\n   * @param {HTMLElement} item - the item being selected/deselected\n   */\n  itemAdded: createSymbol('itemAdded'),\n\n\n  /**\n   * Symbol for the `itemsChanged` method.\n   *\n   * This method is invoked when the underlying contents change. It is also\n   * invoked on component initialization – since the items have \"changed\" from\n   * being nothing.\n   */\n  itemsChanged: createSymbol('itemsChanged'),\n\n  /**\n   * Symbol for the `itemSelected` method.\n   *\n   * This method is invoked when an item becomes selected or deselected.\n   *\n   * @function itemSelected\n   * @param {HTMLElement} item - the item being selected/deselected\n   * @param {boolean} selected - true if the item is selected, false if not\n   */\n  itemSelected: createSymbol('itemSelected'),\n\n  /**\n   * Symbol for the `keydown` method.\n   *\n   * This method is invoked when an element receives a `keydown` event.\n   *\n   * @function keydown\n   * @param {KeyboardEvent} event - the event being processed\n   */\n  keydown: createSymbol('keydown'),\n\n  /**\n   * Symbol for the `template` property.\n   *\n   * This property returns a component's template.\n   *\n   * @type {string|HTMLElement}\n   */\n  template: createSymbol('template')\n};\n\nexport default symbols;\n","/**\n * Helper function for standard classList.toggle() behavior on old browsers,\n * namely IE 11.\n *\n * The standard\n * [classlist](https://developer.mozilla.org/en-US/docs/Web/API/Element/classList)\n * object has a `toggle()` function that supports a second Boolean parameter\n * that can be used to succinctly turn a class on or off. This feature is often\n * useful in designing custom elements, which may want to externally reflect\n * component state in a CSS class that can be used for styling purposes.\n *\n * Unfortunately, IE 11 does not support the Boolean parameter to\n * `classList.toggle()`. This helper function behaves like the standard\n * `toggle()`, including support for the Boolean parameter, so that it can be\n * used even on IE 11.\n *\n * @function toggleClass\n * @param {HTMLElement} element - The element to modify\n * @param {string} className - The class to add/remove\n * @param {boolean} [force] - Force the class to be added (if true) or removed\n *                            (if false)\n */\nexport default function toggleClass(element, className, force) {\n  const classList = element.classList;\n  const addClass = (typeof force === 'undefined') ?\n    !classList.contains(className) :\n    force;\n  if (addClass) {\n    classList.add(className);\n  } else {\n    classList.remove(className);\n  }\n  return addClass;\n}\n","import AttributeMarshallingMixin from '../../basic-component-mixins/src/AttributeMarshallingMixin';\nimport ComposableMixin from '../../basic-component-mixins/src/ComposableMixin';\nimport DistributedChildrenMixin from '../../basic-component-mixins/src/DistributedChildrenMixin';\nimport ShadowElementReferencesMixin from '../../basic-component-mixins/src/ShadowElementReferencesMixin';\nimport ShadowTemplateMixin from '../../basic-component-mixins/src/ShadowTemplateMixin';\n\n\n/**\n * A sample general-purpose base class for defining custom elements that mixes\n * in some common features: template stamping into a shadow root, shadow element\n * references, marshalling attributes to properties, and retrieving the children\n * distributed to a component.\n *\n * This base class is not special in any way, and is defined only as a\n * convenient shorthand for applying the mixins listed above. You can use this\n * class as a base class for your own elements, or easily create your own base\n * class by applying the same set of mixins.\n *\n * The ElementBase base class does not register itself as a custom element with\n * the browser, and hence cannot be independently instantiated.\n *\n * @mixes AttributeMarshallingMixin\n * @mixes ComposableMixin\n * @mixes DistributedChildrenMixin\n * @mixes ShadowElementReferencesMixin\n * @mixes ShadowTemplateMixin\n */\nclass ElementBase extends ComposableMixin(HTMLElement).compose(\n  ShadowTemplateMixin,          // before node finding, so shadow root is populated\n  ShadowElementReferencesMixin, // before marshalling, so properties can use refs\n  AttributeMarshallingMixin,\n  DistributedChildrenMixin\n) {}\n\nexport default ElementBase;\n","/*\n * This file is transpiled to create an ES5-compatible distribution in which\n * the package's main feature(s) are available via the window.Basic global.\n * If you're already using ES6 yourself, ignore this file, and instead import\n * the source file(s) you want from the src folder.\n */\n\nimport SlidingCarousel from './src/SlidingCarousel';\n\nwindow.Basic = window.Basic || {};\nwindow.Basic.SlidingCarousel = SlidingCarousel;\n","import HorizontalNavigationMixin from '../../basic-component-mixins/src/HorizontalNavigationMixin';\nimport SlidingViewport from '../../basic-sliding-viewport/src/SlidingViewport';\n\n\n/**\n * Lets the user navigate laterally through a sequence of child elements\n * using a simple CSS transition effect to show horizontal movement.\n *\n * [Live demo](http://basicwebcomponents.org/basic-web-components/packages/basic-sliding-carousel/)\n *\n * basic-sliding-carousel is an implementation of the carousel user interface\n * pattern, commonly used for navigating between images, pages, and other\n * elements. This pattern presents the user with a linear sequence of elements,\n * only one of which is shown at a time. The user can navigate to the\n * next/previous element with a variety of input methods.\n *\n * basic-sliding-carousel is a simpler variation of the more sophisticated\n * [basic-carousel](../basic-carousel) component. The latter includes support\n * for wrapping (going forward from the last item to the first, and vice versa),\n * and more complex visual transitions. Those transitions entail use of the Web\n * Animation API, which requires a polyfill in older browsers. Hence, the\n * simpler basic-sliding-carousel may be a more appropriate choice if factors\n * such as download size are critical.\n *\n * Beyond those differences, basic-sliding-carousel offers the same API, usage\n * recommendations, and support for keyboard/touch/mouse and assistive devices.\n * See that component for more details on use.\n *\n * @extends SlidingViewport\n * @mixes HorizontalNavigationMixin\n */\nclass SlidingCarousel extends SlidingViewport.compose(\n  HorizontalNavigationMixin\n) {}\n\n\ncustomElements.define('basic-sliding-carousel', SlidingCarousel);\nexport default SlidingCarousel;\n","import ContentItemsMixin from '../../basic-component-mixins/src/ContentItemsMixin';\nimport DistributedChildrenContentMixin from '../../basic-component-mixins/src/DistributedChildrenContentMixin';\nimport ElementBase from '../../basic-element-base/src/ElementBase';\nimport FractionalSelectionMixin from '../../basic-component-mixins/src/FractionalSelectionMixin';\nimport SelectionAriaActiveMixin from '../../basic-component-mixins/src/SelectionAriaActiveMixin';\nimport SingleSelectionMixin from '../../basic-component-mixins/src/SingleSelectionMixin';\nimport SpreadItems from '../../basic-spread-items/src/SpreadItems'; // jshint ignore:line\nimport symbols from '../../basic-component-mixins/src/symbols';\n\n\nconst base = ElementBase.compose(\n  ContentItemsMixin,\n  DistributedChildrenContentMixin,\n  FractionalSelectionMixin,\n  SelectionAriaActiveMixin,\n  SingleSelectionMixin\n);\n\n\n/**\n * Presents list items in a viewport such that only a single item is visible at\n * a time.\n *\n * Navigating between items will be represented with a horizontal visual\n * sliding effect. For more complex visual effects, see\n * [basic-animation-stage](../basic-animation-stage), which takes advantage of\n * the Web Animations API.\n *\n * This component handles the rendering responsibilities for the basic-carousel\n * component.\n *\n * This component currently requires that you explicitly apply a size to it.\n *\n * @extends ElementBase\n * @mixes ContentItemsMixin\n * @mixes DistributedChildrenContentMixin\n * @mixes FractionalSelectionMixin\n * @mixes SelectionAriaActiveMixin\n * @mixes SingleSelectionMixin\n */\nclass SlidingViewport extends base {\n\n  constructor() {\n    super();\n    this[symbols.dragging] = false;\n  }\n\n  get [symbols.defaults]() {\n    const defaults = super[symbols.defaults] || {};\n    defaults.selectionRequired = true;\n    return defaults;\n  }\n\n  /*\n   * During drags, don't show CSS transitions.\n   */\n  get [symbols.dragging]() {\n    return !this.showTransition;\n  }\n  set [symbols.dragging](value) {\n    if (symbols.dragging in base.prototype) { super[symbols.dragging] = value; }\n    this.reflectClass('showTransition', !value);\n  }\n\n  get selectedFraction() {\n    return super.selectedFraction;\n  }\n  set selectedFraction(value) {\n    if ('selectedFraction' in base.prototype) { super.selectedFraction = value; }\n    render(this);\n  }\n\n  get selectedItem() {\n    return super.selectedItem;\n  }\n  set selectedItem(item) {\n    if ('selectedItem' in base.prototype) { super.selectedItem = item; }\n    render(this);\n  }\n\n  get [symbols.template]() {\n    return `\n      <style>\n      :host {\n        display: block;\n        overflow: hidden;\n        position: relative;\n      }\n\n      #slidingContainer {\n        height: 100%;\n        position: absolute;\n        /*\n         Set width for IE/Edge. It's not clear why they need this, and the other\n         browsers don't.\n         */\n        width: 100%;\n        will-change: transform;\n      }\n\n      :host(.showTransition) #slidingContainer {\n        -webkit-transition: -webkit-transform 0.2s ease-out;\n        transition: transform 0.2s ease-out;\n      }\n      </style>\n\n      <basic-spread-items id=\"slidingContainer\" role=\"none\">\n        <slot></slot>\n      </basic-spread-items>\n    `;\n  }\n\n}\n\n\n\nfunction render(element) {\n  requestAnimationFrame(renderSelection.bind(element));\n}\n\n// Note: In this routine, \"this\" is bound to an element instance.\nfunction renderSelection() {\n  if (!this.selectedItem) {\n    return;\n  }\n  const selection = FractionalSelectionMixin.helpers.elementSelection(this);\n  const itemCount = this.items ? this.items.length : 0;\n  const damped = FractionalSelectionMixin.helpers.dampedSelection(selection, itemCount);\n  // Use a percentage so the transform will still work if screen size changes\n  // (e.g., if device orientation changes).\n  const left = -damped * 100;\n  const transform = 'translateX(' + left + '%)';\n  this.$.slidingContainer.style.webkitTransform = transform;\n  this.$.slidingContainer.style.transform = transform;\n}\n\n\ncustomElements.define('basic-sliding-viewport', SlidingViewport);\nexport default SlidingViewport;\n","import ElementBase from '../../basic-element-base/src/ElementBase';\nimport DistributedChildrenContentMixin from '../../basic-component-mixins/src/DistributedChildrenContentMixin';\nimport symbols from '../../basic-component-mixins/src/symbols';\n\n\n/**\n * Spreads out a set of items horizontally so they take equal space.\n *\n * [Live demo](http://basicwebcomponents.org/basic-web-components/packages/basic-spread-items/)\n *\n * This component is used, for example, by the basic-sliding-viewport component\n * to ensure that children of different size will take up the same amount of\n * horizontal space.\n *\n * This component currently requires an explicit size by applied to it.\n *\n * @extends ElementBase\n * @mixes DistributedChildrenContentMixin\n */\nclass SpreadItems extends ElementBase.compose(\n  DistributedChildrenContentMixin\n) {\n\n  connectedCallback() {\n    if (super.connectedCallback) { super.connectedCallback(); }\n    // HACK\n    this[symbols.itemsChanged]();\n  }\n\n  get items() {\n    return this.content;\n  }\n\n  // TODO: Should also handle contentChanged(), but need to rationalize with\n  // invocation of [symbols.itemsChanged] in connectedCallback.\n  [symbols.itemsChanged]() {\n    if (super[symbols.itemsChanged]) { super[symbols.itemsChanged](); }\n    const items = this.items;\n    const count = items.length;\n    this.$.spreadContainer.style.width = (count * 100) + '%';\n    const itemWidth = (100 / count) + \"%\";\n    [].forEach.call(items, item => {\n      item.style.width = itemWidth;\n    });\n  }\n\n  get [symbols.template]() {\n    return `\n      <style>\n      :host {\n        display: block;\n      }\n\n      #spreadContainer {\n        display: -webkit-flex;\n        display: flex;\n        height: 100%;\n        position: relative;\n      }\n\n      #spreadContainer ::slotted(*) {\n        object-fit: contain;\n        object-fit: var(--basic-item-object-fit, contain);\n        height: 100%;\n        -webkit-user-drag: none;\n        -webkit-user-select: none;\n        -moz-user-select: none;\n        -ms-user-select: none;\n        user-select: none;\n      }\n      </style>\n\n      <div id=\"spreadContainer\" role=\"none\">\n        <slot></slot>\n      </div>\n    `;\n  }\n\n}\n\n\ncustomElements.define('basic-spread-items', SpreadItems);\nexport default SpreadItems;\n"],"preExisting":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}