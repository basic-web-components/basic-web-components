{"version":3,"sources":["node_modules/browser-pack/_prelude.js","packages/basic-component-mixins/src/AttributeMarshallingMixin.js","packages/basic-component-mixins/src/ComposableMixin.js","packages/basic-component-mixins/src/ContentItemsMixin.js","packages/basic-component-mixins/src/DirectionSelectionMixin.js","packages/basic-component-mixins/src/DistributedChildrenContentMixin.js","packages/basic-component-mixins/src/DistributedChildrenMixin.js","packages/basic-component-mixins/src/FractionalSelectionMixin.js","packages/basic-component-mixins/src/HorizontalNavigationMixin.js","packages/basic-component-mixins/src/KeyboardDirectionMixin.js","packages/basic-component-mixins/src/KeyboardMixin.js","packages/basic-component-mixins/src/SelectionAriaActiveMixin.js","packages/basic-component-mixins/src/ShadowElementReferencesMixin.js","packages/basic-component-mixins/src/ShadowTemplateMixin.js","packages/basic-component-mixins/src/SingleSelectionMixin.js","packages/basic-component-mixins/src/SwipeDirectionMixin.js","packages/basic-component-mixins/src/TrackpadDirectionMixin.js","packages/basic-component-mixins/src/createSymbol.js","packages/basic-component-mixins/src/microtask.js","packages/basic-component-mixins/src/safeAttributes.js","packages/basic-component-mixins/src/symbols.js","packages/basic-component-mixins/src/toggleClass.js","packages/basic-element-base/src/ElementBase.js","packages/basic-sliding-carousel/globals.js","packages/basic-sliding-carousel/src/SlidingCarousel.js","packages/basic-sliding-viewport/src/SlidingViewport.js","packages/basic-spread-items/src/SpreadItems.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","attributeToPropertyName","attributeName","propertyName","attributeToPropertyNames","hypenRegEx","replace","match","toUpperCase","attributesForClass","classFn","HTMLElement","Object","baseClass","getPrototypeOf","prototype","constructor","baseAttributes","propertyNames","getOwnPropertyNames","setterNames","filter","getOwnPropertyDescriptor","set","attributes","map","setterName","propertyNameToAttribute","diff","attribute","indexOf","concat","propertyNamesToAttributes","uppercaseRegEx","toLowerCase","_safeAttributes","base","AttributeMarshalling","_base","_classCallCheck","this","_possibleConstructorReturn","__proto__","apply","arguments","_inherits","_createClass","key","value","oldValue","newValue","_get","_safeAttributes2","default","connected","setAttribute","className","toggleClass","get","composeClass","mixin","Subclass","_base2","copyOwnProperties","NON_MIXABLE_OBJECT_PROPERTIES","source","target","ignorePropertyNames","undefined","forEach","name","descriptor","defineProperty","Composable","_len","mixins","Array","_key","reduce","filterAuxiliaryElements","items","auxiliaryTags","item","localName","_createSymbol","_toggleClass","_symbols","itemsSymbol","_createSymbol2","itemInitializedSymbol","ContentItems","_symbols2","itemsChanged","itemAdded","itemSelected","selected","_toggleClass2","_this2","handlingUserInteraction","dispatchEvent","CustomEvent","content","DirectionSelection","goDown","selectNext","goEnd","selectLast","goLeft","selectPrevious","goRight","goStart","selectFirst","goUp","_set","selectedFraction","_microtask","DistributedChildrenContent","_this","shadowRoot","slots","querySelectorAll","slot","addEventListener","event","contentChanged","_microtask2","distributedChildren","console","warn","expandContentElements","nodes","includeTextNodes","_ref","expanded","node","isSlot","HTMLSlotElement","assignedNodes","flatten","Text","flattened","_toConsumableArray","DistributedChildren","children","childNodes","strings","distributedChildNodes","child","textContent","join","FractionalSelection","selectedFractionSymbol","helpers","dampedSelection","selection","itemCount","bound","damped","damping","x","y","elementSelection","element","selectedIndex","selectionParts","index","Math","ceil","floor","fraction","wrappedSelection","wrappedSelectionParts","wrap","_DirectionSelectionMixin","_KeyboardDirectionMixin","_KeyboardMixin","_SwipeDirectionMixin","_TrackpadDirectionMixin","_DirectionSelectionMixin2","_KeyboardMixin2","_KeyboardDirectionMixin2","_SwipeDirectionMixin2","_TrackpadDirectionMixin2","baseWithMixins","c","HorizontalNavigation","_baseWithMixins","defaults","navigationAxis","selectionAnimationEffect","navigationAxisSymbol","KeyboardDirection","keydown","handled","axis","horizontal","vertical","keyCode","metaKey","altKey","Keyboard","preventDefault","stopPropagation","getAttribute","tabindex","idCount","SelectionAriaActive","role","id","baseId","itemId","removeAttribute","ShadowElementReferences","$","nodesWithIds","createTemplateWithInnerHTML","innerHTML","template","document","createElement","div","appendChild","shimTemplateStyles","tag","window","WebComponents","ShadowCSS","shimStyling","ShadowTemplate","ShadowDOMPolyfill","root","attachShadow","mode","clone","importNode","selectIndex","count","boundedIndex","selectionWraps","max","min","previousIndex","trackSelectedItem","previousSelectedItem","selectedItem","indexInCurrentItems","previousSelectedIndex","newSelectedIndex","selectionRequired","updatePossibleNavigations","canSelectNext","canSelectPrevious","canSelectNextSymbol","canSelectPreviousSymbol","selectionRequiredSymbol","selectionWrapsSymbol","externalSelectedIndexSymbol","externalSelectedItemSymbol","internalSelectedIndexSymbol","internalSelectedItemSymbol","SingleSelection","newIndex","previousCanSelectNext","previousCanSelectPrevious","hasItems","detail","String","isEventForPenOrPrimaryTouch","pointerType","isPrimary","touchEnd","clientX","clientY","dragging","deltaXSymbol","trackTo","travelFraction","deltaYSymbol","touchMove","previousXSymbol","previousYSymbol","abs","touchStart","startXSymbol","width","offsetWidth","dragDistance","multiTouchSymbol","travelFractionSymbol","SwipeDirection","PointerEvent","touches","changedTouches","getComputedStyle","touchAction","style","postNavigate","wheelDistanceSymbol","postNavigateDelayCompleteSymbol","absorbDecelerationSymbol","setTimeout","POST_NAVIGATE_TIME","resetWheelTracking","lastDeltaXSymbol","lastWheelTimeoutSymbol","clearTimeout","sign","wheel","wheelTimedOut","WHEEL_TIME","deltaX","deltaY","acceleration","TrackpadDirection","createSymbol","description","Symbol","microtask","callback","callbacks","push","counter","executeCallbacks","shift","createTextNode","observer","MutationObserver","observe","characterData","setAttributeToElement","text","safeToSetAttributesSymbol","pendingAttributesSymbol","pendingClassesSymbol","_value","_toggleClass3","symbols","force","classList","addClass","contains","add","remove","_AttributeMarshallingMixin","_ComposableMixin","_DistributedChildrenMixin","_ShadowElementReferencesMixin","_ShadowTemplateMixin","ElementBase","_ComposableMixin2","compose","_ShadowTemplateMixin2","_ShadowElementReferencesMixin2","_AttributeMarshallingMixin2","_DistributedChildrenMixin2","_SlidingCarousel","Basic","SlidingCarousel","_SlidingCarousel2","_HorizontalNavigationMixin","_SlidingViewport","_SlidingViewport2","_HorizontalNavigationMixin2","customElements","define","render","requestAnimationFrame","renderSelection","bind","_FractionalSelectionMixin2","left","transform","slidingContainer","webkitTransform","_ContentItemsMixin","_DistributedChildrenContentMixin","_ElementBase","_FractionalSelectionMixin","_SelectionAriaActiveMixin","_SingleSelectionMixin","_SpreadItems","_ElementBase2","_ContentItemsMixin2","_DistributedChildrenContentMixin2","_SelectionAriaActiveMixin2","_SingleSelectionMixin2","SlidingViewport","showTransition","reflectClass","SpreadItems","spreadContainer","itemWidth"],"mappings":"CAAA,QAAAA,GAAAC,EAAAC,EAAAC,GAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAAJ,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,GAAAE,GAAA,kBAAAC,UAAAA,OAAA,KAAAF,GAAAC,EAAA,MAAAA,GAAAF,GAAA,EAAA,IAAAI,EAAA,MAAAA,GAAAJ,GAAA,EAAA,IAAAK,GAAA,GAAAC,OAAA,uBAAAN,EAAA,IAAA,MAAAK,GAAAE,KAAA,mBAAAF,EAAA,GAAAG,GAAAX,EAAAG,IAAAS,WAAAb,GAAAI,GAAA,GAAAU,KAAAF,EAAAC,QAAA,SAAAd,GAAA,GAAAE,GAAAD,EAAAI,GAAA,GAAAL,EAAA,OAAAI,GAAAF,EAAAA,EAAAF,IAAAa,EAAAA,EAAAC,QAAAd,EAAAC,EAAAC,EAAAC,GAAA,MAAAD,GAAAG,GAAAS,QAAA,IAAA,GAAAL,GAAA,kBAAAD,UAAAA,QAAAH,EAAA,EAAAA,EAAAF,EAAAa,OAAAX,IAAAD,EAAAD,EAAAE,GAAA,OAAAD,KAAAa,GAAA,SAAAT,EAAAU,EAAAJ,+nBC8GA,QAASK,GAAwBC,GAC/B,GAAIC,GAAeC,EAAyBF,EAC5C,KAAKC,EAAc,CAEjB,GAAME,GAAa,WACnBF,GAAeD,EAAcI,QAAQD,EACjC,SAAAE,GAAA,MAASA,GAAM,GAAGC,gBACtBJ,EAAyBF,GAAiBC,EAE5C,MAAOA,GAGT,QAASM,GAAmBC,GAI1B,GAAIA,IAAYC,aAAeD,IAAYE,OACzC,QAIF,IAAMC,GAAYD,OAAOE,eAAeJ,EAAQK,WAAWC,YACrDC,EAAiBR,EAAmBI,GAGpCK,EAAgBN,OAAOO,oBAAoBT,EAAQK,WACnDK,EAAcF,EAAcG,OAAO,SAAAlB,GAAA,MAEM,kBADtCS,QAAOU,yBACVZ,EAAQK,UAAWZ,GAAcoB,MACjCC,EAAaJ,EAAYK,IAAI,SAAAC,GAAA,MAC/BC,GAAwBD,KAGtBE,EAAOJ,EAAWH,OAAO,SAAAQ,GAAA,MAC3BZ,GAAea,QAAQD,GAAa,GACxC,OAAOZ,GAAec,OAAOH,GAI/B,QAASD,GAAwBxB,GAC/B,GAAI0B,GAAYG,EAA0B7B,EAC1C,KAAK0B,EAAW,CAEd,GAAMI,GAAiB,UACvBJ,GAAY1B,EAAaG,QAAQ2B,EAAgB,OAAOC,cAE1D,MAAOL,qiBA5JTM,EAAA7C,EAAA,2BAIMc,KACA4B,eAIS,SAACI,GAAS,GAqCjBC,GArCiB,SAAAC,GAAA,QAAAD,KAAA,MAAAE,GAAAC,KAAAH,GAAAI,EAAAD,MAAAH,EAAAK,WAAA9B,OAAAE,eAAAuB,IAAAM,MAAAH,KAAAI,YAAA,MAAAC,GAAAR,EAAAC,GAAAQ,EAAAT,IAAAU,IAAA,2BAAAC,MAAA,SA0CI9C,EAAe+C,EAAUC,GAChDC,EAAAd,EAAAtB,UAAA2B,WAAA9B,OAAAE,eAAAuB,EAAAtB,WAAA,2BAAAyB,OAAsCW,EAAAd,EAAAtB,UAAA2B,WAAA9B,OAAAE,eAAAuB,EAAAtB,WAAA,2BAAAyB,MAAA3C,KAAA2C,KACtC,IAAMrC,GAAeF,EAAwBC,EAGzCC,KAAgBqC,SAAUrC,IAAgBQ,aAAYI,aACxDyB,KAAKrC,GAAgB+C,MAhDJH,IAAA,oBAAAC,MAAA,WAqDnBG,EAAAd,EAAAtB,UAAA2B,WAAA9B,OAAAE,eAAAuB,EAAAtB,WAAA,oBAAAyB,OAA+BW,EAAAd,EAAAtB,UAAA2B,WAAA9B,OAAAE,eAAAuB,EAAAtB,WAAA,oBAAAyB,MAAA3C,KAAA2C,MAC/BY,EAAAC,QAAeC,UAAUd,SAtDNO,IAAA,mBAAAC,MAAA,SAyEJnB,EAAWmB,GAC1B,MAAOI,GAAAC,QAAeE,aAAaf,KAAMX,EAAWmB,MA1EjCD,IAAA,eAAAC,MAAA,SA0FRQ,EAAWR,GACtB,MAAOI,GAAAC,QAAeI,YAAYjB,KAAMgB,EAAWR,QA3FhCD,IAAA,qBAAAW,IAAA,WA0DnB,MAAOjD,GAAmB+B,UA1DPH,GAqCYD,EA2DnC,OAAOC,0nBCzCT,QAASsB,GAAavB,EAAMwB,GAC1B,GAAqB,kBAAVA,GAET,MAAOA,GAAMxB,EACR,IAECyB,GAFD,SAAAC,GAAA,QAAAD,KAAA,MAAAtB,GAAAC,KAAAqB,GAAApB,EAAAD,MAAAqB,EAAAnB,WAAA9B,OAAAE,eAAA+C,IAAAlB,MAAAH,KAAAI,YAAA,MAAAC,GAAAgB,EAAAC,GAAAD,GAEkBzB,EAEvB,OADA2B,GAAkBH,EAAOC,EAAS9C,UAAWiD,GACtCH,EASX,QAASE,GAAkBE,EAAQC,GAAkC,GAA1BC,GAA0BvB,UAAA9C,OAAA,GAAAsE,SAAAxB,UAAA,GAAAA,UAAA,KAOnE,OANAhC,QAAOO,oBAAoB8C,GAAQI,QAAQ,SAAAC,GACzC,GAAIH,EAAoBrC,QAAQwC,GAAQ,EAAG,CACzC,GAAMC,GAAa3D,OAAOU,yBAAyB2C,EAAQK,EAC3D1D,QAAO4D,eAAeN,EAAQI,EAAMC,MAGjCL,sTAvFM,SAAC9B,GAAS,GASjBqC,GATiB,SAAAnC,GAAA,QAAAmC,KAAA,MAAAlC,GAAAC,KAAAiC,GAAAhC,EAAAD,MAAAiC,EAAA/B,WAAA9B,OAAAE,eAAA2D,IAAA9B,MAAAH,KAAAI,YAAA,MAAAC,GAAA4B,EAAAnC,GAAAQ,EAAA2B,EAAA,OAAA1B,IAAA,UAAAC,MAAA,WAuCK,IAAA,GAAA0B,GAAA9B,UAAA9C,OAAR6E,EAAQC,MAAAF,GAAAG,EAAA,EAAAA,EAAAH,EAAAG,IAARF,EAAQE,GAAAjC,UAAAiC,EAKxB,OAAOF,GAAOG,OAAOnB,EAAcnB,UA5ChBiC,GASErC,EAwCzB,OAAOqC,GAKT,IAAMT,IACJ,mqBCqFF,QAASe,GAAwBC,GAC/B,GAAMC,IACJ,OACA,SACA,QACA,WAEF,UAAU5D,OAAOxB,KAAKmF,EAAO,SAASE,GACpC,OAAQA,EAAKC,WAAaF,EAAcnD,QAAQoD,EAAKC,WAAa,siBArJtEC,EAAA9F,EAAA,yBACA+F,EAAA/F,EAAA,wBACAgG,EAAAhG,EAAA,oBAIMiG,GAAc,EAAAC,EAAAnC,SAAa,SAC3BoC,GAAwB,EAAAD,EAAAnC,SAAa,6BAI5B,SAACjB,GAAS,GAgCjBsD,GAhCiB,SAAApD,GAAA,QAAAoD,KAAA,MAAAnD,GAAAC,KAAAkD,GAAAjD,EAAAD,MAAAkD,EAAAhD,WAAA9B,OAAAE,eAAA4E,IAAA/C,MAAAH,KAAAI,YAAA,MAAAC,GAAA6C,EAAApD,GAAAQ,EAAA4C,IAAA3C,IAAA,iBAAAC,MAAA,WAmCnBG,EAAAuC,EAAA3E,UAAA2B,WAAA9B,OAAAE,eAAA4E,EAAA3E,WAAA,iBAAAyB,OAA4BW,EAAAuC,EAAA3E,UAAA2B,WAAA9B,OAAAE,eAAA4E,EAAA3E,WAAA,iBAAAyB,MAAA3C,KAAA2C,MAM5BA,KAAK+C,GAAe,KAEpB/C,KAAKmD,EAAAtC,QAAQuC,mBA3CM7C,IAsDpB4C,EAAAtC,QAAQwC,UAtDY7C,MAAA,SAsDDkC,GAClB/B,EAAAuC,EAAA3E,UAAA2B,WAAA9B,OAAAE,eAAA4E,EAAA3E,WAAU4E,EAAAtC,QAAQwC,UAAlBrD,OAAgCW,EAAAuC,EAAA3E,UAAA2B,WAAA9B,OAAAE,eAAA4E,EAAA3E,WAAM4E,EAAAtC,QAAQwC,UAAdrD,MAAA3C,KAAA2C,KAAyB0C,MAvDtCnC,IAoEpB4C,EAAAtC,QAAQyC,aApEY9C,MAAA,SAoEEkC,EAAMa,GAC3B5C,EAAAuC,EAAA3E,UAAA2B,WAAA9B,OAAAE,eAAA4E,EAAA3E,WAAU4E,EAAAtC,QAAQyC,aAAlBtD,OAAmCW,EAAAuC,EAAA3E,UAAA2B,WAAA9B,OAAAE,eAAA4E,EAAA3E,WAAM4E,EAAAtC,QAAQyC,aAAdtD,MAAA3C,KAAA2C,KAA4B0C,EAAMa,IACrE,EAAAC,EAAA3C,SAAY6B,EAAM,WAAYa,MAtEXhD,IAoGpB4C,EAAAtC,QAAQuC,aApGY5C,MAAA,WAoGI,GAAAiD,GAAAzD,IACvBW,GAAAuC,EAAA3E,UAAA2B,WAAA9B,OAAAE,eAAA4E,EAAA3E,WAAU4E,EAAAtC,QAAQuC,aAAlBpD,OAAmCW,EAAAuC,EAAA3E,UAAA2B,WAAA9B,OAAAE,eAAA4E,EAAA3E,WAAM4E,EAAAtC,QAAQuC,aAAdpD,MAAA3C,KAAA2C,MAGnCoC,MAAM7D,UAAUsD,QAAQxE,KAAK2C,KAAKwC,MAAO,SAAAE,GAClCA,EAAKO,KACRQ,EAAKN,EAAAtC,QAAQwC,WAAWX,GACxBA,EAAKO,IAAyB,KAI9BjD,KAAKmD,EAAAtC,QAAQ6C,0BACf1D,KAAK2D,cAAc,GAAIC,aAAY,qBAhHlBrD,IAAA,QAAAW,IAAA,WAgFnB,GAAIsB,GAAA,MAYJ,OAXyB,OAArBxC,KAAK+C,IACPP,EAAQD,EAAwBvC,KAAK6D,SAEX,OAAtB7D,KAAK+C,KAEP/C,KAAK+C,GAAeP,IAItBA,EAAQxC,KAAK+C,GAERP,MA5FYU,GAgCItD,EA4F3B,OAAOsD,g9CCvITJ,EAAAhG,EAAA,8BAIe,SAAC8C,GAAS,GAWjBkE,GAXiB,SAAAhE,GAAA,QAAAgE,KAAA,MAAA/D,GAAAC,KAAA8D,GAAA7D,EAAAD,MAAA8D,EAAA5D,WAAA9B,OAAAE,eAAAwF,IAAA3D,MAAAH,KAAAI,YAAA,MAAAC,GAAAyD,EAAAhE,GAAAQ,EAAAwD,IAAAvD,IAapB4C,EAAAtC,QAAQkD,OAbYvD,MAAA,WAenB,MADAG,GAAAmD,EAAAvF,UAAA2B,WAAA9B,OAAAE,eAAAwF,EAAAvF,WAAU4E,EAAAtC,QAAQkD,OAAlB/D,OAA6BW,EAAAmD,EAAAvF,UAAA2B,WAAA9B,OAAAE,eAAAwF,EAAAvF,WAAM4E,EAAAtC,QAAQkD,OAAd/D,MAAA3C,KAAA2C,MACtBA,KAAKgE,gBAfOzD,IAkBpB4C,EAAAtC,QAAQoD,MAlBYzD,MAAA,WAoBnB,MADAG,GAAAmD,EAAAvF,UAAA2B,WAAA9B,OAAAE,eAAAwF,EAAAvF,WAAU4E,EAAAtC,QAAQoD,MAAlBjE,OAA4BW,EAAAmD,EAAAvF,UAAA2B,WAAA9B,OAAAE,eAAAwF,EAAAvF,WAAM4E,EAAAtC,QAAQoD,MAAdjE,MAAA3C,KAAA2C,MACrBA,KAAKkE,gBApBO3D,IAuBpB4C,EAAAtC,QAAQsD,OAvBY3D,MAAA,WAyBnB,MADAG,GAAAmD,EAAAvF,UAAA2B,WAAA9B,OAAAE,eAAAwF,EAAAvF,WAAU4E,EAAAtC,QAAQsD,OAAlBnE,OAA6BW,EAAAmD,EAAAvF,UAAA2B,WAAA9B,OAAAE,eAAAwF,EAAAvF,WAAM4E,EAAAtC,QAAQsD,OAAdnE,MAAA3C,KAAA2C,MACtBA,KAAKoE,oBAzBO7D,IA4BpB4C,EAAAtC,QAAQwD,QA5BY7D,MAAA,WA8BnB,MADAG,GAAAmD,EAAAvF,UAAA2B,WAAA9B,OAAAE,eAAAwF,EAAAvF,WAAU4E,EAAAtC,QAAQwD,QAAlBrE,OAA8BW,EAAAmD,EAAAvF,UAAA2B,WAAA9B,OAAAE,eAAAwF,EAAAvF,WAAM4E,EAAAtC,QAAQwD,QAAdrE,MAAA3C,KAAA2C,MACvBA,KAAKgE,gBA9BOzD,IAiCpB4C,EAAAtC,QAAQyD,QAjCY9D,MAAA,WAmCnB,MADAG,GAAAmD,EAAAvF,UAAA2B,WAAA9B,OAAAE,eAAAwF,EAAAvF,WAAU4E,EAAAtC,QAAQyD,QAAlBtE,OAA8BW,EAAAmD,EAAAvF,UAAA2B,WAAA9B,OAAAE,eAAAwF,EAAAvF,WAAM4E,EAAAtC,QAAQyD,QAAdtE,MAAA3C,KAAA2C,MACvBA,KAAKuE,iBAnCOhE,IAsCpB4C,EAAAtC,QAAQ2D,KAtCYhE,MAAA,WAwCnB,MADAG,GAAAmD,EAAAvF,UAAA2B,WAAA9B,OAAAE,eAAAwF,EAAAvF,WAAU4E,EAAAtC,QAAQ2D,KAAlBxE,OAA2BW,EAAAmD,EAAAvF,UAAA2B,WAAA9B,OAAAE,eAAAwF,EAAAvF,WAAM4E,EAAAtC,QAAQ2D,KAAdxE,MAAA3C,KAAA2C,MACpBA,KAAKoE,oBAxCO7D,IAAA,cAAAC,MAAA,WAqDnB,GAAAG,EAAAmD,EAAAvF,UAAA2B,WAAA9B,OAAAE,eAAAwF,EAAAvF,WAAA,cAAAyB,MAAyB,MAAAW,GAAAmD,EAAAvF,UAAA2B,WAAA9B,OAAAE,eAAAwF,EAAAvF,WAAA,cAAAyB,MAAA3C,KAAA2C,SArDNO,IAAA,aAAAC,MAAA,WA0DnB,GAAAG,EAAAmD,EAAAvF,UAAA2B,WAAA9B,OAAAE,eAAAwF,EAAAvF,WAAA,aAAAyB,MAAwB,MAAAW,GAAAmD,EAAAvF,UAAA2B,WAAA9B,OAAAE,eAAAwF,EAAAvF,WAAA,aAAAyB,MAAA3C,KAAA2C,SA1DLO,IAAA,aAAAC,MAAA,WA+DnB,GAAAG,EAAAmD,EAAAvF,UAAA2B,WAAA9B,OAAAE,eAAAwF,EAAAvF,WAAA,aAAAyB,MAAwB,MAAAW,GAAAmD,EAAAvF,UAAA2B,WAAA9B,OAAAE,eAAAwF,EAAAvF,WAAA,aAAAyB,MAAA3C,KAAA2C,SA/DLO,IAAA,iBAAAC,MAAA,WAoEnB,GAAAG,EAAAmD,EAAAvF,UAAA2B,WAAA9B,OAAAE,eAAAwF,EAAAvF,WAAA,iBAAAyB,MAA4B,MAAAW,GAAAmD,EAAAvF,UAAA2B,WAAA9B,OAAAE,eAAAwF,EAAAvF,WAAA,iBAAAyB,MAAA3C,KAAA2C,SApETO,IAAA,mBAAAW,IAAA,WA6CnB,MAAAP,GAAAmD,EAAAvF,UAAA2B,WAAA9B,OAAAE,eAAAwF,EAAAvF,WAAA,mBAAAyB,OA7CmBjB,IAAA,SA+CAyB,GACf,oBAAsBZ,GAAKrB,WAAakG,EAAAX,EAAAvF,UAAA2B,WAAA9B,OAAAE,eAAAwF,EAAAvF,WAAA,mBAAyBiC,EAAzBR,SAhDzBO,IAAA,iBAAAW,IAAA,WAyEnB,MAAAP,GAAAmD,EAAAvF,UAAA2B,WAAA9B,OAAAE,eAAAwF,EAAAvF,WAAA,iBAAAyB,OAzEmBjB,IAAA,SA2EFyB,GACb,kBAAoBZ,GAAKrB,WAAakG,EAAAX,EAAAvF,UAAA2B,WAAA9B,OAAAE,eAAAwF,EAAAvF,WAAA,iBAAuBiC,EAAvBR,MAC1CA,KAAK0E,iBAAmBlE,MA7ELsD,GAWUlE,EAuEjC,OAAOkE,y6CCtFTa,EAAA7H,EAAA,sBACAgG,EAAAhG,EAAA,6DAIe,SAAC8C,GAAS,GA2CjBgF,GA3CiB,SAAA9E,GA6CrB,QAAA8E,KAAc7E,EAAAC,KAAA4E,EAAA,IAAAC,GAAA5E,EAAAD,MAAA4E,EAAA1E,WAAA9B,OAAAE,eAAAsG,IAAAvH,KAAA2C,MAGZ,IAAI6E,EAAKC,WAAY,CAEnB,GAAMC,GAAQF,EAAKC,WAAWE,iBAAiB,OAC/CD,GAAMlD,QAAQ,SAAAoD,GAAA,MAAQA,GAAKC,iBAAiB,aAAc,SAAAC,GACxDN,EAAKO,qBAPG,OAiBZ,EAAAC,EAAAxE,SAAU,WAAA,MAAMgE,GAAKO,mBAjBTP,EA7CO,MAAAxE,GAAAuE,EAAA9E,GAAAQ,EAAAsE,IAAArE,IAAA,iBAAAC,MAAA,WA2EnB,GADAG,EAAAiE,EAAArG,UAAA2B,WAAA9B,OAAAE,eAAAsG,EAAArG,WAAA,iBAAAyB,OAA4BW,EAAAiE,EAAArG,UAAA2B,WAAA9B,OAAAE,eAAAsG,EAAArG,WAAA,iBAAAyB,MAAA3C,KAAA2C,MACxBA,KAAKmD,EAAAtC,QAAQ6C,yBAA0B,CACzC,GAAMyB,GAAQ,GAAIvB,aAAY,kBAC9B5D,MAAK2D,cAAcwB,OA7EF5E,IAAA,UAAAW,IAAA,WAwFnB,GAAMoE,GAAsBtF,KAAKsF,mBAIjC,OAHmC,mBAAxBA,IACTC,QAAQC,KAAR,qGAEKF,GA5FYvG,IAAA,SA8FTyB,GACN,WAAaZ,GAAKrB,WAAakG,EAAAG,EAAArG,UAAA2B,WAAA9B,OAAAE,eAAAsG,EAAArG,WAAA,UAAgBiC,EAAhBR,UA/FhB4E,GA2CkBhF,EAkEzC,OAAOgF,2xBCjBT,QAASa,GAAsBC,EAAOC,GAAkB,GAAAC,GAChDC,EAAWzD,MAAM7D,UAAUU,IAAI5B,KAAKqI,EAAO,SAAAI,GAK/C,GAAMC,GAAoC,mBAApBC,iBACpBF,YAAgBE,iBACG,SAAnBF,EAAKnD,SACP,IAAIoD,EAAQ,CAEV,GAAME,GAAgBH,EAAKG,eAAgBC,SAAS,GACpD,OAAOD,GACLR,EAAsBQ,EAAeN,MAElC,MAAIG,aAAgB3H,cAEjB2H,GACCA,YAAgBK,OAAQR,GAEzBG,QAMNM,GAAYR,MAAGrG,OAAHY,MAAAyF,EAAAS,EAAaR,GAC/B,OAAOO,uTA3HM,SAACxG,GAAS,GA6CjB0G,GA7CiB,SAAAxG,GAAA,QAAAwG,KAAA,MAAAvG,GAAAC,KAAAsG,GAAArG,EAAAD,MAAAsG,EAAApG,WAAA9B,OAAAE,eAAAgI,IAAAnG,MAAAH,KAAAI,YAAA,MAAAC,GAAAiG,EAAAxG,GAAAQ,EAAAgG,IAAA/F,IAAA,sBAAAW,IAAA,WAsDnB,MAAOuE,GAAsBzF,KAAKuG,UAAU,MAtDzBhG,IAAA,wBAAAW,IAAA,WAiEnB,MAAOuE,GAAsBzF,KAAKwG,YAAY,MAjE3BjG,IAAA,yBAAAW,IAAA,WA2EnB,GAAMuF,GAAUzG,KAAK0G,sBAAsBzH,IAAI,SAAS0H,GACtD,MAAOA,GAAMC,aAEf,OAAOH,GAAQI,KAAK,QA9EDP,GA6CW1G,EAsClC,OAAO0G,wpBC3EM,QAASlF,GAAMxB,GAAM,GAqB5BkH,GArB4B,SAAAhH,GAAA,QAAAgH,KAAA,MAAA/G,GAAAC,KAAA8G,GAAA7G,EAAAD,MAAA8G,EAAA5G,WAAA9B,OAAAE,eAAAwI,IAAA3G,MAAAH,KAAAI,YAAA,MAAAC,GAAAyG,EAAAhH,GAAAQ,EAAAwG,IAAAvG,IAAA,oBAAAC,MAAA,WAwB9BG,EAAAmG,EAAAvI,UAAA2B,WAAA9B,OAAAE,eAAAwI,EAAAvI,WAAA,oBAAAyB,OAA+BW,EAAAmG,EAAAvI,UAAA2B,WAAA9B,OAAAE,eAAAwI,EAAAvI,WAAA,oBAAAyB,MAAA3C,KAAA2C,MAC/BA,KAAK0E,iBAAmB,KAzBMnE,IAAA,mBAAAW,IAAA,WAoC9B,MAAOlB,MAAK+G,IApCkBhI,IAAA,SAsCXyB,GAGnB,GAFAR,KAAK+G,GAA0BvG,EAC3B,oBAAsBZ,GAAKrB,WAAakG,EAAAqC,EAAAvI,UAAA2B,WAAA9B,OAAAE,eAAAwI,EAAAvI,WAAA,mBAAyBiC,EAAzBR,MACxCA,KAAKmD,EAAAtC,QAAQ6C,yBAA0B,CACzC,GAAMyB,GAAQ,GAAIvB,aAAY,4BAC9B5D,MAAK2D,cAAcwB,QA3CS2B,GAqBAlH,EA4BlC,OAAOkH,gxBAjDe1F,CATxB,IAAAwB,GAAA9F,EAAA,yBACAgG,EAAAhG,EAAA,mDAIMiK,GAAyB,EAAA/D,EAAAnC,SAAa,mBAyD5CO,GAAM4F,SAkBJC,gBAlBc,SAkBEC,EAAWC,GACzB,GAAMC,GAAQD,EAAY,EACtBE,EAAA,MAWJ,OAREA,GAFEH,EAAY,GAEJ9F,EAAM4F,QAAQM,SAASJ,GACxBA,GAAaE,EAEbA,EAAQhG,EAAM4F,QAAQM,QAAQJ,EAAYE,GAG1CF,GAoBbI,QAjDc,SAiDNC,GACN,GAAMC,IAAK,GAAMD,EAAI,GAAM,CAC3B,OAAOC,IAWTC,iBA9Dc,SA8DGC,GACf,GAAMC,GAAgBD,EAAQC,aAC9B,MAAIA,EAAgB,GAApB,CAIA,GAAMjD,GAAmBgD,EAAQhD,kBAAoB,CACrD,OAAOiD,GAAgBjD,IAazBkD,eAlFc,SAkFCV,GAGb,GAAMW,GAAQX,EAAY,EAAIY,KAAKC,KAAKb,GAAaY,KAAKE,MAAMd,GAC1De,EAAWf,EAAYW,CAC7B,QAASA,MAAAA,EAAOI,SAAAA,IAgBlBC,iBAvGc,SAuGGhB,EAAWC,GAG1B,OAASD,EAAYC,EAAaA,GAAaA,GAajDgB,sBAvHc,SAuHQjB,EAAWC,EAAWiB,GAI1C,MAHIA,KACFlB,EAAY9F,EAAM4F,QAAQkB,iBAAiBhB,EAAWC,IAEjD/F,EAAM4F,QAAQY,eAAeV,4vCCzLxCmB,EAAAvL,EAAA,mEACAwL,EAAAxL,EAAA,kEACAyL,EAAAzL,EAAA,yDACA0L,EAAA1L,EAAA,+DACAgG,EAAAhG,EAAA,mDACA2L,EAAA3L,EAAA,4EAGe,SAAC8C,GAEd,GAAMuC,IAASuG,EAAA7H,QAAA8H,EAAA9H,QAAA+H,EAAA/H,QAAAgI,EAAAhI,QAAAiI,EAAAjI,SASTkI,EAAiB5G,EAAOG,OAAO,SAAC0G,EAAG5H,GAAJ,MAAcA,GAAM4H,IAAIpJ,GAQvDqJ,EAnBiB,SAAAC,GAAA,QAAAD,KAAA,MAAAlJ,GAAAC,KAAAiJ,GAAAhJ,EAAAD,MAAAiJ,EAAA/I,WAAA9B,OAAAE,eAAA2K,IAAA9I,MAAAH,KAAAI,YAAA,MAAAC,GAAA4I,EAAAC,GAAA5I,EAAA2I,IAAA1I,IAqBhB4C,EAAAtC,QAAQsI,SArBQjI,IAAA,WAsBnB,GAAMiI,GAAWxI,EAAAsI,EAAA1K,UAAA2B,WAAA9B,OAAAE,eAAA2K,EAAA1K,WAAM4E,EAAAtC,QAAQsI,SAAdnJ,SAIjB,OAHAmJ,GAASC,eAAiB,aAC1BD,EAASE,yBAA2B,eAE7BF,MA1BYF,GAmBYF,EAYnC,OAAOE,4uDCvCTrG,EAAA9F,EAAA,yBACAgG,EAAAhG,EAAA,oBAIMwM,GAAuB,EAAAtG,EAAAnC,SAAa,4BAI3B,SAACjB,GAAS,GAejB2J,GAfiB,SAAAzJ,GAiBrB,QAAAyJ,KAAcxJ,EAAAC,KAAAuJ,EAAA,IAAA1E,GAAA5E,EAAAD,MAAAuJ,EAAArJ,WAAA9B,OAAAE,eAAAiL,IAAAlM,KAAA2C,MAAA,OAGuB,mBAAxB6E,GAAKuE,iBACdvE,EAAKuE,eAAiBvE,EAAK1B,EAAAtC,QAAQsI,UAAUC,gBAJnCvE,EAjBO,MAAAxE,GAAAkJ,EAAAzJ,GAAAQ,EAAAiJ,IAAAhJ,IAmCpB4C,EAAAtC,QAAQkD,OAnCYvD,MAAA,WAoCnB,GAAAG,EAAA4I,EAAAhL,UAAA2B,WAAA9B,OAAAE,eAAAiL,EAAAhL,WAAU4E,EAAAtC,QAAQkD,OAAlB/D,MAA6B,MAAAW,GAAA4I,EAAAhL,UAAA2B,WAAA9B,OAAAE,eAAAiL,EAAAhL,WAAa4E,EAAAtC,QAAQkD,OAArB/D,MAAA3C,KAAA2C,SApCVO,IA2CpB4C,EAAAtC,QAAQoD,MA3CYzD,MAAA,WA4CnB,GAAAG,EAAA4I,EAAAhL,UAAA2B,WAAA9B,OAAAE,eAAAiL,EAAAhL,WAAU4E,EAAAtC,QAAQoD,MAAlBjE,MAA4B,MAAAW,GAAA4I,EAAAhL,UAAA2B,WAAA9B,OAAAE,eAAAiL,EAAAhL,WAAa4E,EAAAtC,QAAQoD,MAArBjE,MAAA3C,KAAA2C,SA5CTO,IAmDpB4C,EAAAtC,QAAQsD,OAnDY3D,MAAA,WAoDnB,GAAAG,EAAA4I,EAAAhL,UAAA2B,WAAA9B,OAAAE,eAAAiL,EAAAhL,WAAU4E,EAAAtC,QAAQsD,OAAlBnE,MAA6B,MAAAW,GAAA4I,EAAAhL,UAAA2B,WAAA9B,OAAAE,eAAAiL,EAAAhL,WAAa4E,EAAAtC,QAAQsD,OAArBnE,MAAA3C,KAAA2C,SApDVO,IA2DpB4C,EAAAtC,QAAQwD,QA3DY7D,MAAA,WA4DnB,GAAAG,EAAA4I,EAAAhL,UAAA2B,WAAA9B,OAAAE,eAAAiL,EAAAhL,WAAU4E,EAAAtC,QAAQwD,QAAlBrE,MAA8B,MAAAW,GAAA4I,EAAAhL,UAAA2B,WAAA9B,OAAAE,eAAAiL,EAAAhL,WAAa4E,EAAAtC,QAAQwD,QAArBrE,MAAA3C,KAAA2C,SA5DXO,IAmEpB4C,EAAAtC,QAAQyD,QAnEY9D,MAAA,WAoEnB,GAAAG,EAAA4I,EAAAhL,UAAA2B,WAAA9B,OAAAE,eAAAiL,EAAAhL,WAAU4E,EAAAtC,QAAQyD,QAAlBtE,MAA8B,MAAAW,GAAA4I,EAAAhL,UAAA2B,WAAA9B,OAAAE,eAAAiL,EAAAhL,WAAa4E,EAAAtC,QAAQyD,QAArBtE,MAAA3C,KAAA2C,SApEXO,IA2EpB4C,EAAAtC,QAAQ2D,KA3EYhE,MAAA,WA4EnB,GAAAG,EAAA4I,EAAAhL,UAAA2B,WAAA9B,OAAAE,eAAAiL,EAAAhL,WAAU4E,EAAAtC,QAAQ2D,KAAlBxE,MAA2B,MAAAW,GAAA4I,EAAAhL,UAAA2B,WAAA9B,OAAAE,eAAAiL,EAAAhL,WAAa4E,EAAAtC,QAAQ2D,KAArBxE,MAAA3C,KAAA2C,SA5ERO,IAiGpB4C,EAAAtC,QAAQ2I,QAjGYhJ,MAAA,SAiGH2E,GAChB,GAAIsE,GAAA,OAEEC,EAAO1J,KAAKoJ,eACZO,EAAuB,eAATD,GAAkC,SAATA,EACvCE,EAAqB,aAATF,GAAgC,SAATA,CAIzC,QAAQvE,EAAM0E,SACZ,IAAK,IACHJ,EAAUzJ,KAAKmD,EAAAtC,QAAQoD,QACvB,MACF,KAAK,IACHwF,EAAUzJ,KAAKmD,EAAAtC,QAAQyD,UACvB,MACF,KAAK,KACCqF,GAAexE,EAAM2E,SAAY3E,EAAM4E,SACzCN,EAAUzJ,KAAKmD,EAAAtC,QAAQsD,UAEzB,MACF,KAAK,IACCyF,IACFH,EAAUtE,EAAM4E,OAAS/J,KAAKmD,EAAAtC,QAAQyD,WAAatE,KAAKmD,EAAAtC,QAAQ2D,QAElE,MACF,KAAK,KACCmF,GAAexE,EAAM2E,SAAY3E,EAAM4E,SACzCN,EAAUzJ,KAAKmD,EAAAtC,QAAQwD,WAEzB,MACF,KAAK,IACCuF,IACFH,EAAUtE,EAAM4E,OAAS/J,KAAKmD,EAAAtC,QAAQoD,SAAWjE,KAAKmD,EAAAtC,QAAQkD,WAKpE,MAAO0F,IAAY9I,EAAA4I,EAAAhL,UAAA2B,WAAA9B,OAAAE,eAAAiL,EAAAhL,WAAM4E,EAAAtC,QAAQ2I,QAAdxJ,OAAAW,EAAA4I,EAAAhL,UAAA2B,WAAA9B,OAAAE,eAAAiL,EAAAhL,WAAgC4E,EAAAtC,QAAQ2I,QAAxCxJ,MAAA3C,KAAA2C,KAAiDmF,MAvIjD5E,IAyBhB4C,EAAAtC,QAAQsI,SAzBQjI,IAAA,WA0BnB,GAAMiI,GAAWxI,EAAA4I,EAAAhL,UAAA2B,WAAA9B,OAAAE,eAAAiL,EAAAhL,WAAM4E,EAAAtC,QAAQsI,SAAdnJ,SAEjB,OADAmJ,GAASC,eAAiB,OACnBD,KA5BY5I,IAAA,iBAAAW,IAAA,WA0FnB,MAAOlB,MAAKsJ,IA1FOvK,IAAA,SA4FFyB,GACjBR,KAAKsJ,GAAwB9I,EACzB,kBAAoBZ,GAAKrB,WAAakG,EAAA8E,EAAAhL,UAAA2B,WAAA9B,OAAAE,eAAAiL,EAAAhL,WAAA,iBAAuBiC,EAAvBR,UA9FvBuJ,GAeS3J,EA6HhC,OAAO2J,6tCCrJTzG,EAAAhG,EAAA,8BAIe,SAAC8C,GAAS,GAmCjBoK,GAnCiB,SAAAlK,GAqCrB,QAAAkK,KAAcjK,EAAAC,KAAAgK,EAAA,IAAAnF,GAAA5E,EAAAD,MAAAgK,EAAA9J,WAAA9B,OAAAE,eAAA0L,IAAA3M,KAAA2C,MAAA,OAEZ6E,GAAKK,iBAAiB,UAAW,SAAAC,GAC/BN,EAAK1B,EAAAtC,QAAQ6C,0BAA2B,CACxC,IAAM+F,GAAU5E,EAAK1B,EAAAtC,QAAQ2I,SAASrE,EAClCsE,KACFtE,EAAM8E,iBACN9E,EAAM+E,mBAERrF,EAAK1B,EAAAtC,QAAQ6C,0BAA2B,IAT9BmB,EArCO,MAAAxE,GAAA2J,EAAAlK,GAAAQ,EAAA0J,IAAAzJ,IAAA,oBAAAC,MAAA,WAmDnBG,EAAAqJ,EAAAzL,UAAA2B,WAAA9B,OAAAE,eAAA0L,EAAAzL,WAAA,oBAAAyB,OAA+BW,EAAAqJ,EAAAzL,UAAA2B,WAAA9B,OAAAE,eAAA0L,EAAAzL,WAAA,oBAAAyB,MAAA3C,KAAA2C,MACM,MAAjCA,KAAKmK,aAAa,aAA2D,OAApCnK,KAAKmD,EAAAtC,QAAQsI,UAAUiB,UAClEpK,KAAKe,aAAa,WAAYf,KAAKmD,EAAAtC,QAAQsI,UAAUiB,aArDpC7J,IAyEpB4C,EAAAtC,QAAQ2I,QAzEYhJ,MAAA,SAyEH2E,GAChB,GAAAxE,EAAAqJ,EAAAzL,UAAA2B,WAAA9B,OAAAE,eAAA0L,EAAAzL,WAAU4E,EAAAtC,QAAQ2I,QAAlBxJ,MAA8B,MAAAW,GAAAqJ,EAAAzL,UAAA2B,WAAA9B,OAAAE,eAAA0L,EAAAzL,WAAa4E,EAAAtC,QAAQ2I,QAArBxJ,MAAA3C,KAAA2C,KAA8BmF,MA1EzC5E,IAyDhB4C,EAAAtC,QAAQsI,SAzDQjI,IAAA,WA0DnB,GAAMiI,GAAWxI,EAAAqJ,EAAAzL,UAAA2B,WAAA9B,OAAAE,eAAA0L,EAAAzL,WAAM4E,EAAAtC,QAAQsI,SAAdnJ,SAGjB,OADAmJ,GAASiB,SAAW,EACbjB,MA7DYa,GAmCApK,EA4CvB,OAAOoK,06CCnFTlH,EAAAhG,EAAA,oBAIIuN,EAAU,YAIC,SAACzK,GAAS,GAiCjB0K,GAjCiB,SAAAxK,GAAA,QAAAwK,KAAA,MAAAvK,GAAAC,KAAAsK,GAAArK,EAAAD,MAAAsK,EAAApK,WAAA9B,OAAAE,eAAAgM,IAAAnK,MAAAH,KAAAI,YAAA,MAAAC,GAAAiK,EAAAxK,GAAAQ,EAAAgK,IAAA/J,IAAA,oBAAAC,MAAA,WAoCnBG,EAAA2J,EAAA/L,UAAA2B,WAAA9B,OAAAE,eAAAgM,EAAA/L,WAAA,oBAAAyB,OAA+BW,EAAA2J,EAAA/L,UAAA2B,WAAA9B,OAAAE,eAAAgM,EAAA/L,WAAA,oBAAAyB,MAAA3C,KAAA2C,MAEE,MAA7BA,KAAKmK,aAAa,SAAmBnK,KAAKmD,EAAAtC,QAAQsI,UAAUoB,MAC9DvK,KAAKe,aAAa,OAAQf,KAAKmD,EAAAtC,QAAQsI,UAAUoB,SAvChChK,IAiDpB4C,EAAAtC,QAAQwC,UAjDY7C,MAAA,SAiDDkC,GAkBlB,GAjBA/B,EAAA2J,EAAA/L,UAAA2B,WAAA9B,OAAAE,eAAAgM,EAAA/L,WAAU4E,EAAAtC,QAAQwC,UAAlBrD,OAAgCW,EAAA2J,EAAA/L,UAAA2B,WAAA9B,OAAAE,eAAAgM,EAAA/L,WAAM4E,EAAAtC,QAAQwC,UAAdrD,MAAA3C,KAAA2C,KAAyB0C,GAEpDA,EAAKyH,aAAa,SAErBzH,EAAK3B,aAAa,OAAQ,WAavB2B,EAAK8H,GAAI,CACZ,GAAMC,GAASzK,KAAKwK,GAChB,IAAMxK,KAAKwK,GAAK,SAChB,SACJ9H,GAAK8H,GAAKC,EAASJ,QAvEF9J,IA2EpB4C,EAAAtC,QAAQyC,aA3EY9C,MAAA,SA2EEkC,EAAMa,GAC3B5C,EAAA2J,EAAA/L,UAAA2B,WAAA9B,OAAAE,eAAAgM,EAAA/L,WAAU4E,EAAAtC,QAAQyC,aAAlBtD,OAAmCW,EAAA2J,EAAA/L,UAAA2B,WAAA9B,OAAAE,eAAAgM,EAAA/L,WAAM4E,EAAAtC,QAAQyC,aAAdtD,MAAA3C,KAAA2C,KAA4B0C,EAAMa,GACrEb,EAAK3B,aAAa,gBAAiBwC,EACnC,IAAMmH,GAAShI,EAAK8H,EAChBE,IAAUnH,GACZvD,KAAKe,aAAa,wBAAyB2J,MAhF1BnK,IA2ChB4C,EAAAtC,QAAQsI,SA3CQjI,IAAA,WA4CnB,GAAMiI,GAAWxI,EAAA2J,EAAA/L,UAAA2B,WAAA9B,OAAAE,eAAAgM,EAAA/L,WAAM4E,EAAAtC,QAAQsI,SAAdnJ,SAEjB,OADAmJ,GAASoB,KAAO,UACTpB,KA9CY5I,IAAA,eAAAW,IAAA,WAqFnB,MAAAP,GAAA2J,EAAA/L,UAAA2B,WAAA9B,OAAAE,eAAAgM,EAAA/L,WAAA,eAAAyB,OArFmBjB,IAAA,SAuFJ2D,GACX,gBAAkB9C,GAAKrB,WAAakG,EAAA6F,EAAA/L,UAAA2B,WAAA9B,OAAAE,eAAAgM,EAAA/L,WAAA,eAAqBmE,EAArB1C;AAC5B,MAAR0C,GAEF1C,KAAK2K,gBAAgB,6BA3FJL,GAiCW1K,EAgElC,OAAO0K,+qBCxGM,SAAC1K,GAAS,GAuBjBgL,GAvBiB,SAAA9K,GAyBrB,QAAA8K,KAAc7K,EAAAC,KAAA4K,EAAA,IAAA/F,GAAA5E,EAAAD,MAAA4K,EAAA1K,WAAA9B,OAAAE,eAAAsM,IAAAvN,KAAA2C,MAEZ,IAAI6E,EAAKC,WAAY,CAOnBD,EAAKgG,IACL,IAAMC,GAAejG,EAAKC,WAAWE,iBAAiB,WACnDnD,QAAQxE,KAAKyN,EAAc,SAAAhF,GAC5B,GAAM0E,GAAK1E,EAAKqE,aAAa,KAC7BtF,GAAKgG,EAAEL,GAAM1E,IAbL,MAAAjB,GAzBO,MAAAxE,GAAAuK,EAAA9K,GAAA8K,GAuBehL,EA6BtC,OAAOgL,ypBCUT,QAASG,GAA4BC,GACnC,GAAMC,GAAWC,SAASC,cAAc,YAIlCC,EAAMF,SAASC,cAAc,MAEnC,KADAC,EAAIJ,UAAYA,EACTI,EAAI5E,WAAWlJ,OAAS,GAC7B2N,EAASpH,QAAQwH,YAAYD,EAAI5E,WAAW,GAE9C,OAAOyE,GAIT,QAASK,GAAmBL,EAAUM,GACpCC,OAAOC,cAAcC,UAAUC,YAAYV,EAASpH,QAAS0H,mDA9E/D,IAAAzI,GAAAhG,EAAA,mCAIe,SAAC8C,GAAS,GAwBjBgM,GAxBiB,SAAA9L,GA8BrB,QAAA8L,KAAc7L,EAAAC,KAAA4L,EAAA,IAAA/G,GAAA5E,EAAAD,MAAA4L,EAAA1L,WAAA9B,OAAAE,eAAAsN,IAAAvO,KAAA2C,OAERiL,EAAWpG,EAAK1B,EAAAtC,QAAQoK,SAG5B,IAAIA,EAAU,CAEY,gBAAbA,KAETA,EAAWF,EAA4BE,IAGrCO,OAAOK,mBACTP,EAAmBL,EAAUpG,EAAKlC,UAGpC,IAAMmJ,GAAOjH,EAAKkH,cAAeC,KAAM,SACjCC,EAAQf,SAASgB,WAAWjB,EAASpH,SAAS,EACpDiI,GAAKT,YAAYY,GAlBP,MAAApH,GA9BO,MAAAxE,GAAAuL,EAAA9L,GAAA8L,GAwBMhM,EA8B7B,OAAOgM,4qBCkTT,QAASO,GAAYzE,EAASG,GAC5B,GAAMuE,GAAQ1E,EAAQlF,MAAMlF,OAEtB+O,EAAgB3E,EAAQ4E,gBAG1BzE,EAAQuE,EAASA,GAASA,EAG5BtE,KAAKyE,IAAIzE,KAAK0E,IAAI3E,EAAOuE,EAAQ,GAAI,GAEjCK,EAAgB/E,EAAQC,aAC9B,OAAI8E,KAAkBJ,IACpB3E,EAAQC,cAAgB0E,GACjB,GAUX,QAASK,GAAkBhF,GAEzB,GAAMlF,GAAQkF,EAAQlF,MAChB2E,EAAY3E,EAAQA,EAAMlF,OAAS,EAEnCqP,EAAuBjF,EAAQkF,YACrC,IAAKD,EAME,GAAkB,IAAdxF,EAETO,EAAQkF,aAAe,SAClB,CAEL,GAAMC,GAAsBzK,MAAM7D,UAAUe,QAAQjC,KAAKmF,EAAOmK,GAC1DG,EAAwBpF,EAAQC,aACtC,IAAIkF,EAAsB,EAAG,CAG3B,GAAME,GAAmBjF,KAAK0E,IAAIM,EAAuB3F,EAAY,EAGrEO,GAAQkF,aAAepK,EAAMuK,OACpBF,KAAwBC,IAEjCpF,EAAQC,cAAgBkF,OApBtBnF,GAAQsF,oBAEVtF,EAAQC,cAAgB,GAyB9B,QAASsF,GAA0BvF,GACjC,GAAIwF,GAAA,OACAC,EAAA,OACE3K,EAAQkF,EAAQlF,KAKpB,IAJW,MAATA,GAAkC,IAAjBA,EAAMlF,SAEzB4P,GAAgB,EAChBC,GAAoB,GAChBzF,EAAQ4E,eAEZY,GAAgB,EAChBC,GAAoB,MACf,CACL,GAAMtF,GAAQH,EAAQC,aAClBE,GAAQ,GAAKrF,EAAMlF,OAAS,GAG9B4P,GAAgB,EAChBC,GAAoB,IAGpBA,EAAqBtF,EAAQ,EAC7BqF,EAAiBrF,EAAQrF,EAAMlF,OAAS,GAGxCoK,EAAQwF,gBAAkBA,IAC5BxF,EAAQwF,cAAgBA,GAEtBxF,EAAQyF,oBAAsBA,IAChCzF,EAAQyF,kBAAoBA,swBApchCvK,EAAA9F,EAAA,yBACAgG,EAAAhG,EAAA,oBAIMsQ,GAAsB,EAAApK,EAAAnC,SAAa,iBACnCwM,GAA0B,EAAArK,EAAAnC,SAAa,qBACvCyM,GAA0B,EAAAtK,EAAAnC,SAAa,qBACvC0M,GAAuB,EAAAvK,EAAAnC,SAAa,kBAmBpC2M,GAA8B,EAAAxK,EAAAnC,SAAa,yBAC3C4M,GAA6B,EAAAzK,EAAAnC,SAAa,wBAC1C6M,GAA8B,EAAA1K,EAAAnC,SAAa,yBAC3C8M,GAA6B,EAAA3K,EAAAnC,SAAa,kCAIjC,SAACjB,GAAS,GAwBjBgO,GAxBiB,SAAA9N,GA0BrB,QAAA8N,KAAc7N,EAAAC,KAAA4N,EAAA,IAAA/I,GAAA5E,EAAAD,MAAA4N,EAAA1N,WAAA9B,OAAAE,eAAAsP,IAAAvQ,KAAA2C,MAAA,OAG0B,mBAA3B6E,GAAKmI,oBACdnI,EAAKmI,kBAAoBnI,EAAK1B,EAAAtC,QAAQsI,UAAU6D,mBAEf,mBAAxBnI,GAAKyH,iBACdzH,EAAKyH,eAAiBzH,EAAK1B,EAAAtC,QAAQsI,UAAUmD,gBAPnCzH,EA1BO,MAAAxE,GAAAuN,EAAA9N,GAAAQ,EAAAsN,IAAArN,IAwFpB4C,EAAAtC,QAAQwC,UAxFY7C,MAAA,SAwFDkC,GAClB/B,EAAAiN,EAAArP,UAAA2B,WAAA9B,OAAAE,eAAAsP,EAAArP,WAAU4E,EAAAtC,QAAQwC,UAAlBrD,OAAgCW,EAAAiN,EAAArP,UAAA2B,WAAA9B,OAAAE,eAAAsP,EAAArP,WAAM4E,EAAAtC,QAAQwC,UAAdrD,MAAA3C,KAAA2C,KAAyB0C,GACzD1C,KAAKmD,EAAAtC,QAAQyC,cAAcZ,EAAMA,IAAS1C,KAAK4M,iBA1F5BrM,IA6FpB4C,EAAAtC,QAAQuC,aA7FY5C,MAAA,WA8FnBG,EAAAiN,EAAArP,UAAA2B,WAAA9B,OAAAE,eAAAsP,EAAArP,WAAU4E,EAAAtC,QAAQuC,aAAlBpD,OAAmCW,EAAAiN,EAAArP,UAAA2B,WAAA9B,OAAAE,eAAAsP,EAAArP,WAAM4E,EAAAtC,QAAQuC,aAAdpD,MAAA3C,KAAA2C,MAGnC0M,EAAkB1M,MAGlBiN,EAA0BjN,SApGPO,IAgHpB4C,EAAAtC,QAAQyC,aAhHY9C,MAAA,SAgHEkC,EAAMa,GAC3B5C,EAAAiN,EAAArP,UAAA2B,WAAA9B,OAAAE,eAAAsP,EAAArP,WAAU4E,EAAAtC,QAAQyC,aAAlBtD,OAAmCW,EAAAiN,EAAArP,UAAA2B,WAAA9B,OAAAE,eAAAsP,EAAArP,WAAM4E,EAAAtC,QAAQyC,aAAdtD,MAAA3C,KAAA2C,KAA4B0C,EAAMa,MAjHlDhD,IAAA,cAAAC,MAAA,WAmPnB,MADAG,GAAAiN,EAAArP,UAAA2B,WAAA9B,OAAAE,eAAAsP,EAAArP,WAAA,cAAAyB,OAAyBW,EAAAiN,EAAArP,UAAA2B,WAAA9B,OAAAE,eAAAsP,EAAArP,WAAA,cAAAyB,MAAA3C,KAAA2C,MAClBmM,EAAYnM,KAAM,MAnPNO,IAAA,aAAAC,MAAA,WAyRnB,MADAG,GAAAiN,EAAArP,UAAA2B,WAAA9B,OAAAE,eAAAsP,EAAArP,WAAA,aAAAyB,OAAwBW,EAAAiN,EAAArP,UAAA2B,WAAA9B,OAAAE,eAAAsP,EAAArP,WAAA,aAAAyB,MAAA3C,KAAA2C,MACjBmM,EAAYnM,KAAMA,KAAKwC,MAAMlF,OAAS,MAzR1BiD,IAAA,aAAAC,MAAA,WAiSnB,MADAG,GAAAiN,EAAArP,UAAA2B,WAAA9B,OAAAE,eAAAsP,EAAArP,WAAA,aAAAyB,OAAwBW,EAAAiN,EAAArP,UAAA2B,WAAA9B,OAAAE,eAAAsP,EAAArP,WAAA,aAAAyB,MAAA3C,KAAA2C,MACjBmM,EAAYnM,KAAMA,KAAK2H,cAAgB,MAjS3BpH,IAAA,iBAAAC,MAAA,WA0SnBG,EAAAiN,EAAArP,UAAA2B,WAAA9B,OAAAE,eAAAsP,EAAArP,WAAA,iBAAAyB,OAA4BW,EAAAiN,EAAArP,UAAA2B,WAAA9B,OAAAE,eAAAsP,EAAArP,WAAA,iBAAAyB,MAAA3C,KAAA2C,KAC5B,IAAM6N,GAAW7N,KAAK2H,cAAgB,EACpC3H,KAAKwC,MAAMlF,OAAS,EACpB0C,KAAK2H,cAAgB,CACvB,OAAOwE,GAAYnM,KAAM6N,MA9SNtN,IAAA,gBAAAW,IAAA,WA4CnB,MAAOlB,MAAKoN,IA5COrO,IAAA,SA8CHmO,GAChB,GAAMY,GAAwB9N,KAAKoN,EACnCpN,MAAKoN,GAAuBF,EACxB,iBAAmBtN,GAAKrB,WAAakG,EAAAmJ,EAAArP,UAAA2B,WAAA9B,OAAAE,eAAAsP,EAAArP,WAAA,gBAAsB2O,EAAtBlN,MACrCkN,IAAkBY,GAAyB9N,KAAKmD,EAAAtC,QAAQ6C,0BAC1D1D,KAAK2D,cAAc,GAAIC,aAAY,+BAnDlBrD,IAAA,oBAAAW,IAAA,WA8DnB,MAAOlB,MAAKqN,IA9DOtO,IAAA,SAgECoO,GACpB,GAAMY,GAA4B/N,KAAKqN,EACvCrN,MAAKqN,GAA2BF,EAC5B,qBAAuBvN,GAAKrB,WAAakG,EAAAmJ,EAAArP,UAAA2B,WAAA9B,OAAAE,eAAAsP,EAAArP,WAAA,oBAA0B4O,EAA1BnN,MACzCmN,IAAsBY,GAA6B/N,KAAKmD,EAAAtC,QAAQ6C,0BAClE1D,KAAK2D,cAAc,GAAIC,aAAY,mCArElBrD,IAyEhB4C,EAAAtC,QAAQsI,SAzEQjI,IAAA,WA0EnB,GAAMiI,GAAWxI,EAAAiN,EAAArP,UAAA2B,WAAA9B,OAAAE,eAAAsP,EAAArP,WAAM4E,EAAAtC,QAAQsI,SAAdnJ,SAGjB,OAFAmJ,GAAS6D,mBAAoB,EAC7B7D,EAASmD,gBAAiB,EACnBnD,KA7EY5I,IAAA,gBAAAW,IAAA,WA6HnB,MAA4C,OAArClB,KAAKwN,GACVxN,KAAKwN,IACL,GA/HiBzO,IAAA,SAiIH8I,GAEhB,GAAMiF,GAAwB9M,KAAK0N,GAC/BhL,EAAA,MACJ,IAAImF,IAAU7H,KAAKwN,GAA8B,CAE/C,GAAMhL,GAAQxC,KAAKwC,MACbwL,EAAWxL,GAASA,EAAMlF,OAAS,CACnC0Q,IAAYnG,GAAS,GAAKA,EAAQrF,EAAMlF,SAC5CuK,GAAQ,GAEV7H,KAAKwN,GAA+B3F,EACpCnF,EAAOsL,GAAYnG,GAAS,EAAIrF,EAAMqF,GAAS,KAC/C7H,KAAKyN,GAA8B/K,MAEnCA,GAAO1C,KAAKyN,EAMd,IAFI,iBAAmB7N,GAAKrB,WAAakG,EAAAmJ,EAAArP,UAAA2B,WAAA9B,OAAAE,eAAAsP,EAAArP,WAAA,gBAAsBsJ,EAAtB7H,MAErC6H,IAAUiF,IAEZ9M,KAAK0N,GAA+B7F,EAEhC7H,KAAKmD,EAAAtC,QAAQ6C,0BAA0B,CACzC,GAAMyB,GAAQ,GAAIvB,aAAY,0BAC5BqK,QACEtG,cAAeE,EACfrH,MAAOqH,IAGX7H,MAAK2D,cAAcwB,GAInBnF,KAAK2N,KAAgCjL,IAEvC1C,KAAK4M,aAAelK,MAvKHnC,IAAA,eAAAW,IAAA,WAuLnB,MAAOlB,MAAKyN,IAA+B,MAvLxB1O,IAAA,SAyLJ2D,GAEf,GAAMiK,GAAuB3M,KAAK2N,GAC9B9F,EAAA,MACJ,IAAInF,IAAS1C,KAAKyN,GAA6B,CAE7C,GAAMjL,GAAQxC,KAAKwC,MACbwL,EAAWxL,GAASA,EAAMlF,OAAS,CACzCuK,GAAQmG,EAAW5L,MAAM7D,UAAUe,QAAQjC,KAAKmF,EAAOE,IAAQ,EAC/D1C,KAAKwN,GAA+B3F,EAChCA,EAAQ,IACVnF,EAAO,MAET1C,KAAKyN,GAA8B/K,MAEnCmF,GAAQ7H,KAAKwN,EAMf,IAFI,gBAAkB5N,GAAKrB,WAAakG,EAAAmJ,EAAArP,UAAA2B,WAAA9B,OAAAE,eAAAsP,EAAArP,WAAA,eAAqBmE,EAArB1C,MAEpC0C,IAASiK,IAEX3M,KAAK2N,GAA8BjL,EAE/BiK,GAEF3M,KAAKmD,EAAAtC,QAAQyC,cAAcqJ,GAAsB,GAE/CjK,GAEF1C,KAAKmD,EAAAtC,QAAQyC,cAAcZ,GAAM,GAGnCuK,EAA0BjN,MAEtBA,KAAKmD,EAAAtC,QAAQ6C,0BAA0B,CACzC,GAAMyB,GAAQ,GAAIvB,aAAY,yBAC5BqK,QACErB,aAAclK,EACdlC,MAAOkC,IAGX1C,MAAK2D,cAAcwB,GAInBnF,KAAK0N,KAAiC7F,IAExC7H,KAAK2H,cAAgBE,MA1OJtH,IAAA,oBAAAW,IAAA,WA6PnB,MAAOlB,MAAKsN,IA7POvO,IAAA,SA+PCiO,GACpBhN,KAAKsN,GAA2BN,EAC5B,qBAAuBpN,GAAKrB,WAAakG,EAAAmJ,EAAArP,UAAA2B,WAAA9B,OAAAE,eAAAsP,EAAArP,WAAA,oBAA0ByO,EAA1BhN,MAC7C0M,EAAkB1M,SAlQCO,IAAA,iBAAAW,IAAA,WA4QnB,MAAOlB,MAAKuN,IA5QOxO,IAAA,SA8QFyB,GACjBR,KAAKuN,GAA0C,SAAlBW,OAAO1N,GAChC,kBAAoBZ,GAAKrB,WAAakG,EAAAmJ,EAAArP,UAAA2B,WAAA9B,OAAAE,eAAAsP,EAAArP,WAAA,iBAAuBiC,EAAvBR,MAC1CiN,EAA0BjN,UAjRP4N,GAwBOhO,EA4S9B,OAAOgO,2rBCjMT,QAASO,GAA4BhJ,GACnC,MAA6B,QAAtBA,EAAMiJ,aACc,UAAtBjJ,EAAMiJ,aAA2BjJ,EAAMkJ,UAM9C,QAASC,GAAS5G,EAAS6G,EAASC,GAElC,GADA9G,EAAQvE,EAAAtC,QAAQ4N,WAAY,EACxB/G,EAAQgH,IAAiB,GAE3BhH,EAAQvE,EAAAtC,QAAQsD,cACX,IAAIuD,EAAQgH,KAAiB,GAElChH,EAAQvE,EAAAtC,QAAQwD,eACX,CAELsK,EAAQjH,EAAS6G,EACjB,IAAMK,GAAiBlH,EAAQkH,cAC3BA,IAAkB,GACpBlH,EAAQvE,EAAAtC,QAAQwD,WACPuK,IAAkB,IAC3BlH,EAAQvE,EAAAtC,QAAQsD,UAGpBuD,EAAQkH,eAAiB,EACzBlH,EAAQgH,GAAgB,KACxBhH,EAAQmH,GAAgB,KAM1B,QAASC,GAAUpH,EAAS6G,EAASC,GAMnC,MAJA9G,GAAQgH,GAAgBH,EAAU7G,EAAQqH,GAC1CrH,EAAQmH,GAAgBL,EAAU9G,EAAQsH,GAC1CtH,EAAQqH,GAAmBR,EAC3B7G,EAAQsH,GAAmBR,EACvB1G,KAAKmH,IAAIvH,EAAQgH,IAAiB5G,KAAKmH,IAAIvH,EAAQmH,MAErDF,EAAQjH,EAAS6G,IAQV,GAUX,QAASW,GAAWxH,EAAS6G,EAASC,GACpC9G,EAAQvE,EAAAtC,QAAQ4N,WAAY,EAC5B/G,EAAQyH,GAAgBZ,EACxB7G,EAAQqH,GAAmBR,EAC3B7G,EAAQsH,GAAmBR,EAC3B9G,EAAQgH,GAAgB,EACxBhH,EAAQmH,GAAgB,EAG1B,QAASF,GAAQjH,EAASH,GACxB,GAAM6H,GAAQ1H,EAAQ2H,YAChBC,EAAe5H,EAAQyH,GAAgB5H,EACvCU,EAAWmH,EAAQ,EACvBE,EAAeF,EACf,CACF1H,GAAQkH,eAAiB3G,qwBAhP3BrF,EAAA9F,EAAA,yBACAgG,EAAAhG,EAAA,oBAIM4R,GAAe,EAAA1L,EAAAnC,SAAa,UAC5BgO,GAAe,EAAA7L,EAAAnC,SAAa,UAC5B0O,GAAmB,EAAAvM,EAAAnC,SAAa,cAChCkO,GAAkB,EAAA/L,EAAAnC,SAAa,aAC/BmO,GAAkB,EAAAhM,EAAAnC,SAAa,aAC/BsO,GAAe,EAAAnM,EAAAnC,SAAa,UAC5B2O,GAAuB,EAAAxM,EAAAnC,SAAa,4BAI3B,SAACjB,GAAS,GAWjB6P,GAXiB,SAAA3P,GAarB,QAAA2P,KAAc1P,EAAAC,KAAAyP,EAAA,IAAA5K,GAAA5E,EAAAD,MAAAyP,EAAAvP,WAAA9B,OAAAE,eAAAmR,IAAApS,KAAA2C,MAAA,OAGZ6E,GAAK+J,eAAiB,EAOlBpD,OAAOkE,cAET7K,EAAKK,iBAAiB,cAAe,SAAAC,GACnCN,EAAK1B,EAAAtC,QAAQ6C,0BAA2B,EACpCyK,EAA4BhJ,IAC9B+J,EAAArK,EAAiBM,EAAMoJ,QAASpJ,EAAMqJ,SAExC3J,EAAK1B,EAAAtC,QAAQ6C,0BAA2B,IAE1CmB,EAAKK,iBAAiB,cAAe,SAAAC,GAEnC,GADAN,EAAK1B,EAAAtC,QAAQ6C,0BAA2B,EACpCyK,EAA4BhJ,GAAQ,CACtC,GAAMsE,GAAUqF,EAAAjK,EAAgBM,EAAMoJ,QAASpJ,EAAMqJ,QACjD/E,IACFtE,EAAM8E,iBAGVpF,EAAK1B,EAAAtC,QAAQ6C,0BAA2B,IAE1CmB,EAAKK,iBAAiB,YAAa,SAAAC,GACjCN,EAAK1B,EAAAtC,QAAQ6C,0BAA2B,EACpCyK,EAA4BhJ,IAC9BmJ,EAAAzJ,EAAeM,EAAMoJ,QAASpJ,EAAMqJ,SAEtC3J,EAAK1B,EAAAtC,QAAQ6C,0BAA2B,MAI1CmB,EAAKK,iBAAiB,aAAc,SAAAC,GAElC,GADAN,EAAK1B,EAAAtC,QAAQ6C,0BAA2B,GACpCmB,EAAK0K,GAAT,CAEO,GAA6B,IAAzBpK,EAAMwK,QAAQrS,OAAc,CACrC,GAAMiR,GAAUpJ,EAAMyK,eAAe,GAAGrB,QAClCC,EAAUrJ,EAAMyK,eAAe,GAAGpB,OACxCU,GAAArK,EAAiB0J,EAASC,OAE1B3J,GAAK0K,IAAoB,CAE3B1K,GAAK1B,EAAAtC,QAAQ6C,0BAA2B,KAE1CmB,EAAKK,iBAAiB,YAAa,SAAAC,GAEjC,GADAN,EAAK1B,EAAAtC,QAAQ6C,0BAA2B,GACnCmB,EAAK0K,IAA8C,IAAzBpK,EAAMwK,QAAQrS,OAAc,CACzD,GAAMiR,GAAUpJ,EAAMyK,eAAe,GAAGrB,QAClCC,EAAUrJ,EAAMyK,eAAe,GAAGpB,QAClC/E,EAAUqF,EAAAjK,EAAgB0J,EAASC,EACrC/E,IACFtE,EAAM8E,iBAGVpF,EAAK1B,EAAAtC,QAAQ6C,0BAA2B,IAE1CmB,EAAKK,iBAAiB,WAAY,SAAAC,GAEhC,GADAN,EAAK1B,EAAAtC,QAAQ6C,0BAA2B,EACX,IAAzByB,EAAMwK,QAAQrS,OAAc,CAE9B,IAAKuH,EAAK0K,GAAmB,CAE3B,GAAMhB,GAAUpJ,EAAMyK,eAAe,GAAGrB,QAClCC,EAAUrJ,EAAMyK,eAAe,GAAGpB,OACxCF,GAAAzJ,EAAe0J,EAASC,GAE1B3J,EAAK0K,IAAoB,EAE3B1K,EAAK1B,EAAAtC,QAAQ6C,0BAA2B,KA3EhCmB,EAbO,MAAAxE,GAAAoP,EAAA3P,GAAAQ,EAAAmP,IAAAlP,IAAA,oBAAAC,MAAA,WA8FnBG,EAAA8O,EAAAlR,UAAA2B,WAAA9B,OAAAE,eAAAmR,EAAAlR,WAAA,oBAAAyB,OAA+BW,EAAA8O,EAAAlR,UAAA2B,WAAA9B,OAAAE,eAAAmR,EAAAlR,WAAA,oBAAAyB,MAAA3C,KAAA2C,MAMY,SAAvC6P,iBAAiB7P,MAAM8P,cACzB9P,KAAK+P,MAAMD,YAAc,WArGRvP,IAqHpB4C,EAAAtC,QAAQsD,OArHY3D,MAAA,WAsHnB,GAAAG,EAAA8O,EAAAlR,UAAA2B,WAAA9B,OAAAE,eAAAmR,EAAAlR,WAAU4E,EAAAtC,QAAQsD,OAAlBnE,MAA6B,MAAAW,GAAA8O,EAAAlR,UAAA2B,WAAA9B,OAAAE,eAAAmR,EAAAlR,WAAa4E,EAAAtC,QAAQsD,OAArBnE,MAAA3C,KAAA2C,SAtHVO,IA6HpB4C,EAAAtC,QAAQwD,QA7HY7D,MAAA,WA8HnB,GAAAG,EAAA8O,EAAAlR,UAAA2B,WAAA9B,OAAAE,eAAAmR,EAAAlR,WAAU4E,EAAAtC,QAAQwD,QAAlBrE,MAA8B,MAAAW,GAAA8O,EAAAlR,UAAA2B,WAAA9B,OAAAE,eAAAmR,EAAAlR,WAAa4E,EAAAtC,QAAQwD,QAArBrE,MAAA3C,KAAA2C,SA9HXO,IA6GhB4C,EAAAtC,QAAQ4N,SA7GQvN,IAAA,WA2GnB,MAAAP,GAAA8O,EAAAlR,UAAA2B,WAAA9B,OAAAE,eAAAmR,EAAAlR,WAAa4E,EAAAtC,QAAQ4N,SAArBzO,OA3GmBjB,IAAA,SA6GEyB,GACjB2C,EAAAtC,QAAQ4N,WAAY7O,GAAKrB,WAAakG,EAAAgL,EAAAlR,UAAA2B,WAAA9B,OAAAE,eAAAmR,EAAAlR,WAAM4E,EAAAtC,QAAQ4N,SAAYjO,EAA1BR,SA9GvBO,IAAA,iBAAAW,IAAA,WAwInB,MAAOlB,MAAKwP,IAxIOzQ,IAAA,SA0IFyB,GACjBR,KAAKwP,GAAwBhP,EACzB,kBAAoBZ,GAAKrB,WAAakG,EAAAgL,EAAAlR,UAAA2B,WAAA9B,OAAAE,eAAAmR,EAAAlR,WAAA,iBAAuBiC,EAAvBR,UA5IvByP,GAWM7P,EAsI7B,OAAO6P,2rBCrDT,QAASO,GAAatI,GACpBA,EAAQkH,eAAiB,EACzBlH,EAAQuI,GAAuB,EAC/BvI,EAAQwI,IAAmC,EAC3CxI,EAAQyI,IAA4B,EACpCC,WAAW,WACT1I,EAAQwI,IAAmC,GAC1CG,GAIL,QAASC,GAAmB5I,GAC1BA,EAAQkH,eAAiB,EACzBlH,EAAQuI,GAAuB,EAC/BvI,EAAQ6I,GAAoB,EAC5B7I,EAAQyI,IAA4B,EACpCzI,EAAQwI,IAAmC,EACvCxI,EAAQ8I,KACVC,aAAa/I,EAAQ8I,IACrB9I,EAAQ8I,GAA0B,MAMtC,QAASE,GAAKnJ,GACZ,MAAc,KAANA,EACN,EACCA,EAAI,EACH,GACA,EAqBN,QAASoJ,GAAMjJ,EAASvC,GAIlBuC,EAAQ8I,IACVC,aAAa/I,EAAQ8I,IAEvB9I,EAAQ8I,GAA0BJ,WAAW,WAC3CQ,EAAclJ,IACbmJ,EAEH,IAAMC,GAAS3L,EAAM2L,OACfC,EAAS5L,EAAM4L,OAGfC,EAAeN,EAAKI,IAAWA,EAASpJ,EAAQ6I,GAGtD,IAFA7I,EAAQ6I,GAAoBO,EAExBhJ,KAAKmH,IAAI6B,GAAUhJ,KAAKmH,IAAI8B,GAG9B,OAAO,CAGT,IAAIrJ,EAAQwI,GAEV,OAAO,CAGT,IAAIc,EAAe,EAGjBtJ,EAAQyI,IAA4B,MAC/B,IAAIzI,EAAQyI,GAEjB,OAAO,CAGTzI,GAAQuI,IAAwBa,CAGhC,IAAM1B,GAAQ1H,EAAQ2H,YAClBT,EAAiBQ,EAAQ,EAC3B1H,EAAQuI,GAAuBb,EAC/B,CAiBF,OAhBA1H,GAAQvE,EAAAtC,QAAQ4N,WAAY,EAC5BG,EAAiB8B,EAAK9B,GAAkB9G,KAAK0E,IAAI1E,KAAKmH,IAAIL,GAAiB,GAC3ElH,EAAQkH,eAAiBA,EAIF,IAAnBA,GACFlH,EAAQvE,EAAAtC,QAAQ4N,WAAY,EAC5B/G,EAAQvE,EAAAtC,QAAQwD,WAChB2L,EAAatI,IACJkH,KAAmB,IAC5BlH,EAAQvE,EAAAtC,QAAQ4N,WAAY,EAC5B/G,EAAQvE,EAAAtC,QAAQsD,UAChB6L,EAAatI,KAGR,EAKT,QAASkJ,GAAclJ,GAKrBA,EAAQvE,EAAAtC,QAAQ6C,0BAA2B,EAG3CgE,EAAQvE,EAAAtC,QAAQ4N,WAAY,CAC5B,IAAMG,GAAiBlH,EAAQkH,cAC3BA,IAAkB,GACpBlH,EAAQvE,EAAAtC,QAAQwD,WACPuK,IAAkB,IAC3BlH,EAAQvE,EAAAtC,QAAQsD,UAMlBmM,EAAmB5I,GACnBA,EAAQvE,EAAAtC,QAAQ6C,0BAA2B,qwBApP7Cd,EAAA9F,EAAA,wDACAgG,EAAAhG,EAAA,oBAIMqT,GAA2B,EAAAnN,EAAAnC,SAAa,sBACxC0P,GAAmB,EAAAvN,EAAAnC,SAAa,cAChC2P,GAAyB,EAAAxN,EAAAnC,SAAa,oBACtCqP,GAAkC,EAAAlN,EAAAnC,SAAa,6BAC/CoP,GAAsB,EAAAjN,EAAAnC,SAAa,2BAI1B,SAACjB,GAAS,GA0BjBqR,GA1BiB,SAAAnR,GA4BrB,QAAAmR,KAAclR,EAAAC,KAAAiR,EAAA,IAAApM,GAAA5E,EAAAD,MAAAiR,EAAA/Q,WAAA9B,OAAAE,eAAA2S,IAAA5T,KAAA2C,MAAA,OAEZ6E,GAAKK,iBAAiB,QAAS,SAAAC,GAC7BN,EAAK1B,EAAAtC,QAAQ6C,0BAA2B,CACxC,IAAM+F,GAAUkH,EAAA9L,EAAYM,EACxBsE,IACFtE,EAAM8E,iBAERpF,EAAK1B,EAAAtC,QAAQ6C,0BAA2B,IAE1C4M,EAAAzL,GAVYA,EA5BO,MAAAxE,GAAA4Q,EAAAnR,GAAAQ,EAAA2Q,IAAA1Q,IAqDpB4C,EAAAtC,QAAQsD,OArDY3D,MAAA,WAsDnB,GAAAG,EAAAsQ,EAAA1S,UAAA2B,WAAA9B,OAAAE,eAAA2S,EAAA1S,WAAU4E,EAAAtC,QAAQsD,OAAlBnE,MAA6B,MAAAW,GAAAsQ,EAAA1S,UAAA2B,WAAA9B,OAAAE,eAAA2S,EAAA1S,WAAa4E,EAAAtC,QAAQsD,OAArBnE,MAAA3C,KAAA2C,SAtDVO,IA6DpB4C,EAAAtC,QAAQwD,QA7DY7D,MAAA,WA8DnB,GAAAG,EAAAsQ,EAAA1S,UAAA2B,WAAA9B,OAAAE,eAAA2S,EAAA1S,WAAU4E,EAAAtC,QAAQwD,QAAlBrE,MAA8B,MAAAW,GAAAsQ,EAAA1S,UAAA2B,WAAA9B,OAAAE,eAAA2S,EAAA1S,WAAa4E,EAAAtC,QAAQwD,QAArBrE,MAAA3C,KAAA2C,SA9DXO,IA6ChB4C,EAAAtC,QAAQ4N,SA7CQvN,IAAA,WA2CnB,MAAAP,GAAAsQ,EAAA1S,UAAA2B,WAAA9B,OAAAE,eAAA2S,EAAA1S,WAAa4E,EAAAtC,QAAQ4N,SAArBzO,OA3CmBjB,IAAA,SA6CEyB,GACjB2C,EAAAtC,QAAQ4N,WAAY7O,GAAKrB,WAAakG,EAAAwM,EAAA1S,UAAA2B,WAAA9B,OAAAE,eAAA2S,EAAA1S,WAAM4E,EAAAtC,QAAQ4N,SAAYjO,EAA1BR,SA9CvBO,IAAA,iBAAAW,IAAA,WAyEnB,MAAAP,GAAAsQ,EAAA1S,UAAA2B,WAAA9B,OAAAE,eAAA2S,EAAA1S,WAAA,iBAAAyB,OAzEmBjB,IAAA,SA2EFyB,GACb,kBAAoBZ,GAAKrB,WAAakG,EAAAwM,EAAA1S,UAAA2B,WAAA9B,OAAAE,eAAA2S,EAAA1S,WAAA,iBAAuBiC,EAAvBR,UA5EvBiR,GA0BSrR,EAuDhC,OAAOqR,GAMT,IAAMZ,GAAqB,IAGrBQ,EAAa,0GCnEJ,SAASK,GAAaC,GACnC,MAAyB,kBAAXC,QACZA,OAAOD,GADF,IAEDA,6DAHgBD,uCCAT,SAASG,GAAUC,GAChCC,EAAUC,KAAKF,GAEf5J,EAAQd,cAAgB6K,EAK1B,QAASC,KACP,KAAOH,EAAUjU,OAAS,GAAG,CAC3B,GAAMgU,GAAWC,EAAUI,OAC3BL,iEAXoBD,CApBxB,IAAME,MAGA7J,EAAUwD,SAAS0G,eAAe,IAGpCH,EAAU,EA+BRI,EAAW,GAAIC,kBAAiBJ,EACtCG,GAASE,QAAQrK,GACfsK,eAAe,6FCmDjB,QAASC,GAAsBvK,EAAShK,EAAe8C,GACrD,GAAc,OAAVA,GAAmC,mBAAVA,GAC3BkH,EAAQiD,gBAAgBjN,OACnB,CACL,GAAMwU,GAAOhE,OAAO1N,EAEhBkH,GAAQyC,aAAazM,KAAmBwU,GAC1CxK,EAAQ3G,aAAarD,EAAe8C,oDAjH1C,IAAAoC,GAAA9F,EAAA,yBACA0G,EAAA1G,EAAA,wBAIMqV,GAA4B,EAAAnP,EAAAnC,SAAa,uBACzCuR,GAA0B,EAAApP,EAAAnC,SAAa,qBACvCwR,GAAuB,EAAArP,EAAAnC,SAAa,6BAqBxCC,UAfa,SAeH4G,GAIR,GAHAA,EAAQyK,IAA6B,EAGjCzK,EAAQ0K,GAA0B,CACpC,IAAK,GAAI/S,KAAaqI,GAAQ0K,GAA0B,CACtD,GAAM5R,GAAQkH,EAAQ0K,GAAyB/S,EAC/C4S,GAAsBvK,EAASrI,EAAWmB,GAE5CkH,EAAQ0K,GAA2B,KAIrC,GAAI1K,EAAQ2K,GAAuB,CACjC,IAAK,GAAIrR,KAAa0G,GAAQ2K,GAAuB,CACnD,GAAMC,GAAQ5K,EAAQ2K,GAAsBrR,IAC5C,EAAAuR,EAAA1R,SAAY6G,EAAS1G,EAAWsR,GAElC5K,EAAQ2K,GAAwB,OAgBpCtR,aAjDa,SAiDA2G,EAASrI,EAAWmB,GAC3BkH,EAAQyK,GAEVF,EAAsBvK,EAASrI,EAAWmB,IAGrCkH,EAAQ0K,KACX1K,EAAQ0K,OAEV1K,EAAQ0K,GAAyB/S,GAAamB,IAiBlDS,YA3Ea,SA2EDyG,EAAS1G,EAAWR,GAC1BkH,EAAQyK,IAEV,EAAAI,EAAA1R,SAAY6G,EAAS1G,EAAWR,IAG3BkH,EAAQ2K,KACX3K,EAAQ2K,OAEV3K,EAAQ2K,GAAsBrR,GAAaR,oLCjGjD,IAAAoC,GAAA9F,EAAA,yBAuBM0V,GAmBJrJ,UAAU,EAAAnG,EAAAnC,SAAa,YAevB4N,UAAU,EAAAzL,EAAAnC,SAAa,YASvBkD,QAAQ,EAAAf,EAAAnC,SAAa,UAUrBoD,OAAO,EAAAjB,EAAAnC,SAAa,SASpBsD,QAAQ,EAAAnB,EAAAnC,SAAa,UASrBwD,SAAS,EAAArB,EAAAnC,SAAa,WAUtByD,SAAS,EAAAtB,EAAAnC,SAAa,WAStB2D,MAAM,EAAAxB,EAAAnC,SAAa,QAoCnB6C,yBAAyB,EAAAV,EAAAnC,SAAa,2BAUtCwC,WAAW,EAAAL,EAAAnC,SAAa,aAUxBuC,cAAc,EAAAJ,EAAAnC,SAAa,gBAW3ByC,cAAc,EAAAN,EAAAnC,SAAa,gBAU3B2I,SAAS,EAAAxG,EAAAnC,SAAa,WAStBoK,UAAU,EAAAjI,EAAAnC,SAAa,uBAGV2R,0DCpLA,SAASvR,GAAYyG,EAAS1G,EAAWyR,GACtD,GAAMC,GAAYhL,EAAQgL,UACpBC,EAA6B,mBAAVF,IACtBC,EAAUE,SAAS5R,GACpByR,CAMF,OALIE,GACFD,EAAUG,IAAI7R,GAEd0R,EAAUI,OAAO9R,GAEZ2R,6DAVe1R,usBCtBxB,IAAA8R,GAAAjW,EAAA,qEACAkW,EAAAlW,EAAA,2DACAmW,EAAAnW,EAAA,oEACAoW,EAAApW,EAAA,wEACAqW,EAAArW,EAAA,+DAuBMsW,oIAAoB,EAAAC,EAAAxS,SAAgB1C,aAAamV,QAA7BC,EAAA1S,QAAA2S,EAAA3S,QAAA4S,EAAA5S,QAAA6S,EAAA7S,oBAOXuS,yYC3Bf,GAAAO,GAAA7W,EAAA,+BAEA0O,QAAOoI,MAAQpI,OAAOoI,UACtBpI,OAAOoI,MAAMC,gBAAbC,EAAAjT,uuBCVA,IAAAkT,GAAAjX,EAAA,qEACAkX,EAAAlX,EAAA,2DA8BM+W,mIAAwBI,EAAApT,QAAgByS,QAAhBY,EAAArT,SAK9BsT,gBAAeC,OAAO,yBAA0BP,aACjCA,2wBC+Ef,QAASQ,GAAO3M,GACd4M,sBAAsBC,EAAgBC,KAAK9M,IAI7C,QAAS6M,KACP,GAAKvU,KAAK4M,aAAV,CAGA,GAAM1F,GAAYuN,EAAA5T,QAAyBmG,QAAQS,iBAAiBzH,MAC9DmH,EAAYnH,KAAKwC,MAAQxC,KAAKwC,MAAMlF,OAAS,EAC7C+J,EAASoN,EAAA5T,QAAyBmG,QAAQC,gBAAgBC,EAAWC,GAGrEuN,EAAiB,KAATrN,EACRsN,EAAY,cAAgBD,EAAO,IACzC1U,MAAK6K,EAAE+J,iBAAiB7E,MAAM8E,gBAAkBF,EAChD3U,KAAK6K,EAAE+J,iBAAiB7E,MAAM4E,UAAYA,swBArI5CG,EAAAhY,EAAA,6DACAiY,EAAAjY,EAAA,2EACAkY,EAAAlY,EAAA,mDACAmY,EAAAnY,EAAA,oEACAoY,EAAApY,EAAA,oEACAqY,EAAArY,EAAA,gEACAsY,EAAAtY,EAAA,4CACAgG,QAAAhG,EAAA,oDAGM8C,EAAOyV,EAAAxU,QAAYyS,QAAZgC,EAAAzU,QAAA0U,EAAA1U,QAAA4T,EAAA5T,QAAA2U,EAAA3U,QAAA4U,EAAA5U,SA8BP6U,cAEJ,QAAAA,KAAc3V,EAAAC,KAAA0V,EAAA,IAAA7Q,GAAA5E,EAAAD,MAAA0V,EAAAxV,WAAA9B,OAAAE,eAAAoX,IAAArY,KAAA2C,MAAA,OAEZ6E,GAAK1B,EAAAtC,QAAQ4N,WAAY,EAFb5J,0BAKT1B,EAAAtC,QAAQsI,wBACX,GAAMA,GAAWxI,EAAA+U,EAAAnX,UAAA2B,WAAA9B,OAAAE,eAAAoX,EAAAnX,WAAM4E,EAAAtC,QAAQsI,SAAdnJ,SAEjB,OADAmJ,GAAS6D,mBAAoB,EACtB7D,SASJhG,EAAAtC,QAAQ4N,wBAFX,OAAQzO,KAAK2V,6BAEQnV,GACjB2C,EAAAtC,QAAQ4N,WAAY7O,GAAKrB,WAAakG,EAAAiR,EAAAnX,UAAA2B,WAAA9B,OAAAE,eAAAoX,EAAAnX,WAAM4E,EAAAtC,QAAQ4N,SAAYjO,EAA1BR,MAC1CA,KAAK4V,aAAa,kBAAmBpV,4CAIrC,MAAAG,GAAA+U,EAAAnX,UAAA2B,WAAA9B,OAAAE,eAAAoX,EAAAnX,WAAA,mBAAAyB,oBAEmBQ,GACf,oBAAsBZ,GAAKrB,WAAakG,EAAAiR,EAAAnX,UAAA2B,WAAA9B,OAAAE,eAAAoX,EAAAnX,WAAA,mBAAyBiC,EAAzBR,MAC5CqU,EAAOrU,2CAIP,MAAAW,GAAA+U,EAAAnX,UAAA2B,WAAA9B,OAAAE,eAAAoX,EAAAnX,WAAA,eAAAyB,oBAEe0C,GACX,gBAAkB9C,GAAKrB,WAAakG,EAAAiR,EAAAnX,UAAA2B,WAAA9B,OAAAE,eAAAoX,EAAAnX,WAAA,eAAqBmE,EAArB1C,MACxCqU,EAAOrU,aAGJmD,EAAAtC,QAAQoK,wBACX,MAAA,6sBAzC0BrL,EAiG9BuU,gBAAeC,OAAO,yBAA0BsB,aACjCA,snDC1IfV,EAAAlY,EAAA,mDACAiY,EAAAjY,EAAA,2EACAgG,EAAAhG,EAAA,mDAiBM+Y,+KAKFlV,EAAAkV,EAAAtX,UAAA2B,WAAA9B,OAAAE,eAAAuX,EAAAtX,WAAA,oBAAAyB,OAA+BW,EAAAkV,EAAAtX,UAAA2B,WAAA9B,OAAAE,eAAAuX,EAAAtX,WAAA,oBAAAyB,MAAA3C,KAAA2C,MAE/BA,KAAKmD,EAAAtC,QAAQuC,uBASdD,EAAAtC,QAAQuC,8BACPzC,EAAAkV,EAAAtX,UAAA2B,WAAA9B,OAAAE,eAAAuX,EAAAtX,WAAU4E,EAAAtC,QAAQuC,aAAlBpD,OAAmCW,EAAAkV,EAAAtX,UAAA2B,WAAA9B,OAAAE,eAAAuX,EAAAtX,WAAM4E,EAAAtC,QAAQuC,aAAdpD,MAAA3C,KAAA2C,KACnC,IAAMwC,GAAQxC,KAAKwC,MACb4J,EAAQ5J,EAAMlF,MACpB0C,MAAK6K,EAAEiL,gBAAgB/F,MAAMX,MAAiB,IAARhD,EAAe,GACrD,IAAM2J,GAAa,IAAM3J,EAAS,OAC/BvK,QAAQxE,KAAKmF,EAAO,SAAAE,GACrBA,EAAKqN,MAAMX,MAAQ2G,kCAZrB,MAAO/V,MAAK6D,eAgBTV,EAAAtC,QAAQoK,wBACX,MAAA,4oBA5BsBoK,EAAAxU,QAAYyS,QAAZiC,EAAA1U,SA8D1BsT,gBAAeC,OAAO,qBAAsByB,aAC7BA","file":"basic-sliding-carousel.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import safeAttributes from './safeAttributes';\n\n\n// Memoized maps of attribute to property names and vice versa.\nconst attributeToPropertyNames = {};\nconst propertyNamesToAttributes = {};\n\n\n/* Exported function extends a base class with AttributeMarshalling. */\nexport default (base) => {\n\n  /**\n   * Mixin which marshalls attributes to properties and vice versa.\n   *\n   * If your component exposes a setter for a property, it's generally a good\n   * idea to let devs using your component be able to set that property in HTML\n   * via an element attribute. You can code that yourself by writing an\n   * `attributeChangedCallback`, or you can use this mixin to get a degree of\n   * automatic support.\n   *\n   * This mixin implements an `attributeChangedCallback` that will attempt to\n   * convert a change in an element attribute into a call to the corresponding\n   * property setter. Attributes typically follow hyphenated names (\"foo-bar\"),\n   * whereas properties typically use camelCase names (\"fooBar\"). This mixin\n   * respects that convention, automatically mapping the hyphenated attribute\n   * name to the corresponding camelCase property name.\n   *\n   * Example: You define a component using this mixin:\n   *\n   *     class MyElement extends AttributeMarshallingMixin(HTMLElement) {\n   *       get fooBar() { return this._fooBar; }\n   *       set fooBar(value) { this._fooBar = value; }\n   *     }\n   *     customElements.define('my-element', MyElement);\n   *\n   * If someone then instantiates your component in HTML:\n   *\n   *     <my-element foo-bar=\"Hello\"></my-element>\n   *\n   * Then, after the element has been upgraded, the `fooBar` setter will\n   * automatically be invoked with the initial value \"Hello\".\n   *\n   * For the time being, this mixin only supports string-valued properties.\n   * If you'd like to convert string attributes to other types (numbers,\n   * booleans), you need to implement `attributeChangedCallback` yourself.\n   */\n  class AttributeMarshalling extends base {\n\n    /*\n     * Handle a change to the attribute with the given name.\n     */\n    attributeChangedCallback(attributeName, oldValue, newValue) {\n      if (super.attributeChangedCallback) { super.attributeChangedCallback(); }\n      const propertyName = attributeToPropertyName(attributeName);\n      // If the attribute name corresponds to a property name, set the property.\n      // Ignore standard HTMLElement properties handled by the DOM.\n      if (propertyName in this && !(propertyName in HTMLElement.prototype)) {\n        this[propertyName] = newValue;\n      }\n    }\n\n    connectedCallback() {\n      if (super.connectedCallback) { super.connectedCallback(); }\n      safeAttributes.connected(this);\n    }\n\n    static get observedAttributes() {\n      return attributesForClass(this);\n    }\n\n    /**\n     * Set/unset the attribute with the indicated name.\n     *\n     * This method exists primarily to handle the case where an element wants to\n     * set a default property value that should be reflected as an attribute. An\n     * important limitation of custom element consturctors is that they cannot\n     * set attributes. A call to `reflectAttribute` during the constructor will\n     * be deferred until the element is connected to the document.\n     *\n     * @param {string} attribute - The name of the *attribute* (not property) to set.\n     * @param {object} value - The value to set. If null, the attribute will be removed.\n     */\n    reflectAttribute(attribute, value) {\n      return safeAttributes.setAttribute(this, attribute, value);\n    }\n\n    /**\n     * Set/unset the class with the indicated name.\n     *\n     * This method exists primarily to handle the case where an element wants to\n     * set a default property value that should be reflected as as class. An\n     * important limitation of custom element consturctors is that they cannot\n     * set attributes, including the `class` attribute. A call to\n     * `reflectClass` during the constructor will be deferred until the element\n     * is connected to the document.\n     *\n     * @param {string} className - The name of the class to set.\n     * @param {object} value - True to set the class, false to remove it.\n     */\n    reflectClass(className, value) {\n      return safeAttributes.toggleClass(this, className, value);\n    }\n\n  }\n\n  return AttributeMarshalling;\n};\n\n\n// Convert hyphenated foo-bar attribute name to camel case fooBar property name.\nfunction attributeToPropertyName(attributeName) {\n  let propertyName = attributeToPropertyNames[attributeName];\n  if (!propertyName) {\n    // Convert and memoize.\n    const hypenRegEx = /-([a-z])/g;\n    propertyName = attributeName.replace(hypenRegEx,\n        match => match[1].toUpperCase());\n    attributeToPropertyNames[attributeName] = propertyName;\n  }\n  return propertyName;\n}\n\nfunction attributesForClass(classFn) {\n\n  // We treat the element base classes as if they have no attributes, since we\n  // don't want to receive attributeChangedCallback for them.\n  if (classFn === HTMLElement || classFn === Object) {\n    return [];\n  }\n\n  // Get attributes for parent class.\n  const baseClass = Object.getPrototypeOf(classFn.prototype).constructor;\n  const baseAttributes = attributesForClass(baseClass);\n\n  // Get attributes for this class.\n  const propertyNames = Object.getOwnPropertyNames(classFn.prototype);\n  const setterNames = propertyNames.filter(propertyName =>\n    typeof Object.getOwnPropertyDescriptor(\n        classFn.prototype, propertyName).set === 'function');\n  const attributes = setterNames.map(setterName =>\n      propertyNameToAttribute(setterName));\n\n  // Merge.\n  const diff = attributes.filter(attribute =>\n      baseAttributes.indexOf(attribute) < 0);\n  return baseAttributes.concat(diff);\n}\n\n// Convert a camel case fooBar property name to a hyphenated foo-bar attribute.\nfunction propertyNameToAttribute(propertyName) {\n  let attribute = propertyNamesToAttributes[propertyName];\n  if (!attribute) {\n    // Convert and memoize.\n    const uppercaseRegEx = /([A-Z])/g;\n    attribute = propertyName.replace(uppercaseRegEx, '-$1').toLowerCase();\n  }\n  return attribute;\n}\n","/* Exported function extends a base class with Composable. */\nexport default (base) => {\n\n  /**\n   * Mixin to make a class more easily composable with other mixins.\n   *\n   * This mixin contributes a `compose` method that applies a set of mixin\n   * functions and returns the resulting new class. This sugar can make the\n   * application of many mixins at once easier to read.\n   */\n  class Composable extends base {\n\n    /**\n     * Apply a set of mixin functions or mixin objects to the present class and\n     * return the new class.\n     *\n     * Instead of writing:\n     *\n     *     let MyClass = Mixin1(Mixin2(Mixin3(Mixin4(Mixin5(BaseClass)))));\n     *\n     * You can write:\n     *\n     *     let MyClass = ComposableMixin(BaseClass).compose(\n     *       Mixin1,\n     *       Mixin2,\n     *       Mixin3,\n     *       Mixin4,\n     *       Mixin5\n     *     );\n     *\n     * This function can also take mixin objects. A mixin object is just a\n     * shorthand for a mixin function that creates a new subclass with the given\n     * members. The mixin object's members are *not* copied directly onto the\n     * prototype of the base class, as with traditional mixins.\n     *\n     * In addition to providing syntactic sugar, this mixin can be used to\n     * define a class in ES5, which lacks ES6's `class` keyword.\n     *\n     * @param {...mixins} mixins - A set of mixin functions or objects to apply.\n     */\n    static compose(...mixins) {\n      // We create a new subclass for each mixin in turn. The result becomes\n      // the base class extended by any subsequent mixins. It turns out that\n      // we can use Array.reduce() to concisely express this, using the current\n      // object as the seed for reduce().\n      return mixins.reduce(composeClass, this);\n    }\n\n  }\n\n  return Composable;\n};\n\n\n// Properties defined by Object that we don't want to mixin.\nconst NON_MIXABLE_OBJECT_PROPERTIES = [\n  'constructor'\n];\n\n/*\n * Apply the mixin to the given base class to return a new class.\n * The mixin can either be a function that returns the modified class, or a\n * plain object whose members will be copied to the new class' prototype.\n */\nfunction composeClass(base, mixin) {\n  if (typeof mixin === 'function') {\n    // Mixin function\n    return mixin(base);\n  } else {\n    // Mixin object\n    class Subclass extends base {}\n    copyOwnProperties(mixin, Subclass.prototype, NON_MIXABLE_OBJECT_PROPERTIES);\n    return Subclass;\n  }\n}\n\n\n/*\n * Copy the given properties/methods to the target.\n * Return the updated target.\n */\nfunction copyOwnProperties(source, target, ignorePropertyNames = []) {\n  Object.getOwnPropertyNames(source).forEach(name => {\n    if (ignorePropertyNames.indexOf(name) < 0) {\n      const descriptor = Object.getOwnPropertyDescriptor(source, name);\n      Object.defineProperty(target, name, descriptor);\n    }\n  });\n  return target;\n}\n","import createSymbol from './createSymbol';\nimport toggleClass from './toggleClass';\nimport symbols from './symbols';\n\n\n// Symbols for private data members on an element.\nconst itemsSymbol = createSymbol('items');\nconst itemInitializedSymbol = createSymbol('itemInitialized');\n\n\n/* Exported function extends a base class with ContentItems. */\nexport default (base) => {\n\n  /**\n   * Mixin which maps content semantics (elements) to list item semantics.\n   *\n   * Items differ from element contents in several ways:\n   *\n   * * They are often referenced via index.\n   * * They may have a selection state.\n   * * It's common to do work to initialize the appearance or state of a new\n   *   item.\n   * * Auxiliary invisible child elements are filtered out and not counted as\n   *   items. Auxiliary elements include link, script, style, and template\n   *   elements. This filtering ensures that those auxiliary elements can be\n   *   used in markup inside of a list without being treated as list items.\n   *\n   * This mixin expects a component to provide a `content` property returning a\n   * raw set of elements. You can provide that yourself, or use\n   * [DistributedChildrenContentMixin](DistributedChildrenContentMixin.md).\n   *\n   * The most commonly referenced property defined by this mixin is the `items`\n   * property. To avoid having to do work each time that property is requested,\n   * this mixin supports an optimized mode. If you invoke the `contentChanged`\n   * method when the set of items changes, the mixin concludes that you'll take\n   * care of notifying it of future changes, and turns on the optimization. With\n   * that on, the mixin saves a reference to the computed set of items, and will\n   * return that immediately on subsequent calls to the `items` property. If you\n   * use this mixin in conjunction with\n   * [DistributedChildrenContentMixin](DistributedChildrenContentMixin.md), the\n   * `contentChanged` method will be invoked for you when the element's children\n   * change, turning on the optimization automatically.\n   */\n  class ContentItems extends base {\n\n    contentChanged() {\n      if (super.contentChanged) { super.contentChanged(); }\n\n      // Since we got the contentChanged call, we'll assume we'll be notified if\n      // the set of items changes later. We turn on memoization of the items\n      // property by setting our internal property to null (instead of\n      // undefined).\n      this[itemsSymbol] = null;\n\n      this[symbols.itemsChanged]();\n    }\n\n    /**\n     * This method is invoked whenever a new item is added to the list.\n     *\n     * The default implementation of this method does nothing. You can override\n     * this to perform per-item initialization.\n     *\n     * @param {HTMLElement} item - The item that was added.\n     */\n    [symbols.itemAdded](item) {\n      if (super[symbols.itemAdded]) { super[symbols.itemAdded](item); }\n    }\n\n    /**\n     * The selection state for a single item has changed.\n     *\n     * Invoke this method to signal that the selected state of the indicated item\n     * has changed. By default, this applies a `selected` CSS class if the item\n     * is selected, and removed it if not selected.\n     *\n     * @param {HTMLElement} item - The item whose selection state has changed.\n     * @param {boolean} selected - True if the item is selected, false if not.\n     */\n    [symbols.itemSelected](item, selected) {\n      if (super[symbols.itemSelected]) { super[symbols.itemSelected](item, selected); }\n      toggleClass(item, 'selected', selected);\n    }\n\n    /**\n     * The current set of items in the list. See the top-level documentation for\n     * mixin for a description of how items differ from plain content.\n     *\n     * @type {HTMLElement[]}\n     */\n    get items() {\n      let items;\n      if (this[itemsSymbol] == null) {\n        items = filterAuxiliaryElements(this.content);\n        // Note: test for *equality* with null; don't treat undefined as a match.\n        if (this[itemsSymbol] === null) {\n          // Memoize the set of items.\n          this[itemsSymbol] = items;\n        }\n      } else {\n        // Return the memoized items.\n        items = this[itemsSymbol];\n      }\n      return items;\n    }\n\n    /**\n     * This method is invoked when the underlying contents change. It is also\n     * invoked on component initialization – since the items have \"changed\" from\n     * being nothing.\n     */\n    [symbols.itemsChanged]() {\n      if (super[symbols.itemsChanged]) { super[symbols.itemsChanged](); }\n\n      // Perform per-item initialization.\n      Array.prototype.forEach.call(this.items, item => {\n        if (!item[itemInitializedSymbol]) {\n          this[symbols.itemAdded](item);\n          item[itemInitializedSymbol] = true;\n        }\n      });\n\n      if (this[symbols.handlingUserInteraction]) {\n        this.dispatchEvent(new CustomEvent('items-changed'));\n      }\n    }\n\n    /**\n     * Fires when the items in the list change.\n     *\n     * @memberof ContentItems\n     * @event items-changed\n     */\n  }\n\n  return ContentItems;\n};\n\n\n// Return the given elements, filtering out auxiliary elements that aren't\n// typically visible. Items which are not elements are returned as is.\nfunction filterAuxiliaryElements(items) {\n  const auxiliaryTags = [\n    'link',\n    'script',\n    'style',\n    'template'\n  ];\n  return [].filter.call(items, function(item) {\n    return !item.localName || auxiliaryTags.indexOf(item.localName) < 0;\n  });\n}\n","import symbols from './symbols';\n\n\n/* Exported function extends a base class with DirectionSelection. */\nexport default (base) => {\n\n  /**\n   * Mixin which maps direction semantics (goLeft, goRight, etc.) to selection\n   * semantics (selectPrevious, selectNext, etc.).\n   *\n   * This mixin can be used in conjunction with\n   * [KeyboardDirectionMixin](KeyboardDirectionMixin.md) (which maps keyboard\n   * events to directions) and a mixin that handles selection like\n   * [SingleSelectionMixin](SingleSelectionMixin.md).\n   */\n  class DirectionSelection extends base {\n\n    [symbols.goDown]() {\n      if (super[symbols.goDown]) { super[symbols.goDown](); }\n      return this.selectNext();\n    }\n\n    [symbols.goEnd]() {\n      if (super[symbols.goEnd]) { super[symbols.goEnd](); }\n      return this.selectLast();\n    }\n\n    [symbols.goLeft]() {\n      if (super[symbols.goLeft]) { super[symbols.goLeft](); }\n      return this.selectPrevious();\n    }\n\n    [symbols.goRight]() {\n      if (super[symbols.goRight]) { super[symbols.goRight](); }\n      return this.selectNext();\n    }\n\n    [symbols.goStart]() {\n      if (super[symbols.goStart]) { super[symbols.goStart](); }\n      return this.selectFirst();\n    }\n\n    [symbols.goUp]() {\n      if (super[symbols.goUp]) { super[symbols.goUp](); }\n      return this.selectPrevious();\n    }\n\n    // Default implementation. This will typically be handled by other mixins.\n    get selectedFraction() {\n      return super.selectedFraction;\n    }\n    set selectedFraction(value) {\n      if ('selectedFraction' in base.prototype) { super.selectedFraction = value; }\n    }\n\n    // Default implementation. This will typically be handled by other mixins.\n    selectFirst() {\n      if (super.selectFirst) { return super.selectFirst(); }\n    }\n\n    // Default implementation. This will typically be handled by other mixins.\n    selectLast() {\n      if (super.selectLast) { return super.selectLast(); }\n    }\n\n    // Default implementation. This will typically be handled by other mixins.\n    selectNext() {\n      if (super.selectNext) { return super.selectNext(); }\n    }\n\n    // Default implementation. This will typically be handled by other mixins.\n    selectPrevious() {\n      if (super.selectPrevious) { return super.selectPrevious(); }\n    }\n\n    // Map drag travel fraction to selection fraction.\n    get travelFraction() {\n      return super.travelFraction;\n    }\n    set travelFraction(value) {\n      if ('travelFraction' in base.prototype) { super.travelFraction = value; }\n      this.selectedFraction = value;\n    }\n\n  }\n\n  return DirectionSelection;\n};\n","import microtask from './microtask';\nimport symbols from '../../basic-component-mixins/src/symbols';\n\n\n/* Exported function extends a base class with DistributedChildrenContent. */\nexport default (base) => {\n\n  /**\n   * Mixin which defines a component's content as its children, expanding any\n   * nodes distributed to the component's slots.\n   *\n   * This also provides notification of changes to a component's content. It\n   * will invoke a `contentChanged` method when the component is first\n   * instantiated, and whenever its distributed children change. This is an\n   * easy way to satisfy the Gold Standard checklist item for monitoring\n   * [Content Changes](https://github.com/webcomponents/gold-standard/wiki/Content-Changes).\n   *\n   * Example:\n   *\n   * ```\n   * let base = DistributedChildrenContentMixin(DistributedChildrenMixin(HTMLElement));\n   * class CountingElement extends base {\n   *\n   *   constructor() {\n   *     super();\n   *     let root = this.attachShadow({ mode: 'open' });\n   *     root.innerHTML = `<slot></slot>`;\n   *   }\n   *\n   *   contentChanged() {\n   *     // Count the component's children, both initially and when changed.\n   *     this.count = this.distributedChildren.length;\n   *   }\n   *\n   * }\n   * ```\n   *\n   * Note that content change detection depends upon the element having at least\n   * one `slot` element in its shadow subtree.\n   *\n   * This mixin is intended for use with the\n   * [DistributedChildrenMixin](DistributedChildrenMixin.md). See that mixin for\n   * a discussion of how that works. This DistributedChildrenContentMixin\n   * provides an easy way of defining the \"content\" of a component as the\n   * component's distributed children. That in turn lets mixins like\n   * [ContentItemsMixin](ContentItemsMixin.md) manipulate the children as list\n   * items.\n   */\n  class DistributedChildrenContent extends base {\n\n    constructor() {\n      super();\n\n      if (this.shadowRoot) {\n        // Listen to changes on all slots.\n        const slots = this.shadowRoot.querySelectorAll('slot');\n        slots.forEach(slot => slot.addEventListener('slotchange', event => {\n          this.contentChanged();\n        }));\n      }\n\n      // Make an initial call to contentChanged() so that the component can do\n      // initialization that it normally does when content changes.\n      //\n      // This will invoke contentChanged() handlers in other mixins. In order\n      // that those mixins have a chance to complete their own initialization,\n      // we add the contentChanged() call to the microtask queue.\n      microtask(() => this.contentChanged());\n    }\n\n    /**\n     * Invoked when the contents of the component (including distributed\n     * children) have changed.\n     *\n     * This method is also invoked when a component is first instantiated; the\n     * contents have essentially \"changed\" from being nothing. This allows the\n     * component to perform initial processing of its children.\n     */\n    contentChanged() {\n      if (super.contentChanged) { super.contentChanged(); }\n      if (this[symbols.handlingUserInteraction]) {\n        const event = new CustomEvent('content-changed');\n        this.dispatchEvent(event);\n      }\n    }\n\n    /**\n     * The content of this component, defined to be the flattened array of\n     * children distributed to the component.\n     *\n     * @type {HTMLElement[]}\n     */\n    get content() {\n      const distributedChildren = this.distributedChildren;\n      if (typeof distributedChildren === 'undefined') {\n        console.warn(`DistributedChildrenContentMixin expects the component to define a \"distributedChildren\" property.`);\n      }\n      return distributedChildren;\n    }\n    set content(value) {\n      if ('content' in base.prototype) { super.content = value; }\n      // TODO: Set the children to the given value (which should be an array of\n      // elements)?\n    }\n\n    /**\n     * This event is raised when the component's contents (including distributed\n     * children) have changed.\n     *\n     * @memberof DistributedChildrenContent\n     * @event content-changed\n     */\n  }\n\n  return DistributedChildrenContent;\n};\n","/* Exported function extends a base class with DistributedChildren. */\nexport default (base) => {\n\n  /**\n   * Mixin which defines helpers for accessing a component's distributed\n   * children as a flattened array or string.\n   *\n   * The standard DOM API provides several ways of accessing child content:\n   * `children`, `childNodes`, and `textContent`. None of these functions are\n   * Shadow DOM aware. This mixin defines variations of those functions that\n   * *are* Shadow DOM aware.\n   *\n   * Example: you create a component `<count-children>` that displays a number\n   * equal to the number of children placed inside that component. If someone\n   * instantiates your component like:\n   *\n   *     <count-children>\n   *       <div></div>\n   *       <div></div>\n   *       <div></div>\n   *     </count-children>\n   *\n   * Then the component should show \"3\", because there are three children. To\n   * calculate the number of children, the component can just calculate\n   * `this.children.length`. However, suppose someone instantiates your\n   * component inside one of their own components, and puts a `<slot>` element\n   * inside your component:\n   *\n   *     <count-children>\n   *       <slot></slot>\n   *     </count-children>\n   *\n   * If your component only looks at `this.children`, it will always see exactly\n   * one child — the `<slot>` element. But the user looking at the page will\n   * *see* any nodes distributed to that slot. To match what the user sees, your\n   * component should expand any `<slot>` elements it contains.\n   *\n   * That is the problem this mixin solves. After applying this mixin, your\n   * component code has access to `this.distributedChildren`, whose `length`\n   * will return the total number of all children distributed to your component\n   * in the composed tree.\n   *\n   * Note: The latest Custom Elements API design calls for a new function,\n   * `getAssignedNodes` that takes an optional `deep` parameter, that will solve\n   * this problem at the API level.\n   */\n  class DistributedChildren extends base {\n\n    /**\n     * An in-order collection of distributed children, expanding any slot\n     * elements. Like the standard children property, this skips text nodes.\n     *\n     * @type {HTMLElement[]}\n     */\n    get distributedChildren() {\n      return expandContentElements(this.children, false);\n    }\n\n    /**\n     * An in-order collection of distributed child nodes, expanding any slot\n     * elements. Like the standard childNodes property, this includes text\n     * nodes.\n     *\n     * @type {Node[]}\n     */\n    get distributedChildNodes() {\n      return expandContentElements(this.childNodes, true);\n    }\n\n    /**\n     * The concatenated text content of all distributed child nodes, expanding\n     * any slot elements.\n     *\n     * @type {string}\n     */\n    get distributedTextContent() {\n      const strings = this.distributedChildNodes.map(function(child) {\n        return child.textContent;\n      });\n      return strings.join('');\n    }\n\n  }\n\n  return DistributedChildren;\n};\n\n\n/*\n * Given a array of nodes, return a new array with any content elements expanded\n * to the nodes distributed to that content element. This rule is applied\n * recursively.\n *\n * If includeTextNodes is true, text nodes will be included, as in the\n * standard childNodes property; by default, this skips text nodes, like the\n * standard children property.\n */\nfunction expandContentElements(nodes, includeTextNodes) {\n  const expanded = Array.prototype.map.call(nodes, node => {\n    // We want to see if the node is an instanceof HTMLSlotELement, but\n    // that class won't exist if the browser that doesn't support native\n    // Shadow DOM and if the Shadow DOM polyfill hasn't been loaded. Instead,\n    // we do a simplistic check to see if the tag name is \"slot\".\n    const isSlot = typeof HTMLSlotElement !== 'undefined' ?\n      node instanceof HTMLSlotElement :\n      node.localName === 'slot';\n    if (isSlot) {\n      // Use the nodes assigned to this node instead.\n      const assignedNodes = node.assignedNodes({ flatten: true });\n      return assignedNodes ?\n        expandContentElements(assignedNodes, includeTextNodes) :\n        [];\n    } else if (node instanceof HTMLElement) {\n      // Plain element; use as is.\n      return [node];\n    } else if (node instanceof Text && includeTextNodes) {\n      // Text node.\n      return [node];\n    } else {\n      // Comment, processing instruction, etc.; skip.\n      return [];\n    }\n  });\n  const flattened = [].concat(...expanded);\n  return flattened;\n}\n","import createSymbol from './createSymbol';\nimport symbols from '../../basic-component-mixins/src/symbols';\n\n\n// Symbols for private data members on an element.\nconst selectedFractionSymbol = createSymbol('selectedFraction');\n\n\n/* Exported function extends a base class with FractionalSelection. */\nexport default function mixin(base) {\n\n  /**\n   * Adds support for fractional selection: treating a selection as a real\n   * number that combines an integer portion (an index into a list), and a\n   * fraction (indicating how far of the way we are to the next or previous\n   * item).\n   *\n   * This is useful in components that support incremental operations during\n   * dragging and swiping. Example: a carousel component has several items, and the\n   * currently selected item is item 3. The user begins swiping to the left,\n   * moving towards selecting item 4. Halfway through this operation, the\n   * fractional selection value is 3.5.\n   *\n   * This value permits communication between mixins like\n   * [SwipeDirectionMixin](./SwipeDirectionMixin.md) and\n   * [TrackpadDirectionMixin](./TrackpadDirectionMixin.md), which generate\n   * fractional selection values, and mixins like\n   * [SelectionAnimationMixin](./SelectionAnimationMixin.md), which can render\n   * selection at a fractional value.\n   */\n  class FractionalSelection extends base {\n\n    connectedCallback() {\n      if (super.connectedCallback) { super.connectedCallback(); }\n      this.selectedFraction = 0;\n    }\n\n    /**\n     * A fractional value indicating how far the user has currently advanced to\n     * the next/previous item. E.g., a `selectedFraction` of 3.5 indicates the\n     * user is halfway between items 3 and 4.\n     *\n     * @type {number}\n     */\n    get selectedFraction() {\n      return this[selectedFractionSymbol];\n    }\n    set selectedFraction(value) {\n      this[selectedFractionSymbol] = value;\n      if ('selectedFraction' in base.prototype) { super.selectedFraction = value; }\n      if (this[symbols.handlingUserInteraction]) {\n        const event = new CustomEvent('selected-fraction-changed');\n        this.dispatchEvent(event);\n      }\n    }\n\n  }\n\n  return FractionalSelection;\n}\n\n\nmixin.helpers = {\n\n  /*\n   * Dampen a selection that goes past the beginning or end of a list. This is\n   * generally used to produce a visual effect of tension as the user tries to\n   * go further in a direction that has no more items.\n   *\n   * Example: suppose `itemCount` is 5, indicating a list of 5 items. The index of\n   * the last item is 4. If the `selection` parameter is 4.5, the user is trying\n   * to go past this last item. When a damping function is applied, the resulting\n   * value will be less than 4.5 (the actual value will be 4.25). When this\n   * selection state is rendered, the user will see that, each unit distance the\n   * drag travels has less and less visible effect. This is perceived as tension.\n   *\n   * @param {number} selection - A real number indicating a selection position\n   * @param {number} itemCount - An integer for the number of items in the list\n   * @returns {number} A real number representing the damped selection value.\n   */\n  dampedSelection(selection, itemCount) {\n    const bound = itemCount - 1;\n    let damped;\n    if (selection < 0) {\n      // Trying to go past beginning of list. Apply tension from the left edge.\n      damped = -mixin.helpers.damping(-selection);\n    } else if (selection >= bound) {\n      // Trying to go past end of list. Apply tension from the right edge.\n      damped = bound + mixin.helpers.damping(selection - bound);\n    } else {\n      // No damping required.\n      damped = selection;\n    }\n    return damped;\n  },\n\n  /*\n   * Calculate damping as a function of the distance past the minimum/maximum\n   * values.\n   *\n   * We want to asymptotically approach an absolute minimum of 1 unit\n   * below/above the actual minimum/maximum. This requires calculating a\n   * hyperbolic function.\n   *\n   * See http://www.wolframalpha.com/input/?i=y+%3D+-1%2F%28x%2B1%29+%2B+1\n   * for the one we use. The only portion of that function we care about is when\n   * x is zero or greater. An important consideration is that the curve be\n   * tangent to the diagonal line x=y at (0, 0). This ensures smooth continuity\n   * with the normal drag behavior, in which the visible sliding is linear with\n   * the distance the touchpoint has been dragged.\n   */\n  damping(x) {\n    const y = (-1 / (x + 1)) + 1;\n    return y;\n  },\n\n  /*\n   * Return the current fractional selection value for the given element.\n   *\n   * This simply adds the element's `selectedIndex` and `selectedFraction`\n   * properties.\n   *\n   * @param {HTMLElement} element - An element that supports selection\n   */\n  elementSelection(element) {\n    const selectedIndex = element.selectedIndex;\n    if (selectedIndex < 0) {\n      // No selection\n      return;\n    }\n    const selectedFraction = element.selectedFraction || 0;\n    return selectedIndex + selectedFraction;\n  },\n\n  /*\n   * Breaks a fractional selection into its integer and fractional parts.\n   *\n   * Example: if passed 3.5, this returns { index: 3, fraction: 5 }.\n   *\n   * @param {number} selection – A real number representing a selection point\n   * @returns {object} - An object with an `index` property holding the\n   * selection's integer component, and a `fraction` property holding the\n   * selection's fractional component.\n   */\n  selectionParts(selection) {\n    // Stupid IE doesn't have Math.trunc.\n    // const index = Math.trunc(selection);\n    const index = selection < 0 ? Math.ceil(selection) : Math.floor(selection);\n    const fraction = selection - index;\n    return { index, fraction };\n  },\n\n  /*\n   * Returns a fractional selection point after accounting for wrapping, ensuring\n   * that the integer portion of the selection stays between 0 and `itemCount`-1.\n   * That is, the integer portion will always be a valid index into the list.\n   *\n   * Example of wrapping past the end of the list: if `selection` is 5.5 and\n   * `itemCount` is 5, this returns 0.5. Example of wrapping past the beginning of\n   * the list: if `selection` is 0.5 and `itemCount` is 5, this returns 4.5.\n   *\n   * @param {number} selection - A real number representing a selection point\n   * @param {number} itemCount - The number of items in the list\n   * @returns {number} - The result of wrapping the selection point\n   */\n  wrappedSelection(selection, itemCount) {\n    // Handles possibility of negative mod.\n    // See http://stackoverflow.com/a/18618250/76472\n    return ((selection % itemCount) + itemCount) % itemCount;\n  },\n\n  /*\n   * Return the parts of a selection, first wrapping if necessary.\n   *\n   * @param {number} selection – A real number representing a selection point\n   * @param {number} itemCount - The number of items in the list\n   * @param {boolean} wrap – True if the selection should wrap to stay within the\n   * list\n   * @returns {object} – The parts of the selection, using the same format as\n   * `selectionParts`.\n   */\n  wrappedSelectionParts(selection, itemCount, wrap) {\n    if (wrap) {\n      selection = mixin.helpers.wrappedSelection(selection, itemCount);\n    }\n    return mixin.helpers.selectionParts(selection);\n  }\n\n};\n","import DirectionSelectionMixin from '../../basic-component-mixins/src/DirectionSelectionMixin';\nimport KeyboardDirectionMixin from '../../basic-component-mixins/src/KeyboardDirectionMixin';\nimport KeyboardMixin from '../../basic-component-mixins/src/KeyboardMixin';\nimport SwipeDirectionMixin from '../../basic-component-mixins/src/SwipeDirectionMixin';\nimport symbols from '../../basic-component-mixins/src/symbols';\nimport TrackpadDirectionMixin from '../../basic-component-mixins/src/TrackpadDirectionMixin';\n\n\nexport default (base) => {\n\n  const mixins = [\n    DirectionSelectionMixin,\n    KeyboardMixin,\n    KeyboardDirectionMixin,\n    SwipeDirectionMixin,\n    TrackpadDirectionMixin\n  ];\n\n  // Don't assume base class uses ComposableMixin. Do composition by hand.\n  const baseWithMixins = mixins.reduce((c, mixin) => mixin(c), base);\n\n  /**\n   * @mixes KeyboardMixin\n   * @mixes KeyboardDirectionMixin\n   * @mixes SwipeDirectionMixin\n   * @mixes TrackpadDirectionMixin\n   */\n  class HorizontalNavigation extends baseWithMixins {\n\n    get [symbols.defaults]() {\n      const defaults = super[symbols.defaults] || {};\n      defaults.navigationAxis = 'horizontal';\n      defaults.selectionAnimationEffect = 'slideWithGap';\n      // defaults.selectionRequired = true;\n      return defaults;\n    }\n\n  }\n\n  return HorizontalNavigation;\n\n};\n","import createSymbol from './createSymbol';\nimport symbols from './symbols';\n\n\n// Symbols for private data members on an element.\nconst navigationAxisSymbol = createSymbol('navigationAxis');\n\n\n/* Exported function extends a base class with KeyboardDirection. */\nexport default (base) => {\n\n  /**\n   * Mixin which maps direction keys (Left, Right, etc.) to direction semantics\n   * (go left, go right, etc.).\n   *\n   * This mixin expects the component to invoke a `keydown` method when a key is\n   * pressed. You can use [KeyboardMixin](KeyboardMixin.md) for that\n   * purpose, or wire up your own keyboard handling and call `keydown` yourself.\n   *\n   * This mixin calls methods such as `goLeft` and `goRight`. You can define\n   * what that means by implementing those methods yourself. If you want to use\n   * direction keys to navigate a selection, use this mixin with\n   * [DirectionSelectionMixin](DirectionSelectionMixin.md).\n   */\n  class KeyboardDirection extends base {\n\n    constructor() {\n      super();\n      // Set defaults.\n      if (typeof this.navigationAxis === 'undefined') {\n        this.navigationAxis = this[symbols.defaults].navigationAxis;\n      }\n    }\n\n    get [symbols.defaults]() {\n      const defaults = super[symbols.defaults] || {};\n      defaults.navigationAxis = 'both';\n      return defaults;\n    }\n\n    /**\n     * Invoked when the user wants to go/navigate down.\n     * The default implementation of this method does nothing.\n     */\n    [symbols.goDown]() {\n      if (super[symbols.goDown]) { return super[symbols.goDown](); }\n    }\n\n    /**\n     * Invoked when the user wants to go/navigate to the end (e.g., of a list).\n     * The default implementation of this method does nothing.\n     */\n    [symbols.goEnd]() {\n      if (super[symbols.goEnd]) { return super[symbols.goEnd](); }\n    }\n\n    /**\n     * Invoked when the user wants to go/navigate left.\n     * The default implementation of this method does nothing.\n     */\n    [symbols.goLeft]() {\n      if (super[symbols.goLeft]) { return super[symbols.goLeft](); }\n    }\n\n    /**\n     * Invoked when the user wants to go/navigate right.\n     * The default implementation of this method does nothing.\n     */\n    [symbols.goRight]() {\n      if (super[symbols.goRight]) { return super[symbols.goRight](); }\n    }\n\n    /**\n     * Invoked when the user wants to go/navigate to the start (e.g., of a\n     * list). The default implementation of this method does nothing.\n     */\n    [symbols.goStart]() {\n      if (super[symbols.goStart]) { return super[symbols.goStart](); }\n    }\n\n    /**\n     * Invoked when the user wants to go/navigate up.\n     * The default implementation of this method does nothing.\n     */\n    [symbols.goUp]() {\n      if (super[symbols.goUp]) { return super[symbols.goUp](); }\n    }\n\n    /**\n     * Indicates the direction of permitted navigation with the keyboard.\n     *\n     * Accepted values are \"horizontal\", \"vertical\", or \"both\" (the default).\n     * If this property is \"horizontal\", the Up Arrow and Down Arrow keys will\n     * be ignored. Conversely, if this is \"vertical\", the Left Arrow and Right\n     * Arrow keys will be ignored.\n     *\n     * @type {string}\n     */\n    get navigationAxis() {\n      return this[navigationAxisSymbol];\n    }\n    set navigationAxis(value) {\n      this[navigationAxisSymbol] = value;\n      if ('navigationAxis' in base.prototype) { super.navigationAxis = value; }\n    }\n\n    [symbols.keydown](event) {\n      let handled;\n\n      const axis = this.navigationAxis;\n      const horizontal = (axis === 'horizontal' || axis === 'both');\n      const vertical = (axis === 'vertical' || axis === 'both');\n\n      // Ignore Left/Right keys when metaKey or altKey modifier is also pressed,\n      // as the user may be trying to navigate back or forward in the browser.\n      switch (event.keyCode) {\n        case 35: // End\n          handled = this[symbols.goEnd]();\n          break;\n        case 36: // Home\n          handled = this[symbols.goStart]();\n          break;\n        case 37: // Left\n          if (horizontal && !event.metaKey && !event.altKey) {\n            handled = this[symbols.goLeft]();\n          }\n          break;\n        case 38: // Up\n          if (vertical) {\n            handled = event.altKey ? this[symbols.goStart]() : this[symbols.goUp]();\n          }\n          break;\n        case 39: // Right\n          if (horizontal && !event.metaKey && !event.altKey) {\n            handled = this[symbols.goRight]();\n          }\n          break;\n        case 40: // Down\n          if (vertical) {\n            handled = event.altKey ? this[symbols.goEnd]() : this[symbols.goDown]();\n          }\n          break;\n      }\n      // Prefer mixin result if it's defined, otherwise use base result.\n      return handled || (super[symbols.keydown] && super[symbols.keydown](event));\n    }\n\n  }\n\n  return KeyboardDirection;\n};\n","import symbols from './symbols';\n\n\n/* Exported function extends a base class with Keyboard. */\nexport default (base) => {\n\n  /**\n   * Mixin which manages the keydown handling for a component.\n   *\n   * This mixin handles several keyboard-related features.\n   *\n   * First, it wires up a single keydown event handler that can be shared by\n   * multiple mixins on a component. The event handler will invoke a `keydown`\n   * method with the event object, and any mixin along the prototype chain that\n   * wants to handle that method can do so.\n   *\n   * If a mixin wants to indicate that keyboard event has been handled, and that\n   * other mixins should *not* handle it, the mixin's `keydown` handler should\n   * return a value of true. The convention that seems to work well is that a\n   * mixin should see if it wants to handle the event and, if not, then ask the\n   * superclass to see if it wants to handle the event. This has the effect of\n   * giving the mixin that was applied last the first chance at handling a\n   * keyboard event.\n   *\n   * Example:\n   *\n   *     [symbols.keydown](event) {\n   *       let handled;\n   *       switch (event.keyCode) {\n   *         // Handle the keys you want, setting handled = true if appropriate.\n   *       }\n   *       // Prefer mixin result if it's defined, otherwise use base result.\n   *       return handled || (super[symbols.keydown] && super[symbols.keydown](event));\n   *     }\n   *\n   * A second feature provided by this mixin is that it implicitly makes the\n   * component a tab stop if it isn't already, by setting `tabIndex` to 0. This\n   * has the effect of adding the component to the tab order in document order.\n   */\n  class Keyboard extends base {\n\n    constructor() {\n      super();\n      this.addEventListener('keydown', event => {\n        this[symbols.handlingUserInteraction] = true;\n        const handled = this[symbols.keydown](event);\n        if (handled) {\n          event.preventDefault();\n          event.stopPropagation();\n        }\n        this[symbols.handlingUserInteraction] = false;\n      });\n    }\n\n    connectedCallback() {\n      if (super.connectedCallback) { super.connectedCallback(); }\n      if (this.getAttribute('tabindex') == null && this[symbols.defaults].tabindex !== null) {\n        this.setAttribute('tabindex', this[symbols.defaults].tabindex);\n      }\n    }\n\n    get [symbols.defaults]() {\n      const defaults = super[symbols.defaults] || {};\n      // The default tab index is 0 (document order).\n      defaults.tabindex = 0;\n      return defaults;\n    }\n\n    /**\n     * Handle the indicated keyboard event.\n     *\n     * The default implementation of this method does nothing. This will\n     * typically be handled by other mixins.\n     *\n     * @param {KeyboardEvent} event - the keyboard event\n     * @return {boolean} true if the event was handled\n     */\n    [symbols.keydown](event) {\n      if (super[symbols.keydown]) { return super[symbols.keydown](event); }\n    }\n\n  }\n\n  return Keyboard;\n};\n","import symbols from './symbols';\n\n\n// Used to assign unique IDs to item elements without IDs.\nlet idCount = 0;\n\n\n/* Exported function extends a base class with SelectionAriaActive. */\nexport default (base) => {\n\n  /**\n   * Mixin which treats the selected item in a list as the active item in ARIA\n   * accessibility terms.\n   *\n   * Handling ARIA selection state properly is actually quite complex:\n   *\n   * * The items in the list need to be indicated as possible items via an ARIA\n   *   `role` attribute value such as \"option\".\n   * * The selected item need to be marked as selected by setting the item's\n   *   `aria-selected` attribute to true *and* the other items need be marked as\n   *   *not* selected by setting `aria-selected` to false.\n   * * The outermost element with the keyboard focus needs to have attributes\n   *   set on it so that the selection is knowable at the list level via the\n   *   `aria-activedescendant` attribute.\n   * * Use of `aria-activedescendant` in turn requires that all items in the\n   *   list have ID attributes assigned to them.\n   *\n   * This mixin tries to address all of the above requirements. To that end,\n   * this mixin will assign generated IDs to any item that doesn't already have\n   * an ID.\n   *\n   * ARIA relies on elements to provide `role` attributes. This mixin will apply\n   * a default role of \"listbox\" on the outer list if it doesn't already have an\n   * explicit role. Similarly, this mixin will apply a default role of \"option\"\n   * to any list item that does not already have a role specified.\n   *\n   * This mixin expects a set of members that manage the state of the selection:\n   * `[symbols.itemSelected]`, `itemAdded`, and `selectedIndex`. You can\n   * supply these yourself, or do so via\n   * [SingleSelectionMixin](SingleSelectionMixin.md).\n   */\n  class SelectionAriaActive extends base {\n\n    connectedCallback() {\n      if (super.connectedCallback) { super.connectedCallback(); }\n      // Set default ARIA role.\n      if (this.getAttribute('role') == null && this[symbols.defaults].role) {\n        this.setAttribute('role', this[symbols.defaults].role);\n      }\n    }\n\n    get [symbols.defaults]() {\n      const defaults = super[symbols.defaults] || {};\n      defaults.role = 'listbox';\n      return defaults;\n    }\n\n    [symbols.itemAdded](item) {\n      if (super[symbols.itemAdded]) { super[symbols.itemAdded](item); }\n\n      if (!item.getAttribute('role')) {\n        // Assign a default ARIA role.\n        item.setAttribute('role', 'option');\n      }\n\n      // Ensure each item has an ID so we can set aria-activedescendant on the\n      // overall list whenever the selection changes.\n      //\n      // The ID will take the form of a base ID plus a unique integer. The base\n      // ID will be incorporate the component's own ID. E.g., if a component has\n      // ID \"foo\", then its items will have IDs that look like \"_fooOption1\". If\n      // the compnent has no ID itself, its items will get IDs that look like\n      // \"_option1\". Item IDs are prefixed with an underscore to differentiate\n      // them from manually-assigned IDs, and to minimize the potential for ID\n      // conflicts.\n      if (!item.id) {\n        const baseId = this.id ?\n            \"_\" + this.id + \"Option\" :\n            \"_option\";\n        item.id = baseId + idCount++;\n      }\n    }\n\n    [symbols.itemSelected](item, selected) {\n      if (super[symbols.itemSelected]) { super[symbols.itemSelected](item, selected); }\n      item.setAttribute('aria-selected', selected);\n      const itemId = item.id;\n      if (itemId && selected) {\n        this.setAttribute('aria-activedescendant', itemId);\n      }\n    }\n\n    get selectedItem() {\n      return super.selectedItem;\n    }\n    set selectedItem(item) {\n      if ('selectedItem' in base.prototype) { super.selectedItem = item; }\n      if (item == null) {\n        // Selection was removed.\n        this.removeAttribute('aria-activedescendant');\n      }\n    }\n\n  }\n\n  return SelectionAriaActive;\n};\n","/* Exported function extends a base class with ShadowElementReferences. */\nexport default (base) => {\n\n  /**\n   * Mixin to create references to elements in a component's Shadow DOM subtree.\n   *\n   * This adds a member on the component called `this.$` that can be used to\n   * reference shadow elements with IDs. E.g., if component's shadow contains an\n   * element `<button id=\"foo\">`, then this mixin will create a member\n   * `this.$.foo` that points to that button.\n   *\n   * Such references simplify a component's access to its own elements. In\n   * exchange, this mixin trades off a one-time cost of querying all elements in\n   * the shadow tree instead of paying an ongoing cost to query for an element\n   * each time the component wants to inspect or manipulate it.\n   *\n   * This mixin expects the component to define a Shadow DOM subtree. You can\n   * create that tree yourself, or make use of\n   * [ShadowTemplateMixin](ShadowTemplateMixin.md).\n   *\n   * This mixin is inspired by Polymer's [automatic\n   * node finding](https://www.polymer-project.org/1.0/docs/devguide/local-dom.html#node-finding)\n   * feature.\n   */\n  class ShadowElementReferences extends base {\n\n    constructor() {\n      super();\n      if (this.shadowRoot) {\n        // Look for elements in the shadow subtree that have id attributes.\n        // An alternatively implementation of this mixin would be to just define\n        // a this.$ getter that lazily does this search the first time someone\n        // tries to access this.$. That might introduce some complexity – if the\n        // the tree changed after it was first populated, the result of\n        // searching for a node might be somewhat unpredictable.\n        this.$ = {};\n        const nodesWithIds = this.shadowRoot.querySelectorAll('[id]');\n        [].forEach.call(nodesWithIds, node => {\n          const id = node.getAttribute('id');\n          this.$[id] = node;\n        });\n      }\n    }\n\n    /**\n     * The collection of references to the elements with IDs in a component's\n     * Shadow DOM subtree.\n     *\n     * @type {object}\n     * @member $\n     */\n  }\n\n  return ShadowElementReferences;\n};\n","import symbols from '../src/symbols';\n\n\n/* Exported function extends a base class with ShadowTemplate. */\nexport default (base) => {\n\n  /**\n   * Mixin for stamping a template into a Shadow DOM subtree upon component\n   * instantiation.\n   *\n   * To use this mixin, define a `template` property as a string or HTML\n   * `<template>` element:\n   *\n   *     class MyElement extends ShadowTemplateMixin(HTMLElement) {\n   *       get [symbols.template]() {\n   *         return `Hello, <em>world</em>.`;\n   *       }\n   *     }\n   *\n   * When your component class is instantiated, a shadow root will be created on\n   * the instance, and the contents of the template will be cloned into the\n   * shadow root. If your component does not define a `template` property, this\n   * mixin has no effect.\n   *\n   * For the time being, this extension retains support for Shadow DOM v0. That\n   * will eventually be deprecated as browsers (and the Shadow DOM polyfill)\n   * implement Shadow DOM v1.\n   */\n  class ShadowTemplate extends base {\n\n    /*\n     * If the component defines a template, a shadow root will be created on the\n     * component instance, and the template stamped into it.\n     */\n    constructor() {\n      super();\n      let template = this[symbols.template];\n      // TODO: Save the processed template with the component's class prototype\n      // so it doesn't need to be processed with every instantiation.\n      if (template) {\n\n        if (typeof template === 'string') {\n          // Upgrade plain string to real template.\n          template = createTemplateWithInnerHTML(template);\n        }\n\n        if (window.ShadowDOMPolyfill) {\n          shimTemplateStyles(template, this.localName);\n        }\n\n        const root = this.attachShadow({ mode: 'open' });\n        const clone = document.importNode(template.content, true);\n        root.appendChild(clone);\n      }\n    }\n\n  }\n\n  return ShadowTemplate;\n};\n\n\n// Convert a plain string of HTML into a real template element.\nfunction createTemplateWithInnerHTML(innerHTML) {\n  const template = document.createElement('template');\n  // REVIEW: Is there an easier way to do this?\n  // We'd like to just set innerHTML on the template content, but since it's\n  // a DocumentFragment, that doesn't work.\n  const div = document.createElement('div');\n  div.innerHTML = innerHTML;\n  while (div.childNodes.length > 0) {\n    template.content.appendChild(div.childNodes[0]);\n  }\n  return template;\n}\n\n// Invoke basic style shimming with ShadowCSS.\nfunction shimTemplateStyles(template, tag) {\n  window.WebComponents.ShadowCSS.shimStyling(template.content, tag);\n}\n","import createSymbol from './createSymbol';\nimport symbols from './symbols';\n\n\n// Symbols for private data members on an element.\nconst canSelectNextSymbol = createSymbol('canSelectNext');\nconst canSelectPreviousSymbol = createSymbol('canSelectPrevious');\nconst selectionRequiredSymbol = createSymbol('selectionRequired');\nconst selectionWrapsSymbol = createSymbol('selectionWraps');\n\n// We want to expose both selectedIndex and selectedItem as independent\n// properties but keep them in sync. This allows a component user to reference\n// the selection by whatever means is most natural for their situation.\n//\n// To efficiently keep these properties in sync, we track \"external\" and\n// \"internal\" references for each property:\n//\n// The external index or item is the one we report to the outside world when\n// asked for selection.  When handling a change to index or item, we update the\n// external reference as soon as possible, so that if anyone immediately asks\n// for the current selection, they will receive a stable answer.\n//\n// The internal index or item tracks whichever index or item last received the\n// full set of processing. Processing includes raising a change event for the\n// new value. Once we've begun that processing, we store the new value as the\n// internal value to indicate we've handled it.\n//\nconst externalSelectedIndexSymbol = createSymbol('externalSelectedIndex');\nconst externalSelectedItemSymbol = createSymbol('externalSelectedItem');\nconst internalSelectedIndexSymbol = createSymbol('internalSelectedIndex');\nconst internalSelectedItemSymbol = createSymbol('internalSelectedItem');\n\n\n/* Exported function extends a base class with SingleSelection. */\nexport default (base) => {\n\n  /**\n   * Mixin which manages single-selection semantics for items in a list.\n   *\n   * This mixin expects a component to provide an `items` Array or NodeList of\n   * all elements in the list. A standard way to do that with is the\n   * [ContentItemsMixin](ContentItemsMixin.md), which takes a component's\n   * content (typically its distributed children) as the set of list items; see\n   * that mixin for details.\n   *\n   * This mixin tracks a single selected item in the list, and provides means to\n   * get and set that state by item position (`selectedIndex`) or item identity\n   * (`selectedItem`). The selection can be moved in the list via the methods\n   * `selectFirst`, `selectLast`, `selectNext`, and `selectPrevious`.\n   *\n   * This mixin does not produce any user-visible effects to represent\n   * selection. Other mixins, such as\n   * [SelectionAriaActiveMixin](SelectionAriaActiveMixin.md),\n   * [SelectionHighlightMixin](SelectionHighlightMixin.md) and\n   * [SelectionInViewMixin](SelectionInViewMixin.md), modify the selected item\n   * in common ways to let the user know a given item is selected or not\n   * selected.\n   */\n  class SingleSelection extends base {\n\n    constructor() {\n      super();\n      // Set defaults.\n      if (typeof this.selectionRequired === 'undefined') {\n        this.selectionRequired = this[symbols.defaults].selectionRequired;\n      }\n      if (typeof this.selectionWraps === 'undefined') {\n        this.selectionWraps = this[symbols.defaults].selectionWraps;\n      }\n    }\n\n    /**\n     * True if the selection can be moved to the next item, false if not (the\n     * selected item is the last item in the list).\n     *\n     * @type {boolean}\n     */\n    get canSelectNext() {\n      return this[canSelectNextSymbol];\n    }\n    set canSelectNext(canSelectNext) {\n      const previousCanSelectNext = this[canSelectNextSymbol];\n      this[canSelectNextSymbol] = canSelectNext;\n      if ('canSelectNext' in base.prototype) { super.canSelectNext = canSelectNext; }\n      if (canSelectNext !== previousCanSelectNext && this[symbols.handlingUserInteraction]) {\n        this.dispatchEvent(new CustomEvent('can-select-next-changed'));\n      }\n    }\n\n    /**\n     * True if the selection can be moved to the previous item, false if not\n     * (the selected item is the first one in the list).\n     *\n     * @type {boolean}\n     */\n    get canSelectPrevious() {\n      return this[canSelectPreviousSymbol];\n    }\n    set canSelectPrevious(canSelectPrevious) {\n      const previousCanSelectPrevious = this[canSelectPreviousSymbol];\n      this[canSelectPreviousSymbol] = canSelectPrevious;\n      if ('canSelectPrevious' in base.prototype) { super.canSelectPrevious = canSelectPrevious; }\n      if (canSelectPrevious !== previousCanSelectPrevious && this[symbols.handlingUserInteraction]) {\n        this.dispatchEvent(new CustomEvent('can-select-previous-changed'));\n      }\n    }\n\n    get [symbols.defaults]() {\n      const defaults = super[symbols.defaults] || {};\n      defaults.selectionRequired = false;\n      defaults.selectionWraps = false;\n      return defaults;\n    }\n\n    /**\n     * Handle a new item being added to the list.\n     *\n     * The default implementation of this method simply sets the item's\n     * selection state to false.\n     *\n     * @param {HTMLElement} item - the item being added\n     */\n    [symbols.itemAdded](item) {\n      if (super[symbols.itemAdded]) { super[symbols.itemAdded](item); }\n      this[symbols.itemSelected](item, item === this.selectedItem);\n    }\n\n    [symbols.itemsChanged]() {\n      if (super[symbols.itemsChanged]) { super[symbols.itemsChanged](); }\n\n      // In case selected item changed position or was removed.\n      trackSelectedItem(this);\n\n      // In case the change in items affected which navigations are possible.\n      updatePossibleNavigations(this);\n    }\n\n    /**\n     * Apply the indicate selection state to the item.\n     *\n     * The default implementation of this method does nothing. User-visible\n     * effects will typically be handled by other mixins.\n     *\n     * @param {HTMLElement} item - the item being selected/deselected\n     * @param {boolean} selected - true if the item is selected, false if not\n     */\n    [symbols.itemSelected](item, selected) {\n      if (super[symbols.itemSelected]) { super[symbols.itemSelected](item, selected); }\n    }\n\n    /**\n     * The index of the item which is currently selected.\n     *\n     * A `selectedIndex` of -1 indicates there is no selection. Setting this\n     * property to -1 will remove any existing selection.\n     *\n     * @type {number}\n     */\n    get selectedIndex() {\n      return this[externalSelectedIndexSymbol] != null ?\n        this[externalSelectedIndexSymbol] :\n        -1;\n    }\n    set selectedIndex(index) {\n      // See notes at top about internal vs. external copies of this property.\n      const previousSelectedIndex = this[internalSelectedIndexSymbol];\n      let item;\n      if (index !== this[externalSelectedIndexSymbol]) {\n        // Store the new index and the corresponding item.\n        const items = this.items;\n        const hasItems = items && items.length > 0;\n        if (!(hasItems && index >= 0 && index < items.length)) {\n          index = -1; // No item at that index.\n        }\n        this[externalSelectedIndexSymbol] = index;\n        item = hasItems && index >= 0 ? items[index] : null;\n        this[externalSelectedItemSymbol] = item;\n      } else {\n        item = this[externalSelectedItemSymbol];\n      }\n\n      // Now let super do any work.\n      if ('selectedIndex' in base.prototype) { super.selectedIndex = index; }\n\n      if (index !== previousSelectedIndex) {\n        // The selected index changed.\n        this[internalSelectedIndexSymbol] = index;\n\n        if (this[symbols.handlingUserInteraction]) {\n          const event = new CustomEvent('selected-index-changed', {\n            detail: {\n              selectedIndex: index,\n              value: index // for Polymer binding. TODO: Verify still necessary\n            }\n          });\n          this.dispatchEvent(event);\n        }\n      }\n\n      if (this[internalSelectedItemSymbol] !== item) {\n        // Update selectedItem property so it can have its own effects.\n        this.selectedItem = item;\n      }\n    }\n\n    /**\n     * The currently selected item, or null if there is no selection.\n     *\n     * Setting this property to null deselects any currently-selected item.\n     * Setting this property to an object that is not in the list has no effect.\n     *\n     * TODO: Even if selectionRequired, can still explicitly set selectedItem to null.\n     * TODO: If selectionRequired, leave selection alone?\n     *\n     * @type {object}\n     */\n    get selectedItem() {\n      return this[externalSelectedItemSymbol] || null;\n    }\n    set selectedItem(item) {\n      // See notes at top about internal vs. external copies of this property.\n      const previousSelectedItem = this[internalSelectedItemSymbol];\n      let index;\n      if (item !== this[externalSelectedItemSymbol]) {\n        // Store item and look up corresponding index.\n        const items = this.items;\n        const hasItems = items && items.length > 0;\n        index = hasItems ? Array.prototype.indexOf.call(items, item) : -1;\n        this[externalSelectedIndexSymbol] = index;\n        if (index < 0) {\n          item = null; // The indicated item isn't actually in `items`.\n        }\n        this[externalSelectedItemSymbol] = item;\n      } else {\n        index = this[externalSelectedIndexSymbol];\n      }\n\n      // Now let super do any work.\n      if ('selectedItem' in base.prototype) { super.selectedItem = item; }\n\n      if (item !== previousSelectedItem) {\n        // The selected item changed.\n        this[internalSelectedItemSymbol] = item;\n\n        if (previousSelectedItem) {\n          // Update selection state of old item.\n          this[symbols.itemSelected](previousSelectedItem, false);\n        }\n        if (item) {\n          // Update selection state to new item.\n          this[symbols.itemSelected](item, true);\n        }\n\n        updatePossibleNavigations(this);\n\n        if (this[symbols.handlingUserInteraction]) {\n          const event = new CustomEvent('selected-item-changed', {\n            detail: {\n              selectedItem: item,\n              value: item // for Polymer binding\n            }\n          });\n          this.dispatchEvent(event);\n        }\n      }\n\n      if (this[internalSelectedIndexSymbol] !== index) {\n        // Update selectedIndex property so it can have its own effects.\n        this.selectedIndex = index;\n      }\n    }\n\n    /**\n     * Select the first item in the list.\n     */\n    selectFirst() {\n      if (super.selectFirst) { super.selectFirst(); }\n      return selectIndex(this, 0);\n    }\n\n    /**\n     * True if the list should always have a selection (if it has items).\n     *\n     * @type {boolean}\n     * @default false\n     */\n    get selectionRequired() {\n      return this[selectionRequiredSymbol];\n    }\n    set selectionRequired(selectionRequired) {\n      this[selectionRequiredSymbol] = selectionRequired;\n      if ('selectionRequired' in base.prototype) { super.selectionRequired = selectionRequired; }\n      trackSelectedItem(this);\n    }\n\n    /**\n     * True if selection navigations wrap from last to first, and vice versa.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    get selectionWraps() {\n      return this[selectionWrapsSymbol];\n    }\n    set selectionWraps(value) {\n      this[selectionWrapsSymbol] = String(value) === 'true';\n      if ('selectionWraps' in base.prototype) { super.selectionWraps = value; }\n      updatePossibleNavigations(this);\n    }\n\n    /**\n     * Select the last item in the list.\n     */\n    selectLast() {\n      if (super.selectLast) { super.selectLast(); }\n      return selectIndex(this, this.items.length - 1);\n    }\n\n    /**\n     * Select the next item in the list.\n     */\n    selectNext() {\n      if (super.selectNext) { super.selectNext(); }\n      return selectIndex(this, this.selectedIndex + 1);\n    }\n\n    /**\n     * Select the previous item in the list.\n     *\n     * If the list has no selection, the last item will be selected.\n     */\n    selectPrevious() {\n      if (super.selectPrevious) { super.selectPrevious(); }\n      const newIndex = this.selectedIndex < 0 ?\n        this.items.length - 1 :     // No selection yet; select last item.\n        this.selectedIndex - 1;\n      return selectIndex(this, newIndex);\n    }\n\n    /**\n     * Fires when the selectedItem property changes.\n     *\n     * @memberof SingleSelection\n     * @event selected-item-changed\n     * @param {HTMLElement} detail.selectedItem The new selected item.\n     * @param {HTMLElement} detail.previousItem The previously selected item.\n     */\n\n    /**\n     * Fires when the selectedIndex property changes.\n     *\n     * @memberof SingleSelection\n     * @event selected-index-changed\n     * @param {number} detail.selectedIndex The new selected index.\n     */\n\n  }\n\n  return SingleSelection;\n};\n\n\n// Ensure the given index is within bounds, and select it if it's not already\n// selected.\nfunction selectIndex(element, index) {\n  const count = element.items.length;\n\n  const boundedIndex = (element.selectionWraps) ?\n    // JavaScript mod doesn't handle negative numbers the way we want to wrap.\n    // See http://stackoverflow.com/a/18618250/76472\n    ((index % count) + count) % count :\n\n    // Keep index within bounds of array.\n    Math.max(Math.min(index, count - 1), 0);\n\n  const previousIndex = element.selectedIndex;\n  if (previousIndex !== boundedIndex) {\n    element.selectedIndex = boundedIndex;\n    return true;\n  } else {\n    return false;\n  }\n}\n\n// Following a change in the set of items, or in the value of the\n// `selectionRequired` property, reacquire the selected item. If it's moved,\n// update `selectedIndex`. If it's been removed, and a selection is required,\n// try to select another item.\nfunction trackSelectedItem(element) {\n\n  const items = element.items;\n  const itemCount = items ? items.length : 0;\n\n  const previousSelectedItem = element.selectedItem;\n  if (!previousSelectedItem) {\n    // No item was previously selected.\n    if (element.selectionRequired) {\n      // Select the first item by default.\n      element.selectedIndex = 0;\n    }\n  } else if (itemCount === 0) {\n    // We've lost the selection, and there's nothing left to select.\n    element.selectedItem = null;\n  } else {\n    // Try to find the previously-selected item in the current set of items.\n    const indexInCurrentItems = Array.prototype.indexOf.call(items, previousSelectedItem);\n    const previousSelectedIndex = element.selectedIndex;\n    if (indexInCurrentItems < 0) {\n      // Previously-selected item was removed from the items.\n      // Select the item at the same index (if it exists) or as close as possible.\n      const newSelectedIndex = Math.min(previousSelectedIndex, itemCount - 1);\n      // Select by item, since index may be the same, and we want to raise the\n      // selected-item-changed event.\n      element.selectedItem = items[newSelectedIndex];\n    } else if (indexInCurrentItems !== previousSelectedIndex) {\n      // Previously-selected item still there, but changed position.\n      element.selectedIndex = indexInCurrentItems;\n    }\n  }\n}\n\n// Following a change in selection, report whether it's now possible to\n// go next/previous from the given index.\nfunction updatePossibleNavigations(element) {\n  let canSelectNext;\n  let canSelectPrevious;\n  const items = element.items;\n  if (items == null || items.length === 0) {\n    // No items to select.\n    canSelectNext = false;\n    canSelectPrevious = false;\n  } if (element.selectionWraps) {\n    // Since there are items, can always go next/previous.\n    canSelectNext = true;\n    canSelectPrevious = true;\n  } else {\n    const index = element.selectedIndex;\n    if (index < 0 && items.length > 0) {\n      // Special case. If there are items but no selection, declare that it's\n      // always possible to go next/previous to create a selection.\n      canSelectNext = true;\n      canSelectPrevious = true;\n    } else {\n      // Normal case: we have an index in a list that has items.\n      canSelectPrevious = (index > 0);\n      canSelectNext = (index < items.length - 1);\n    }\n  }\n  if (element.canSelectNext !== canSelectNext) {\n    element.canSelectNext = canSelectNext;\n  }\n  if (element.canSelectPrevious !== canSelectPrevious) {\n    element.canSelectPrevious = canSelectPrevious;\n  }\n}\n","import createSymbol from './createSymbol';\nimport symbols from './symbols';\n\n\n// Symbols for private data members on an element.\nconst deltaXSymbol = createSymbol('deltaX');\nconst deltaYSymbol = createSymbol('deltaY');\nconst multiTouchSymbol = createSymbol('multiTouch');\nconst previousXSymbol = createSymbol('previousX');\nconst previousYSymbol = createSymbol('previousY');\nconst startXSymbol = createSymbol('startX');\nconst travelFractionSymbol = createSymbol('travelFraction');\n\n\n/* Exported function extends a base class with SwipeDirection. */\nexport default (base) => {\n\n  /**\n   * Mixin which maps touch gestures (swipe left, swipe right) to direction\n   * semantics (go right, go left).\n   *\n   * By default, this mixin presents no user-visible effects; it just indicates\n   * a direction in which the user is currently swiping or has finished swiping.\n   * To map the direction to a change in selection, use\n   * [DirectionSelectionMixin](DirectionSelectionMixin.md).\n   */\n  class SwipeDirection extends base {\n\n    constructor() {\n      super();\n\n      this.travelFraction = 0;\n\n      // In all touch events, only handle single touches. We don't want to\n      // inadvertently do work when the user's trying to pinch-zoom for example.\n      // TODO: Even better approach than below would be to ignore touches after\n      // the first if the user has already begun a swipe.\n      // TODO: Touch events should probably be factored out into its own mixin.\n      if (window.PointerEvent) {\n        // Prefer listening to standard pointer events.\n        this.addEventListener('pointerdown', event => {\n          this[symbols.handlingUserInteraction] = true;\n          if (isEventForPenOrPrimaryTouch(event)) {\n            touchStart(this, event.clientX, event.clientY);\n          }\n          this[symbols.handlingUserInteraction] = false;\n        });\n        this.addEventListener('pointermove', event => {\n          this[symbols.handlingUserInteraction] = true;\n          if (isEventForPenOrPrimaryTouch(event)) {\n            const handled = touchMove(this, event.clientX, event.clientY);\n            if (handled) {\n              event.preventDefault();\n            }\n          }\n          this[symbols.handlingUserInteraction] = false;\n        });\n        this.addEventListener('pointerup', event => {\n          this[symbols.handlingUserInteraction] = true;\n          if (isEventForPenOrPrimaryTouch(event)) {\n            touchEnd(this, event.clientX, event.clientY);\n          }\n          this[symbols.handlingUserInteraction] = false;\n        });\n      } else {\n        // Pointer events not supported -- listen to older touch events.\n        this.addEventListener('touchstart', event => {\n          this[symbols.handlingUserInteraction] = true;\n          if (this[multiTouchSymbol]) {\n            return;\n          } else if (event.touches.length === 1) {\n            const clientX = event.changedTouches[0].clientX;\n            const clientY = event.changedTouches[0].clientY;\n            touchStart(this, clientX, clientY);\n          } else {\n            this[multiTouchSymbol] = true;\n          }\n          this[symbols.handlingUserInteraction] = false;\n        });\n        this.addEventListener('touchmove', event => {\n          this[symbols.handlingUserInteraction] = true;\n          if (!this[multiTouchSymbol] && event.touches.length === 1) {\n            const clientX = event.changedTouches[0].clientX;\n            const clientY = event.changedTouches[0].clientY;\n            const handled = touchMove(this, clientX, clientY);\n            if (handled) {\n              event.preventDefault();\n            }\n          }\n          this[symbols.handlingUserInteraction] = false;\n        });\n        this.addEventListener('touchend', event => {\n          this[symbols.handlingUserInteraction] = true;\n          if (event.touches.length === 0) {\n            // All touches removed; gesture is complete.\n            if (!this[multiTouchSymbol]) {\n              // Single-touch swipe has finished.\n              const clientX = event.changedTouches[0].clientX;\n              const clientY = event.changedTouches[0].clientY;\n              touchEnd(this, clientX, clientY);\n            }\n            this[multiTouchSymbol] = false;\n          }\n          this[symbols.handlingUserInteraction] = false;\n        });\n      }\n    }\n\n    connectedCallback() {\n      if (super.connectedCallback) { super.connectedCallback(); }\n\n      // For the component to receive PointerEvents in IE/Edge, we need to set\n      // touch-action: none. Only make this change if touch-action is currently\n      // the default value (\"auto\"), in case the developer knows better than we\n      // do what they want in their particular context.\n      if (getComputedStyle(this).touchAction === 'auto') {\n        this.style.touchAction = 'none';\n      }\n    }\n\n    // Default implementation.\n    get [symbols.dragging]() {\n      return super[symbols.dragging];\n    }\n    set [symbols.dragging](value) {\n      if (symbols.dragging in base.prototype) { super[symbols.dragging] = value; }\n    }\n\n    /**\n     * Invoked when the user wants to go/navigate left.\n     * The default implementation of this method does nothing.\n     */\n    [symbols.goLeft]() {\n      if (super[symbols.goLeft]) { return super[symbols.goLeft](); }\n    }\n\n    /**\n     * Invoked when the user wants to go/navigate right.\n     * The default implementation of this method does nothing.\n     */\n    [symbols.goRight]() {\n      if (super[symbols.goRight]) { return super[symbols.goRight](); }\n    }\n\n    /**\n     * The distance the first touchpoint has traveled since the beginning of a\n     * drag, expressed as a fraction of the element's width.\n     *\n     * @type number\n     */\n    get travelFraction() {\n      return this[travelFractionSymbol];\n    }\n    set travelFraction(value) {\n      this[travelFractionSymbol] = value;\n      if ('travelFraction' in base.prototype) { super.travelFraction = value; }\n    }\n\n  }\n\n  return SwipeDirection;\n};\n\n\n// Return true if the pointer event is for the pen, or the primary touch point.\nfunction isEventForPenOrPrimaryTouch(event) {\n  return event.pointerType === 'pen' ||\n      (event.pointerType === 'touch' && event.isPrimary);\n}\n\n/*\n * Invoked when the user has finished a touch operation.\n */\nfunction touchEnd(element, clientX, clientY) {\n  element[symbols.dragging] = false;\n  if (element[deltaXSymbol] >= 20) {\n    // Finished going right at high speed.\n    element[symbols.goLeft]();\n  } else if (element[deltaXSymbol] <= -20) {\n    // Finished going left at high speed.\n    element[symbols.goRight]();\n  } else {\n    // Finished at low speed.\n    trackTo(element, clientX);\n    const travelFraction = element.travelFraction;\n    if (travelFraction >= 0.5) {\n      element[symbols.goRight]();\n    } else if (travelFraction <= -0.5) {\n      element[symbols.goLeft]();\n    }\n  }\n  element.travelFraction = 0;\n  element[deltaXSymbol] = null;\n  element[deltaYSymbol] = null;\n}\n\n/*\n * Invoked when the user has moved during a touch operation.\n */\nfunction touchMove(element, clientX, clientY) {\n\n  element[deltaXSymbol] = clientX - element[previousXSymbol];\n  element[deltaYSymbol] = clientY - element[previousYSymbol];\n  element[previousXSymbol] = clientX;\n  element[previousYSymbol] = clientY;\n  if (Math.abs(element[deltaXSymbol]) > Math.abs(element[deltaYSymbol])) {\n    // Move was mostly horizontal.\n    trackTo(element, clientX);\n    // Indicate that the event was handled. It'd be nicer if we didn't have\n    // to do this so that, e.g., a user could be swiping left and right\n    // while simultaneously scrolling up and down. (Native touch apps can do\n    // that.) However, Mobile Safari wants to handle swipe events near the\n    // page and interpret them as navigations. To avoid having a horiziontal\n    // swipe misintepreted as a navigation, we indicate that we've handled\n    // the event, and prevent default behavior.\n    return true;\n  } else {\n    // Move was mostly vertical.\n    return false; // Not handled\n  }\n}\n\n/*\n * Invoked when the user has begun a touch operation.\n */\nfunction touchStart(element, clientX, clientY) {\n  element[symbols.dragging] = true;\n  element[startXSymbol] = clientX;\n  element[previousXSymbol] = clientX;\n  element[previousYSymbol] = clientY;\n  element[deltaXSymbol] = 0;\n  element[deltaYSymbol] = 0;\n}\n\nfunction trackTo(element, x) {\n  const width = element.offsetWidth;\n  const dragDistance = element[startXSymbol] - x;\n  const fraction = width > 0 ?\n    dragDistance / width :\n    0;\n  element.travelFraction = fraction;\n}\n","import createSymbol from '../../basic-component-mixins/src/createSymbol';\nimport symbols from './symbols';\n\n\n// Symbols for private data members on an element.\nconst absorbDecelerationSymbol = createSymbol('absorbDeceleration');\nconst lastDeltaXSymbol = createSymbol('lastDeltaX');\nconst lastWheelTimeoutSymbol = createSymbol('lastWheelTimeout');\nconst postNavigateDelayCompleteSymbol = createSymbol('postNavigateDelayComplete');\nconst wheelDistanceSymbol = createSymbol('wheelDistance');\n\n\n/* Exported function extends a base class with TrackpadDirection. */\nexport default (base) => {\n\n  /**\n   * Mixin which maps a horizontal trackpad swipe gestures (or horizontal mouse\n   * wheel actions) to direction semantics.\n   *\n   * You can use this mixin with a mixin like\n   * [DirectionSelectionMixin](DirectionSelectionMixin.md) to let the user\n   * change the selection with the trackpad or mouse wheel.\n   *\n   * To respond to the trackpad, we can listen to the DOM's \"wheel\" events.\n   * These events are fired as the user drags their fingers across a trackpad.\n   * Unfortunately, browsers are missing a critical event — there is no event\n   * when the user *stops* a gestured on the trackpad or mouse wheel.\n   *\n   * To make things worse, the mainstream browsers continue to generate fake\n   * wheel events even after the user has stopped dragging their fingers. These\n   * fake events simulate the user gradually slowing down the drag until they\n   * come to a smooth stop. In some contexts, these fake wheel events might be\n   * helpful, but in trying to supply typical trackpad swipe navigation, these\n   * fake events get in the way.\n   *\n   * This component uses heuristics to work around these problems, but the\n   * complex nature of the problem make it extremely difficult to achieve the\n   * same degree of trackpad responsiveness possible with native applications.\n   */\n  class TrackpadDirection extends base {\n\n    constructor() {\n      super();\n      this.addEventListener('wheel', event => {\n        this[symbols.handlingUserInteraction] = true;\n        const handled = wheel(this, event);\n        if (handled) {\n          event.preventDefault();\n        }\n        this[symbols.handlingUserInteraction] = false;\n      });\n      resetWheelTracking(this);\n    }\n\n    // Default implementation.\n    get [symbols.dragging]() {\n      return super[symbols.dragging];\n    }\n    set [symbols.dragging](value) {\n      if (symbols.dragging in base.prototype) { super[symbols.dragging] = value; }\n    }\n\n    /**\n     * Invoked when the user wants to go/navigate left.\n     * The default implementation of this method does nothing.\n     */\n    [symbols.goLeft]() {\n      if (super[symbols.goLeft]) { return super[symbols.goLeft](); }\n    }\n\n    /**\n     * Invoked when the user wants to go/navigate right.\n     * The default implementation of this method does nothing.\n     */\n    [symbols.goRight]() {\n      if (super[symbols.goRight]) { return super[symbols.goRight](); }\n    }\n\n    /**\n     * The distance the user has moved the first touchpoint since the beginning\n     * of a trackpad/wheel operation, expressed as a fraction of the element's\n     * width.\n     *\n     * @type number\n     */\n    get travelFraction() {\n      return super.travelFraction;\n    }\n    set travelFraction(value) {\n      if ('travelFraction' in base.prototype) { super.travelFraction = value; }\n    }\n\n  }\n\n  return TrackpadDirection;\n};\n\n\n// Time we wait following a navigation before paying attention to wheel\n// events again.\nconst POST_NAVIGATE_TIME = 250;\n\n// Time we wait after the last wheel event before we reset things.\nconst WHEEL_TIME = 100;\n\n\n// Following a navigation, partially reset our wheel tracking.\nfunction postNavigate(element) {\n  element.travelFraction = 0;\n  element[wheelDistanceSymbol] = 0;\n  element[postNavigateDelayCompleteSymbol] = true;\n  element[absorbDecelerationSymbol] = true;\n  setTimeout(() => {\n    element[postNavigateDelayCompleteSymbol] = false;\n  }, POST_NAVIGATE_TIME);\n}\n\n// Reset all state related to the tracking of the wheel.\nfunction resetWheelTracking(element) {\n  element.travelFraction = 0;\n  element[wheelDistanceSymbol] = 0;\n  element[lastDeltaXSymbol] = 0;\n  element[absorbDecelerationSymbol] = false;\n  element[postNavigateDelayCompleteSymbol] = false;\n  if (element[lastWheelTimeoutSymbol]) {\n    clearTimeout(element[lastWheelTimeoutSymbol]);\n    element[lastWheelTimeoutSymbol] = null;\n  }\n}\n\n// Define our own sign function, since (as of May 2015), Safari and IE don't\n// supply Math.sign().\nfunction sign(x) {\n  return (x === 0) ?\n    0 :\n    (x > 0) ?\n      1 :\n      -1;\n}\n\n// TODO: Damping, or some other treatment for going past the ends.\n\n/*\n * A wheel event has been generated. This could be a real wheel event, or it\n * could be fake (see notes in the header).\n *\n * This handler uses several strategies to try to approximate native trackpad\n * swipe navigation.\n *\n * If the user has dragged enough to cause a navigation, then for a short\n * delay following that navigation, subsequent wheel events will be ignored.\n *\n * Furthermore, follwowing a navigation, we ignore all wheel events until we\n * receive at least one event where the event's deltaX (distance traveled) is\n * *greater* than the previous event's deltaX. This helps us filter out the\n * fake wheel events generated by the browser to simulate deceleration.\n *\n */\nfunction wheel(element, event) {\n\n  // Since we have a new wheel event, reset our timer waiting for the last\n  // wheel event to pass.\n  if (element[lastWheelTimeoutSymbol]) {\n    clearTimeout(element[lastWheelTimeoutSymbol]);\n  }\n  element[lastWheelTimeoutSymbol] = setTimeout(() => {\n    wheelTimedOut(element);\n  }, WHEEL_TIME);\n\n  const deltaX = event.deltaX;\n  const deltaY = event.deltaY;\n\n  // See if element event represents acceleration or deceleration.\n  const acceleration = sign(deltaX) * (deltaX - element[lastDeltaXSymbol]);\n  element[lastDeltaXSymbol] = deltaX;\n\n  if (Math.abs(deltaX) < Math.abs(deltaY)) {\n    // Move was mostly vertical. The user may be trying scroll with the\n    // trackpad/wheel. To be on the safe, we ignore such events.\n    return false;\n  }\n\n  if (element[postNavigateDelayCompleteSymbol]) {\n    // It's too soon after a navigation; ignore the event.\n    return true;\n  }\n\n  if (acceleration > 0) {\n    // The events are not (or are no longer) decelerating, so we can start\n    // paying attention to them again.\n    element[absorbDecelerationSymbol] = false;\n  } else if (element[absorbDecelerationSymbol]) {\n    // The wheel event was likely faked to simulate deceleration; ignore it.\n    return true;\n  }\n\n  element[wheelDistanceSymbol] += deltaX;\n\n  // Update the travel fraction of the element being navigated.\n  const width = element.offsetWidth;\n  let travelFraction = width > 0 ?\n    element[wheelDistanceSymbol] / width :\n    0;\n  element[symbols.dragging] = true;\n  travelFraction = sign(travelFraction) * Math.min(Math.abs(travelFraction), 1);\n  element.travelFraction = travelFraction;\n\n  // If the user has dragged enough to reach the previous/next item, then\n  // complete a navigation to that item.\n  if (travelFraction === 1) {\n    element[symbols.dragging] = false;\n    element[symbols.goRight]();\n    postNavigate(element);\n  } else if (travelFraction === -1) {\n    element[symbols.dragging] = false;\n    element[symbols.goLeft]();\n    postNavigate(element);\n  }\n\n  return true;\n}\n\n// A sufficiently long period of time has passed since the last wheel event.\n// We snap the selection to the closest item, then reset our state.\nfunction wheelTimedOut(element) {\n\n  // We treat this timeout as if it were a user interaction for purposes of\n  // deciding whether we should raise property change events. In this case,\n  // the user interaction was the user stopping trackpad movement.\n  element[symbols.handlingUserInteraction] = true;\n\n  // Snap to the closest item.\n  element[symbols.dragging] = false;\n  const travelFraction = element.travelFraction;\n  if (travelFraction >= 0.5) {\n    element[symbols.goRight]();\n  } else if (travelFraction <= -0.5) {\n    element[symbols.goLeft]();\n  }\n\n  // TODO: Listen for the transition to complete, and then restore\n  // dragging to false (or the previous value).\n\n  resetWheelTracking(element);\n  element[symbols.handlingUserInteraction] = false;\n}\n","/**\n * Helper function to create a symbol that can be used for associating private\n * data with an element.\n *\n * Mixins and component classes often want to associate private data with an\n * element instance, but JavaScript does not have direct support for true\n * private properties. One approach is to use the\n * [Symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol)\n * data type to set and retrieve data on an element.\n *\n * Unfortunately, the Symbol type is not available in Internet Explorer 11. The\n * `createSymbol` helper function exists as a workaround for IE 11. Rather than\n * returning a true Symbol, it simply returns an underscore-prefixed string.\n *\n * Usage:\n *\n *     const fooSymbol = createSymbol('foo');\n *\n *     class MyElement extends HTMLElement {\n *       get foo() {\n *         return this[fooSymbol];\n *       }\n *       set foo(value) {\n *         this[fooSymbol] = value;\n *       }\n *     }\n *\n * In IE 11, this sample will \"hide\" data behind an instance property this._foo.\n * The use of the underscore is meant to reduce (not eliminate) the potential\n * for name conflicts, and discourage (not prevent) external access to this\n * data. In modern browsers, the above code will eliminate the potential of\n * naming conflicts, and better hide the data behind a real Symbol.\n *\n * @function createSymbol\n * @param {string} description - A string to identify the symbol when debugging\n */\nexport default function createSymbol(description) {\n  return typeof Symbol === 'function' ?\n    Symbol(description) :\n    `_${description}`;\n}\n","/*\n * Microtask helper for IE 11.\n *\n * Executing a function as a microtask is trivial in browsers that support\n * promises, whose then() clauses use microtask timing. IE 11 doesn't support\n * promises, but does support MutationObservers, which are also executed as\n * microtasks. So this helper uses an MutationObserver to achieve microtask\n * timing.\n *\n * See https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/\n *\n * Inspired by Polymer's async() function.\n */\n\n\n// The queue of pending callbacks to be executed as microtasks.\nconst callbacks = [];\n\n// Create an element that we will modify to force observable mutations.\nconst element = document.createTextNode('');\n\n// A monotonically-increasing value.\nlet counter = 0;\n\n\n/**\n * Add a callback to the microtask queue.\n *\n * This uses a MutationObserver so that it works on IE 11.\n *\n * NOTE: IE 11 may actually use timeout timing with MutationObservers. This\n * needs more investigation.\n *\n * @function microtask\n * @param {function} callback\n */\nexport default function microtask(callback) {\n  callbacks.push(callback);\n  // Force a mutation.\n  element.textContent = ++counter;\n}\n\n\n// Execute any pending callbacks.\nfunction executeCallbacks() {\n  while (callbacks.length > 0) {\n    const callback = callbacks.shift();\n    callback();\n  }\n}\n\n\n// Create the observer.\nconst observer = new MutationObserver(executeCallbacks);\nobserver.observe(element, {\n  characterData: true\n});\n","import createSymbol from './createSymbol';\nimport toggleClass from './toggleClass';\n\n\n// Symbols for private data members on an element.\nconst safeToSetAttributesSymbol = createSymbol('safeToSetAttributes');\nconst pendingAttributesSymbol = createSymbol('pendingAttributes');\nconst pendingClassesSymbol = createSymbol('pendingClasses');\n\n\n/**\n * Helper functions for updating attributes, including the `class` attribute.\n */\nexport default {\n\n  /**\n   * Perform any pending updates to attributes and classes.\n   *\n   * This writes any `setAttribute` or `toggleClass` values that were performed\n   * before an element was attached to the document for the first time.\n   *\n   * This method should be called by mixins/components in their\n   * `connectedCallback`. If mulitple mixins/components invoke this during the\n   * same `connectedCallback`, only the first call will have any effect. The\n   * subsequent calls will be harmless.\n   *\n   * @param {HTMLElement} element - The element being added to the document.\n   */\n  connected(element) {\n    element[safeToSetAttributesSymbol] = true;\n\n    // Set any pending attributes.\n    if (element[pendingAttributesSymbol]) {\n      for (let attribute in element[pendingAttributesSymbol]) {\n        const value = element[pendingAttributesSymbol][attribute];\n        setAttributeToElement(element, attribute, value);\n      }\n      element[pendingAttributesSymbol] = null;\n    }\n\n    // Set any pending classes.\n    if (element[pendingClassesSymbol]) {\n      for (let className in element[pendingClassesSymbol]) {\n        const value = element[pendingClassesSymbol][className];\n        toggleClass(element, className, value);\n      }\n      element[pendingClassesSymbol] = null;\n    }\n  },\n\n  /**\n   * Set/unset the attribute with the indicated name.\n   *\n   * This method exists primarily to handle the case where an element wants to\n   * set a default property value that should be reflected as an attribute. An\n   * important limitation of custom element consturctors is that they cannot\n   * set attributes. A call to `setAttribute` during the constructor will\n   * be deferred until the element is connected to the document.\n   *\n   * @param {string} attribute - The name of the *attribute* (not property) to set.\n   * @param {object} value - The value to set. If null, the attribute will be removed.\n   */\n  setAttribute(element, attribute, value) {\n    if (element[safeToSetAttributesSymbol]) {\n      // Safe to set attributes immediately.\n      setAttributeToElement(element, attribute, value);\n    } else {\n      // Defer setting attributes until the first time we're connected.\n      if (!element[pendingAttributesSymbol]) {\n        element[pendingAttributesSymbol] = {};\n      }\n      element[pendingAttributesSymbol][attribute] = value;\n    }\n  },\n\n  /**\n   * Set/unset the class with the indicated name.\n   *\n   * This method exists primarily to handle the case where an element wants to\n   * set a default property value that should be reflected as as class. An\n   * important limitation of custom element consturctors is that they cannot\n   * set attributes, including the `class` attribute. A call to\n   * `toggleClass` during the constructor will be deferred until the element\n   * is connected to the document.\n   *\n   * @param {string} className - The name of the class to set.\n   * @param {object} value - True to set the class, false to remove it.\n   */\n  toggleClass(element, className, value) {\n    if (element[safeToSetAttributesSymbol]) {\n      // Safe to set class immediately.\n      toggleClass(element, className, value);\n    } else {\n      // Defer setting class until the first time we're connected.\n      if (!element[pendingClassesSymbol]) {\n        element[pendingClassesSymbol] = {};\n      }\n      element[pendingClassesSymbol][className] = value;\n    }\n  }\n\n};\n\n\n// Reflect the attribute to the given element.\n// If the value is null, remove the attribute.\nfunction setAttributeToElement(element, attributeName, value) {\n  if (value === null || typeof value === 'undefined') {\n    element.removeAttribute(attributeName);\n  } else {\n    const text = String(value);\n    // Avoid recursive attributeChangedCallback calls.\n    if (element.getAttribute(attributeName) !== text) {\n      element.setAttribute(attributeName, value);\n    }\n  }\n}\n","import createSymbol from './createSymbol';\n\n/**\n * A collection of Symbol objects for standard component properties and methods.\n *\n * These Symbol objects are used to allow mixins and a component to internally\n * communicate, without exposing these properties and methods in the component's\n * public API.\n *\n * To use these Symbol objects in your own component, include this module and\n * then create a property or method whose key is the desired Symbol.\n *\n *     import 'SingleSelectionMixin' from 'basic-component-mixins/src/SingleSelectionMixin';\n *     import 'symbols' from 'basic-component-mixins/src/symbols';\n *\n *     class MyElement extends SingleSelectionMixin(HTMLElement) {\n *       [symbols.itemSelected](item, selected) {\n *         // This will be invoked whenever an item is selected/deselected.\n *       }\n *     }\n *\n * @module symbols\n */\nconst symbols = {\n\n  /**\n   * Symbol for the `defaults` property.\n   *\n   * This property can be used to set or override defaults that will be applied\n   * to a new component instance. When implementing this property, take care to\n   * first acquire any defaults defined by the superclass. The standard idiom is\n   * as follows:\n   *\n   *     get [symbols.defaults]() {\n   *       const defaults = super[symbols.defaults] || {};\n   *       // Set or override default values here\n   *       defaults.customProperty = false;\n   *       return defaults;\n   *     }\n   *\n   * @var {object} defaults\n   */\n  defaults: createSymbol('defaults'),\n\n  /**\n   * Symbol for the `dragging` property.\n   *\n   * Components like carousels often define animated CSS transitions for\n   * sliding effects. Such a transition should usually *not* be applied while\n   * the user is dragging, because a CSS animation will introduce a lag that\n   * makes the swipe feel sluggish. Instead, as long as the user is dragging\n   * with their finger down, the transition should be suppressed. When the\n   * user releases their finger, the transition can be restored, allowing the\n   * animation to show the carousel sliding into its final position.\n   *\n   * @type {boolean} true if a drag is in progress, false if not.\n   */\n  dragging: createSymbol('dragging'),\n\n  /**\n   * Symbol for the `goDown` method.\n   *\n   * This method is invoked when the user wants to go/navigate down.\n   *\n   * @function goDown\n   */\n  goDown: createSymbol('goDown'),\n\n  /**\n   * Symbol for the `goEnd` method.\n   *\n   * This method is invoked when the user wants to go/navigate to the end (e.g.,\n   * of a list).\n   *\n   * @function goEnd\n   */\n  goEnd: createSymbol('goEnd'),\n\n  /**\n   * Symbol for the `goLeft` method.\n   *\n   * This method is invoked when the user wants to go/navigate left.\n   *\n   * @function goLeft\n   */\n  goLeft: createSymbol('goLeft'),\n\n  /**\n   * Symbol for the `goRight` method.\n   *\n   * This method is invoked when the user wants to go/navigate right.\n   *\n   * @function goRight\n   */\n  goRight: createSymbol('goRight'),\n\n  /**\n   * Symbol for the `goStart` method.\n   *\n   * This method is invoked when the user wants to go/navigate to the start\n   * (e.g., of a list).\n   *\n   * @function goStart\n   */\n  goStart: createSymbol('goStart'),\n\n  /**\n   * Symbol for the `goUp` method.\n   *\n   * This method is invoked when the user wants to go/navigate up.\n   *\n   * @function goUp\n   */\n  goUp: createSymbol('goUp'),\n\n  /**\n   * Symbol for the `handlingUserInteraction` property.\n   *\n   * This property is used by mixins to determine whether they should raise\n   * property change events. The standard HTML pattern is to only raise such\n   * events in response to direct user interactions. This property can be used\n   * to manage events as follows.\n   *\n   * First, UI event listeners should set this property to `true` at the start\n   * of the event handler, then `false` at the end:\n   *\n   *     this.addEventListener('click', event => {\n   *       this[symbols.handlingUserInteraction] = true;\n   *       // Do work here, possibly setting properties, like:\n   *       this.foo = 'Hello';\n   *       this[symbols.handlingUserInteraction] = false;\n   *     });\n   *\n   * Elsewhere, property setters that raise change events should only do so it\n   * this property is `true`:\n   *\n   *     set foo(value) {\n   *       // Save foo value here, do any other work.\n   *       if (this[symbols.handlingUserInteraction]) {\n   *         const event = new CustomEvent('foo-changed');\n   *         this.dispatchEvent(event);\n   *       }\n   *     }\n   *\n   * In this way, programmatic attempts to set the `foo` property will not\n   * trigger the `foo-changed` event, but UI interactions that update that\n   * property will cause those events to be raised.\n   *\n   */\n  handlingUserInteraction: createSymbol('handlingUserInteraction'),\n\n  /**\n   * Symbol for the `itemAdded` method.\n   *\n   * This method is invoked when a new item is added to a list.\n   *\n   * @function itemAdded\n   * @param {HTMLElement} item - the item being selected/deselected\n   */\n  itemAdded: createSymbol('itemAdded'),\n\n\n  /**\n   * Symbol for the `itemsChanged` method.\n   *\n   * This method is invoked when the underlying contents change. It is also\n   * invoked on component initialization – since the items have \"changed\" from\n   * being nothing.\n   */\n  itemsChanged: createSymbol('itemsChanged'),\n\n  /**\n   * Symbol for the `itemSelected` method.\n   *\n   * This method is invoked when an item becomes selected or deselected.\n   *\n   * @function itemSelected\n   * @param {HTMLElement} item - the item being selected/deselected\n   * @param {boolean} selected - true if the item is selected, false if not\n   */\n  itemSelected: createSymbol('itemSelected'),\n\n  /**\n   * Symbol for the `keydown` method.\n   *\n   * This method is invoked when an element receives a `keydown` event.\n   *\n   * @function keydown\n   * @param {KeyboardEvent} event - the event being processed\n   */\n  keydown: createSymbol('keydown'),\n\n  /**\n   * Symbol for the `template` property.\n   *\n   * This property returns a component's template.\n   *\n   * @type {string|HTMLElement}\n   */\n  template: createSymbol('template')\n};\n\nexport default symbols;\n","/**\n * Helper function for standard classList.toggle() behavior on old browsers,\n * namely IE 11.\n *\n * The standard\n * [classlist](https://developer.mozilla.org/en-US/docs/Web/API/Element/classList)\n * object has a `toggle()` function that supports a second Boolean parameter\n * that can be used to succinctly turn a class on or off. This feature is often\n * useful in designing custom elements, which may want to externally reflect\n * component state in a CSS class that can be used for styling purposes.\n *\n * Unfortunately, IE 11 does not support the Boolean parameter to\n * `classList.toggle()`. This helper function behaves like the standard\n * `toggle()`, including support for the Boolean parameter, so that it can be\n * used even on IE 11.\n *\n * @function toggleClass\n * @param {HTMLElement} element - The element to modify\n * @param {string} className - The class to add/remove\n * @param {boolean} [force] - Force the class to be added (if true) or removed\n *                            (if false)\n */\nexport default function toggleClass(element, className, force) {\n  const classList = element.classList;\n  const addClass = (typeof force === 'undefined') ?\n    !classList.contains(className) :\n    force;\n  if (addClass) {\n    classList.add(className);\n  } else {\n    classList.remove(className);\n  }\n  return addClass;\n}\n","import AttributeMarshallingMixin from '../../basic-component-mixins/src/AttributeMarshallingMixin';\nimport ComposableMixin from '../../basic-component-mixins/src/ComposableMixin';\nimport DistributedChildrenMixin from '../../basic-component-mixins/src/DistributedChildrenMixin';\nimport ShadowElementReferencesMixin from '../../basic-component-mixins/src/ShadowElementReferencesMixin';\nimport ShadowTemplateMixin from '../../basic-component-mixins/src/ShadowTemplateMixin';\n\n\n/**\n * A sample general-purpose base class for defining custom elements that mixes\n * in some common features: template stamping into a shadow root, shadow element\n * references, marshalling attributes to properties, and retrieving the children\n * distributed to a component.\n *\n * This base class is not special in any way, and is defined only as a\n * convenient shorthand for applying the mixins listed above. You can use this\n * class as a base class for your own elements, or easily create your own base\n * class by applying the same set of mixins.\n *\n * The ElementBase base class does not register itself as a custom element with\n * the browser, and hence cannot be independently instantiated.\n *\n * @mixes AttributeMarshallingMixin\n * @mixes ComposableMixin\n * @mixes DistributedChildrenMixin\n * @mixes ShadowElementReferencesMixin\n * @mixes ShadowTemplateMixin\n */\nclass ElementBase extends ComposableMixin(HTMLElement).compose(\n  ShadowTemplateMixin,          // before node finding, so shadow root is populated\n  ShadowElementReferencesMixin, // before marshalling, so properties can use refs\n  AttributeMarshallingMixin,\n  DistributedChildrenMixin\n) {}\n\nexport default ElementBase;\n","/*\n * This file is transpiled to create an ES5-compatible distribution in which\n * the package's main feature(s) are available via the window.Basic global.\n * If you're already using ES6 yourself, ignore this file, and instead import\n * the source file(s) you want from the src folder.\n */\n\nimport SlidingCarousel from './src/SlidingCarousel';\n\nwindow.Basic = window.Basic || {};\nwindow.Basic.SlidingCarousel = SlidingCarousel;\n","import HorizontalNavigationMixin from '../../basic-component-mixins/src/HorizontalNavigationMixin';\nimport SlidingViewport from '../../basic-sliding-viewport/src/SlidingViewport';\n\n\n/**\n * Lets the user navigate laterally through a sequence of child elements\n * using a simple CSS transition effect to show horizontal movement.\n *\n * [Live demo](http://basicwebcomponents.org/basic-web-components/packages/basic-sliding-carousel/)\n *\n * basic-sliding-carousel is an implementation of the carousel user interface\n * pattern, commonly used for navigating between images, pages, and other\n * elements. This pattern presents the user with a linear sequence of elements,\n * only one of which is shown at a time. The user can navigate to the\n * next/previous element with a variety of input methods.\n *\n * basic-sliding-carousel is a simpler variation of the more sophisticated\n * [basic-carousel](../basic-carousel) component. The latter includes support\n * for wrapping (going forward from the last item to the first, and vice versa),\n * and more complex visual transitions. Those transitions entail use of the Web\n * Animation API, which requires a polyfill in older browsers. Hence, the\n * simpler basic-sliding-carousel may be a more appropriate choice if factors\n * such as download size are critical.\n *\n * Beyond those differences, basic-sliding-carousel offers the same API, usage\n * recommendations, and support for keyboard/touch/mouse and assistive devices.\n * See that component for more details on use.\n *\n * @extends SlidingViewport\n * @mixes HorizontalNavigationMixin\n */\nclass SlidingCarousel extends SlidingViewport.compose(\n  HorizontalNavigationMixin\n) {}\n\n\ncustomElements.define('basic-sliding-carousel', SlidingCarousel);\nexport default SlidingCarousel;\n","import ContentItemsMixin from '../../basic-component-mixins/src/ContentItemsMixin';\nimport DistributedChildrenContentMixin from '../../basic-component-mixins/src/DistributedChildrenContentMixin';\nimport ElementBase from '../../basic-element-base/src/ElementBase';\nimport FractionalSelectionMixin from '../../basic-component-mixins/src/FractionalSelectionMixin';\nimport SelectionAriaActiveMixin from '../../basic-component-mixins/src/SelectionAriaActiveMixin';\nimport SingleSelectionMixin from '../../basic-component-mixins/src/SingleSelectionMixin';\nimport SpreadItems from '../../basic-spread-items/src/SpreadItems'; // jshint ignore:line\nimport symbols from '../../basic-component-mixins/src/symbols';\n\n\nconst base = ElementBase.compose(\n  ContentItemsMixin,\n  DistributedChildrenContentMixin,\n  FractionalSelectionMixin,\n  SelectionAriaActiveMixin,\n  SingleSelectionMixin\n);\n\n\n/**\n * Presents list items in a viewport such that only a single item is visible at\n * a time.\n *\n * Navigating between items will be represented with a horizontal visual\n * sliding effect. For more complex visual effects, see\n * [basic-animation-stage](../basic-animation-stage), which takes advantage of\n * the Web Animations API.\n *\n * This component handles the rendering responsibilities for the basic-carousel\n * component.\n *\n * This component currently requires that you explicitly apply a size to it.\n *\n * @extends ElementBase\n * @mixes ContentItemsMixin\n * @mixes DistributedChildrenContentMixin\n * @mixes FractionalSelectionMixin\n * @mixes SelectionAriaActiveMixin\n * @mixes SingleSelectionMixin\n */\nclass SlidingViewport extends base {\n\n  constructor() {\n    super();\n    this[symbols.dragging] = false;\n  }\n\n  get [symbols.defaults]() {\n    const defaults = super[symbols.defaults] || {};\n    defaults.selectionRequired = true;\n    return defaults;\n  }\n\n  /*\n   * During drags, don't show CSS transitions.\n   */\n  get [symbols.dragging]() {\n    return !this.showTransition;\n  }\n  set [symbols.dragging](value) {\n    if (symbols.dragging in base.prototype) { super[symbols.dragging] = value; }\n    this.reflectClass('showTransition', !value);\n  }\n\n  get selectedFraction() {\n    return super.selectedFraction;\n  }\n  set selectedFraction(value) {\n    if ('selectedFraction' in base.prototype) { super.selectedFraction = value; }\n    render(this);\n  }\n\n  get selectedItem() {\n    return super.selectedItem;\n  }\n  set selectedItem(item) {\n    if ('selectedItem' in base.prototype) { super.selectedItem = item; }\n    render(this);\n  }\n\n  get [symbols.template]() {\n    return `\n      <style>\n      :host {\n        display: block;\n        overflow: hidden;\n        position: relative;\n      }\n\n      #slidingContainer {\n        height: 100%;\n        position: absolute;\n        /*\n         Set width for IE/Edge. It's not clear why they need this, and the other\n         browsers don't.\n         */\n        width: 100%;\n        will-change: transform;\n      }\n\n      :host(.showTransition) #slidingContainer {\n        -webkit-transition: -webkit-transform 0.2s ease-out;\n        transition: transform 0.2s ease-out;\n      }\n      </style>\n\n      <basic-spread-items id=\"slidingContainer\" role=\"none\">\n        <slot></slot>\n      </basic-spread-items>\n    `;\n  }\n\n}\n\n\n\nfunction render(element) {\n  requestAnimationFrame(renderSelection.bind(element));\n}\n\n// Note: In this routine, \"this\" is bound to an element instance.\nfunction renderSelection() {\n  if (!this.selectedItem) {\n    return;\n  }\n  const selection = FractionalSelectionMixin.helpers.elementSelection(this);\n  const itemCount = this.items ? this.items.length : 0;\n  const damped = FractionalSelectionMixin.helpers.dampedSelection(selection, itemCount);\n  // Use a percentage so the transform will still work if screen size changes\n  // (e.g., if device orientation changes).\n  const left = -damped * 100;\n  const transform = 'translateX(' + left + '%)';\n  this.$.slidingContainer.style.webkitTransform = transform;\n  this.$.slidingContainer.style.transform = transform;\n}\n\n\ncustomElements.define('basic-sliding-viewport', SlidingViewport);\nexport default SlidingViewport;\n","import ElementBase from '../../basic-element-base/src/ElementBase';\nimport DistributedChildrenContentMixin from '../../basic-component-mixins/src/DistributedChildrenContentMixin';\nimport symbols from '../../basic-component-mixins/src/symbols';\n\n\n/**\n * Spreads out a set of items horizontally so they take equal space.\n *\n * [Live demo](http://basicwebcomponents.org/basic-web-components/packages/basic-spread-items/)\n *\n * This component is used, for example, by the basic-sliding-viewport component\n * to ensure that children of different size will take up the same amount of\n * horizontal space.\n *\n * This component currently requires an explicit size by applied to it.\n *\n * @extends ElementBase\n * @mixes DistributedChildrenContentMixin\n */\nclass SpreadItems extends ElementBase.compose(\n  DistributedChildrenContentMixin\n) {\n\n  connectedCallback() {\n    if (super.connectedCallback) { super.connectedCallback(); }\n    // HACK\n    this[symbols.itemsChanged]();\n  }\n\n  get items() {\n    return this.content;\n  }\n\n  // TODO: Should also handle contentChanged(), but need to rationalize with\n  // invocation of [symbols.itemsChanged] in connectedCallback.\n  [symbols.itemsChanged]() {\n    if (super[symbols.itemsChanged]) { super[symbols.itemsChanged](); }\n    const items = this.items;\n    const count = items.length;\n    this.$.spreadContainer.style.width = (count * 100) + '%';\n    const itemWidth = (100 / count) + \"%\";\n    [].forEach.call(items, item => {\n      item.style.width = itemWidth;\n    });\n  }\n\n  get [symbols.template]() {\n    return `\n      <style>\n      :host {\n        display: block;\n      }\n\n      #spreadContainer {\n        display: -webkit-flex;\n        display: flex;\n        height: 100%;\n        position: relative;\n      }\n\n      #spreadContainer ::slotted(*) {\n        object-fit: contain;\n        object-fit: var(--basic-item-object-fit, contain);\n        height: 100%;\n        -webkit-user-drag: none;\n        -webkit-user-select: none;\n        -moz-user-select: none;\n        -ms-user-select: none;\n        user-select: none;\n      }\n      </style>\n\n      <div id=\"spreadContainer\" role=\"none\">\n        <slot></slot>\n      </div>\n    `;\n  }\n\n}\n\n\ncustomElements.define('basic-spread-items', SpreadItems);\nexport default SpreadItems;\n"]}